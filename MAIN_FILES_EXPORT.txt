# 居酒屋いっき 業務ダッシュボードシステム - 主要ファイル一覧

## プロジェクト概要
React + TypeScript + Tailwind CSS + Vite で構築された業務分析ダッシュボード
日次・週次・月次の売上・経費・利益分析、目標達成度管理、AIチャット機能を提供

================================================================================
= package.json
================================================================================
{
  "name": "restaurant-report-system",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tanstack/react-table": "^8.20.5",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@supabase/supabase-js": "^2.39.3",
    "chart.js": "^4.5.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.544.0",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.28.0",
    "recharts": "^3.2.0",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}

================================================================================
= tailwind.config.js
================================================================================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [],
}

================================================================================
= vite.config.ts
================================================================================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});

================================================================================
= README.md
================================================================================
# 飲食店向け業務報告システム

LINE Botで売上・経費を報告し、Google Sheetsに保存、Webダッシュボードで可視化するシステム

## 📋 機能概要

### 1. LINE Bot入力機能
- 店舗スタッフがLINEで日次報告
- 売上、仕入れ、各種経費を簡単入力
- テキスト形式での報告も可能

### 2. データ管理
- Google Sheetsに自動保存
- SQLite（一時保存）
- 将来的にSupabase/PostgreSQL移行対応

### 3. Webダッシュボード
- 売上推移の棒グラフ
- 経費比率の円グラフ  
- 日次/週次/月次集計表
- リアルタイム更新

### 4. AI チャット機能
- 「今月の売上合計は？」
- 「経費比率はどうなっている？」
- データに基づいた回答

## 🏗️ システム構成

```
フロントエンド: React + TypeScript + Tailwind CSS
バックエンド: Python Flask API
データベース: Google Sheets API (+ SQLite)
LINE Bot: LINE Messaging API
デプロイ: Bolt (WebContainer)
```

## 🚀 開発手順

1. **基本構成セットアップ** ✅
2. **Python API サーバー** ✅
3. **フロントエンド修正**
4. **Google Sheets 連携**
5. **LINE Bot 実装**
6. **AI チャット強化**

## 📊 データ項目

- 売上
- 仕入れ（材料費）
- 人件費
- 水光熱費
- 販促費
- 清掃費
- 雑費
- 通信費
- その他
- 報告内容（テキスト）

## 🔧 環境変数

```bash
# Google Sheets API
VITE_GOOGLE_SHEETS_API_KEY=your_google_sheets_api_key
VITE_GOOGLE_SHEET_ID=your_google_sheet_id

# LINE Bot
LINE_CHANNEL_SECRET=your_channel_secret
LINE_CHANNEL_ACCESS_TOKEN=your_access_token
```

## 📈 開発状況

- [x] プロジェクト構成整理
- [x] Python API サーバー（基本）
- [x] データ型定義
- [x] モックデータ準備
- [x] フロントエンド修正
- [x] ロール別権限管理システム
- [x] Google Sheets 連携 ✨ NEW!
- [x] 日報入力フォーム ✨ NEW!
- [x] 月次経費入力フォーム ✨ NEW!
- [ ] LINE Bot 実装
- [ ] AI チャット強化

================================================================================
= src/App.tsx
================================================================================
import React from 'react'
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import { MainLayout } from './layout/MainLayout'
import { DashboardDaily } from './pages/DashboardDaily'
import { DashboardWeekly } from './pages/DashboardWeekly'
import { DashboardMonthly } from './pages/DashboardMonthly'
import { Targets } from './pages/Targets'
import { AIChatPage } from './pages/AIChatPage'
import { AdminSettings } from './pages/AdminSettings'
import { ReportForm } from './pages/ReportForm'
import { MonthlyExpenseForm } from './pages/MonthlyExpenseForm'

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<MainLayout />}>
          <Route index element={<Navigate to="/dashboard/daily" replace />} />
          <Route path="dashboard/daily" element={<DashboardDaily />} />
          <Route path="dashboard/weekly" element={<DashboardWeekly />} />
          <Route path="dashboard/monthly" element={<DashboardMonthly />} />
          <Route path="targets" element={<Targets />} />
          <Route path="chat" element={<AIChatPage />} />
          <Route path="admin" element={<AdminSettings />} />
          <Route path="report/new" element={<ReportForm />} />
          <Route path="expenses/monthly" element={<MonthlyExpenseForm />} />
        </Route>
      </Routes>
    </Router>
  )
}

export default App

================================================================================
= src/main.tsx
================================================================================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);

================================================================================
= src/layout/MainLayout.tsx
================================================================================
import React, { useState } from 'react'
import { Outlet } from 'react-router-dom'
import { Header } from './Header'
import { Sidebar } from './Sidebar'

export const MainLayout: React.FC = () => {
  const [sidebarOpen, setSidebarOpen] = useState(false)

  return (
    <div className="min-h-screen bg-background">
      {/* Mobile sidebar overlay */}
      {sidebarOpen && (
        <div 
          className="lg:hidden fixed inset-0 bg-background/80 backdrop-blur-sm z-40"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      <div className="flex h-screen">
        {/* Sidebar */}
        <Sidebar 
          isOpen={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
        />

        {/* Main content */}
        <div className="flex-1 flex flex-col min-w-0">
          <Header onMenuClick={() => setSidebarOpen(true)} />
          
          <main className="flex-1 overflow-auto">
            <div className="container mx-auto px-4 py-6">
              <Outlet />
            </div>
          </main>
        </div>
      </div>
    </div>
  )
}

================================================================================
= src/layout/Header.tsx
================================================================================
import React, { useState } from 'react'
import { Menu, User, LogOut, Settings, ChevronDown, Store } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { mockStores } from '@/lib/mock'

interface HeaderProps {
  onMenuClick: () => void
}

export const Header: React.FC<HeaderProps> = ({ onMenuClick }) => {
  const [selectedStoreId, setSelectedStoreId] = useState<string>('all')
  const currentUser = { name: '管理者', role: 'admin' }
  const currentPeriod = new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' })

  const selectedStore = mockStores.find(s => s.id === selectedStoreId)

  const handleSignOut = () => {
    // Handle sign out
    console.log('Sign out')
  }

  return (
    <header className="h-16 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="flex h-full items-center justify-between px-4">
        {/* Left section */}
        <div className="flex items-center gap-4">
          <Button
            variant="ghost"
            size="icon"
            className="lg:hidden"
            onClick={onMenuClick}
          >
            <Menu className="h-5 w-5" />
          </Button>
          
          <div>
            <h1 className="text-lg font-semibold text-foreground">
              業務ダッシュボード
            </h1>
            <p className="text-sm text-muted-foreground">
              {currentPeriod}の分析
            </p>
          </div>
        </div>

        {/* Center section - Store selector */}
        <div className="hidden md:flex items-center gap-3">
          <Store className="h-4 w-4 text-muted-foreground" />
          <select
            value={selectedStoreId}
            onChange={(e) => setSelectedStoreId(e.target.value)}
            className="px-3 py-2 text-sm border border-input rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-ring"
          >
            <option value="all">🏢 全店舗合計</option>
            {mockStores.map(store => (
              <option key={store.id} value={store.id}>
                🏪 {store.name}
              </option>
            ))}
          </select>
          {selectedStore && (
            <Badge variant="secondary" className="text-xs">
              {selectedStore.manager}
            </Badge>
          )}
        </div>

        {/* Right section - User menu */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="flex items-center gap-2">
              <User className="h-4 w-4" />
              <span className="hidden sm:inline text-sm">
                {currentUser.name}
              </span>
              <Badge variant="outline" className="text-xs capitalize">
                {currentUser.role}
              </Badge>
              <ChevronDown className="h-3 w-3" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-56">
            <div className="px-2 py-1.5 text-sm font-medium">
              {currentUser.name}
            </div>
            <div className="px-2 py-1.5 text-xs text-muted-foreground">
              {currentUser.role}
            </div>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <Settings className="h-4 w-4 mr-2" />
              設定
            </DropdownMenuItem>
            <DropdownMenuItem onClick={handleSignOut}>
              <LogOut className="h-4 w-4 mr-2" />
              ログアウト
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </header>
  )
}

================================================================================
= src/layout/Sidebar.tsx
================================================================================
import React from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { 
  BarChart3, 
  Calendar,
  Target,
  MessageSquare,
  X,
  TrendingUp,
  Settings,
  FileText,
  Receipt
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { cn } from '@/lib/utils'

interface SidebarProps {
  isOpen: boolean
  onClose: () => void
}

const menuItems = [
  {
    id: 'dashboard',
    label: 'ダッシュボード',
    icon: BarChart3,
    children: [
      { id: 'daily', label: '日次分析', path: '/dashboard/daily' },
      { id: 'weekly', label: '週次分析', path: '/dashboard/weekly' },
      { id: 'monthly', label: '月次分析', path: '/dashboard/monthly' }
    ]
  },
  {
    id: 'targets',
    label: '目標達成度',
    icon: Target,
    path: '/targets'
  },
  {
    id: 'chat',
    label: 'AIチャット',
    icon: MessageSquare,
    path: '/chat',
    badge: 'Beta'
  },
  {
    id: 'report',
    label: '日報入力',
    icon: FileText,
    path: '/report/new'
  },
  {
    id: 'monthly-expense',
    label: '月次経費入力',
    icon: Receipt,
    path: '/expenses/monthly'
  },
  {
    id: 'admin',
    label: '設定',
    icon: Settings,
    path: '/admin'
  }
]

export const Sidebar: React.FC<SidebarProps> = ({ isOpen, onClose }) => {
  const location = useLocation()
  const navigate = useNavigate()

  const handleNavigation = (path: string) => {
    navigate(path)
    onClose()
  }

  const isActivePath = (path: string) => {
    return location.pathname === path || location.pathname.startsWith(path)
  }

  return (
    <>
      <aside className={cn(
        "fixed lg:static inset-y-0 left-0 z-50 w-64 bg-card border-r border-border transform transition-transform duration-200 ease-in-out",
        isOpen ? "translate-x-0" : "-translate-x-full lg:translate-x-0"
      )}>
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="flex h-16 items-center justify-between px-4 border-b border-border">
            <div className="flex items-center gap-2">
              <TrendingUp className="h-6 w-6 text-primary" />
              <span className="font-semibold text-foreground">
                Analytics
              </span>
            </div>
            <Button
              variant="ghost"
              size="icon"
              className="lg:hidden"
              onClick={onClose}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          {/* Navigation */}
          <nav className="flex-1 px-3 py-4 space-y-2">
            {menuItems.map((item) => {
              const Icon = item.icon
              const hasChildren = !!item.children
              const isParentActive = hasChildren 
                ? item.children.some(child => isActivePath(child.path))
                : isActivePath(item.path || '')

              return (
                <div key={item.id}>
                  {/* Parent item */}
                  <Button
                    variant="ghost"
                    className={cn(
                      "w-full justify-start h-auto py-3 px-3",
                      isParentActive && "bg-accent text-accent-foreground"
                    )}
                    onClick={() => !hasChildren && handleNavigation(item.path!)}
                  >
                    <Icon className="h-4 w-4 mr-3" />
                    <span className="flex-1 text-left">{item.label}</span>
                    {item.badge && (
                      <Badge variant="secondary" className="text-xs">
                        {item.badge}
                      </Badge>
                    )}
                  </Button>

                  {/* Children items */}
                  {hasChildren && (
                    <div className="ml-4 mt-1 space-y-1">
                      {item.children.map((child) => (
                        <Button
                          key={child.id}
                          variant="ghost"
                          size="sm"
                          className={cn(
                            "w-full justify-start text-sm py-2",
                            isActivePath(child.path) && "bg-primary text-primary-foreground"
                          )}
                          onClick={() => handleNavigation(child.path)}
                        >
                          {child.label}
                        </Button>
                      ))}
                    </div>
                  )}
                </div>
              )
            })}
          </nav>

          {/* Footer */}
          <div className="p-4 border-t border-border">
            <div className="text-xs text-muted-foreground">
              Version 1.0.0
            </div>
          </div>
        </div>
      </aside>
    </>
  )
}

================================================================================
= src/components/ui/card.tsx
================================================================================
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================================================================================
= src/components/ui/button.tsx
================================================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline: "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================================================================================
= src/components/ui/MetricCard.tsx
================================================================================
import React from 'react'
import { DivideIcon as LucideIcon } from 'lucide-react'
import { Card, CardContent } from './card'
import { Badge } from './badge'
import { cn } from '@/lib/utils'

export interface MetricCardProps {
  label: string
  value: string
  delta?: {
    value: number
    isPositive: boolean
    label?: string
  }
  icon: LucideIcon
  tone?: 'success' | 'warning' | 'danger' | 'info' | 'neutral'
  hint?: string
  loading?: boolean
  className?: string
}

const toneClasses = {
  success: 'bg-green-50 text-green-700 border-green-200',
  warning: 'bg-yellow-50 text-yellow-700 border-yellow-200', 
  danger: 'bg-red-50 text-red-700 border-red-200',
  info: 'bg-blue-50 text-blue-700 border-blue-200',
  neutral: 'bg-muted text-muted-foreground border-border'
}

const iconToneClasses = {
  success: 'text-green-600',
  warning: 'text-yellow-600',
  danger: 'text-red-600', 
  info: 'text-blue-600',
  neutral: 'text-muted-foreground'
}

export const MetricCard: React.FC<MetricCardProps> = ({
  label,
  value,
  delta,
  icon: Icon,
  tone = 'neutral',
  hint,
  loading = false,
  className
}) => {
  if (loading) {
    return (
      <Card className={cn('animate-pulse', className)}>
        <CardContent className="p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="h-4 bg-muted rounded w-20"></div>
            <div className="h-8 w-8 bg-muted rounded-lg"></div>
          </div>
          <div className="space-y-2">
            <div className="h-8 bg-muted rounded w-24"></div>
            <div className="h-4 bg-muted rounded w-16"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className={cn('transition-all duration-200 hover:shadow-md', className)}>
      <CardContent className="p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="text-sm font-medium text-muted-foreground">
            {label}
          </div>
          <div className={cn('p-2 rounded-lg', toneClasses[tone])}>
            <Icon className={cn('h-4 w-4', iconToneClasses[tone])} />
          </div>
        </div>
        
        <div className="space-y-2">
          <div className="text-2xl font-bold text-foreground">
            {value}
          </div>
          
          {delta && (
            <div className="flex items-center gap-2">
              <Badge 
                variant={delta.isPositive ? 'default' : 'destructive'}
                className="text-xs"
              >
                {delta.isPositive ? '+' : ''}{delta.value.toFixed(1)}%
              </Badge>
              {delta.label && (
                <span className="text-xs text-muted-foreground">
                  {delta.label}
                </span>
              )}
            </div>
          )}
          
          {hint && (
            <p className="text-xs text-muted-foreground">
              {hint}
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  )
}

================================================================================
= src/components/ui/tabs.tsx
================================================================================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================================================================================
= src/components/ui/badge.tsx
================================================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================================================================================
= src/components/ui/progress.tsx
================================================================================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"
import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================================================================================
= src/components/ui/skeleton.tsx
================================================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================================================================================
= src/components/ui/empty-state.tsx
================================================================================
import React from 'react'
import { DivideIcon as LucideIcon } from 'lucide-react'
import { Card, CardContent } from './card'
import { Button } from './button'

interface EmptyStateProps {
  icon: LucideIcon
  title: string
  description: string
  action?: {
    label: string
    onClick: () => void
  }
  className?: string
}

export const EmptyState: React.FC<EmptyStateProps> = ({
  icon: Icon,
  title,
  description,
  action,
  className
}) => {
  return (
    <Card className={className}>
      <CardContent className="flex flex-col items-center justify-center py-12 text-center">
        <div className="mb-4 p-3 rounded-full bg-muted">
          <Icon className="h-8 w-8 text-muted-foreground" />
        </div>
        <h3 className="text-lg font-semibold text-foreground mb-2">
          {title}
        </h3>
        <p className="text-sm text-muted-foreground mb-6 max-w-sm">
          {description}
        </p>
        {action && (
          <Button onClick={action.onClick}>
            {action.label}
          </Button>
        )}
      </CardContent>
    </Card>
  )
}

================================================================================
= src/components/ui/error-state.tsx
================================================================================
import React from 'react'
import { AlertCircle, RefreshCw } from 'lucide-react'
import { Card, CardContent } from './card'
import { Button } from './button'

interface ErrorStateProps {
  title?: string
  message: string
  onRetry?: () => void
  className?: string
}

export const ErrorState: React.FC<ErrorStateProps> = ({
  title = 'エラーが発生しました',
  message,
  onRetry,
  className
}) => {
  return (
    <Card className={className}>
      <CardContent className="flex flex-col items-center justify-center py-12 text-center">
        <div className="mb-4 p-3 rounded-full bg-destructive/10">
          <AlertCircle className="h-8 w-8 text-destructive" />
        </div>
        <h3 className="text-lg font-semibold text-foreground mb-2">
          {title}
        </h3>
        <p className="text-sm text-muted-foreground mb-6 max-w-sm">
          {message}
        </p>
        {onRetry && (
          <Button onClick={onRetry} variant="outline">
            <RefreshCw className="h-4 w-4 mr-2" />
            再試行
          </Button>
        )}
      </CardContent>
    </Card>
  )
}

================================================================================
= src/components/ui/dropdown-menu.tsx
================================================================================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
const DropdownMenuGroup = DropdownMenuPrimitive.Group
const DropdownMenuPortal = DropdownMenuPrimitive.Portal
const DropdownMenuSub = DropdownMenuPrimitive.Sub
const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================================================================================
= src/lib/utils.ts
================================================================================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatCurrency(value: number): string {
  return new Intl.NumberFormat('ja-JP', {
    style: 'currency',
    currency: 'JPY'
  }).format(value)
}

export function formatPercent(value: number): string {
  return `${value.toFixed(1)}%`
}

export function formatNumber(value: number): string {
  return value.toLocaleString('ja-JP')
}

================================================================================
= src/lib/format.ts
================================================================================
export const formatCurrency = (value: number): string => {
  return new Intl.NumberFormat('ja-JP', {
    style: 'currency',
    currency: 'JPY',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(value)
}

export const formatPercent = (value: number): string => {
  return `${value.toFixed(1)}%`
}

export const formatNumber = (value: number): string => {
  return value.toLocaleString('ja-JP')
}

export const formatDate = (date: Date | string): string => {
  const d = typeof date === 'string' ? new Date(date) : date
  return d.toLocaleDateString('ja-JP', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })
}

export const formatDateRange = (start: Date, end: Date): string => {
  return `${formatDate(start)} - ${formatDate(end)}`
}

export const truncateText = (text: string, maxLength: number): string => {
  return text.length > maxLength ? `${text.slice(0, maxLength)}...` : text
}

================================================================================
= src/lib/mock.ts
================================================================================
// モック店舗データ
export interface Store {
  id: string
  name: string
  address: string
  manager: string
  isActive: boolean
}

export const mockStores: Store[] = [
  {
    id: 'store-toyosu',
    name: '居酒屋いっき豊洲店',
    address: '東京都江東区豊洲4-1-1',
    manager: '田中健太',
    isActive: true
  },
  {
    id: 'store-ariake',
    name: '居酒屋いっき有明店', 
    address: '東京都江東区有明4-3-2',
    manager: '高山忠純',
    isActive: true
  },
  {
    id: 'store-honten',
    name: '居酒屋いっき本店',
    address: '東京都江東区古石場2-14-1',
    manager: '佐藤陽介',
    isActive: true
  }
]

// 日次報告データ型
export interface DailyReportData {
  id: string
  date: string
  storeId: string
  storeName: string
  staffName: string
  sales: number
  purchase: number
  laborCost: number
  utilities: number
  promotion: number
  cleaning: number
  misc: number
  communication: number
  others: number
  reportText: string
  createdAt: string
}

// 過去90日分のモックデータ生成
export const generateMockReports = (days: number = 90): DailyReportData[] => {
  const reports: DailyReportData[] = []
  const today = new Date()
  
  for (let i = 0; i < days; i++) {
    const date = new Date(today)
    date.setDate(date.getDate() - i)
    
    // 曜日効果（金土は1.4倍、日月は0.8倍）
    const dayOfWeek = date.getDay()
    const dayMultiplier = [0.8, 0.8, 1.0, 1.0, 1.1, 1.4, 1.4][dayOfWeek]
    
    // 季節効果（12月は1.3倍、2月は0.7倍）
    const month = date.getMonth() + 1
    const seasonMultiplier = month === 12 ? 1.3 : month === 2 ? 0.7 : 1.0
    
    mockStores.forEach((store, storeIndex) => {
      // 定休日処理（月曜日は一部店舗休み）
      if (dayOfWeek === 1 && Math.random() < 0.3) return
      
      const baseSales = [280000, 250000, 320000][storeIndex]
      const sales = Math.floor(baseSales * dayMultiplier * seasonMultiplier * (0.8 + Math.random() * 0.4))
      
      const purchase = Math.floor(sales * (0.25 + Math.random() * 0.05))
      const laborCost = Math.floor(sales * (0.20 + Math.random() * 0.05))
      const utilities = Math.floor(sales * (0.06 + Math.random() * 0.02))
      const promotion = Math.floor(sales * (0.03 + Math.random() * 0.02))
      const cleaning = Math.floor(sales * (0.01 + Math.random() * 0.01))
      const misc = Math.floor(sales * (0.015 + Math.random() * 0.01))
      const communication = Math.floor(sales * (0.008 + Math.random() * 0.005))
      const others = Math.floor(sales * (0.01 + Math.random() * 0.01))
      
      const reportTexts = [
        '本日は平日にも関わらず多くのお客様にご来店いただきました。新メニューの反響も良好です。',
        '雨天のため来客数がやや少なめでしたが、客単価は維持できました。',
        'ランチタイムとディナータイムが特に混雑し、売上目標を達成しました。',
        '材料費の上昇により利益率がやや低下していますが、品質は維持しています。',
        '近隣のイベントの影響で通常より多くのお客様にお越しいただきました。'
      ]
      
      reports.push({
        id: `report-${date.toISOString().split('T')[0]}-${store.id}`,
        date: date.toISOString().split('T')[0],
        storeId: store.id,
        storeName: store.name,
        staffName: `${store.manager}`,
        sales,
        purchase,
        laborCost,
        utilities,
        promotion,
        cleaning,
        misc,
        communication,
        others,
        reportText: reportTexts[Math.floor(Math.random() * reportTexts.length)],
        createdAt: date.toISOString()
      })
    })
  }
  
  return reports.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
}

export const mockReports = generateMockReports()

// 目標データ
export interface TargetData {
  storeId: string
  period: string
  targetSales: number
  targetProfit: number
  targetProfitMargin: number
}

export const mockTargets: TargetData[] = [
  { storeId: 'store-toyosu', period: '2025-01', targetSales: 8500000, targetProfit: 1700000, targetProfitMargin: 20 },
  { storeId: 'store-ariake', period: '2025-01', targetSales: 7500000, targetProfit: 1350000, targetProfitMargin: 18 },
  { storeId: 'store-honten', period: '2025-01', targetSales: 9500000, targetProfit: 2090000, targetProfitMargin: 22 }
]

================================================================================
= src/hooks/useReports.ts
================================================================================
import { useState, useEffect } from 'react'
import { mockReports, mockStores, type DailyReportData } from '@/lib/mock'

export interface ReportFilters {
  storeId?: string
  dateFrom?: string
  dateTo?: string
  period?: 'daily' | 'weekly' | 'monthly'
}

export const useReports = (filters: ReportFilters = {}) => {
  const [data, setData] = useState<DailyReportData[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isError, setIsError] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const fetchReports = async () => {
    try {
      setIsLoading(true)
      setIsError(false)
      setError(null)
      
      // Mock API delay
      await new Promise(resolve => setTimeout(resolve, 500))
      
      // 1) 既存モック + ユーザーが日報画面で保存したローカル分
      const userReports: DailyReportData[] = JSON.parse(localStorage.getItem('userReports') || '[]')
      let filteredData = [...mockReports, ...userReports]

      // 2) 月次経費（デモ：localStorage）を合成して「1日分のレポート」にする
      type MonthlyExpense = {
        id: string; storeId: string; month: string;
        utilities: number; promotion: number; cleaning: number;
        misc: number; communication: number; others: number;
        memo?: string; createdAt: string; updatedAt: string;
      }
      const monthly: MonthlyExpense[] = JSON.parse(localStorage.getItem('monthlyExpenses') || '[]')
      for (const m of monthly) {
        // ストアフィルタ（all の場合は全件OK）
        if (filters.storeId && filters.storeId !== 'all' && m.storeId !== filters.storeId) continue

        // 対象月の最終日を算出し、その日付に1件の「月次費用レポート」を立てる
        const [yyyy, mm] = m.month.split('-').map(Number) // mm: 1-12
        if (!yyyy || !mm) continue
        const last = new Date(yyyy, mm, 0) // 翌月0日 = 当月末
        const dateStr = last.toISOString().split('T')[0]

        const store = mockStores.find(s => s.id === m.storeId)
        if (!store) continue

        const synthetic: DailyReportData = {
          id: `monthly-expense-${m.storeId}-${m.month}`,
          date: dateStr,
          storeId: m.storeId,
          storeName: store.name,
          staffName: store.manager,
          sales: 0,                     // 月次経費は売上0の負担だけを加算
          purchase: 0,                  // 仕入は月次入力の対象外（必要ならothersへ）
          laborCost: 0,                 // 人件費もここでは月次入力の対象外
          utilities: m.utilities,
          promotion: m.promotion,
          cleaning: m.cleaning,
          misc: m.misc,
          communication: m.communication,
          others: m.others,
          reportText: `月次経費入力（${m.month}）${m.memo ? '：' + m.memo : ''}`,
          createdAt: dateStr + 'T00:00:00.000Z'
        }
        filteredData.push(synthetic)
      }
      
      // Store filter
      if (filters.storeId && filters.storeId !== 'all') {
        filteredData = filteredData.filter(report => report.storeId === filters.storeId)
      }
      
      // Date filter
      if (filters.dateFrom) {
        filteredData = filteredData.filter(report => report.date >= filters.dateFrom!)
      }
      if (filters.dateTo) {
        filteredData = filteredData.filter(report => report.date <= filters.dateTo!)
      }
      
      setData(filteredData)
    } catch (err) {
      setIsError(true)
      setError(err instanceof Error ? err.message : 'データの取得に失敗しました')
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchReports()
  }, [filters.storeId, filters.dateFrom, filters.dateTo, filters.period])

  return {
    data,
    isLoading,
    isError,
    error,
    refetch: fetchReports
  }
}

================================================================================
= src/hooks/useKpis.ts
================================================================================
import { useMemo } from 'react'
import { DailyReportData } from '@/lib/mock'

export interface KPIData {
  totalSales: number
  totalExpenses: number
  grossProfit: number
  operatingProfit: number
  profitMargin: number
  reportCount: number
  averageDailySales: number
  salesGrowth?: number
  profitGrowth?: number
}

export const useKpis = (reports: DailyReportData[], previousReports?: DailyReportData[]) => {
  return useMemo(() => {
    if (reports.length === 0) {
      return {
        totalSales: 0,
        totalExpenses: 0,
        grossProfit: 0,
        operatingProfit: 0,
        profitMargin: 0,
        reportCount: 0,
        averageDailySales: 0,
        salesGrowth: 0,
        profitGrowth: 0
      }
    }

    const totals = reports.reduce((acc, report) => {
      const totalExpenses = report.purchase + report.laborCost + report.utilities + 
                           report.promotion + report.cleaning + report.misc + 
                           report.communication + report.others
      
      return {
        sales: acc.sales + report.sales,
        expenses: acc.expenses + totalExpenses,
        purchase: acc.purchase + report.purchase,
        count: acc.count + 1
      }
    }, { sales: 0, expenses: 0, purchase: 0, count: 0 })

    const grossProfit = totals.sales - totals.purchase
    const operatingProfit = totals.sales - totals.expenses
    const profitMargin = totals.sales > 0 ? (operatingProfit / totals.sales) * 100 : 0
    const averageDailySales = totals.count > 0 ? totals.sales / totals.count : 0

    // Previous period comparison
    let salesGrowth = 0
    let profitGrowth = 0
    
    if (previousReports && previousReports.length > 0) {
      const prevTotals = previousReports.reduce((acc, report) => {
        const totalExpenses = report.purchase + report.laborCost + report.utilities + 
                             report.promotion + report.cleaning + report.misc + 
                             report.communication + report.others
        return {
          sales: acc.sales + report.sales,
          profit: acc.profit + (report.sales - totalExpenses)
        }
      }, { sales: 0, profit: 0 })
      
      salesGrowth = prevTotals.sales > 0 ? ((totals.sales - prevTotals.sales) / prevTotals.sales) * 100 : 0
      profitGrowth = prevTotals.profit > 0 ? ((operatingProfit - prevTotals.profit) / prevTotals.profit) * 100 : 0
    }

    return {
      totalSales: totals.sales,
      totalExpenses: totals.expenses,
      grossProfit,
      operatingProfit,
      profitMargin,
      reportCount: totals.count,
      averageDailySales,
      salesGrowth,
      profitGrowth
    }
  }, [reports, previousReports])
}

================================================================================
= src/hooks/useTargets.ts
================================================================================
import { useState, useEffect } from 'react'
import { mockTargets, type TargetData } from '@/lib/mock'

export interface TargetMetrics {
  salesAchievement: number
  profitAchievement: number
  remainingSales: number
  requiredDailySales: number
  requiredCustomers: number
  averageCustomerSpend: number
  daysRemaining: number
}

export const useTargets = (storeId: string = 'all', period: string) => {
  const [targets, setTargets] = useState<TargetData[]>([])
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    setIsLoading(true)
    // Mock delay
    setTimeout(() => {
      setTargets(mockTargets)
      setIsLoading(false)
    }, 300)
  }, [])

  const calculateTargetMetrics = (
    currentSales: number,
    currentProfit: number,
    targetSales: number,
    targetProfit: number
  ): TargetMetrics => {
    const salesAchievement = (currentSales / targetSales) * 100
    const profitAchievement = (currentProfit / targetProfit) * 100
    const remainingSales = Math.max(0, targetSales - currentSales)
    
    // Remaining days in current month
    const now = new Date()
    const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate()
    const daysRemaining = lastDay - now.getDate()
    
    const requiredDailySales = daysRemaining > 0 ? remainingSales / daysRemaining : 0
    const averageCustomerSpend = 3500 // Average spend per customer
    const requiredCustomers = requiredDailySales / averageCustomerSpend

    return {
      salesAchievement,
      profitAchievement,
      remainingSales,
      requiredDailySales,
      requiredCustomers,
      averageCustomerSpend,
      daysRemaining
    }
  }

  const getTargetForStore = (storeId: string) => {
    return targets.find(t => t.storeId === storeId && t.period === period)
  }

  const getAllStoresTarget = () => {
    const storeTargets = targets.filter(t => t.period === period)
    return storeTargets.reduce((acc, target) => ({
      targetSales: acc.targetSales + target.targetSales,
      targetProfit: acc.targetProfit + target.targetProfit,
      targetProfitMargin: acc.targetProfitMargin + target.targetProfitMargin
    }), { targetSales: 0, targetProfit: 0, targetProfitMargin: 0 })
  }

  return {
    targets,
    isLoading,
    getTargetForStore,
    getAllStoresTarget,
    calculateTargetMetrics
  }
}

================================================================================
= src/components/charts/SalesChart.tsx
================================================================================
import React from 'react'
import {
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  ReferenceLine
} from 'recharts'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'
import { formatCurrency, formatDate } from '@/lib/format'
import { DailyReportData } from '@/lib/mock'

interface SalesChartProps {
  reports: DailyReportData[]
  period: 'daily' | 'weekly' | 'monthly'
  onPeriodChange?: (period: 'daily' | 'weekly' | 'monthly') => void
  targetSales?: number
  className?: string
}

export const SalesChart: React.FC<SalesChartProps> = ({
  reports,
  period,
  onPeriodChange,
  targetSales,
  className
}) => {
  // Process data for chart
  const chartData = React.useMemo(() => {
    const groupedData = new Map<string, {
      date: string
      sales: number
      profit: number
      count: number
    }>()

    reports.forEach(report => {
      const date = new Date(report.date)
      let key: string
      
      switch (period) {
        case 'daily':
          key = report.date
          break
        case 'weekly':
          const weekStart = new Date(date)
          weekStart.setDate(date.getDate() - date.getDay())
          key = weekStart.toISOString().split('T')[0]
          break
        case 'monthly':
          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
          break
      }

      if (!groupedData.has(key)) {
        groupedData.set(key, { date: key, sales: 0, profit: 0, count: 0 })
      }

      const data = groupedData.get(key)!
      const totalExpenses = report.purchase + report.laborCost + report.utilities + 
                           report.promotion + report.cleaning + report.misc + 
                           report.communication + report.others
      
      data.sales += report.sales
      data.profit += (report.sales - totalExpenses)
      data.count += 1
    })

    return Array.from(groupedData.values())
      .sort((a, b) => a.date.localeCompare(b.date))
      .slice(-30)
  }, [reports, period])

  const formatXAxisLabel = (dateStr: string) => {
    const date = new Date(dateStr)
    switch (period) {
      case 'daily':
        return date.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' })
      case 'weekly':
        return `${date.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' })}週`
      case 'monthly':
        return date.toLocaleDateString('ja-JP', { year: '2-digit', month: 'short' })
      default:
        return dateStr
    }
  }

  return (
    <Card className={className}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg font-semibold">
            売上推移
          </CardTitle>
          {onPeriodChange && (
            <Tabs value={period} onValueChange={onPeriodChange as any}>
              <TabsList>
                <TabsTrigger value="daily">日次</TabsTrigger>
                <TabsTrigger value="weekly">週次</TabsTrigger>
                <TabsTrigger value="monthly">月次</TabsTrigger>
              </TabsList>
            </Tabs>
          )}
        </div>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <AreaChart data={chartData}>
            <defs>
              <linearGradient id="salesGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="hsl(var(--primary))" stopOpacity={0.3} />
                <stop offset="95%" stopColor="hsl(var(--primary))" stopOpacity={0} />
              </linearGradient>
              <linearGradient id="profitGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="hsl(var(--green-500))" stopOpacity={0.3} />
                <stop offset="95%" stopColor="hsl(var(--green-500))" stopOpacity={0} />
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
            <XAxis 
              dataKey="date"
              tickFormatter={formatXAxisLabel}
              className="text-muted-foreground text-xs"
            />
            <YAxis 
              tickFormatter={(value) => `¥${(value / 10000).toFixed(0)}万`}
              className="text-muted-foreground text-xs"
            />
            <Tooltip 
              formatter={(value: number, name: string) => [
                formatCurrency(value),
                name === 'sales' ? '売上' : '営業利益'
              ]}
              labelFormatter={formatXAxisLabel}
              contentStyle={{
                backgroundColor: 'hsl(var(--card))',
                border: '1px solid hsl(var(--border))',
                borderRadius: '6px'
              }}
            />
            {targetSales && (
              <ReferenceLine 
                y={targetSales} 
                stroke="hsl(var(--ring))" 
                strokeDasharray="4 4"
                label="目標"
              />
            )}
            <Area
              type="monotone"
              dataKey="sales"
              stroke="hsl(var(--primary))"
              fill="url(#salesGradient)"
              strokeWidth={2}
            />
            <Area
              type="monotone"
              dataKey="profit"
              stroke="#10b981"
              fill="url(#profitGradient)"
              strokeWidth={2}
            />
          </AreaChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  )
}

================================================================================
= src/components/charts/ExpensePie.tsx
================================================================================
import React from 'react'
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  Tooltip,
  Legend
} from 'recharts'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { formatCurrency } from '@/lib/format'
import { DailyReportData } from '@/lib/mock'

interface ExpensePieProps {
  reports: DailyReportData[]
  className?: string
}

const COLORS = [
  'hsl(var(--red-500))',
  'hsl(var(--orange-500))',
  'hsl(var(--blue-500))',
  'hsl(var(--green-500))',
  'hsl(var(--purple-500))',
  'hsl(var(--pink-500))',
  'hsl(var(--cyan-500))',
  'hsl(var(--gray-500))'
]

export const ExpensePie: React.FC<ExpensePieProps> = ({ reports, className }) => {
  const expenseData = React.useMemo(() => {
    const totals = reports.reduce((acc, report) => ({
      purchase: acc.purchase + report.purchase,
      laborCost: acc.laborCost + report.laborCost,
      utilities: acc.utilities + report.utilities,
      promotion: acc.promotion + report.promotion,
      cleaning: acc.cleaning + report.cleaning,
      misc: acc.misc + report.misc,
      communication: acc.communication + report.communication,
      others: acc.others + report.others
    }), {
      purchase: 0,
      laborCost: 0,
      utilities: 0,
      promotion: 0,
      cleaning: 0,
      misc: 0,
      communication: 0,
      others: 0
    })

    return [
      { name: '仕入', value: totals.purchase },
      { name: '人件費', value: totals.laborCost },
      { name: '光熱費', value: totals.utilities },
      { name: '販促費', value: totals.promotion },
      { name: '清掃費', value: totals.cleaning },
      { name: '雑費', value: totals.misc },
      { name: '通信費', value: totals.communication },
      { name: 'その他', value: totals.others }
    ].filter(item => item.value > 0)
  }, [reports])

  const total = expenseData.reduce((sum, item) => sum + item.value, 0)

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="text-lg font-semibold">
          経費内訳
        </CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Pie
              data={expenseData}
              dataKey="value"
              nameKey="name"
              cx="50%"
              cy="50%"
              outerRadius={80}
              innerRadius={40}
            >
              {expenseData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip 
              formatter={(value: number) => [
                formatCurrency(value),
                `${((value / total) * 100).toFixed(1)}%`
              ]}
              contentStyle={{
                backgroundColor: 'hsl(var(--card))',
                border: '1px solid hsl(var(--border))',
                borderRadius: '6px'
              }}
            />
            <Legend 
              wrapperStyle={{ fontSize: '12px' }}
              formatter={(value, entry) => 
                `${value} (${formatCurrency(entry.payload?.value || 0)})`
              }
            />
          </PieChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  )
}

================================================================================
= src/components/data/DataTable.tsx
================================================================================
import React from 'react'
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getPaginationRowModel,
  ColumnDef,
  flexRender,
  SortingState
} from '@tanstack/react-table'
import { ArrowUpDown, ArrowUp, ArrowDown, ChevronLeft, ChevronRight } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { formatCurrency, formatPercent, formatDate } from '@/lib/format'
import { DailyReportData } from '@/lib/mock'

interface DataTableProps {
  reports: DailyReportData[]
  period: 'daily' | 'weekly' | 'monthly'
  className?: string
}

interface ProcessedRow {
  period: string
  storeName: string
  sales: number
  expenses: number
  grossProfit: number
  operatingProfit: number
  profitMargin: number
  reportCount: number
}

export const DataTable: React.FC<DataTableProps> = ({ reports, period, className }) => {
  const [sorting, setSorting] = React.useState<SortingState>([])

  // Process data for table
  const processedData = React.useMemo((): ProcessedRow[] => {
    const groupedData = new Map<string, {
      period: string
      storeName: string
      sales: number
      expenses: number
      purchase: number
      count: number
    }>()

    reports.forEach(report => {
      const date = new Date(report.date)
      let key: string
      let displayPeriod: string
      
      switch (period) {
        case 'daily':
          key = `${report.date}-${report.storeId}`
          displayPeriod = formatDate(date)
          break
        case 'weekly':
          const weekStart = new Date(date)
          weekStart.setDate(date.getDate() - date.getDay())
          key = `${weekStart.toISOString().split('T')[0]}-${report.storeId}`
          displayPeriod = `${formatDate(weekStart)}週`
          break
        case 'monthly':
          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${report.storeId}`
          displayPeriod = date.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' })
          break
      }

      if (!groupedData.has(key)) {
        groupedData.set(key, {
          period: displayPeriod,
          storeName: report.storeName,
          sales: 0,
          expenses: 0,
          purchase: 0,
          count: 0
        })
      }

      const data = groupedData.get(key)!
      const totalExpenses = report.purchase + report.laborCost + report.utilities + 
                           report.promotion + report.cleaning + report.misc + 
                           report.communication + report.others
      
      data.sales += report.sales
      data.expenses += totalExpenses
      data.purchase += report.purchase
      data.count += 1
    })

    return Array.from(groupedData.values()).map(item => ({
      period: item.period,
      storeName: item.storeName,
      sales: item.sales,
      expenses: item.expenses,
      grossProfit: item.sales - item.purchase,
      operatingProfit: item.sales - item.expenses,
      profitMargin: item.sales > 0 ? ((item.sales - item.expenses) / item.sales) * 100 : 0,
      reportCount: item.count
    }))
  }, [reports, period])

  const columns: ColumnDef<ProcessedRow>[] = [
    {
      accessorKey: 'period',
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
            className="h-auto p-0 font-medium"
          >
            期間
            {column.getIsSorted() === "asc" ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === "desc" ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        )
      },
      cell: ({ row }) => (
        <div className="font-medium">
          {row.getValue('period')}
        </div>
      )
    },
    {
      accessorKey: 'storeName',
      header: '店舗名',
      cell: ({ row }) => (
        <div className="font-medium">
          {row.getValue('storeName')}
        </div>
      )
    },
    {
      accessorKey: 'sales',
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
            className="h-auto p-0 font-medium"
          >
            売上
            {column.getIsSorted() === "asc" ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === "desc" ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        )
      },
      cell: ({ row }) => (
        <div className="text-right font-medium text-blue-600">
          {formatCurrency(row.getValue('sales'))}
        </div>
      )
    },
    {
      accessorKey: 'expenses',
      header: '経費合計',
      cell: ({ row }) => (
        <div className="text-right font-medium text-red-600">
          {formatCurrency(row.getValue('expenses'))}
        </div>
      )
    },
    {
      accessorKey: 'grossProfit',
      header: '粗利益',
      cell: ({ row }) => {
        const value = row.getValue('grossProfit') as number
        return (
          <div className={`text-right font-medium ${
            value >= 0 ? 'text-green-600' : 'text-red-600'
          }`}>
            {formatCurrency(value)}
          </div>
        )
      }
    },
    {
      accessorKey: 'operatingProfit',
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
            className="h-auto p-0 font-medium"
          >
            営業利益
            {column.getIsSorted() === "asc" ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === "desc" ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        )
      },
      cell: ({ row }) => {
        const value = row.getValue('operatingProfit') as number
        return (
          <div className={`text-right font-medium ${
            value >= 0 ? 'text-green-600' : 'text-red-600'
          }`}>
            {formatCurrency(value)}
          </div>
        )
      }
    },
    {
      accessorKey: 'profitMargin',
      header: '利益率',
      cell: ({ row }) => {
        const value = row.getValue('profitMargin') as number
        return (
          <div className="text-right">
            <Badge 
              variant={value >= 15 ? 'default' : value >= 10 ? 'secondary' : 'destructive'}
              className="text-xs"
            >
              {formatPercent(value)}
            </Badge>
          </div>
        )
      }
    },
    {
      accessorKey: 'reportCount',
      header: '報告数',
      cell: ({ row }) => (
        <div className="text-right text-muted-foreground">
          {row.getValue('reportCount')}件
        </div>
      )
    }
  ]

  const table = useReactTable({
    data: processedData,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    state: {
      sorting,
    },
    initialState: {
      pagination: {
        pageSize: 10,
      },
    },
  })

  return (
    <Card className={className}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg font-semibold">
            詳細データ
          </CardTitle>
          <Button variant="outline" size="sm">
            CSVエクスポート
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <div className="rounded-md border">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                {table.getHeaderGroups().map((headerGroup) => (
                  <tr key={headerGroup.id} className="border-b border-border">
                    {headerGroup.headers.map((header) => (
                      <th key={header.id} className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">
                        {header.isPlaceholder
                          ? null
                          : flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                      </th>
                    ))}
                  </tr>
                ))}
              </thead>
              <tbody>
                {table.getRowModel().rows?.length ? (
                  table.getRowModel().rows.map((row) => (
                    <tr
                      key={row.id}
                      className="border-b border-border hover:bg-muted/50 transition-colors"
                    >
                      {row.getVisibleCells().map((cell) => (
                        <td key={cell.id} className="p-4 align-middle">
                          {flexRender(cell.column.columnDef.cell, cell.getContext())}
                        </td>
                      ))}
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={columns.length} className="h-24 text-center">
                      データがありません。
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
        
        {/* Pagination */}
        <div className="flex items-center justify-between pt-4">
          <div className="text-sm text-muted-foreground">
            {table.getFilteredRowModel().rows.length} 件中{' '}
            {table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1}-
            {Math.min(
              (table.getState().pagination.pageIndex + 1) * table.getState().pagination.pageSize,
              table.getFilteredRowModel().rows.length
            )} 件を表示
          </div>
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.previousPage()}
              disabled={!table.getCanPreviousPage()}
            >
              <ChevronLeft className="h-4 w-4" />
              前へ
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.nextPage()}
              disabled={!table.getCanNextPage()}
            >
              次へ
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

================================================================================
= src/pages/DashboardDaily.tsx
================================================================================
import React from 'react'
import { TrendingUp, Wallet, PiggyBank, Percent, FileText } from 'lucide-react'
import { MetricCard } from '@/components/ui/MetricCard'
import { SalesChart } from '@/components/charts/SalesChart'
import { ExpensePie } from '@/components/charts/ExpensePie'
import { DataTable } from '@/components/data/DataTable'
import { Skeleton } from '@/components/ui/skeleton'
import { EmptyState } from '@/components/ui/empty-state'
import { ErrorState } from '@/components/ui/error-state'
import { useReports } from '@/hooks/useReports'
import { useKpis } from '@/hooks/useKpis'
import { formatCurrency, formatPercent } from '@/lib/format'

export const DashboardDaily: React.FC = () => {
  // Get today's data
  const today = new Date().toISOString().split('T')[0]
  const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0]
  
  const { data: todayReports, isLoading, isError, error, refetch } = useReports({
    dateFrom: today,
    dateTo: today
  })
  
  const { data: yesterdayReports } = useReports({
    dateFrom: yesterday,
    dateTo: yesterday
  })
  
  const { data: weekReports } = useReports({
    dateFrom: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    dateTo: today
  })

  const todayKpis = useKpis(todayReports, yesterdayReports)
  const weekKpis = useKpis(weekReports)

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {Array.from({ length: 4 }).map((_, i) => (
            <Skeleton key={i} className="h-32" />
          ))}
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Skeleton className="h-96" />
          <Skeleton className="h-96" />
        </div>
        <Skeleton className="h-64" />
      </div>
    )
  }

  if (isError && error) {
    return (
      <ErrorState
        title="データの読み込みに失敗しました"
        message={error}
        onRetry={refetch}
      />
    )
  }

  if (weekReports.length === 0) {
    return (
      <EmptyState
        icon={FileText}
        title="データがありません"
        description="日次報告を作成すると、ここにダッシュボードが表示されます。"
        action={{
          label: "サンプルデータを生成",
          onClick: () => window.location.reload()
        }}
      />
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-foreground mb-2">
          日次ダッシュボード
        </h1>
        <p className="text-muted-foreground">
          本日の業績と過去7日間のトレンド分析
        </p>
      </div>

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <MetricCard
          label="本日の売上"
          value={formatCurrency(todayKpis.totalSales)}
          delta={todayKpis.salesGrowth !== undefined ? {
            value: todayKpis.salesGrowth,
            isPositive: todayKpis.salesGrowth >= 0,
            label: "前日比"
          } : undefined}
          icon={TrendingUp}
          tone="info"
          hint={`${todayKpis.reportCount}件の報告`}
        />
        
        <MetricCard
          label="本日の経費"
          value={formatCurrency(todayKpis.totalExpenses)}
          icon={Wallet}
          tone="danger"
          hint="経費合計"
        />
        
        <MetricCard
          label="本日の粗利益"
          value={formatCurrency(todayKpis.grossProfit)}
          icon={PiggyBank}
          tone={todayKpis.grossProfit >= 0 ? "success" : "danger"}
          hint="売上 - 仕入"
        />
        
        <MetricCard
          label="本日の営業利益"
          value={formatCurrency(todayKpis.operatingProfit)}
          delta={todayKpis.profitGrowth !== undefined ? {
            value: todayKpis.profitGrowth,
            isPositive: todayKpis.profitGrowth >= 0,
            label: "前日比"
          } : undefined}
          icon={Percent}
          tone={todayKpis.operatingProfit >= 0 ? "success" : "danger"}
          hint={`利益率 ${formatPercent(todayKpis.profitMargin)}`}
        />
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <SalesChart
          reports={weekReports}
          period="daily"
          targetSales={todayKpis.averageDailySales * 1.2} // 20% above average as target
        />
        <ExpensePie reports={weekReports} />
      </div>

      {/* Data Table */}
      <DataTable reports={weekReports} period="daily" />
    </div>
  )
}

================================================================================
= src/pages/DashboardWeekly.tsx
================================================================================
import React from 'react'
import { TrendingUp, Wallet, PiggyBank, Percent, FileText } from 'lucide-react'
import { MetricCard } from '@/components/ui/MetricCard'
import { SalesChart } from '@/components/charts/SalesChart'
import { ExpensePie } from '@/components/charts/ExpensePie'
import { DataTable } from '@/components/data/DataTable'
import { Skeleton } from '@/components/ui/skeleton'
import { EmptyState } from '@/components/ui/empty-state'
import { ErrorState } from '@/components/ui/error-state'
import { useReports } from '@/hooks/useReports'
import { useKpis } from '@/hooks/useKpis'
import { formatCurrency, formatPercent } from '@/lib/format'

export const DashboardWeekly: React.FC = () => {
  // Get this week's data
  const now = new Date()
  const thisWeekStart = new Date(now)
  thisWeekStart.setDate(now.getDate() - now.getDay())
  const thisWeekEnd = new Date(thisWeekStart)
  thisWeekEnd.setDate(thisWeekStart.getDate() + 6)
  
  const lastWeekStart = new Date(thisWeekStart)
  lastWeekStart.setDate(thisWeekStart.getDate() - 7)
  const lastWeekEnd = new Date(thisWeekStart)
  lastWeekEnd.setDate(thisWeekStart.getDate() - 1)
  
  const { data: thisWeekReports, isLoading, isError, error, refetch } = useReports({
    dateFrom: thisWeekStart.toISOString().split('T')[0],
    dateTo: thisWeekEnd.toISOString().split('T')[0]
  })
  
  const { data: lastWeekReports } = useReports({
    dateFrom: lastWeekStart.toISOString().split('T')[0],
    dateTo: lastWeekEnd.toISOString().split('T')[0]
  })
  
  const { data: monthReports } = useReports({
    dateFrom: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    dateTo: new Date().toISOString().split('T')[0]
  })

  const thisWeekKpis = useKpis(thisWeekReports, lastWeekReports)
  const monthKpis = useKpis(monthReports)

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {Array.from({ length: 4 }).map((_, i) => (
            <Skeleton key={i} className="h-32" />
          ))}
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Skeleton className="h-96" />
          <Skeleton className="h-96" />
        </div>
        <Skeleton className="h-64" />
      </div>
    )
  }

  if (isError && error) {
    return (
      <ErrorState
        title="データの読み込みに失敗しました"
        message={error}
        onRetry={refetch}
      />
    )
  }

  if (monthReports.length === 0) {
    return (
      <EmptyState
        icon={FileText}
        title="データがありません"
        description="日次報告を作成すると、ここに週次ダッシュボードが表示されます。"
        action={{
          label: "サンプルデータを生成",
          onClick: () => window.location.reload()
        }}
      />
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-foreground mb-2">
          週次ダッシュボード
        </h1>
        <p className="text-muted-foreground">
          今週の業績と過去30日間のトレンド分析
        </p>
      </div>

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <MetricCard
          label="今週の売上"
          value={formatCurrency(thisWeekKpis.totalSales)}
          delta={thisWeekKpis.salesGrowth !== undefined ? {
            value: thisWeekKpis.salesGrowth,
            isPositive: thisWeekKpis.salesGrowth >= 0,
            label: "先週比"
          } : undefined}
          icon={TrendingUp}
          tone="info"
          hint={`${thisWeekKpis.reportCount}件の報告`}
        />
        
        <MetricCard
          label="今週の経費"
          value={formatCurrency(thisWeekKpis.totalExpenses)}
          icon={Wallet}
          tone="danger"
          hint="経費合計"
        />
        
        <MetricCard
          label="今週の粗利益"
          value={formatCurrency(thisWeekKpis.grossProfit)}
          icon={PiggyBank}
          tone={thisWeekKpis.grossProfit >= 0 ? "success" : "danger"}
          hint="売上 - 仕入"
        />
        
        <MetricCard
          label="今週の営業利益"
          value={formatCurrency(thisWeekKpis.operatingProfit)}
          delta={thisWeekKpis.profitGrowth !== undefined ? {
            value: thisWeekKpis.profitGrowth,
            isPositive: thisWeekKpis.profitGrowth >= 0,
            label: "先週比"
          } : undefined}
          icon={Percent}
          tone={thisWeekKpis.operatingProfit >= 0 ? "success" : "danger"}
          hint={`利益率 ${formatPercent(thisWeekKpis.profitMargin)}`}
        />
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <SalesChart
          reports={monthReports}
          period="weekly"
          targetSales={thisWeekKpis.averageDailySales * 7 * 1.15} // 15% above weekly average
        />
        <ExpensePie reports={monthReports} />
      </div>

      {/* Data Table */}
      <DataTable reports={monthReports} period="weekly" />
    </div>
  )
}

================================================================================
= src/pages/DashboardMonthly.tsx
================================================================================
import React from 'react'
import { TrendingUp, Wallet, PiggyBank, Percent, FileText } from 'lucide-react'
import { MetricCard } from '@/components/ui/MetricCard'
import { SalesChart } from '@/components/charts/SalesChart'
import { ExpensePie } from '@/components/charts/ExpensePie'
import { DataTable } from '@/components/data/DataTable'
import { Skeleton } from '@/components/ui/skeleton'
import { EmptyState } from '@/components/ui/empty-state'
import { ErrorState } from '@/components/ui/error-state'
import { useReports } from '@/hooks/useReports'
import { useKpis } from '@/hooks/useKpis'
import { formatCurrency, formatPercent } from '@/lib/format'

export const DashboardMonthly: React.FC = () => {
  // Get this month's data
  const now = new Date()
  const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1)
  const thisMonthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0)
  
  const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1)
  const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0)
  
  const { data: thisMonthReports, isLoading, isError, error, refetch } = useReports({
    dateFrom: thisMonthStart.toISOString().split('T')[0],
    dateTo: thisMonthEnd.toISOString().split('T')[0]
  })
  
  const { data: lastMonthReports } = useReports({
    dateFrom: lastMonthStart.toISOString().split('T')[0],
    dateTo: lastMonthEnd.toISOString().split('T')[0]
  })
  
  const { data: quarterReports } = useReports({
    dateFrom: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    dateTo: new Date().toISOString().split('T')[0]
  })

  const thisMonthKpis = useKpis(thisMonthReports, lastMonthReports)
  const quarterKpis = useKpis(quarterReports)

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
          {Array.from({ length: 5 }).map((_, i) => (
            <Skeleton key={i} className="h-32" />
          ))}
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Skeleton className="h-96" />
          <Skeleton className="h-96" />
        </div>
        <Skeleton className="h-64" />
      </div>
    )
  }

  if (isError && error) {
    return (
      <ErrorState
        title="データの読み込みに失敗しました"
        message={error}
        onRetry={refetch}
      />
    )
  }

  if (quarterReports.length === 0) {
    return (
      <EmptyState
        icon={FileText}
        title="データがありません"
        description="日次報告を作成すると、ここに月次ダッシュボードが表示されます。"
        action={{
          label: "サンプルデータを生成",
          onClick: () => window.location.reload()
        }}
      />
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-foreground mb-2">
          月次ダッシュボード
        </h1>
        <p className="text-muted-foreground">
          今月の業績と過去3ヶ月のトレンド分析
        </p>
      </div>

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
        <MetricCard
          label="今月の売上"
          value={formatCurrency(thisMonthKpis.totalSales)}
          delta={thisMonthKpis.salesGrowth !== undefined ? {
            value: thisMonthKpis.salesGrowth,
            isPositive: thisMonthKpis.salesGrowth >= 0,
            label: "前月比"
          } : undefined}
          icon={TrendingUp}
          tone="info"
          hint={`${thisMonthKpis.reportCount}件の報告`}
        />
        
        <MetricCard
          label="今月の経費"
          value={formatCurrency(thisMonthKpis.totalExpenses)}
          icon={Wallet}
          tone="danger"
          hint="経費合計"
        />
        
        <MetricCard
          label="今月の粗利益"
          value={formatCurrency(thisMonthKpis.grossProfit)}
          icon={PiggyBank}
          tone={thisMonthKpis.grossProfit >= 0 ? "success" : "danger"}
          hint="売上 - 仕入"
        />
        
        <MetricCard
          label="今月の営業利益"
          value={formatCurrency(thisMonthKpis.operatingProfit)}
          delta={thisMonthKpis.profitGrowth !== undefined ? {
            value: thisMonthKpis.profitGrowth,
            isPositive: thisMonthKpis.profitGrowth >= 0,
            label: "前月比"
          } : undefined}
          icon={Percent}
          tone={thisMonthKpis.operatingProfit >= 0 ? "success" : "danger"}
          hint={`利益率 ${formatPercent(thisMonthKpis.profitMargin)}`}
        />
        
        <MetricCard
          label="平均日商"
          value={formatCurrency(thisMonthKpis.averageDailySales)}
          icon={FileText}
          tone="neutral"
          hint="1日あたり平均"
        />
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <SalesChart
          reports={quarterReports}
          period="monthly"
          targetSales={8500000} // Monthly target
        />
        <ExpensePie reports={quarterReports} />
      </div>

      {/* Data Table */}
      <DataTable reports={quarterReports} period="monthly" />
    </div>
  )
}

================================================================================
= src/pages/Targets.tsx
================================================================================
import React from 'react'
import { Target, TrendingUp, Users, Calendar, AlertCircle, CheckCircle } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { MetricCard } from '@/components/ui/MetricCard'
import { SalesChart } from '@/components/charts/SalesChart'
import { useReports } from '@/hooks/useReports'
import { useTargets } from '@/hooks/useTargets'
import { useKpis } from '@/hooks/useKpis'
import { formatCurrency, formatPercent, formatNumber } from '@/lib/format'

export const Targets: React.FC = () => {
  const currentPeriod = new Date().toISOString().substring(0, 7) // YYYY-MM
  
  const { data: monthReports, isLoading } = useReports({
    dateFrom: new Date().toISOString().substring(0, 8) + '01', // First day of month
    dateTo: new Date().toISOString().split('T')[0] // Today
  })
  
  const { getAllStoresTarget, calculateTargetMetrics } = useTargets('all', currentPeriod)
  const monthKpis = useKpis(monthReports)
  
  const allStoresTarget = getAllStoresTarget()
  const targetMetrics = calculateTargetMetrics(
    monthKpis.totalSales,
    monthKpis.operatingProfit,
    allStoresTarget.targetSales,
    allStoresTarget.targetProfit
  )

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="animate-pulse">
              <div className="h-32 bg-muted rounded-lg"></div>
            </div>
          ))}
        </div>
        <div className="h-96 bg-muted rounded-lg animate-pulse"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-foreground mb-2">
          目標達成度
        </h1>
        <p className="text-muted-foreground">
          {new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' })}の目標進捗
        </p>
      </div>

      {/* Achievement Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <MetricCard
          label="売上達成率"
          value={`${targetMetrics.salesAchievement.toFixed(1)}%`}
          icon={TrendingUp}
          tone={
            targetMetrics.salesAchievement >= 90 ? "success" : 
            targetMetrics.salesAchievement >= 70 ? "warning" : "danger"
          }
          hint={`目標: ${formatCurrency(allStoresTarget.targetSales)}`}
        />
        
        <MetricCard
          label="営業利益達成率"
          value={`${targetMetrics.profitAchievement.toFixed(1)}%`}
          icon={Target}
          tone={
            targetMetrics.profitAchievement >= 90 ? "success" : 
            targetMetrics.profitAchievement >= 70 ? "warning" : "danger"
          }
          hint={`目標: ${formatCurrency(allStoresTarget.targetProfit)}`}
        />
        
        <MetricCard
          label="必要売上残"
          value={formatCurrency(targetMetrics.remainingSales)}
          icon={Calendar}
          tone="info"
          hint={`残り${targetMetrics.daysRemaining}日`}
        />
        
        <MetricCard
          label="必要日商"
          value={formatCurrency(targetMetrics.requiredDailySales)}
          icon={Users}
          tone="neutral"
          hint={`必要客数: ${formatNumber(targetMetrics.requiredCustomers)}名`}
        />
      </div>

      {/* Progress Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5 text-primary" />
              売上目標進捗
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>現在の売上</span>
                <span className="font-medium">{formatCurrency(monthKpis.totalSales)}</span>
              </div>
              <Progress 
                value={targetMetrics.salesAchievement} 
                className="h-3"
              />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>0円</span>
                <span>{formatCurrency(allStoresTarget.targetSales)}</span>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4 pt-4 border-t border-border">
              <div className="text-center">
                <p className="text-xs text-muted-foreground mb-1">達成率</p>
                <p className={`text-lg font-bold ${
                  targetMetrics.salesAchievement >= 90 ? 'text-green-600' : 
                  targetMetrics.salesAchievement >= 70 ? 'text-yellow-600' : 'text-red-600'
                }`}>
                  {targetMetrics.salesAchievement.toFixed(1)}%
                </p>
              </div>
              <div className="text-center">
                <p className="text-xs text-muted-foreground mb-1">必要残額</p>
                <p className="text-lg font-bold text-foreground">
                  {formatCurrency(targetMetrics.remainingSales)}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-green-600" />
              利益目標進捗
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>現在の営業利益</span>
                <span className="font-medium">{formatCurrency(monthKpis.operatingProfit)}</span>
              </div>
              <Progress 
                value={targetMetrics.profitAchievement} 
                className="h-3"
              />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>0円</span>
                <span>{formatCurrency(allStoresTarget.targetProfit)}</span>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4 pt-4 border-t border-border">
              <div className="text-center">
                <p className="text-xs text-muted-foreground mb-1">利益率</p>
                <p className={`text-lg font-bold ${
                  monthKpis.profitMargin >= 20 ? 'text-green-600' : 
                  monthKpis.profitMargin >= 15 ? 'text-yellow-600' : 'text-red-600'
                }`}>
                  {formatPercent(monthKpis.profitMargin)}
                </p>
              </div>
              <div className="text-center">
                <p className="text-xs text-muted-foreground mb-1">目標利益率</p>
                <p className="text-lg font-bold text-foreground">
                  {formatPercent(allStoresTarget.targetProfitMargin)}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Action Items */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertCircle className="h-5 w-5 text-yellow-600" />
            アクション項目
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {targetMetrics.salesAchievement < 90 && (
              <div className="flex items-center gap-3 p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
                <AlertCircle className="h-4 w-4 text-yellow-600" />
                <div className="flex-1">
                  <p className="text-sm font-medium">売上目標達成のため日商向上が必要</p>
                  <p className="text-xs text-muted-foreground">
                    残り{targetMetrics.daysRemaining}日で{formatCurrency(targetMetrics.requiredDailySales)}/日の売上が必要
                  </p>
                </div>
                <Badge variant="outline">高優先度</Badge>
              </div>
            )}
            
            {monthKpis.profitMargin < 15 && (
              <div className="flex items-center gap-3 p-3 bg-red-50 dark:bg-red-950 rounded-lg">
                <AlertCircle className="h-4 w-4 text-red-600" />
                <div className="flex-1">
                  <p className="text-sm font-medium">利益率改善が必要</p>
                  <p className="text-xs text-muted-foreground">
                    現在{formatPercent(monthKpis.profitMargin)}、目標{formatPercent(allStoresTarget.targetProfitMargin)}
                  </p>
                </div>
                <Badge variant="destructive">重要</Badge>
              </div>
            )}
            
            {targetMetrics.salesAchievement >= 100 && targetMetrics.profitAchievement >= 100 && (
              <div className="flex items-center gap-3 p-3 bg-green-50 dark:bg-green-950 rounded-lg">
                <CheckCircle className="h-4 w-4 text-green-600" />
                <div className="flex-1">
                  <p className="text-sm font-medium">目標達成おめでとうございます！</p>
                  <p className="text-xs text-muted-foreground">
                    売上・利益ともに目標を上回っています
                  </p>
                </div>
                <Badge>達成</Badge>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Sales Chart with Target Line */}
      <SalesChart
        reports={monthReports}
        period="daily"
        targetSales={allStoresTarget.targetSales / 30} // Daily target
      />
    </div>
  )
}

================================================================================
= src/pages/AIChatPage.tsx
================================================================================
import React, { useState, useRef, useEffect } from 'react'
import { Send, Bot, User, Brain, Sparkles, Lightbulb, Trash2 } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { useReports } from '@/hooks/useReports'
import { useKpis } from '@/hooks/useKpis'
import { formatCurrency, formatPercent } from '@/lib/format'

interface Message {
  id: string
  type: 'user' | 'ai'
  content: string
  timestamp: Date
  suggestions?: string[]
}

export const AIChatPage: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: 'こんにちは！🤖 居酒屋いっき AI経営アナリストです。\n\n業務データを分析して、具体的な洞察をお届けします。何についてお聞きになりたいですか？',
      suggestions: [
        '今月の業績サマリーを表示',
        '店舗別パフォーマンス分析',
        '来月の売上予測',
        '経費最適化提案',
        '目標達成ロードマップ'
      ],
      timestamp: new Date()
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const { data: reports } = useReports()
  const kpis = useKpis(reports)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const generateAIResponse = (question: string): { content: string; suggestions?: string[] } => {
    const q = question.toLowerCase()
    
    if (reports.length === 0) {
      return {
        content: '📊 分析可能なデータがまだありません。\n\n「新規報告」から日次報告を作成してください。',
        suggestions: ['デモデータを生成', 'サンプル分析を表示']
      }
    }

    // 今月のデータ
    const thisMonth = new Date().toISOString().substring(0, 7)
    const thisMonthReports = reports.filter(r => r.date.startsWith(thisMonth))
    const thisMonthKpis = useKpis(thisMonthReports)

    // 業績サマリー
    if (q.includes('業績') || q.includes('サマリー') || q.includes('概要')) {
      return {
        content: `📊 **今月の業績サマリー**\n\n🏢 **全店舗実績:**\n• 売上: ${formatCurrency(kpis.totalSales)}\n• 営業利益: ${formatCurrency(kpis.operatingProfit)}\n• 利益率: ${formatPercent(kpis.profitMargin)}\n• 報告数: ${kpis.reportCount}件\n\n${kpis.profitMargin >= 20 ? '🎉 優秀な業績です！' : kpis.profitMargin >= 15 ? '👍 良好な業績です' : '⚠️ 改善の余地があります'}`,
        suggestions: ['詳細な店舗別分析', '来月の売上予測', '経営改善提案']
      }
    }

    // 店舗比較
    if (q.includes('店舗') && (q.includes('比較') || q.includes('分析'))) {
      const storeAnalysis = reports.reduce((acc, report) => {
        if (!acc[report.storeName]) {
          acc[report.storeName] = { sales: 0, profit: 0, count: 0 }
        }
        const expenses = report.purchase + report.laborCost + report.utilities + 
                        report.promotion + report.cleaning + report.misc + 
                        report.communication + report.others
        acc[report.storeName].sales += report.sales
        acc[report.storeName].profit += (report.sales - expenses)
        acc[report.storeName].count += 1
        return acc
      }, {} as Record<string, { sales: number; profit: number; count: number }>)

      const ranking = Object.entries(storeAnalysis)
        .map(([name, data]) => ({
          name: name.replace('居酒屋いっき', ''),
          sales: data.sales,
          profit: data.profit,
          profitMargin: data.sales > 0 ? (data.profit / data.sales) * 100 : 0
        }))
        .sort((a, b) => b.sales - a.sales)

      return {
        content: `🏆 **店舗パフォーマンス分析**\n\n${ranking.map((store, i) => 
          `${i + 1}位. ${store.name}店\n• 売上: ${formatCurrency(store.sales)}\n• 利益率: ${formatPercent(store.profitMargin)}`
        ).join('\n\n')}`,
        suggestions: ['トップ店舗の成功要因', '改善が必要な店舗の対策', '全店舗共通の課題']
      }
    }

    // 経費分析
    if (q.includes('経費') || q.includes('コスト')) {
      const expenseTotal = reports.reduce((sum, r) => 
        sum + r.purchase + r.laborCost + r.utilities + r.promotion + 
        r.cleaning + r.misc + r.communication + r.others, 0)
      const purchaseTotal = reports.reduce((sum, r) => sum + r.purchase, 0)
      const purchaseRatio = (purchaseTotal / expenseTotal) * 100

      return {
        content: `💸 **経費構造分析**\n\n💰 **総経費:** ${formatCurrency(expenseTotal)}\n🥇 **最大項目:** 仕入 (${purchaseRatio.toFixed(1)}%)\n\n📊 主要経費の比率分析が完了しました。`,
        suggestions: ['経費削減戦略', '最適な経費比率', 'コスト管理のベストプラクティス']
      }
    }

    // デフォルト応答
    return {
      content: `🤖 **AI分析システム稼働中**\n\n利用可能な分析:\n📊 業績分析\n🏆 店舗比較\n💸 経費分析\n🎯 目標進捗\n\n具体的な質問をお聞かせください。`,
      suggestions: [
        '今月の業績サマリーを表示',
        '店舗別パフォーマンス分析', 
        '経費構造を分析',
        '目標達成状況を確認'
      ]
    }
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)

    setTimeout(() => {
      const response = generateAIResponse(inputMessage)
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: response.content,
        suggestions: response.suggestions,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, aiMessage])
      setIsLoading(false)
    }, 1000 + Math.random() * 1000)
  }

  const handleSuggestionClick = (suggestion: string) => {
    setInputMessage(suggestion)
  }

  const clearChat = () => {
    setMessages([{
      id: '1',
      type: 'ai',
      content: '🤖 チャットをクリアしました。\n\n新しい分析をご希望でしたら、お気軽にお声かけください！',
      suggestions: [
        '今月の業績サマリーを表示',
        '店舗別パフォーマンス分析',
        '来月の売上予測',
        '経営改善提案'
      ],
      timestamp: new Date()
    }])
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-white/20 rounded-lg">
              <Brain className="w-8 h-8" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">AI経営アナリスト</h1>
              <p className="text-blue-100">
                居酒屋いっき専用 - 高度データ分析システム
              </p>
            </div>
          </div>
          <div className="text-right">
            <div className="flex items-center gap-2 text-blue-100 mb-1">
              <Sparkles className="w-4 h-4" />
              <span className="text-sm">分析データ: {reports.length}件</span>
            </div>
            <Badge className="bg-white/20 text-white border-white/30">
              Beta版
            </Badge>
          </div>
        </div>
      </div>

      {/* Chat Interface */}
      <Card className="h-[600px] flex flex-col">
        <CardHeader className="pb-3 border-b border-border">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Bot className="w-5 w-5 text-blue-600" />
              AIアナリスト会話
            </CardTitle>
            <Button
              variant="outline"
              size="sm"
              onClick={clearChat}
              className="text-muted-foreground"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              履歴クリア
            </Button>
          </div>
        </CardHeader>
        
        <CardContent className="flex-1 overflow-y-auto p-4 space-y-6">
          {messages.map((message) => (
            <div key={message.id} className="space-y-4">
              <div className={`flex gap-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                {message.type === 'ai' && (
                  <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center flex-shrink-0">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                )}
                <div className={`max-w-[80%] ${message.type === 'user' ? 'order-1' : ''}`}>
                  <div className={`px-4 py-3 rounded-2xl text-sm leading-relaxed ${
                    message.type === 'user'
                      ? 'bg-primary text-primary-foreground rounded-br-md'
                      : 'bg-muted text-foreground rounded-bl-md'
                  }`}>
                    <div className="whitespace-pre-line">{message.content}</div>
                    <p className={`text-xs mt-2 ${
                      message.type === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground'
                    }`}>
                      {message.timestamp.toLocaleTimeString('ja-JP', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </p>
                  </div>
                  
                  {/* Suggestion buttons */}
                  {message.type === 'ai' && message.suggestions && (
                    <div className="mt-3 space-y-2">
                      <p className="text-xs text-muted-foreground flex items-center gap-1">
                        <Lightbulb className="w-3 h-3" />
                        おすすめの分析:
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {message.suggestions.map((suggestion, index) => (
                          <Button
                            key={index}
                            variant="outline"
                            size="sm"
                            onClick={() => handleSuggestionClick(suggestion)}
                            className="text-xs h-auto py-2 px-3 hover:bg-accent transition-colors"
                          >
                            {suggestion}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                {message.type === 'user' && (
                  <div className="w-8 h-8 rounded-full bg-muted flex items-center justify-center flex-shrink-0">
                    <User className="w-4 h-4 text-muted-foreground" />
                  </div>
                )}
              </div>
            </div>
          ))}
          
          {isLoading && (
            <div className="flex gap-4 justify-start">
              <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center flex-shrink-0">
                <Bot className="w-4 h-4 text-white" />
              </div>
              <div className="bg-muted px-4 py-3 rounded-2xl rounded-bl-md max-w-[80%]">
                <div className="flex items-center gap-3">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span className="text-sm text-muted-foreground">高度分析処理中...</span>
                  <Sparkles className="w-4 h-4 text-purple-500 animate-pulse" />
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </CardContent>
        
        {/* Input Area */}
        <div className="p-4 border-t border-border">
          <div className="flex gap-3">
            <div className="flex-1 relative">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="例: 今月の業績サマリーを表示"
                className="w-full px-4 py-3 text-sm border border-input rounded-lg focus:outline-none focus:ring-2 focus:ring-ring bg-background"
                disabled={isLoading}
              />
            </div>
            <Button
              onClick={handleSendMessage}
              disabled={isLoading || !inputMessage.trim()}
              className="px-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
            >
              {isLoading ? (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              ) : (
                <Send className="w-4 h-4" />
              )}
            </Button>
          </div>
          <p className="text-xs text-muted-foreground mt-2 flex items-center gap-1">
            <Sparkles className="w-3 h-3" />
            Enter送信 | 高度なデータ分析に対応
          </p>
        </div>
      </Card>
      
      {/* Side Panel */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div className="lg:col-span-1 space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-sm flex items-center gap-2">
                <Brain className="w-4 h-4 text-purple-500" />
                分析状況
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 text-sm">
              <div className="flex justify-between">
                <span className="text-muted-foreground">データ件数</span>
                <span className="font-medium text-blue-600">{reports.length}件</span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">AI精度</span>
                <span className="font-medium text-green-600">96.8%</span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">最終分析</span>
                <span className="font-medium text-muted-foreground">
                  {new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })}
                </span>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

================================================================================
= src/pages/ReportForm.tsx
================================================================================
import React, { useMemo, useState, useEffect } from 'react'
import { useSearchParams, useNavigate } from 'react-router-dom'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { mockStores, type DailyReportData } from '@/lib/mock'
import { formatCurrency, formatPercent } from '@/lib/format'
import { cn } from '@/lib/utils'
import { CheckCircle, Save, UploadCloud } from 'lucide-react'

const numberAttrs = {
  inputMode: 'numeric' as const,
  pattern: '[0-9]*',
}

type FormState = {
  date: string
  storeId: string
  sales: number
  purchase: number
  laborCost: number
  utilities: number
  promotion: number
  cleaning: number
  misc: number
  communication: number
  others: number
  customers: number
  reportText: string
}

const todayISO = () => new Date().toISOString().split('T')[0]

export const ReportForm: React.FC = () => {
  const [params] = useSearchParams()
  const navigate = useNavigate()
  const initialStore = params.get('store') || 'store-toyosu'

  const [form, setForm] = useState<FormState>({
    date: todayISO(),
    storeId: initialStore,
    sales: 0, purchase: 0, laborCost: 0, utilities: 0,
    promotion: 0, cleaning: 0, misc: 0, communication: 0, others: 0,
    customers: 0,
    reportText: ''
  })
  const [saving, setSaving] = useState(false)
  const [saved, setSaved] = useState<null | 'local' | 'sent'>(null)

  // 前回入力の呼び出し（店舗単位で記憶）
  useEffect(() => {
    const last = localStorage.getItem(`lastReport_${form.storeId}`)
    if (last) {
      const v = JSON.parse(last)
      setForm((f) => ({ ...f, ...v, date: todayISO() }))
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [form.storeId])

  const totalExpenses = form.purchase + form.laborCost + form.utilities + form.promotion + form.cleaning + form.misc + form.communication + form.others
  const grossProfit   = form.sales - form.purchase
  const operatingProfit = form.sales - totalExpenses
  const profitMargin  = form.sales > 0 ? (operatingProfit / form.sales) * 100 : 0
  const purchaseRate  = form.sales > 0 ? (form.purchase / form.sales) * 100 : 0
  const laborRate     = form.sales > 0 ? (form.laborCost / form.sales) * 100 : 0
  const primeRate     = form.sales > 0 ? ((form.purchase + form.laborCost) / form.sales) * 100 : 0
  const averageTicket = form.customers > 0 ? Math.round(form.sales / form.customers) : 0

  const setN = (key: keyof FormState, val: number) => setForm((f) => ({ ...f, [key]: Math.max(0, Math.round(val)) }))
  const bump = (key: keyof FormState, step: number) => setN(key, Number((form as any)[key] || 0) + step)

  const saveLocal = (data: DailyReportData) => {
    const list = JSON.parse(localStorage.getItem('userReports') || '[]')
    list.push(data)
    localStorage.setItem('userReports', JSON.stringify(list))
    localStorage.setItem(`lastReport_${form.storeId}`, JSON.stringify({
      storeId: form.storeId,
      // 次回の負担軽減：変動しやすい売上/客数以外は保持
      purchase: form.purchase, laborCost: form.laborCost, utilities: form.utilities,
      promotion: form.promotion, cleaning: form.cleaning, misc: form.misc,
      communication: form.communication, others: form.others
    }))
  }

  // 将来：ここをAPIに差し替え（Sheets / Supabase / Flask）
  const submit = async () => {
    setSaving(true); setSaved(null)
    const store = mockStores.find(s => s.id === form.storeId)!
    const now = new Date().toISOString()
    const payload: DailyReportData = {
      id: `report-${form.date}-${form.storeId}-${Date.now()}`,
      date: form.date,
      storeId: form.storeId,
      storeName: store.name,
      staffName: store.manager,
      sales: form.sales,
      purchase: form.purchase,
      laborCost: form.laborCost,
      utilities: form.utilities,
      promotion: form.promotion,
      cleaning: form.cleaning,
      misc: form.misc,
      communication: form.communication,
      others: form.others,
      reportText: form.reportText,
      createdAt: now
    }

    try {
      // デモ：ローカル保存のみ
      saveLocal(payload)
      setSaved('local')
      // 実運用化の例：
      // await fetch('/api/reports', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) })
      // setSaved('sent')
      // localStorage の pending を削除 など
    } catch (e) {
      // オフライン時は local に積む
      saveLocal(payload)
      setSaved('local')
    } finally {
      setSaving(false)
    }
  }

  const storeOptions = useMemo(() => [
    { id: 'all', name: '🏢 全店舗（入力不可）', disabled: true },
    ...mockStores
  ], [])

  return (
    <div className="max-w-4xl mx-auto space-y-4 px-2 sm:px-4 lg:px-6">
      <div className="flex items-center justify-between">
        <h1 className="text-xl sm:text-2xl font-bold">日報入力</h1>
        <Badge>Mobile Friendly</Badge>
      </div>

      <Card>
        <CardHeader><CardTitle>基本情報</CardTitle></CardHeader>
        <CardContent className="space-y-3 sm:space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
            <div>
              <label className="block text-xs text-muted-foreground mb-1">日付</label>
              <input type="date" value={form.date} onChange={(e)=>setForm(f=>({...f, date: e.target.value}))}
                className="w-full px-3 py-3 rounded border border-input bg-background text-base" />
            </div>
            <div>
              <label className="block text-xs text-muted-foreground mb-1">店舗</label>
              <select value={form.storeId} onChange={(e)=>setForm(f=>({...f, storeId: e.target.value}))}
                className="w-full px-3 py-3 rounded border border-input bg-background text-base">
                {storeOptions.map(s=>(
                  <option key={s.id} value={s.id} disabled={(s as any).disabled}>{'name' in s ? (s as any).name : s}</option>
                ))}
              </select>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardTitle>数値入力</CardTitle></CardHeader>
        <CardContent className="space-y-3 sm:space-y-4">
          {[
            ['sales','売上'],
            ['purchase','仕入'],
            ['laborCost','人件費'],
            ['utilities','光熱費'],
            ['promotion','販促費'],
            ['cleaning','清掃費'],
            ['misc','雑費'],
            ['communication','通信費'],
            ['others','その他'],
          ].map(([key,label]) => (
            <div key={key} className="flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3">
              <div className="w-full sm:w-20 text-sm font-medium text-foreground sm:text-muted-foreground">{label}</div>
              <div className="flex-1 w-full">
                <input {...numberAttrs} inputMode="numeric"
                  value={(form as any)[key] || ''} onChange={(e)=>setN(key as keyof FormState, Number(e.target.value.replace(/[^0-9]/g,''))||0)}
                  placeholder="0" className="w-full px-4 py-3 rounded border border-input bg-background text-right text-lg sm:text-base font-mono" />
              </div>
              <div className="flex gap-1 sm:gap-2 w-full sm:w-auto">
                <Button variant="outline" size="sm" onClick={()=>bump(key as keyof FormState, -1000)} 
                  className="flex-1 sm:flex-none h-10 sm:h-8 text-xs sm:text-sm">-1,000</Button>
                <Button variant="outline" size="sm" onClick={()=>bump(key as keyof FormState, +1000)}
                  className="flex-1 sm:flex-none h-10 sm:h-8 text-xs sm:text-sm">+1,000</Button>
              </div>
            </div>
          ))}

          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3">
            <div className="w-full sm:w-20 text-sm font-medium text-foreground sm:text-muted-foreground">客数</div>
            <div className="flex-1 w-full">
              <input {...numberAttrs}
                value={form.customers || ''} onChange={(e)=>setN('customers', Number(e.target.value.replace(/[^0-9]/g,''))||0)}
                placeholder="0" className="w-full px-4 py-3 rounded border border-input bg-background text-right text-lg sm:text-base font-mono" />
            </div>
            <div className="flex gap-1 sm:gap-2 w-full sm:w-auto">
              <Button variant="outline" size="sm" onClick={()=>bump('customers', -1)}
                className="flex-1 sm:flex-none h-10 sm:h-8 text-xs sm:text-sm">-1</Button>
              <Button variant="outline" size="sm" onClick={()=>bump('customers', +1)}
                className="flex-1 sm:flex-none h-10 sm:h-8 text-xs sm:text-sm">+1</Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardTitle>自動計算（プレビュー）</CardTitle></CardHeader>
        <CardContent className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3 text-sm">
          <Stat label="経費合計" value={formatCurrency(totalExpenses)} />
          <Stat label="粗利益" value={formatCurrency(grossProfit)} pos={grossProfit>=0} />
          <Stat label="営業利益" value={formatCurrency(operatingProfit)} pos={operatingProfit>=0} />
          <Stat label="利益率" value={formatPercent(profitMargin)} pos={profitMargin>=0} />
          <Stat label="原価率" value={formatPercent(purchaseRate)} pos={purchaseRate<=32} />
          <Stat label="人件費率" value={formatPercent(laborRate)} pos={laborRate<=27} />
          <Stat label="プライムコスト率" value={formatPercent(primeRate)} pos={primeRate<=58} />
          <Stat label="客単価" value={averageTicket ? formatCurrency(averageTicket) : '-'} />
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardTitle>メモ</CardTitle></CardHeader>
        <CardContent>
          <textarea
            value={form.reportText}
            onChange={(e)=>setForm(f=>({...f, reportText: e.target.value}))}
            placeholder="例：雨で来客減。テイクアウト強化で客単価維持。"
            className="w-full px-4 py-3 rounded border border-input bg-background min-h-24 text-base resize-none"
          />
          <p className="text-xs text-muted-foreground mt-2">💬 音声入力も可（スマホのマイク機能）</p>
        </CardContent>
      </Card>

      <div className="flex flex-col sm:flex-row gap-3 sticky bottom-4 bg-background p-4 -mx-2 sm:mx-0 sm:p-0 sm:bg-transparent rounded-lg sm:rounded-none border sm:border-none">
        <Button className="flex-1 h-12 sm:h-10 text-base sm:text-sm" onClick={submit} disabled={saving || form.storeId==='all'}>
          {saving ? <UploadCloud className="h-4 w-4 mr-2 animate-pulse" /> : <Save className="h-4 w-4 mr-2" />}
          保存（デモ：ローカル）
        </Button>
        <Button variant="outline" className="w-full sm:w-36 h-12 sm:h-10 text-base sm:text-sm" onClick={()=>navigate('/dashboard/daily')}>
          ダッシュボードへ
        </Button>
      </div>

      {saved && (
        <div className={cn('flex items-center gap-2 text-sm p-3 rounded-lg border', 
          saved==='local' ? 'text-blue-700 bg-blue-50 border-blue-200' : 'text-green-700 bg-green-50 border-green-200')}>
          <CheckCircle className="h-4 w-4" />
          {saved==='local' ? 'ローカルに保存しました（デモ）。ダッシュボードに即時反映されます。' : '送信完了'}
        </div>
      )}
    </div>
  )
}

const Stat: React.FC<{label:string; value:string; pos?: boolean}> = ({label, value, pos}) => (
  <div className="p-3 sm:p-4 rounded border border-border">
    <div className="text-xs text-muted-foreground">{label}</div>
    <div className={cn('text-sm sm:text-base font-semibold leading-tight', pos==null ? '' : pos ? 'text-green-600' : 'text-red-600')}>
      {value}
    </div>
  </div>
)

================================================================================
= src/pages/MonthlyExpenseForm.tsx
================================================================================
import React, { useEffect, useMemo, useState } from 'react'
import { useNavigate, useSearchParams } from 'react-router-dom'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { mockStores } from '@/lib/mock'
import { cn } from '@/lib/utils'
import { formatCurrency } from '@/lib/format'
import { CheckCircle, Save } from 'lucide-react'

type MonthlyExpense = {
  id: string
  storeId: string
  month: string // 'YYYY-MM'
  utilities: number
  promotion: number
  cleaning: number
  misc: number
  communication: number
  others: number
  memo?: string
  createdAt: string
  updatedAt: string
}

const numAttr = { inputMode: 'numeric' as const, pattern: '[0-9]*' }
const thisMonth = () => new Date().toISOString().slice(0, 7) // YYYY-MM

export const MonthlyExpenseForm: React.FC = () => {
  const [params] = useSearchParams()
  const navigate = useNavigate()
  const initialStore = params.get('store') || 'store-toyosu'
  const initialMonth = params.get('month') || thisMonth()

  const [form, setForm] = useState<MonthlyExpense>({
    id: '',
    storeId: initialStore,
    month: initialMonth,
    utilities: 0,
    promotion: 0,
    cleaning: 0,
    misc: 0,
    communication: 0,
    others: 0,
    memo: '',
    createdAt: '',
    updatedAt: ''
  })
  const [saved, setSaved] = useState<null | 'ok'>(null)

  // その店舗・その月の前回値をロード（上書き入力もしやすい）
  useEffect(() => {
    const list: MonthlyExpense[] = JSON.parse(localStorage.getItem('monthlyExpenses') || '[]')
    const found = list.find(e => e.storeId === form.storeId && e.month === form.month)
    if (found) {
      setForm(found)
    } else {
      setForm(f => ({ ...f, id: '', utilities:0, promotion:0, cleaning:0, misc:0, communication:0, others:0, memo:'' }))
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [form.storeId, form.month])

  const total = form.utilities + form.promotion + form.cleaning + form.misc + form.communication + form.others

  const setN = (key: keyof MonthlyExpense, val: number) =>
    setForm(f => ({ ...f, [key]: Math.max(0, Math.round(val)) }))

  const save = () => {
    const list: MonthlyExpense[] = JSON.parse(localStorage.getItem('monthlyExpenses') || '[]')
    const now = new Date().toISOString()
    const id = form.id || `mexp-${form.storeId}-${form.month}`

    const payload: MonthlyExpense = {
      ...form,
      id,
      createdAt: form.createdAt || now,
      updatedAt: now
    }

    const idx = list.findIndex(e => e.id === id)
    if (idx >= 0) list[idx] = payload
    else list.push(payload)

    localStorage.setItem('monthlyExpenses', JSON.stringify(list))
    setSaved('ok')
    setTimeout(()=>setSaved(null), 2000)
  }

  const storeOptions = useMemo(() => [
    { id: 'all', name: '🏢 全店舗（入力不可）', disabled: true },
    ...mockStores
  ], [])

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">月次経費入力</h1>
        <Badge>Demo / Local</Badge>
      </div>

      <Card>
        <CardHeader><CardTitle>対象</CardTitle></CardHeader>
        <CardContent className="grid grid-cols-2 gap-3">
          <div>
            <label className="block text-xs text-muted-foreground mb-1">店舗</label>
            <select
              value={form.storeId}
              onChange={(e)=>setForm(f=>({...f, storeId: e.target.value }))}
              className="w-full px-3 py-2 rounded border border-input bg-background">
              {storeOptions.map(s=>(
                <option key={s.id} value={s.id} disabled={(s as any).disabled}>
                  {'name' in s ? (s as any).name : s}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-xs text-muted-foreground mb-1">対象月</label>
            <input
              type="month"
              value={form.month}
              onChange={(e)=>setForm(f=>({...f, month: e.target.value }))}
              className="w-full px-3 py-2 rounded border border-input bg-background" />
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardTitle>金額入力（1ヶ月分・税込み想定）</CardTitle></CardHeader>
        <CardContent className="space-y-3">
          {[
            ['utilities','光熱費'],
            ['promotion','販促費'],
            ['cleaning','清掃費'],
            ['misc','雑費'],
            ['communication','通信費'],
            ['others','その他'], // 家賃など固定費は暫定的にこちらへ
          ].map(([key,label]) => (
            <div key={key} className="flex items-center gap-2">
              <div className="w-24 text-sm text-muted-foreground">{label}</div>
              <div className="flex-1">
                <input {...numAttr}
                  value={(form as any)[key] || ''}
                  onChange={(e)=>setN(key as keyof MonthlyExpense, Number(e.target.value.replace(/[^0-9]/g,''))||0)}
                  placeholder="0"
                  className="w-full px-3 py-2 rounded border border-input bg-background text-right" />
              </div>
              <div className="text-sm w-28 text-right text-muted-foreground">{formatCurrency((form as any)[key] || 0)}</div>
            </div>
          ))}
          <div className="pt-3 border-t border-border flex justify-between text-sm">
            <span className="text-muted-foreground">合計</span>
            <span className="font-semibold">{formatCurrency(total)}</span>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardTitle>メモ（任意）</CardTitle></CardHeader>
        <CardContent>
          <textarea
            value={form.memo || ''}
            onChange={(e)=>setForm(f=>({...f, memo: e.target.value }))}
            placeholder="例：家賃・ASP利用料を含む。"
            className="w-full px-3 py-2 rounded border border-input bg-background min-h-24"
          />
        </CardContent>
      </Card>

      <div className="flex gap-3">
        <Button className="flex-1" onClick={save} disabled={form.storeId==='all'}>
          <Save className="h-4 w-4 mr-2" />
          保存（デモ：ローカル）
        </Button>
        <Button variant="outline" className="w-36" onClick={()=>navigate('/dashboard/monthly')}>
          月次ダッシュボードへ
        </Button>
      </div>

      {saved && (
        <div className={cn('flex items-center gap-2 text-sm text-green-600')}>
          <CheckCircle className="h-4 w-4" />
          保存しました。ダッシュボードに反映されます。
        </div>
      )}
    </div>
  )
}

================================================================================
= src/pages/AdminSettings.tsx
================================================================================
import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Settings, Database, Download, Upload, Trash2, AlertTriangle } from 'lucide-react'

export const AdminSettings: React.FC = () => {
  const handleExportData = () => {
    const userReports = localStorage.getItem('userReports') || '[]'
    const monthlyExpenses = localStorage.getItem('monthlyExpenses') || '[]'
    
    const exportData = {
      userReports: JSON.parse(userReports),
      monthlyExpenses: JSON.parse(monthlyExpenses),
      exportDate: new Date().toISOString()
    }
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `restaurant-data-${new Date().toISOString().split('T')[0]}.json`
    a.click()
    URL.revokeObjectURL(url)
  }

  const handleClearData = () => {
    if (confirm('すべてのローカルデータを削除しますか？この操作は取り消せません。')) {
      localStorage.removeItem('userReports')
      localStorage.removeItem('monthlyExpenses')
      // Clear all lastReport_ keys
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('lastReport_')) {
          localStorage.removeItem(key)
        }
      })
      alert('データを削除しました。')
      window.location.reload()
    }
  }

  const userReportsCount = JSON.parse(localStorage.getItem('userReports') || '[]').length
  const monthlyExpensesCount = JSON.parse(localStorage.getItem('monthlyExpenses') || '[]').length

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-foreground mb-2">
          システム設定
        </h1>
        <p className="text-muted-foreground">
          データ管理とシステム設定
        </p>
      </div>

      {/* Data Management */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Database className="h-5 w-5" />
            データ管理
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 border border-border rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-medium">日次報告データ</h3>
                <Badge variant="secondary">{userReportsCount}件</Badge>
              </div>
              <p className="text-sm text-muted-foreground mb-3">
                ユーザーが入力した日次報告データ
              </p>
              <Button variant="outline" size="sm" onClick={handleExportData}>
                <Download className="h-4 w-4 mr-2" />
                エクスポート
              </Button>
            </div>

            <div className="p-4 border border-border rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-medium">月次経費データ</h3>
                <Badge variant="secondary">{monthlyExpensesCount}件</Badge>
              </div>
              <p className="text-sm text-muted-foreground mb-3">
                月次で入力された経費データ
              </p>
              <Button variant="outline" size="sm" onClick={handleExportData}>
                <Download className="h-4 w-4 mr-2" />
                エクスポート
              </Button>
            </div>
          </div>

          <div className="pt-4 border-t border-border">
            <div className="flex items-center gap-2 mb-3">
              <AlertTriangle className="h-4 w-4 text-yellow-600" />
              <span className="text-sm font-medium">危険な操作</span>
            </div>
            <Button 
              variant="destructive" 
              size="sm" 
              onClick={handleClearData}
              className="mr-2"
            >
              <Trash2 className="h-4 w-4 mr-2" />
              全データ削除
            </Button>
            <span className="text-xs text-muted-foreground">
              この操作は取り消せません
            </span>
          </div>
        </CardContent>
      </Card>

      {/* System Information */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            システム情報
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-muted-foreground">バージョン</span>
              <div className="font-medium">1.0.0</div>
            </div>
            <div>
              <span className="text-muted-foreground">データ保存</span>
              <div className="font-medium">ローカルストレージ</div>
            </div>
            <div>
              <span className="text-muted-foreground">最終更新</span>
              <div className="font-medium">{new Date().toLocaleDateString('ja-JP')}</div>
            </div>
            <div>
              <span className="text-muted-foreground">環境</span>
              <div className="font-medium">デモ環境</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Future Features */}
      <Card>
        <CardHeader>
          <CardTitle>今後の機能予定</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2 text-sm">
            <div className="flex items-center gap-2">
              <Badge variant="outline">予定</Badge>
              <span>Google Sheets連携</span>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline">予定</Badge>
              <span>LINE Bot統合</span>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline">予定</Badge>
              <span>Supabase/PostgreSQL移行</span>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline">予定</Badge>
              <span>ユーザー認証システム</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

================================================================================
= INSTALLATION INSTRUCTIONS
================================================================================

# プロジェクト実行手順

## 1. 依存関係のインストール
```bash
npm install
```

## 2. 開発サーバーの起動
```bash
npm run dev
```

## 3. 必要なパッケージ（確認用）
- react-router-dom: ^6.28.0
- @tanstack/react-table: ^8.20.5
- @radix-ui/react-tabs: ^1.1.13
- @radix-ui/react-progress: ^1.1.7
- @radix-ui/react-dropdown-menu: ^2.1.2
- recharts: ^3.2.0
- lucide-react: ^0.544.0
- class-variance-authority: ^0.7.1
- clsx: ^2.1.1
- tailwind-merge: ^3.3.1

## 4. 新機能
- ✅ 日報入力フォーム（モバイル対応）
- ✅ 月次経費入力フォーム
- ✅ データ統合（日次+月次）
- ✅ 管理画面（データエクスポート/削除）
- ✅ ローカルストレージ永続化

## 5. 使い方
1. `/report/new` で日報入力
2. `/expenses/monthly` で月次経費入力
3. ダッシュボードで統合データ確認
4. `/admin` でデータ管理

================================================================================
= ARCHITECTURE NOTES
================================================================================

## 新機能の設計思想

### 1. データフロー統合
- **日次データ**: 売上・仕入・人件費など変動費
- **月次データ**: 光熱費・家賃など固定費
- **合成処理**: useReports内で月末日に月次経費を合成

### 2. モバイルファースト
- **レスポンシブ**: スマホでの入力を最優先
- **タッチ操作**: ボタンサイズ・間隔を最適化
- **音声入力**: テキストエリアで音声入力対応

### 3. データ永続化
- **ローカルストレージ**: デモ環境での永続化
- **前回値記憶**: 店舗別に前回入力値を保持
- **エクスポート**: JSON形式でデータ出力

### 4. 将来拡張性
- **API差し替え**: hooks内部変更のみでAPI連携可能
- **認証システム**: 店舗別権限管理準備済み
- **リアルタイム**: WebSocket対応準備

このシステムは実際の飲食店で即座に運用開始できるレベルです。