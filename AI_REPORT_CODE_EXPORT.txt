===========================================
AI分析レポート機能 - コード全文エクスポート
===========================================

目次:
1. フロントエンド - Hooks (useAIReports.ts)
2. フロントエンド - ページ (AIReportsPage.tsx)
3. フロントエンド - コンポーネント
   - AIReportDetail.tsx
   - AIReportsList.tsx
   - GenerateReportDialog.tsx
   - AIReportNotification.tsx
4. バックエンド - Edge Function (generate-ai-report/index.ts)

===========================================
1. フロントエンド - Hooks (useAIReports.ts)
===========================================

ファイルパス: src/hooks/useAIReports.ts

```typescript
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export interface AIReport {
  id: string;
  store_id: string | null;
  report_type: 'weekly' | 'monthly';
  period_start: string;
  period_end: string;
  title: string;
  summary: string;
  analysis_content: {
    salesTrend?: string;
    profitability?: string;
    costStructure?: string;
    storeComparison?: string;
  };
  key_insights: string[];
  recommendations: string[];
  metrics: {
    totalSales: number;
    totalExpenses: number;
    grossProfit: number;
    operatingProfit: number;
    profitMargin: number;
    costRate: number;
    laborRate: number;
    storeBreakdown?: Array<{
      storeId: string;
      storeName: string;
      sales: number;
      expenses: number;
      profit: number;
      profitMargin: number;
      costRate: number;
      laborRate: number;
    }>;
  };
  generated_by: string;
  generated_at: string;
  created_at: string;
}

export interface ReportSchedule {
  id: string;
  report_type: 'weekly' | 'monthly';
  store_id: string | null;
  is_enabled: boolean;
  cron_expression: string;
  last_run_at: string | null;
  next_run_at: string | null;
  notification_emails: string[];
  created_at: string;
  updated_at: string;
}

export interface ReportGenerationLog {
  id: string;
  schedule_id: string | null;
  report_id: string | null;
  report_type: 'weekly' | 'monthly';
  store_id: string | null;
  status: 'success' | 'failed' | 'in_progress';
  started_at: string;
  completed_at: string | null;
  error_message: string | null;
  data_summary: {
    reportCount?: number;
    storeCount?: number;
  };
  created_at: string;
}

export function useAIReports(storeId?: string) {
  const [reports, setReports] = useState<AIReport[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchReports = async () => {
    try {
      setLoading(true);
      setError(null);

      let query = supabase
        .from('ai_generated_reports')
        .select('*')
        .order('generated_at', { ascending: false });

      if (storeId) {
        query = query.eq('store_id', storeId);
      }

      const { data, error: fetchError } = await query;

      if (fetchError) throw fetchError;

      setReports(data || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch reports');
    } finally {
      setLoading(false);
    }
  };

  const deleteReport = async (reportId: string) => {
    try {
      const { error: deleteError } = await supabase
        .from('ai_generated_reports')
        .delete()
        .eq('id', reportId);

      if (deleteError) throw deleteError;

      await fetchReports();
      return { error: null };
    } catch (err) {
      return { error: err instanceof Error ? err.message : 'Failed to delete report' };
    }
  };

  useEffect(() => {
    fetchReports();
  }, [storeId]);

  return { reports, loading, error, refetch: fetchReports, deleteReport };
}

export function useReportSchedules() {
  const [schedules, setSchedules] = useState<ReportSchedule[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchSchedules = async () => {
    try {
      setLoading(true);
      setError(null);

      const { data, error: fetchError } = await supabase
        .from('report_schedules')
        .select('*')
        .order('created_at', { ascending: false });

      if (fetchError) throw fetchError;

      setSchedules(data || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch schedules');
    } finally {
      setLoading(false);
    }
  };

  const createSchedule = async (schedule: Omit<ReportSchedule, 'id' | 'created_at' | 'updated_at' | 'last_run_at' | 'next_run_at'>) => {
    try {
      const { data, error: insertError } = await supabase
        .from('report_schedules')
        .insert(schedule)
        .select()
        .single();

      if (insertError) throw insertError;

      await fetchSchedules();
      return { data, error: null };
    } catch (err) {
      return { data: null, error: err instanceof Error ? err.message : 'Failed to create schedule' };
    }
  };

  const updateSchedule = async (id: string, updates: Partial<ReportSchedule>) => {
    try {
      const { data, error: updateError } = await supabase
        .from('report_schedules')
        .update({ ...updates, updated_at: new Date().toISOString() })
        .eq('id', id)
        .select()
        .single();

      if (updateError) throw updateError;

      await fetchSchedules();
      return { data, error: null };
    } catch (err) {
      return { data: null, error: err instanceof Error ? err.message : 'Failed to update schedule' };
    }
  };

  const deleteSchedule = async (id: string) => {
    try {
      const { error: deleteError } = await supabase
        .from('report_schedules')
        .delete()
        .eq('id', id);

      if (deleteError) throw deleteError;

      await fetchSchedules();
      return { error: null };
    } catch (err) {
      return { error: err instanceof Error ? err.message : 'Failed to delete schedule' };
    }
  };

  useEffect(() => {
    fetchSchedules();
  }, []);

  return {
    schedules,
    loading,
    error,
    refetch: fetchSchedules,
    createSchedule,
    updateSchedule,
    deleteSchedule,
  };
}

export function useReportGenerationLogs() {
  const [logs, setLogs] = useState<ReportGenerationLog[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchLogs = async () => {
    try {
      setLoading(true);
      setError(null);

      const { data, error: fetchError } = await supabase
        .from('report_generation_logs')
        .select('*')
        .order('started_at', { ascending: false })
        .limit(50);

      if (fetchError) throw fetchError;

      setLogs(data || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch logs');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchLogs();
  }, []);

  return { logs, loading, error, refetch: fetchLogs };
}

export async function generateReport(
  reportType: 'weekly' | 'monthly',
  storeId?: string,
  periodStart?: string,
  periodEnd?: string
) {
  try {
    const { data: { session } } = await supabase.auth.getSession();

    if (!session) {
      throw new Error('Not authenticated');
    }

    const url = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/generate-ai-report`;

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`,
      },
      body: JSON.stringify({
        reportType,
        storeId: storeId || null,
        periodStart: periodStart || null,
        periodEnd: periodEnd || null,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to generate report');
    }

    const result = await response.json();
    return { data: result.report, error: null };
  } catch (err) {
    return { data: null, error: err instanceof Error ? err.message : 'Failed to generate report' };
  }
}
```

===========================================
2. フロントエンド - ページ (AIReportsPage.tsx)
===========================================

ファイルパス: src/pages/AIReportsPage.tsx

```typescript
import { useState, useEffect } from 'react';
import { FileText, Plus, Filter } from 'lucide-react';
import { useSearchParams } from 'react-router-dom';
import { AIReportsList } from '../components/Reports/AIReportsList';
import { AIReportDetail } from '../components/Reports/AIReportDetail';
import { GenerateReportDialog } from '../components/Reports/GenerateReportDialog';
import { Button } from '../components/ui/button';
import { useAIReports } from '../hooks/useAIReports';

export function AIReportsPage() {
  const [searchParams, setSearchParams] = useSearchParams();
  const reportIdFromUrl = searchParams.get('report');
  const [selectedReportId, setSelectedReportId] = useState<string | null>(reportIdFromUrl);
  const [showGenerateDialog, setShowGenerateDialog] = useState(false);
  const [filterType, setFilterType] = useState<'all' | 'weekly' | 'monthly'>('all');
  const { reports, refetch, deleteReport } = useAIReports();

  useEffect(() => {
    if (reportIdFromUrl) {
      setSelectedReportId(reportIdFromUrl);
    }
  }, [reportIdFromUrl]);

  const selectedReport = selectedReportId
    ? reports.find((r) => r.id === selectedReportId)
    : null;

  const filteredReports = filterType === 'all'
    ? reports
    : reports.filter((r) => r.report_type === filterType);

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {selectedReport ? (
        <AIReportDetail
          report={selectedReport}
          onBack={() => setSelectedReportId(null)}
          onDelete={deleteReport}
        />
      ) : (
        <>
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h1 className="text-3xl font-bold text-gray-900 flex items-center">
                  <FileText className="w-8 h-8 mr-3" />
                  AI分析レポート
                </h1>
                <p className="text-gray-600 mt-2">
                  AIが自動生成した詳細な業績分析レポート
                </p>
              </div>

              <Button onClick={() => setShowGenerateDialog(true)}>
                <Plus className="w-4 h-4 mr-2" />
                レポート生成
              </Button>
            </div>

            <div className="flex items-center gap-3">
              <Filter className="w-5 h-5 text-gray-400" />
              <div className="flex gap-2">
                <Button
                  variant={filterType === 'all' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setFilterType('all')}
                >
                  すべて
                </Button>
                <Button
                  variant={filterType === 'weekly' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setFilterType('weekly')}
                >
                  期間指定
                </Button>
                <Button
                  variant={filterType === 'monthly' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setFilterType('monthly')}
                >
                  月次
                </Button>
              </div>
            </div>
          </div>

          <AIReportsList
            onReportSelect={setSelectedReportId}
          />
        </>
      )}

      {showGenerateDialog && (
        <GenerateReportDialog
          onClose={() => setShowGenerateDialog(false)}
          onSuccess={async (reportId) => {
            setShowGenerateDialog(false);
            await refetch();
            setSelectedReportId(reportId);
            setSearchParams({ report: reportId });
          }}
        />
      )}
    </div>
  );
}
```

===========================================
3. フロントエンド - コンポーネント
===========================================

--- AIReportDetail.tsx ---

ファイルパス: src/components/Reports/AIReportDetail.tsx

```typescript
import { useState } from 'react';
import { Calendar, TrendingUp, AlertCircle, CheckCircle, Download, ArrowLeft, Trash2, Share2, Copy } from 'lucide-react';
import { AIReport } from '../../hooks/useAIReports';
import { Card } from '../ui/card';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';
import { useAuth } from '../../contexts/AuthContext';
import { supabase } from '../../lib/supabase';

interface AIReportDetailProps {
  report: AIReport;
  onBack: () => void;
  onDelete?: (reportId: string) => Promise<{ error: string | null }>;
}

export function AIReportDetail({ report, onBack, onDelete }: AIReportDetailProps) {
  const { user } = useAuth();
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showShareDialog, setShowShareDialog] = useState(false);
  const [shareLink, setShareLink] = useState('');
  const [isPublic, setIsPublic] = useState(false);
  const [isUpdatingShare, setIsUpdatingShare] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);

  const canShare = user?.role === 'manager' || user?.role === 'admin';

  const handleDelete = async () => {
    if (!onDelete) return;

    setIsDeleting(true);
    const { error } = await onDelete(report.id);

    if (error) {
      alert(`削除に失敗しました: ${error}`);
      setIsDeleting(false);
      setShowDeleteConfirm(false);
    } else {
      onBack();
    }
  };

  const handleShare = async () => {
    setShowShareDialog(true);

    const { data, error } = await supabase
      .from('ai_generated_reports')
      .select('share_token, is_public')
      .eq('id', report.id)
      .single();

    if (!error && data) {
      setIsPublic(data.is_public || false);
      if (data.share_token) {
        const link = `${window.location.origin}/share/report/${data.share_token}`;
        setShareLink(link);
      }
    } else {
      console.error('Error loading share data:', error);
    }
  };

  const handleTogglePublic = async () => {
    setIsUpdatingShare(true);
    try {
      const newIsPublic = !isPublic;

      const { data, error } = await supabase
        .from('ai_generated_reports')
        .update({ is_public: newIsPublic })
        .eq('id', report.id)
        .select('share_token')
        .single();

      if (error) throw error;

      setIsPublic(newIsPublic);

      if (newIsPublic && data.share_token) {
        const link = `${window.location.origin}/share/report/${data.share_token}`;
        setShareLink(link);
      } else {
        setShareLink('');
      }
    } catch (error) {
      console.error('Error toggling share:', error);
      alert('共有設定の更新に失敗しました');
    } finally {
      setIsUpdatingShare(false);
    }
  };

  const handleCopyLink = () => {
    navigator.clipboard.writeText(shareLink);
    setCopySuccess(true);
    setTimeout(() => setCopySuccess(false), 2000);
  };

  const handleExport = () => {
    const reportText = `
${report.title}
${'='.repeat(report.title.length)}

期間: ${report.period_start} 〜 ${report.period_end}
レポート種別: ${report.report_type === 'weekly' ? '週次' : '月次'}
生成日時: ${new Date(report.generated_at).toLocaleString('ja-JP')}

【エグゼクティブサマリー】
${report.summary}

【主要指標】
- 総売上: ¥${report.metrics.totalSales.toLocaleString('ja-JP')}
- 総経費: ¥${report.metrics.totalExpenses.toLocaleString('ja-JP')}
- 粗利益: ¥${report.metrics.grossProfit.toLocaleString('ja-JP')}
- 営業利益: ¥${report.metrics.operatingProfit.toLocaleString('ja-JP')}
- 利益率: ${report.metrics.profitMargin.toFixed(1)}%
- 原価率: ${report.metrics.costRate.toFixed(1)}%
- 人件費率: ${report.metrics.laborRate.toFixed(1)}%

【重要な発見】
${report.key_insights.map((insight, i) => `${i + 1}. ${insight}`).join('\n')}

【改善提案】
${report.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

【詳細分析】
${Object.entries(report.analysis_content || {}).map(([key, value]) => `\n■ ${key}\n${value}`).join('\n')}
`;

    const blob = new Blob([reportText], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.title}_${report.period_start}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button variant="ghost" onClick={onBack}>
          <ArrowLeft className="w-4 h-4 mr-2" />
          戻る
        </Button>
        <div className="flex gap-2">
          {canShare && (
            <Button variant="outline" onClick={handleShare}>
              <Share2 className="w-4 h-4 mr-2" />
              共有リンク
            </Button>
          )}
          <Button variant="outline" onClick={handleExport}>
            <Download className="w-4 h-4 mr-2" />
            エクスポート
          </Button>
          {onDelete && (
            <Button
              variant="outline"
              onClick={() => setShowDeleteConfirm(true)}
              className="text-red-600 hover:text-red-700 hover:bg-red-50"
              disabled={isDeleting}
            >
              <Trash2 className="w-4 h-4 mr-2" />
              削除
            </Button>
          )}
        </div>
      </div>

      {/* Share Dialog */}
      {showShareDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <Card className="max-w-md w-full p-6">
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-gray-900 mb-2 flex items-center">
                <Share2 className="w-5 h-5 mr-2" />
                レポートを共有
              </h3>
              <p className="text-gray-600 mb-4">
                共有リンクを有効にすると、誰でもこのレポートを閲覧できるようになります。
              </p>

              <div className="mb-4">
                <label className="flex items-center gap-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={isPublic}
                    onChange={handleTogglePublic}
                    disabled={isUpdatingShare}
                    className="w-5 h-5 text-blue-600 rounded focus:ring-2 focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">
                    共有リンクを有効にする
                  </span>
                </label>
              </div>

              {shareLink && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    共有リンク
                  </label>
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={shareLink}
                      readOnly
                      className="flex-1 p-3 border border-gray-300 rounded-lg bg-gray-50 text-sm"
                    />
                    <Button
                      variant="outline"
                      onClick={handleCopyLink}
                      className="flex-shrink-0"
                      disabled={!isPublic}
                    >
                      <Copy className="w-4 h-4 mr-2" />
                      {copySuccess ? 'コピー済み' : 'コピー'}
                    </Button>
                  </div>
                  {isPublic ? (
                    <p className="text-xs text-green-600 mt-2 font-medium">
                      ✓ このリンクは有効です。誰でもレポートを閲覧できます
                    </p>
                  ) : (
                    <p className="text-xs text-gray-500 mt-2">
                      共有を有効にすると、このリンクでレポートを閲覧できるようになります
                    </p>
                  )}
                </div>
              )}

              {copySuccess && (
                <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg flex items-center gap-2">
                  <CheckCircle className="w-5 h-5 text-green-600" />
                  <span className="text-sm text-green-800">リンクをコピーしました</span>
                </div>
              )}
            </div>

            <div className="flex gap-3 justify-end">
              <Button
                variant="outline"
                onClick={() => {
                  setShowShareDialog(false);
                  setCopySuccess(false);
                }}
              >
                閉じる
              </Button>
            </div>
          </Card>
        </div>
      )}

      {/* Delete Confirmation Dialog */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <Card className="max-w-md w-full p-6">
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">レポートを削除</h3>
              <p className="text-gray-600">
                このレポートを削除してもよろしいですか？この操作は取り消せません。
              </p>
            </div>
            <div className="flex gap-3 justify-end">
              <Button
                variant="outline"
                onClick={() => setShowDeleteConfirm(false)}
                disabled={isDeleting}
              >
                キャンセル
              </Button>
              <Button
                variant="outline"
                onClick={handleDelete}
                disabled={isDeleting}
                className="bg-red-600 text-white hover:bg-red-700"
              >
                {isDeleting ? '削除中...' : '削除する'}
              </Button>
            </div>
          </Card>
        </div>
      )}

      {/* Report Content */}
      <Card className="p-8">
        <div className="mb-6">
          <div className="flex items-center gap-3 mb-4">
            <Badge variant={report.report_type === 'weekly' ? 'default' : 'secondary'} className="text-sm">
              {report.report_type === 'weekly' ? '期間指定レポート' : '月次レポート'}
            </Badge>
            <div className="flex items-center text-sm text-gray-500">
              <Calendar className="w-4 h-4 mr-1" />
              {report.period_start} 〜 {report.period_end}
            </div>
          </div>

          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {report.title}
          </h1>

          <p className="text-sm text-gray-500">
            生成日時: {new Date(report.generated_at).toLocaleString('ja-JP')} |
            AI Model: {report.generated_by}
          </p>
        </div>

        <div className="bg-blue-50 border-l-4 border-blue-600 p-6 mb-8">
          <h2 className="text-lg font-semibold text-gray-900 mb-3">
            エグゼクティブサマリー
          </h2>
          <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
            {report.summary}
          </p>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-8">
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <div className="text-sm text-gray-600 mb-1">総売上</div>
            <div className="text-2xl font-bold text-blue-600">
              ¥{report.metrics.totalSales.toLocaleString('ja-JP')}
            </div>
          </div>

          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <div className="text-sm text-gray-600 mb-1">粗利益</div>
            <div className="text-2xl font-bold text-green-600">
              ¥{report.metrics.grossProfit.toLocaleString('ja-JP')}
            </div>
          </div>

          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <div className="text-sm text-gray-600 mb-1">営業利益</div>
            <div className="text-2xl font-bold text-purple-600">
              ¥{Math.round(report.metrics.operatingProfit).toLocaleString('ja-JP')}
            </div>
          </div>

          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <div className="text-sm text-gray-600 mb-1">営業利益率</div>
            <div className="text-2xl font-bold text-indigo-600">
              {report.metrics.profitMargin.toFixed(1)}%
            </div>
          </div>

          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <div className="text-sm text-gray-600 mb-1">原価率</div>
            <div className="text-2xl font-bold text-orange-600">
              {report.metrics.costRate.toFixed(1)}%
            </div>
          </div>
        </div>

        {report.metrics.storeBreakdown && report.metrics.storeBreakdown.length > 0 && (
          <div className="mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
              <TrendingUp className="w-5 h-5 mr-2" />
              店舗別実績
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {report.metrics.storeBreakdown.map((store) => (
                <Card key={store.storeId} className="p-4">
                  <h3 className="font-semibold text-gray-900 mb-3">{store.storeName}</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">売上</span>
                      <span className="font-medium">¥{store.sales.toLocaleString('ja-JP')}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">営業利益</span>
                      <span className="font-medium text-green-600">¥{Math.round(store.profit).toLocaleString('ja-JP')}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">営業利益率</span>
                      <span className="font-medium">{store.profitMargin.toFixed(1)}%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">原価率</span>
                      <span className="font-medium">{store.costRate.toFixed(1)}%</span>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        )}

        <div className="mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
            <AlertCircle className="w-5 h-5 mr-2 text-yellow-600" />
            重要な発見
          </h2>
          <div className="space-y-3">
            {report.key_insights.map((insight, index) => (
              <div key={index} className="flex items-start bg-yellow-50 border-l-4 border-yellow-400 p-4">
                <span className="flex-shrink-0 w-6 h-6 bg-yellow-400 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3">
                  {index + 1}
                </span>
                <p className="text-gray-800">{insight}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
            <CheckCircle className="w-5 h-5 mr-2 text-green-600" />
            改善提案
          </h2>
          <div className="space-y-3">
            {report.recommendations.map((recommendation, index) => (
              <div key={index} className="flex items-start bg-green-50 border-l-4 border-green-500 p-4">
                <span className="flex-shrink-0 w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3">
                  {index + 1}
                </span>
                <p className="text-gray-800">{recommendation}</p>
              </div>
            ))}
          </div>
        </div>

        {report.analysis_content && Object.keys(report.analysis_content).length > 0 && (
          <div>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              詳細分析
            </h2>
            <div className="space-y-6">
              {report.analysis_content.salesTrend && (
                <div>
                  <h3 className="font-semibold text-gray-900 mb-2">売上トレンド分析</h3>
                  <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                    {report.analysis_content.salesTrend}
                  </p>
                </div>
              )}
              {report.analysis_content.profitability && (
                <div>
                  <h3 className="font-semibold text-gray-900 mb-2">収益性分析</h3>
                  <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                    {report.analysis_content.profitability}
                  </p>
                </div>
              )}
              {report.analysis_content.costStructure && (
                <div>
                  <h3 className="font-semibold text-gray-900 mb-2">コスト構造分析</h3>
                  <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                    {report.analysis_content.costStructure}
                  </p>
                </div>
              )}
              {report.analysis_content.storeComparison && (
                <div>
                  <h3 className="font-semibold text-gray-900 mb-2">店舗間比較分析</h3>
                  <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                    {report.analysis_content.storeComparison}
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
      </Card>
    </div>
  );
}
```

--- AIReportsList.tsx ---

ファイルパス: src/components/Reports/AIReportsList.tsx

```typescript
import { FileText, Calendar, TrendingUp, Loader2 } from 'lucide-react';
import { useAIReports } from '../../hooks/useAIReports';
import { Card } from '../ui/card';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';

interface AIReportsListProps {
  storeId?: string;
  onReportSelect: (reportId: string) => void;
}

export function AIReportsList({ storeId, onReportSelect }: AIReportsListProps) {
  const { reports, loading, error } = useAIReports(storeId);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="w-8 h-8 animate-spin text-blue-600" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6 text-center">
        <p className="text-red-600">レポートの読み込みに失敗しました</p>
        <p className="text-sm text-gray-500 mt-2">{error}</p>
      </div>
    );
  }

  if (reports.length === 0) {
    return (
      <div className="p-12 text-center">
        <FileText className="w-16 h-16 mx-auto text-gray-300 mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">レポートがありません</h3>
        <p className="text-gray-500">
          自動生成されたレポートがここに表示されます
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {reports.map((report) => (
        <Card key={report.id} className="p-6 hover:shadow-lg transition-shadow cursor-pointer" onClick={() => onReportSelect(report.id)}>
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-3">
                <Badge variant={report.report_type === 'weekly' ? 'default' : 'secondary'}>
                  {report.report_type === 'weekly' ? '期間指定' : '月次レポート'}
                </Badge>
                <div className="flex items-center text-sm text-gray-500">
                  <Calendar className="w-4 h-4 mr-1" />
                  {report.period_start} 〜 {report.period_end}
                </div>
              </div>

              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {report.title}
              </h3>

              <p className="text-gray-600 mb-4 line-clamp-2">
                {report.summary}
              </p>

              <div className="grid grid-cols-3 gap-4 mb-4">
                <div className="bg-blue-50 rounded-lg p-3">
                  <div className="text-xs text-gray-600 mb-1">売上</div>
                  <div className="text-lg font-bold text-blue-600">
                    ¥{report.metrics.totalSales.toLocaleString('ja-JP')}
                  </div>
                </div>

                <div className="bg-green-50 rounded-lg p-3">
                  <div className="text-xs text-gray-600 mb-1">営業利益</div>
                  <div className="text-lg font-bold text-green-600">
                    ¥{Math.round(report.metrics.operatingProfit).toLocaleString('ja-JP')}
                  </div>
                </div>

                <div className="bg-purple-50 rounded-lg p-3">
                  <div className="text-xs text-gray-600 mb-1">利益率</div>
                  <div className="text-lg font-bold text-purple-600">
                    {report.metrics.profitMargin.toFixed(1)}%
                  </div>
                </div>
              </div>

              <div className="flex items-center gap-2">
                <TrendingUp className="w-4 h-4 text-gray-400" />
                <span className="text-sm text-gray-500">
                  {report.key_insights.length}件の重要な発見
                </span>
              </div>
            </div>

            <div className="ml-4 text-right">
              <div className="text-sm text-gray-500 mb-2">
                {new Date(report.generated_at).toLocaleString('ja-JP')}
              </div>
              <Button variant="outline" size="sm">
                詳細を見る
              </Button>
            </div>
          </div>
        </Card>
      ))}
    </div>
  );
}
```

--- GenerateReportDialog.tsx ---

ファイルパス: src/components/Reports/GenerateReportDialog.tsx

```typescript
import { useState, useEffect } from 'react';
import { FileText, Loader2, CheckCircle, XCircle } from 'lucide-react';
import { Button } from '../ui/button';
import { Card } from '../ui/card';
import { generateReport } from '../../hooks/useAIReports';
import { supabase } from '../../lib/supabase';

interface GenerateReportDialogProps {
  onClose: () => void;
  onSuccess: (reportId: string) => void;
}

interface Store {
  id: string;
  name: string;
}

export function GenerateReportDialog({ onClose, onSuccess }: GenerateReportDialogProps) {
  const [reportType, setReportType] = useState<'weekly' | 'monthly'>('weekly');
  const [selectedStoreId, setSelectedStoreId] = useState<string>('all');
  const [isGenerating, setIsGenerating] = useState(false);
  const [result, setResult] = useState<{ success: boolean; message: string } | null>(null);
  const [stores, setStores] = useState<Store[]>([]);
  const [loadingStores, setLoadingStores] = useState(true);

  const today = new Date().toISOString().split('T')[0];
  const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

  const [startDate, setStartDate] = useState<string>(weekAgo);
  const [endDate, setEndDate] = useState<string>(today);

  useEffect(() => {
    const fetchStores = async () => {
      try {
        const { data, error } = await supabase
          .from('stores')
          .select('id, name')
          .eq('is_active', true)
          .order('name');

        if (error) throw error;
        setStores(data || []);
      } catch (err) {
        console.error('Failed to fetch stores:', err);
      } finally {
        setLoadingStores(false);
      }
    };

    fetchStores();
  }, []);

  const handleGenerate = async () => {
    setIsGenerating(true);
    setResult(null);

    try {
      const storeId = selectedStoreId === 'all' ? undefined : selectedStoreId;

      let periodStart: string | undefined;
      let periodEnd: string | undefined;

      if (reportType === 'weekly') {
        periodStart = startDate;
        periodEnd = endDate;
      }

      const { data, error } = await generateReport(reportType, storeId, periodStart, periodEnd);

      if (error) {
        setResult({ success: false, message: error });
      } else if (data) {
        setResult({ success: true, message: 'レポートが正常に生成されました。表示中...' });
        setTimeout(() => {
          onSuccess(data.id);
          onClose();
        }, 1000);
      }
    } catch (err) {
      setResult({
        success: false,
        message: err instanceof Error ? err.message : 'レポート生成中にエラーが発生しました',
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="max-w-md w-full p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-gray-900 flex items-center">
            <FileText className="w-6 h-6 mr-2" />
            レポート生成
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={isGenerating}
          >
            <XCircle className="w-6 h-6" />
          </button>
        </div>

        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              レポート種別
            </label>
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => setReportType('weekly')}
                className={`p-4 border-2 rounded-lg transition-all ${
                  reportType === 'weekly'
                    ? 'border-blue-600 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                disabled={isGenerating}
              >
                <div className="font-semibold text-gray-900">期間指定レポート</div>
                <div className="text-xs text-gray-500 mt-1">日付範囲を指定</div>
              </button>

              <button
                onClick={() => setReportType('monthly')}
                className={`p-4 border-2 rounded-lg transition-all ${
                  reportType === 'monthly'
                    ? 'border-blue-600 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                disabled={isGenerating}
              >
                <div className="font-semibold text-gray-900">月次レポート</div>
                <div className="text-xs text-gray-500 mt-1">先月全体</div>
              </button>
            </div>
          </div>

          {reportType === 'weekly' && (
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  開始日
                </label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  disabled={isGenerating}
                  max={endDate}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  終了日
                </label>
                <input
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  disabled={isGenerating}
                  min={startDate}
                  max={today}
                />
              </div>
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              対象店舗
            </label>
            <select
              value={selectedStoreId}
              onChange={(e) => setSelectedStoreId(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              disabled={isGenerating || loadingStores}
            >
              <option value="all">全店舗</option>
              {loadingStores ? (
                <option disabled>読み込み中...</option>
              ) : (
                stores.map((store) => (
                  <option key={store.id} value={store.id}>
                    {store.name}
                  </option>
                ))
              )}
            </select>
          </div>

          {result && (
            <div
              className={`p-4 rounded-lg flex items-start ${
                result.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
              }`}
            >
              {result.success ? (
                <CheckCircle className="w-5 h-5 text-green-600 mr-3 flex-shrink-0 mt-0.5" />
              ) : (
                <XCircle className="w-5 h-5 text-red-600 mr-3 flex-shrink-0 mt-0.5" />
              )}
              <div>
                <p className={`font-medium ${result.success ? 'text-green-900' : 'text-red-900'}`}>
                  {result.success ? '成功' : 'エラー'}
                </p>
                <p className={`text-sm ${result.success ? 'text-green-700' : 'text-red-700'}`}>
                  {result.message}
                </p>
              </div>
            </div>
          )}

          <div className="flex gap-3">
            <Button variant="outline" onClick={onClose} className="flex-1" disabled={isGenerating}>
              キャンセル
            </Button>
            <Button onClick={handleGenerate} className="flex-1" disabled={isGenerating}>
              {isGenerating ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  生成中...
                </>
              ) : (
                <>
                  <FileText className="w-4 h-4 mr-2" />
                  生成開始
                </>
              )}
            </Button>
          </div>

          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <p className="text-sm text-blue-900">
              <strong>注意:</strong> レポート生成には30秒〜1分程度かかる場合があります。
              AIが過去のデータを分析し、詳細なレポートを作成します。
            </p>
          </div>
        </div>
      </Card>
    </div>
  );
}
```

--- AIReportNotification.tsx ---

ファイルパス: src/components/Dashboard/AIReportNotification.tsx

```typescript
import { useState, useEffect } from 'react';
import { FileText, X, ExternalLink } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../lib/supabase';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';

interface RecentReport {
  id: string;
  title: string;
  report_type: 'weekly' | 'monthly';
  generated_at: string;
}

export function AIReportNotification() {
  const [recentReports, setRecentReports] = useState<RecentReport[]>([]);
  const [dismissed, setDismissed] = useState<string[]>([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetchRecentReports();

    const dismissedIds = localStorage.getItem('dismissedReports');
    if (dismissedIds) {
      setDismissed(JSON.parse(dismissedIds));
    }

    const subscription = supabase
      .channel('ai_reports_notifications')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'ai_generated_reports',
        },
        (payload) => {
          fetchRecentReports();
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const fetchRecentReports = async () => {
    try {
      const oneDayAgo = new Date();
      oneDayAgo.setDate(oneDayAgo.getDate() - 1);

      const { data, error } = await supabase
        .from('ai_generated_reports')
        .select('id, title, report_type, generated_at')
        .gte('generated_at', oneDayAgo.toISOString())
        .order('generated_at', { ascending: false })
        .limit(3);

      if (error) throw error;

      setRecentReports(data || []);
    } catch (err) {
      console.error('Failed to fetch recent reports:', err);
    }
  };

  const handleDismiss = (reportId: string) => {
    const newDismissed = [...dismissed, reportId];
    setDismissed(newDismissed);
    localStorage.setItem('dismissedReports', JSON.stringify(newDismissed));
  };

  const handleViewReport = (reportId: string) => {
    navigate(`/ai-reports?report=${reportId}`);
  };

  const visibleReports = recentReports.filter((report) => !dismissed.includes(report.id));

  if (visibleReports.length === 0) {
    return null;
  }

  return (
    <div className="fixed bottom-6 right-6 z-40 space-y-3 max-w-sm">
      {visibleReports.map((report) => (
        <div
          key={report.id}
          className="bg-white border-2 border-blue-500 rounded-lg shadow-2xl p-4 animate-slide-in"
        >
          <div className="flex items-start justify-between mb-3">
            <div className="flex items-center gap-2">
              <div className="bg-blue-500 rounded-full p-2">
                <FileText className="w-5 h-5 text-white" />
              </div>
              <div>
                <p className="text-sm font-semibold text-gray-900">新しいレポート</p>
                <Badge variant={report.report_type === 'weekly' ? 'default' : 'secondary'} className="text-xs">
                  {report.report_type === 'weekly' ? '週次' : '月次'}
                </Badge>
              </div>
            </div>
            <button
              onClick={() => handleDismiss(report.id)}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <X className="w-4 h-4" />
            </button>
          </div>

          <p className="text-sm text-gray-700 mb-1 font-medium line-clamp-2">
            {report.title}
          </p>

          <p className="text-xs text-gray-500 mb-4">
            {new Date(report.generated_at).toLocaleString('ja-JP')}
          </p>

          <div className="flex gap-2">
            <Button
              size="sm"
              onClick={() => handleViewReport(report.id)}
              className="flex-1"
            >
              <ExternalLink className="w-3 h-3 mr-1" />
              表示
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => handleDismiss(report.id)}
            >
              閉じる
            </Button>
          </div>
        </div>
      ))}
    </div>
  );
}
```

===========================================
4. バックエンド - Edge Function
===========================================

ファイルパス: supabase/functions/generate-ai-report/index.ts

```typescript
import { createClient } from 'npm:@supabase/supabase-js@2.39.3';

interface ReportRequest {
  reportType: 'weekly' | 'monthly';
  storeId?: string;
  periodStart?: string;
  periodEnd?: string;
}

interface DailyReportData {
  id: string;
  date: string;
  store_id: string;
  sales: number;
  purchase: number;
  labor_cost: number;
  utilities: number;
  rent: number;
  consumables: number;
  promotion: number;
  cleaning: number;
  misc: number;
  communication: number;
  others: number;
}

interface StoreData {
  id: string;
  name: string;
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Client-Info, Apikey',
};

Deno.serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');

    if (!openaiApiKey) {
      return new Response(
        JSON.stringify({ success: false, error: 'OpenAI API key not configured' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    const { reportType, storeId, periodStart, periodEnd }: ReportRequest = await req.json();

    const logId = crypto.randomUUID();
    await supabase.from('report_generation_logs').insert({
      id: logId,
      report_type: reportType,
      store_id: storeId || null,
      status: 'in_progress',
      started_at: new Date().toISOString(),
    });

    let startDate: string;
    let endDate: string;

    if (periodStart && periodEnd) {
      startDate = periodStart;
      endDate = periodEnd;
    } else {
      const now = new Date();
      if (reportType === 'weekly') {
        const weekAgo = new Date(now);
        weekAgo.setDate(weekAgo.getDate() - 7);
        startDate = weekAgo.toISOString().split('T')[0];
        endDate = now.toISOString().split('T')[0];
      } else {
        const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
        const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);
        startDate = lastMonth.toISOString().split('T')[0];
        endDate = lastMonthEnd.toISOString().split('T')[0];
      }
    }

    let query = supabase
      .from('daily_reports')
      .select('*')
      .gte('date', startDate)
      .lte('date', endDate)
      .order('date', { ascending: true });

    if (storeId) {
      query = query.eq('store_id', storeId);
    }

    const { data: reports, error: reportsError } = await query;

    if (reportsError) {
      throw new Error(`Failed to fetch reports: ${reportsError.message}`);
    }

    if (!reports || reports.length === 0) {
      await supabase
        .from('report_generation_logs')
        .update({
          status: 'failed',
          completed_at: new Date().toISOString(),
          error_message: 'No data available for the specified period',
        })
        .eq('id', logId);

      return new Response(
        JSON.stringify({ success: false, error: 'No data available for the specified period' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const storeIds = [...new Set(reports.map((r: DailyReportData) => r.store_id))];
    const { data: stores } = await supabase
      .from('stores')
      .select('id, name')
      .in('id', storeIds);

    const storeMap = new Map((stores || []).map((s: StoreData) => [s.id, s.name]));

    const reportPeriodStart = new Date(startDate);
    const reportPeriodEnd = new Date(endDate);
    const daysInPeriod = Math.ceil((reportPeriodEnd.getTime() - reportPeriodStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;

    const monthsInPeriod = new Set<string>();
    for (let d = new Date(reportPeriodStart); d <= reportPeriodEnd; d.setDate(d.getDate() + 1)) {
      const monthKey = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;
      monthsInPeriod.add(monthKey);
    }

    const { data: expenseBaselines } = await supabase
      .from('expense_baselines')
      .select('*')
      .in('store_id', storeIds)
      .in('month', Array.from(monthsInPeriod));

    const expenseBaselineMap = new Map();
    (expenseBaselines || []).forEach((baseline: any) => {
      const key = `${baseline.store_id}-${baseline.month}`;
      expenseBaselineMap.set(key, baseline);
    });

    const calculateProrationForStore = (storeId: string) => {
      const storeReports = reports.filter((r: DailyReportData) => r.store_id === storeId);
      const actualDaysWithReports = storeReports.length;

      if (actualDaysWithReports === 0) return 0;

      let totalProrated = 0;
      for (const monthKey of Array.from(monthsInPeriod)) {
        const baselineKey = `${storeId}-${monthKey}`;
        const baseline = expenseBaselineMap.get(baselineKey);
        if (!baseline) continue;

        const openDays = baseline.open_days || 30;

        const monthlyTotal =
          Number(baseline.labor_cost_employee || 0) +
          Number(baseline.labor_cost_part_time || 0) +
          Number(baseline.utilities || 0) +
          Number(baseline.rent || 0) +
          Number(baseline.consumables || 0) +
          Number(baseline.promotion || 0) +
          Number(baseline.cleaning || 0) +
          Number(baseline.misc || 0) +
          Number(baseline.communication || 0) +
          Number(baseline.others || 0);

        totalProrated += (monthlyTotal / openDays) * actualDaysWithReports;
      }
      return totalProrated;
    };

    const totalSales = reports.reduce((sum: number, r: DailyReportData) => sum + (r.sales || 0), 0);
    const totalPurchase = reports.reduce((sum: number, r: DailyReportData) => sum + (r.purchase || 0), 0);
    const totalLaborCost = reports.reduce((sum: number, r: DailyReportData) => sum + (r.labor_cost || 0), 0);
    const totalUtilities = reports.reduce((sum: number, r: DailyReportData) => sum + (r.utilities || 0), 0);
    const totalRent = reports.reduce((sum: number, r: DailyReportData) => sum + (r.rent || 0), 0);
    const totalConsumables = reports.reduce((sum: number, r: DailyReportData) => sum + (r.consumables || 0), 0);
    const totalPromotion = reports.reduce((sum: number, r: DailyReportData) => sum + (r.promotion || 0), 0);
    const totalCleaning = reports.reduce((sum: number, r: DailyReportData) => sum + (r.cleaning || 0), 0);
    const totalMisc = reports.reduce((sum: number, r: DailyReportData) => sum + (r.misc || 0), 0);
    const totalCommunication = reports.reduce((sum: number, r: DailyReportData) => sum + (r.communication || 0), 0);
    const totalOthers = reports.reduce((sum: number, r: DailyReportData) => sum + (r.others || 0), 0);

    let totalMonthlyExpenses = 0;
    for (const storeId of storeIds) {
      totalMonthlyExpenses += calculateProrationForStore(storeId);
    }

    const totalExpenses =
      totalPurchase +
      totalLaborCost +
      totalUtilities +
      totalRent +
      totalConsumables +
      totalPromotion +
      totalCleaning +
      totalMisc +
      totalCommunication +
      totalOthers +
      totalMonthlyExpenses;

    const grossProfit = totalSales - totalPurchase;
    const operatingProfit = totalSales - totalExpenses;
    const profitMargin = totalSales > 0 ? (operatingProfit / totalSales) * 100 : 0;
    const costRate = totalSales > 0 ? (totalPurchase / totalSales) * 100 : 0;
    const laborRate = totalSales > 0 ? ((totalLaborCost + totalMonthlyExpenses) / totalSales) * 100 : 0;

    const storeBreakdown = storeIds.map((storeId) => {
      const storeReports = reports.filter((r: DailyReportData) => r.store_id === storeId);
      const storeSales = storeReports.reduce((sum: number, r: DailyReportData) => sum + (r.sales || 0), 0);
      const storePurchase = storeReports.reduce((sum: number, r: DailyReportData) => sum + (r.purchase || 0), 0);
      const storeLaborCost = storeReports.reduce((sum: number, r: DailyReportData) => sum + (r.labor_cost || 0), 0);

      const storeDailyExpenses = storeReports.reduce(
        (sum: number, r: DailyReportData) =>
          sum +
          (r.purchase || 0) +
          (r.labor_cost || 0) +
          (r.utilities || 0) +
          (r.rent || 0) +
          (r.consumables || 0) +
          (r.promotion || 0) +
          (r.cleaning || 0) +
          (r.misc || 0) +
          (r.communication || 0) +
          (r.others || 0),
        0
      );

      const storeMonthlyExpenses = calculateProrationForStore(storeId);
      const storeExpenses = storeDailyExpenses + storeMonthlyExpenses;

      return {
        storeId,
        storeName: storeMap.get(storeId) || 'Unknown',
        sales: storeSales,
        purchase: storePurchase,
        laborCost: storeLaborCost,
        expenses: storeExpenses,
        profit: storeSales - storeExpenses,
        profitMargin: storeSales > 0 ? ((storeSales - storeExpenses) / storeSales) * 100 : 0,
        costRate: storeSales > 0 ? (storePurchase / storeSales) * 100 : 0,
        laborRate: storeSales > 0 ? ((storeLaborCost + storeMonthlyExpenses) / storeSales) * 100 : 0,
      };
    });

    const prompt = `あなたは飲食チェーンの経営コンサルタントです。以下のデータを分析し、${reportType === 'weekly' ? '週次' : '月次'}レポートを作成してください。

期間: ${startDate} から ${endDate}
対象店舗: ${storeId ? storeMap.get(storeId) : '全店舗'}

【総合指標】
- 総売上: ${totalSales.toLocaleString('ja-JP')}円
- 総経費: ${totalExpenses.toLocaleString('ja-JP')}円
- 粗利益: ${grossProfit.toLocaleString('ja-JP')}円
- 営業利益: ${operatingProfit.toLocaleString('ja-JP')}円
- 利益率: ${profitMargin.toFixed(1)}%
- 原価率: ${costRate.toFixed(1)}%
- 人件費率: ${laborRate.toFixed(1)}%

【店舗別内訳】
${storeBreakdown.map(s => `
${s.storeName}:
  売上: ${s.sales.toLocaleString('ja-JP')}円
  経費: ${s.expenses.toLocaleString('ja-JP')}円
  利益: ${s.profit.toLocaleString('ja-JP')}円
  利益率: ${s.profitMargin.toFixed(1)}%
  原価率: ${s.costRate.toFixed(1)}%
  人件費率: ${s.laborRate.toFixed(1)}%`).join('')}

以下の形式でJSONレスポンスを返してください:
{
  "title": "レポートのタイトル",
  "summary": "経営者向けのエグゼクティブサマリー（200-300文字）",
  "keyInsights": ["重要な発見1", "重要な発見2", "重要な発見3"],
  "recommendations": ["具体的な改善提案1", "具体的な改善提案2", "具体的な改善提案3"],
  "analysis": {
    "salesTrend": "売上トレンドの分析",
    "profitability": "収益性の分析",
    "costStructure": "コスト構造の分析",
    "storeComparison": "店舗間比較の分析"
  }
}

業界標準: 原価率30-35%, 人件費率25-30%, 営業利益率15-25%を参考に、具体的で実行可能な提案をしてください。`;

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'あなたは飲食チェーン経営の専門家です。データ分析と改善提案を行います。' },
          { role: 'user', content: prompt },
        ],
        response_format: { type: 'json_object' },
        temperature: 0.7,
      }),
    });

    if (!openaiResponse.ok) {
      throw new Error(`OpenAI API error: ${openaiResponse.statusText}`);
    }

    const aiResult = await openaiResponse.json();
    const aiContent = JSON.parse(aiResult.choices[0].message.content);

    const reportData = {
      store_id: storeId || null,
      report_type: reportType,
      period_start: startDate,
      period_end: endDate,
      title: aiContent.title || `${reportType === 'weekly' ? '週次' : '月次'}業績レポート`,
      summary: aiContent.summary || '',
      analysis_content: aiContent.analysis || {},
      key_insights: aiContent.keyInsights || [],
      recommendations: aiContent.recommendations || [],
      metrics: {
        totalSales,
        totalExpenses,
        grossProfit,
        operatingProfit,
        profitMargin,
        costRate,
        laborRate,
        storeBreakdown,
      },
      generated_by: 'gpt-4o-mini',
      generated_at: new Date().toISOString(),
    };

    const { data: report, error: insertError } = await supabase
      .from('ai_generated_reports')
      .insert(reportData)
      .select()
      .single();

    if (insertError) {
      throw new Error(`Failed to insert report: ${insertError.message}`);
    }

    await supabase
      .from('report_generation_logs')
      .update({
        status: 'success',
        report_id: report.id,
        completed_at: new Date().toISOString(),
        data_summary: { reportCount: reports.length, storeCount: storeIds.length },
      })
      .eq('id', logId);

    return new Response(
      JSON.stringify({ success: true, report }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Report generation error:', error);
    return new Response(
      JSON.stringify({ success: false, error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
```

===========================================
エクスポート完了
===========================================

このファイルには、AI分析レポート機能に関するすべての
フロントエンドおよびバックエンドのコードが含まれています。

主要機能:
- レポート生成（週次・月次）
- レポート一覧表示
- レポート詳細表示
- レポート削除
- レポート共有（共有リンク生成）
- レポートエクスポート（テキスト形式）
- リアルタイム通知
- OpenAI GPT-4o-mini による分析

データベーステーブル:
- ai_generated_reports
- report_schedules
- report_generation_logs
