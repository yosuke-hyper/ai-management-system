// Auto-generated file containing all project files
// Generated on: 2025-10-24T09:34:05.687Z

export const projectFiles: Record<string, string> = {
  "ai-management-system.zip": "[DUMMY FILE CONTENT]",
  "api/main.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\n飲食店業務報告システム - Python API Server\nGoogle Sheets連携とLINE Bot機能を提供\n\"\"\"\n\nimport os\nimport json\nimport logging\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\nfrom dataclasses import dataclass, asdict\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\n\n# Pythonの標準ライブラリのみを使用（WebContainer制限のため）\nimport urllib.request\nimport urllib.parse\nimport sqlite3\nfrom pathlib import Path\n\napp = Flask(__name__)\nCORS(app)\n\n# ログ設定\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# 設定\nGOOGLE_SHEETS_API_KEY = os.environ.get('GOOGLE_SHEETS_API_KEY', '')\nGOOGLE_SHEET_ID = os.environ.get('GOOGLE_SHEET_ID', '')\nLINE_CHANNEL_SECRET = os.environ.get('LINE_CHANNEL_SECRET', '')\nLINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN', '')\n\n# データモデル\n@dataclass\nclass DailyReport:\n    id: str\n    date: str\n    store_name: str\n    staff_name: str\n    sales: float\n    purchase: float\n    labor_cost: float\n    utilities: float\n    promotion: float\n    cleaning: float\n    misc: float\n    communication: float\n    others: float\n    report_text: str\n    created_at: str\n    line_user_id: Optional[str] = None\n\nclass DatabaseManager:\n    \"\"\"SQLite データベース管理（Google Sheets移行前の一時データ保存）\"\"\"\n    \n    def __init__(self, db_path: str = \"/tmp/reports.db\"):\n        self.db_path = db_path\n        self._init_db()\n    \n    def _init_db(self):\n        \"\"\"データベース初期化\"\"\"\n        with sqlite3.connect(self.db_path) as conn:\n            conn.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS daily_reports (\n                    id TEXT PRIMARY KEY,\n                    date TEXT NOT NULL,\n                    store_name TEXT NOT NULL,\n                    staff_name TEXT NOT NULL,\n                    sales REAL NOT NULL,\n                    purchase REAL NOT NULL,\n                    labor_cost REAL NOT NULL,\n                    utilities REAL NOT NULL,\n                    promotion REAL NOT NULL,\n                    cleaning REAL NOT NULL,\n                    misc REAL NOT NULL,\n                    communication REAL NOT NULL,\n                    others REAL NOT NULL,\n                    report_text TEXT,\n                    created_at TEXT NOT NULL,\n                    line_user_id TEXT\n                )\n            \"\"\")\n            conn.commit()\n    \n    def save_report(self, report: DailyReport) -> bool:\n        \"\"\"日次報告を保存\"\"\"\n        try:\n            with sqlite3.connect(self.db_path) as conn:\n                conn.execute(\"\"\"\n                    INSERT OR REPLACE INTO daily_reports VALUES \n                    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                \"\"\", (\n                    report.id, report.date, report.store_name, report.staff_name,\n                    report.sales, report.purchase, report.labor_cost, report.utilities,\n                    report.promotion, report.cleaning, report.misc, report.communication,\n                    report.others, report.report_text, report.created_at, report.line_user_id\n                ))\n                conn.commit()\n            return True\n        except Exception as e:\n            logger.error(f\"データベース保存エラー: {e}\")\n            return False\n    \n    def get_reports(self, start_date: str = None, end_date: str = None) -> List[DailyReport]:\n        \"\"\"日次報告を取得\"\"\"\n        query = \"SELECT * FROM daily_reports\"\n        params = []\n        \n        if start_date and end_date:\n            query += \" WHERE date BETWEEN ? AND ?\"\n            params = [start_date, end_date]\n        \n        query += \" ORDER BY date DESC, created_at DESC\"\n        \n        with sqlite3.connect(self.db_path) as conn:\n            cursor = conn.execute(query, params)\n            rows = cursor.fetchall()\n            \n            reports = []\n            for row in rows:\n                report = DailyReport(\n                    id=row[0], date=row[1], store_name=row[2], staff_name=row[3],\n                    sales=row[4], purchase=row[5], labor_cost=row[6], utilities=row[7],\n                    promotion=row[8], cleaning=row[9], misc=row[10], communication=row[11],\n                    others=row[12], report_text=row[13], created_at=row[14], line_user_id=row[15]\n                )\n                reports.append(report)\n            \n            return reports\n\nclass GoogleSheetsAPI:\n    \"\"\"Google Sheets API クライアント\"\"\"\n    \n    def __init__(self, api_key: str, sheet_id: str):\n        self.api_key = api_key\n        self.sheet_id = sheet_id\n        self.base_url = \"https://sheets.googleapis.com/v4/spreadsheets\"\n    \n    def append_row(self, sheet_name: str, values: List[str]) -> bool:\n        \"\"\"シートに行を追加\"\"\"\n        if not self.api_key:\n            logger.warning(\"Google Sheets API キーが設定されていません\")\n            return False\n            \n        try:\n            url = f\"{self.base_url}/{self.sheet_id}/values/{sheet_name}:append\"\n            params = {\n                'key': self.api_key,\n                'valueInputOption': 'USER_ENTERED'\n            }\n            \n            data = {\n                'values': [values]\n            }\n            \n            # HTTP POST リクエスト\n            req_data = json.dumps(data).encode('utf-8')\n            req = urllib.request.Request(\n                url + '?' + urllib.parse.urlencode(params),\n                data=req_data,\n                headers={'Content-Type': 'application/json'}\n            )\n            \n            with urllib.request.urlopen(req) as response:\n                result = json.loads(response.read().decode('utf-8'))\n                logger.info(f\"Google Sheets更新成功: {result}\")\n                return True\n                \n        except Exception as e:\n            logger.error(f\"Google Sheets更新エラー: {e}\")\n            return False\n\n# グローバルインスタンス\ndb_manager = DatabaseManager()\nsheets_api = GoogleSheetsAPI(GOOGLE_SHEETS_API_KEY, GOOGLE_SHEET_ID)\n\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    \"\"\"ヘルスチェック\"\"\"\n    return jsonify({\n        'status': 'ok',\n        'timestamp': datetime.now().isoformat(),\n        'google_sheets_configured': bool(GOOGLE_SHEETS_API_KEY and GOOGLE_SHEET_ID),\n        'line_configured': bool(LINE_CHANNEL_SECRET and LINE_CHANNEL_ACCESS_TOKEN)\n    })\n\n@app.route('/api/reports', methods=['GET'])\ndef get_reports():\n    \"\"\"日次報告一覧取得\"\"\"\n    start_date = request.args.get('start_date')\n    end_date = request.args.get('end_date')\n    \n    reports = db_manager.get_reports(start_date, end_date)\n    return jsonify([asdict(report) for report in reports])\n\n@app.route('/api/reports', methods=['POST'])\ndef create_report():\n    \"\"\"日次報告作成\"\"\"\n    try:\n        data = request.get_json()\n        \n        report = DailyReport(\n            id=f\"{data['date']}_{data['store_name']}_{datetime.now().strftime('%H%M%S')}\",\n            date=data['date'],\n            store_name=data['store_name'],\n            staff_name=data.get('staff_name', ''),\n            sales=float(data['sales']),\n            purchase=float(data['purchase']),\n            labor_cost=float(data.get('labor_cost', 0)),\n            utilities=float(data.get('utilities', 0)),\n            promotion=float(data.get('promotion', 0)),\n            cleaning=float(data.get('cleaning', 0)),\n            misc=float(data.get('misc', 0)),\n            communication=float(data.get('communication', 0)),\n            others=float(data.get('others', 0)),\n            report_text=data.get('report_text', ''),\n            created_at=datetime.now().isoformat(),\n            line_user_id=data.get('line_user_id')\n        )\n        \n        # SQLiteに保存\n        if db_manager.save_report(report):\n            # Google Sheetsにも保存を試行\n            sheets_values = [\n                report.date, report.store_name, report.staff_name,\n                str(report.sales), str(report.purchase), str(report.labor_cost),\n                str(report.utilities), str(report.promotion), str(report.cleaning),\n                str(report.misc), str(report.communication), str(report.others),\n                report.report_text, report.created_at\n            ]\n            \n            sheets_success = sheets_api.append_row('daily_reports', sheets_values)\n            \n            return jsonify({\n                'success': True,\n                'id': report.id,\n                'saved_to_sheets': sheets_success\n            }), 201\n        else:\n            return jsonify({'success': False, 'error': 'データベース保存に失敗'}), 500\n            \n    except Exception as e:\n        logger.error(f\"報告作成エラー: {e}\")\n        return jsonify({'success': False, 'error': str(e)}), 400\n\n@app.route('/api/summary', methods=['GET'])\ndef get_summary():\n    \"\"\"集計データ取得\"\"\"\n    period_type = request.args.get('period_type', 'daily')\n    start_date = request.args.get('start_date')\n    end_date = request.args.get('end_date')\n    \n    reports = db_manager.get_reports(start_date, end_date)\n    \n    # 期間別集計処理\n    summary_data = calculate_summary(reports, period_type)\n    \n    return jsonify(summary_data)\n\ndef calculate_summary(reports: List[DailyReport], period_type: str) -> Dict:\n    \"\"\"集計計算\"\"\"\n    if not reports:\n        return {'periods': [], 'totals': {}}\n    \n    # 期間別にグループ化\n    periods = {}\n    \n    for report in reports:\n        if period_type == 'daily':\n            key = report.date\n        elif period_type == 'weekly':\n            # 週の開始日を計算\n            date_obj = datetime.strptime(report.date, '%Y-%m-%d')\n            week_start = date_obj - timedelta(days=date_obj.weekday())\n            key = week_start.strftime('%Y-%m-%d')\n        else:  # monthly\n            key = report.date[:7]  # YYYY-MM\n        \n        if key not in periods:\n            periods[key] = {\n                'period': key,\n                'total_sales': 0,\n                'total_expenses': 0,\n                'total_purchase': 0\n            }\n        \n        # 経費合計\n        total_expenses = (report.purchase + report.labor_cost + report.utilities + \n                         report.promotion + report.cleaning + report.misc + \n                         report.communication + report.others)\n        \n        periods[key]['total_sales'] += report.sales\n        periods[key]['total_expenses'] += total_expenses\n        periods[key]['total_purchase'] += report.purchase\n    \n    # 利益計算\n    for period_data in periods.values():\n        period_data['gross_profit'] = period_data['total_sales'] - period_data['total_purchase']\n        period_data['operating_profit'] = period_data['total_sales'] - period_data['total_expenses']\n        period_data['profit_margin'] = (\n            period_data['operating_profit'] / period_data['total_sales'] * 100\n            if period_data['total_sales'] > 0 else 0\n        )\n    \n    return {\n        'periods': list(periods.values()),\n        'totals': {\n            'total_sales': sum(p['total_sales'] for p in periods.values()),\n            'total_expenses': sum(p['total_expenses'] for p in periods.values()),\n            'gross_profit': sum(p['gross_profit'] for p in periods.values()),\n            'operating_profit': sum(p['operating_profit'] for p in periods.values()),\n        }\n    }\n\n@app.route('/api/line/webhook', methods=['POST'])\ndef line_webhook():\n    \"\"\"LINE Webhook エンドポイント\"\"\"\n    # 今後LINE Bot機能を実装\n    return jsonify({'status': 'received'}), 200\n\nif __name__ == '__main__':\n    port = int(os.environ.get('PORT', 8000))\n    app.run(host='0.0.0.0', port=port, debug=True)",
  "eslint.config.js": "import js from '@eslint/js';\nimport globals from 'globals';\nimport reactHooks from 'eslint-plugin-react-hooks';\nimport reactRefresh from 'eslint-plugin-react-refresh';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  { ignores: ['dist'] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: ['**/*.{ts,tsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  }\n);\n",
  "netlify.toml": "[build]\n  command = \"npm run build\"\n  publish = \"dist\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    X-Content-Type-Options = \"nosniff\"\n    X-Frame-Options = \"DENY\"\n    X-XSS-Protection = \"1; mode=block\"\n    Referrer-Policy = \"strict-origin-when-cross-origin\"\n    Permissions-Policy = \"geolocation=(), microphone=(), camera=()\"\n\n[[headers]]\n  for = \"/assets/*\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n",
  "package.json": "{\n  \"name\": \"ai-management-system\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"node scripts/generate-project-files.cjs && vite build\",\n    \"preview\": \"vite preview\",\n    \"generate-files\": \"node scripts/generate-project-files.cjs\"\n  },\n  \"dependencies\": {\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.2\",\n    \"@radix-ui/react-progress\": \"^1.1.7\",\n    \"@radix-ui/react-slot\": \"^1.2.3\",\n    \"@radix-ui/react-tabs\": \"^1.1.13\",\n    \"@supabase/supabase-js\": \"^2.39.3\",\n    \"@tanstack/react-table\": \"^8.20.5\",\n    \"chart.js\": \"^4.5.0\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"date-fns\": \"^4.1.0\",\n    \"file-saver\": \"^2.0.5\",\n    \"jszip\": \"^3.10.1\",\n    \"lucide-react\": \"^0.544.0\",\n    \"react\": \"^18.3.1\",\n    \"react-chartjs-2\": \"^5.3.0\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-router-dom\": \"^6.28.0\",\n    \"recharts\": \"^3.2.0\",\n    \"tailwind-merge\": \"^3.3.1\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.9.1\",\n    \"@types/archiver\": \"^6.0.4\",\n    \"@types/file-saver\": \"^2.0.7\",\n    \"@types/react\": \"^18.3.5\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"archiver\": \"^7.0.1\",\n    \"autoprefixer\": \"^10.4.18\",\n    \"eslint\": \"^9.9.1\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0-rc.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.11\",\n    \"globals\": \"^15.9.0\",\n    \"postcss\": \"^8.4.35\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"terser\": \"^5.44.0\",\n    \"typescript\": \"^5.5.3\",\n    \"typescript-eslint\": \"^8.3.0\",\n    \"vite\": \"^5.4.2\"\n  }\n}\n",
  "postcss.config.js": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n",
  "scripts/create-zip.cjs": "const fs = require('fs');\nconst path = require('path');\nconst archiver = require('archiver');\n\nconst projectRoot = path.join(__dirname, '..');\nconst outputPath = path.join(projectRoot, 'ai-management-system.zip');\n\nif (fs.existsSync(outputPath)) {\n  fs.unlinkSync(outputPath);\n}\n\nconst output = fs.createWriteStream(outputPath);\nconst archive = archiver('zip', {\n  zlib: { level: 9 }\n});\n\noutput.on('close', function() {\n  const sizeMB = (archive.pointer() / 1024 / 1024).toFixed(2);\n  console.log(`✓ ZIPファイルを作成しました: ${outputPath}`);\n  console.log(`  ファイルサイズ: ${sizeMB} MB`);\n  console.log(`  合計ファイル数: ${archive.pointer()} bytes`);\n});\n\narchive.on('error', function(err) {\n  throw err;\n});\n\narchive.pipe(output);\n\nconst filesToExclude = [\n  'node_modules',\n  'dist',\n  '.git',\n  '.bolt',\n  'ai-management-system.zip',\n  '.DS_Store',\n  'vite.config.ts.timestamp-*'\n];\n\nfunction shouldInclude(filePath) {\n  const relativePath = path.relative(projectRoot, filePath);\n\n  for (const exclude of filesToExclude) {\n    if (relativePath.includes(exclude)) {\n      return false;\n    }\n  }\n\n  if (relativePath.startsWith('.env') && relativePath !== '.env.example' && relativePath !== '.env.production.example') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction addDirectory(dirPath) {\n  const items = fs.readdirSync(dirPath);\n\n  for (const item of items) {\n    const fullPath = path.join(dirPath, item);\n\n    if (!shouldInclude(fullPath)) {\n      continue;\n    }\n\n    const stat = fs.statSync(fullPath);\n    const relativePath = path.relative(projectRoot, fullPath);\n\n    if (stat.isDirectory()) {\n      addDirectory(fullPath);\n    } else if (stat.isFile()) {\n      archive.file(fullPath, { name: relativePath });\n    }\n  }\n}\n\nconsole.log('プロジェクトファイルをZIPに追加中...');\naddDirectory(projectRoot);\n\narchive.finalize();\n",
  "scripts/generate-project-files.cjs": "const fs = require('fs');\nconst path = require('path');\n\nconst projectRoot = path.join(__dirname, '..');\nconst outputFile = path.join(projectRoot, 'src', 'lib', 'projectFiles.ts');\n\nconst excludePaths = [\n  'node_modules',\n  'dist',\n  '.git',\n  '.env',\n  '.env.local',\n  'package-lock.json',\n  'vite.config.ts.timestamp',\n  'src/lib/projectFiles.ts',\n  '.bolt',\n  'scripts/verify-production.sh'\n];\n\nconst excludeExtensions = [\n  '.md',\n  '.txt',\n  '.html'\n];\n\nfunction shouldExclude(filePath) {\n  if (excludePaths.some(exclude => filePath.includes(exclude))) {\n    return true;\n  }\n\n  const ext = path.extname(filePath);\n  if (excludeExtensions.includes(ext)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction readFilesRecursively(dir, baseDir = dir) {\n  const files = {};\n  \n  try {\n    const items = fs.readdirSync(dir);\n    \n    for (const item of items) {\n      const fullPath = path.join(dir, item);\n      const relativePath = path.relative(baseDir, fullPath);\n      \n      if (shouldExclude(fullPath)) {\n        continue;\n      }\n      \n      const stat = fs.statSync(fullPath);\n      \n      if (stat.isDirectory()) {\n        Object.assign(files, readFilesRecursively(fullPath, baseDir));\n      } else if (stat.isFile()) {\n        try {\n          const content = fs.readFileSync(fullPath, 'utf8');\n          files[relativePath] = content;\n        } catch (err) {\n          console.warn(`Warning: Could not read ${relativePath}`);\n        }\n      }\n    }\n  } catch (err) {\n    console.error(`Error reading directory ${dir}:`, err.message);\n  }\n  \n  return files;\n}\n\nconst allFiles = readFilesRecursively(projectRoot);\n\nconst tsContent = `// Auto-generated file containing all project files\n// Generated on: ${new Date().toISOString()}\n\nexport const projectFiles: Record<string, string> = ${JSON.stringify(allFiles, null, 2)};\n`;\n\nfs.writeFileSync(outputFile, tsContent, 'utf8');\nconsole.log(`Generated ${outputFile} with ${Object.keys(allFiles).length} files`);\n",
  "src/App.tsx": "import React from 'react'\nimport { Routes, Route, Navigate, useLocation } from 'react-router-dom'\nimport { MainLayout } from './layout/MainLayout'\nimport { LoginForm } from './components/Auth/LoginForm'\nimport { DashboardDaily } from './pages/DashboardDaily'\nimport { DashboardWeekly } from './pages/DashboardWeekly'\nimport { DashboardMonthly } from './pages/DashboardMonthly'\nimport { Targets } from './pages/Targets'\nimport { AIChatPage } from './pages/AIChatPage'\nimport { AdminSettings } from './pages/AdminSettings'\nimport { StaffManagement } from './pages/StaffManagement'\nimport { ReportForm } from './pages/ReportForm'\nimport { MonthlyExpenseForm } from './pages/MonthlyExpenseForm'\nimport { AIReportsPage } from './pages/AIReportsPage'\nimport { OrganizationSettings } from './pages/OrganizationSettings'\nimport { InvitationAccept } from './pages/InvitationAccept'\nimport SharedReport from './pages/SharedReport'\nimport { TermsOfService } from './pages/TermsOfService'\nimport { PrivacyPolicy } from './pages/PrivacyPolicy'\nimport { ProjectDownload } from './pages/ProjectDownload'\nimport { useAuth } from './contexts/AuthContext'\nimport { OrganizationProvider } from './contexts/OrganizationContext'\n\nconst Spinner: React.FC<{ msg?: string }> = ({ msg = '認証処理中です...' }) => (\n  <div className=\"flex items-center justify-center min-h-screen bg-slate-50\">\n    <div className=\"text-center\">\n      <div className=\"animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-4\"></div>\n      <p className=\"text-slate-600 text-lg\">{msg}</p>\n    </div>\n  </div>\n)\n\nconst AuthGate: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { isInitialized, isAuthenticated } = useAuth()\n  const loc = useLocation()\n  const inCallback =\n    loc.pathname === '/auth/callback' ||\n    loc.search.includes('code=') || loc.search.includes('state=') ||\n    loc.hash.includes('access_token=')\n\n  if (!isInitialized || inCallback) return <Spinner />\n  if (!isAuthenticated) return <Navigate to=\"/login\" replace />\n  return <>{children}</>\n}\n\nexport default function App() {\n  const { isInitialized, isAuthenticated, user } = useAuth()\n  console.log('🎯 App render:', { isInitialized, isAuthenticated })\n\n  return (\n    <OrganizationProvider userId={user?.id || null}>\n      <Routes>\n        <Route path=\"/auth/callback\" element={<Spinner />} />\n\n        <Route path=\"/share/report/:shareToken\" element={<SharedReport />} />\n        <Route path=\"/invite/:token\" element={<InvitationAccept />} />\n        <Route path=\"/terms\" element={<TermsOfService />} />\n        <Route path=\"/privacy\" element={<PrivacyPolicy />} />\n        <Route path=\"/download\" element={<ProjectDownload />} />\n\n        <Route path=\"/login\" element={isAuthenticated ? <Navigate to=\"/dashboard/daily\" replace /> : <LoginForm />} />\n\n        <Route path=\"/\" element={<AuthGate><MainLayout /></AuthGate>}>\n          <Route index element={<Navigate to=\"/dashboard/daily\" replace />} />\n          <Route path=\"dashboard/daily\" element={<DashboardDaily />} />\n          <Route path=\"dashboard/weekly\" element={<DashboardWeekly />} />\n          <Route path=\"dashboard/monthly\" element={<DashboardMonthly />} />\n          <Route path=\"targets\" element={<Targets />} />\n          <Route path=\"chat\" element={<AIChatPage />} />\n          <Route path=\"ai-reports\" element={<AIReportsPage />} />\n          <Route path=\"admin\" element={<AdminSettings />} />\n          <Route path=\"staff\" element={<StaffManagement />} />\n          <Route path=\"organization\" element={<OrganizationSettings />} />\n          <Route path=\"report/new\" element={<ReportForm />} />\n          <Route path=\"report\" element={<ReportForm />} />\n          <Route path=\"expenses/monthly\" element={<MonthlyExpenseForm />} />\n        </Route>\n\n        <Route path=\"*\" element={<Navigate to={isAuthenticated ? '/dashboard/daily' : '/login'} replace />} />\n      </Routes>\n    </OrganizationProvider>\n  )\n}\n",
  "src/components/Admin/AIUsageLimitManagement.tsx": "import React, { useState, useEffect } from 'react'\nimport { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { supabase } from '@/lib/supabase'\nimport { Brain, Save, RotateCcw, AlertCircle } from 'lucide-react'\n\ninterface UsageSetting {\n  role: 'admin' | 'manager' | 'staff'\n  daily_limit: number\n  enabled: boolean\n}\n\ninterface UsageTracking {\n  user_id: string\n  user_name: string\n  user_role: string\n  usage_date: string\n  request_count: number\n}\n\nexport const AIUsageLimitManagement: React.FC = () => {\n  const [settings, setSettings] = useState<UsageSetting[]>([])\n  const [usageData, setUsageData] = useState<UsageTracking[]>([])\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null)\n\n  const loadSettings = async () => {\n    if (!supabase) return\n\n    try {\n      const { data, error } = await supabase\n        .from('ai_usage_settings')\n        .select('*')\n        .order('role')\n\n      if (error) throw error\n\n      setSettings(data || [])\n    } catch (err) {\n      console.error('Failed to load settings:', err)\n    }\n  }\n\n  const loadUsageData = async () => {\n    if (!supabase) return\n\n    try {\n      const today = new Date().toISOString().split('T')[0]\n\n      const { data, error } = await supabase\n        .from('ai_usage_tracking')\n        .select(`\n          user_id,\n          usage_date,\n          request_count,\n          profiles!inner(name, role)\n        `)\n        .eq('usage_date', today)\n        .order('request_count', { ascending: false })\n\n      if (error) throw error\n\n      const formatted = (data || []).map((item: any) => ({\n        user_id: item.user_id,\n        user_name: item.profiles?.name || '不明',\n        user_role: item.profiles?.role || 'staff',\n        usage_date: item.usage_date,\n        request_count: item.request_count\n      }))\n\n      setUsageData(formatted)\n    } catch (err) {\n      console.error('Failed to load usage data:', err)\n    }\n  }\n\n  useEffect(() => {\n    const load = async () => {\n      setLoading(true)\n      await Promise.all([loadSettings(), loadUsageData()])\n      setLoading(false)\n    }\n    load()\n  }, [])\n\n  const handleSave = async () => {\n    if (!supabase) return\n\n    setSaving(true)\n    setMessage(null)\n\n    try {\n      for (const setting of settings) {\n        const { error } = await supabase\n          .from('ai_usage_settings')\n          .update({\n            daily_limit: setting.daily_limit,\n            enabled: setting.enabled\n          })\n          .eq('role', setting.role)\n\n        if (error) throw error\n      }\n\n      setMessage({ type: 'success', text: '設定を保存しました' })\n      setTimeout(() => setMessage(null), 3000)\n    } catch (err) {\n      console.error('Failed to save settings:', err)\n      setMessage({ type: 'error', text: '設定の保存に失敗しました' })\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handleResetUser = async (userId: string, userName: string) => {\n    if (!supabase) return\n\n    if (!confirm(`${userName}さんの本日の使用回数をリセットしますか？`)) {\n      return\n    }\n\n    try {\n      const { data, error } = await supabase.rpc('reset_user_daily_usage', {\n        p_user_id: userId\n      })\n\n      if (error) throw error\n\n      if (data?.success) {\n        setMessage({ type: 'success', text: `${userName}さんの使用回数をリセットしました` })\n        await loadUsageData()\n        setTimeout(() => setMessage(null), 3000)\n      } else {\n        throw new Error(data?.message || 'リセットに失敗しました')\n      }\n    } catch (err) {\n      console.error('Failed to reset usage:', err)\n      setMessage({ type: 'error', text: `リセットに失敗しました: ${err}` })\n    }\n  }\n\n  const updateSetting = (role: string, field: 'daily_limit' | 'enabled', value: number | boolean) => {\n    setSettings(prev =>\n      prev.map(s => (s.role === role ? { ...s, [field]: value } : s))\n    )\n  }\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return '管理者'\n      case 'manager':\n        return '店長'\n      case 'staff':\n        return 'スタッフ'\n      default:\n        return role\n    }\n  }\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'bg-purple-100 text-purple-700 border-purple-300'\n      case 'manager':\n        return 'bg-blue-100 text-blue-700 border-blue-300'\n      case 'staff':\n        return 'bg-green-100 text-green-700 border-green-300'\n      default:\n        return 'bg-gray-100 text-gray-700 border-gray-300'\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-12\">\n        <div className=\"text-center\">\n          <Brain className=\"w-8 h-8 animate-spin mx-auto mb-2 text-blue-600\" />\n          <p className=\"text-sm text-muted-foreground\">読み込み中...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {message && (\n        <div\n          className={`p-4 rounded-lg border ${\n            message.type === 'success'\n              ? 'bg-green-50 border-green-200 text-green-700'\n              : 'bg-red-50 border-red-200 text-red-700'\n          }`}\n        >\n          <div className=\"flex items-center gap-2\">\n            <AlertCircle className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">{message.text}</span>\n          </div>\n        </div>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-blue-600\" />\n            ロール別AI使用制限設定\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            各ロールごとに1日あたりのAI利用回数の上限を設定できます。午前0時（日本時間）にリセットされます。\n          </p>\n\n          {settings.map(setting => (\n            <div key={setting.role} className=\"p-4 border rounded-lg space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge className={getRoleBadgeColor(setting.role)}>\n                    {getRoleLabel(setting.role)}\n                  </Badge>\n                  <span className=\"text-sm font-medium\">\n                    {setting.role === 'admin' ? '（無制限固定）' : ''}\n                  </span>\n                </div>\n                <label className=\"flex items-center gap-2 text-sm\">\n                  <input\n                    type=\"checkbox\"\n                    checked={setting.enabled}\n                    onChange={e => updateSetting(setting.role, 'enabled', e.target.checked)}\n                    className=\"w-4 h-4 rounded border-gray-300\"\n                  />\n                  <span>制限を有効化</span>\n                </label>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <label className=\"text-sm font-medium min-w-[100px]\">1日の上限:</label>\n                {setting.role === 'admin' ? (\n                  <div className=\"flex items-center gap-2\">\n                    <input\n                      type=\"text\"\n                      value=\"無制限\"\n                      disabled\n                      className=\"px-3 py-2 border rounded-md bg-gray-100 text-gray-600 w-32\"\n                    />\n                    <span className=\"text-xs text-muted-foreground\">\n                      管理者は常に無制限です\n                    </span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"1000\"\n                      value={setting.daily_limit}\n                      onChange={e =>\n                        updateSetting(setting.role, 'daily_limit', parseInt(e.target.value) || 1)\n                      }\n                      className=\"px-3 py-2 border rounded-md w-32\"\n                    />\n                    <span className=\"text-sm text-muted-foreground\">回 / 日</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button onClick={handleSave} disabled={saving} className=\"gap-2\">\n              <Save className=\"w-4 h-4\" />\n              {saving ? '保存中...' : '設定を保存'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-blue-600\" />\n            本日の使用状況\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {usageData.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p className=\"text-sm\">本日の使用データはまだありません</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead className=\"border-b\">\n                  <tr className=\"text-left\">\n                    <th className=\"pb-2 font-medium\">ユーザー</th>\n                    <th className=\"pb-2 font-medium\">ロール</th>\n                    <th className=\"pb-2 font-medium text-right\">使用回数</th>\n                    <th className=\"pb-2 font-medium text-right\">操作</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {usageData.map(user => {\n                    const setting = settings.find(s => s.role === user.user_role)\n                    const limit = setting?.daily_limit || 0\n                    const isUnlimited = limit === -1\n\n                    return (\n                      <tr key={user.user_id} className=\"border-b\">\n                        <td className=\"py-3\">{user.user_name}</td>\n                        <td className=\"py-3\">\n                          <Badge className={getRoleBadgeColor(user.user_role)}>\n                            {getRoleLabel(user.user_role)}\n                          </Badge>\n                        </td>\n                        <td className=\"py-3 text-right\">\n                          <span\n                            className={\n                              !isUnlimited && user.request_count >= limit\n                                ? 'text-red-600 font-medium'\n                                : ''\n                            }\n                          >\n                            {user.request_count}回\n                            {!isUnlimited && ` / ${limit}回`}\n                          </span>\n                        </td>\n                        <td className=\"py-3 text-right\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleResetUser(user.user_id, user.user_name)}\n                            className=\"gap-1\"\n                          >\n                            <RotateCcw className=\"w-3 h-3\" />\n                            リセット\n                          </Button>\n                        </td>\n                      </tr>\n                    )\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
  "src/components/Admin/AuditLogViewer.tsx": "import React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport {\n  Shield,\n  Filter,\n  Download,\n  RefreshCw,\n  ChevronDown,\n  ChevronUp,\n  CheckCircle,\n  XCircle,\n  Search\n} from 'lucide-react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { getCurrentUserOrganizationId } from '@/services/organizationService'\nimport {\n  getAuditLogs,\n  getAuditLogStats,\n  getActionLabel,\n  getResourceTypeLabel,\n  AuditLogEntry,\n  AuditLogFilters,\n  AuditAction,\n  ResourceType\n} from '@/services/auditLog'\nimport { format } from 'date-fns'\nimport { ja } from 'date-fns/locale'\n\nexport const AuditLogViewer: React.FC = () => {\n  const { user } = useAuth()\n  const [logs, setLogs] = useState<AuditLogEntry[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [expandedLog, setExpandedLog] = useState<string | null>(null)\n  const [filters, setFilters] = useState<AuditLogFilters>({\n    limit: 50,\n    offset: 0\n  })\n  const [stats, setStats] = useState({\n    totalLogs: 0,\n    successCount: 0,\n    failureCount: 0\n  })\n\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedAction, setSelectedAction] = useState<AuditAction | ''>('')\n  const [selectedResourceType, setSelectedResourceType] = useState<ResourceType | ''>('')\n  const [selectedStatus, setSelectedStatus] = useState<'success' | 'failure' | ''>('')\n\n  useEffect(() => {\n    loadLogs()\n    loadStats()\n  }, [user, filters])\n\n  const loadLogs = async () => {\n    if (!user?.id) return\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const organizationId = await getCurrentUserOrganizationId(user.id)\n      if (!organizationId) {\n        setError('組織が見つかりません')\n        return\n      }\n\n      const { data, error: fetchError } = await getAuditLogs(organizationId, filters)\n\n      if (fetchError) {\n        setError('監査ログの取得に失敗しました')\n        return\n      }\n\n      setLogs(data || [])\n    } catch (err) {\n      setError('監査ログの取得に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadStats = async () => {\n    if (!user?.id) return\n\n    const organizationId = await getCurrentUserOrganizationId(user.id)\n    if (!organizationId) return\n\n    const statsData = await getAuditLogStats(organizationId)\n    setStats(statsData)\n  }\n\n  const applyFilters = () => {\n    setFilters({\n      ...filters,\n      action: selectedAction || undefined,\n      resourceType: selectedResourceType || undefined,\n      status: selectedStatus || undefined,\n      offset: 0\n    })\n  }\n\n  const clearFilters = () => {\n    setSelectedAction('')\n    setSelectedResourceType('')\n    setSelectedStatus('')\n    setSearchTerm('')\n    setFilters({\n      limit: 50,\n      offset: 0\n    })\n  }\n\n  const exportLogs = () => {\n    const csv = [\n      ['日時', 'ユーザーID', 'アクション', 'リソース', 'ステータス', '詳細'].join(','),\n      ...logs.map((log) =>\n        [\n          format(new Date(log.created_at), 'yyyy-MM-dd HH:mm:ss'),\n          log.user_id || 'システム',\n          getActionLabel(log.action),\n          `${getResourceTypeLabel(log.resource_type)} (${log.resource_id || 'N/A'})`,\n          log.status === 'success' ? '成功' : '失敗',\n          JSON.stringify(log.details)\n        ].join(',')\n      )\n    ].join('\\n')\n\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })\n    const link = document.createElement('a')\n    link.href = URL.createObjectURL(blob)\n    link.download = `audit-logs-${format(new Date(), 'yyyy-MM-dd')}.csv`\n    link.click()\n  }\n\n  const filteredLogs = logs.filter((log) => {\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase()\n      return (\n        log.action.toLowerCase().includes(term) ||\n        log.resource_type.toLowerCase().includes(term) ||\n        log.resource_id?.toLowerCase().includes(term) ||\n        log.user_id?.toLowerCase().includes(term)\n      )\n    }\n    return true\n  })\n\n  const actions: AuditAction[] = [\n    'user.created',\n    'user.updated',\n    'user.deleted',\n    'user.invited',\n    'user.role_changed',\n    'store.created',\n    'store.updated',\n    'store.deleted',\n    'report.created',\n    'report.updated',\n    'report.deleted',\n    'organization.updated'\n  ]\n\n  const resourceTypes: ResourceType[] = ['user', 'store', 'report', 'organization', 'auth']\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">総ログ数</p>\n                <p className=\"text-2xl font-bold text-slate-900\">{stats.totalLogs}</p>\n              </div>\n              <Shield className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">成功</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.successCount}</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">失敗</p>\n                <p className=\"text-2xl font-bold text-red-600\">{stats.failureCount}</p>\n              </div>\n              <XCircle className=\"w-8 h-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              監査ログ\n            </CardTitle>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={loadLogs}\n                disabled={loading}\n                className=\"bg-slate-600 hover:bg-slate-700 text-white\"\n                size=\"sm\"\n              >\n                <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                更新\n              </Button>\n              <Button\n                onClick={exportLogs}\n                disabled={logs.length === 0}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                size=\"sm\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                エクスポート\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Filter className=\"w-4 h-4 text-slate-600\" />\n                <span className=\"font-medium text-slate-700\">フィルター</span>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3 mb-3\">\n                <div>\n                  <label className=\"block text-xs font-medium text-slate-700 mb-1\">\n                    検索\n                  </label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                    <input\n                      type=\"text\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      placeholder=\"検索...\"\n                      className=\"w-full pl-10 pr-3 py-2 border border-slate-300 rounded-lg text-sm\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-xs font-medium text-slate-700 mb-1\">\n                    アクション\n                  </label>\n                  <select\n                    value={selectedAction}\n                    onChange={(e) => setSelectedAction(e.target.value as AuditAction | '')}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-lg text-sm\"\n                  >\n                    <option value=\"\">すべて</option>\n                    {actions.map((action) => (\n                      <option key={action} value={action}>\n                        {getActionLabel(action)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-xs font-medium text-slate-700 mb-1\">\n                    リソース\n                  </label>\n                  <select\n                    value={selectedResourceType}\n                    onChange={(e) =>\n                      setSelectedResourceType(e.target.value as ResourceType | '')\n                    }\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-lg text-sm\"\n                  >\n                    <option value=\"\">すべて</option>\n                    {resourceTypes.map((type) => (\n                      <option key={type} value={type}>\n                        {getResourceTypeLabel(type)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-xs font-medium text-slate-700 mb-1\">\n                    ステータス\n                  </label>\n                  <select\n                    value={selectedStatus}\n                    onChange={(e) =>\n                      setSelectedStatus(e.target.value as 'success' | 'failure' | '')\n                    }\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-lg text-sm\"\n                  >\n                    <option value=\"\">すべて</option>\n                    <option value=\"success\">成功</option>\n                    <option value=\"failure\">失敗</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={applyFilters}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  size=\"sm\"\n                >\n                  フィルター適用\n                </Button>\n                <Button\n                  onClick={clearFilters}\n                  className=\"bg-slate-200 hover:bg-slate-300 text-slate-700\"\n                  size=\"sm\"\n                >\n                  クリア\n                </Button>\n              </div>\n            </div>\n\n            {loading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                <p className=\"text-sm text-slate-600 mt-2\">読み込み中...</p>\n              </div>\n            ) : error ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-red-600\">{error}</p>\n              </div>\n            ) : filteredLogs.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-slate-600\">監査ログがありません</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {filteredLogs.map((log) => (\n                  <div\n                    key={log.id}\n                    className=\"border border-slate-200 rounded-lg hover:border-slate-300 transition-colors\"\n                  >\n                    <div\n                      className=\"p-4 cursor-pointer\"\n                      onClick={() =>\n                        setExpandedLog(expandedLog === log.id ? null : log.id)\n                      }\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"font-medium text-slate-900\">\n                              {getActionLabel(log.action)}\n                            </span>\n                            <span\n                              className={`px-2 py-0.5 rounded-full text-xs font-medium ${\n                                log.status === 'success'\n                                  ? 'bg-green-100 text-green-700'\n                                  : 'bg-red-100 text-red-700'\n                              }`}\n                            >\n                              {log.status === 'success' ? '成功' : '失敗'}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-slate-600\">\n                            <span>\n                              {getResourceTypeLabel(log.resource_type)}\n                              {log.resource_id && ` (ID: ${log.resource_id})`}\n                            </span>\n                            <span className=\"mx-2\">•</span>\n                            <span>\n                              {format(new Date(log.created_at), 'yyyy/MM/dd HH:mm:ss', {\n                                locale: ja\n                              })}\n                            </span>\n                          </div>\n                        </div>\n                        {expandedLog === log.id ? (\n                          <ChevronUp className=\"w-5 h-5 text-slate-400\" />\n                        ) : (\n                          <ChevronDown className=\"w-5 h-5 text-slate-400\" />\n                        )}\n                      </div>\n                    </div>\n\n                    {expandedLog === log.id && (\n                      <div className=\"border-t border-slate-200 p-4 bg-slate-50\">\n                        <div className=\"space-y-2 text-sm\">\n                          {log.user_id && (\n                            <div>\n                              <span className=\"font-medium text-slate-700\">ユーザーID:</span>\n                              <span className=\"ml-2 text-slate-600\">{log.user_id}</span>\n                            </div>\n                          )}\n                          {log.error_message && (\n                            <div>\n                              <span className=\"font-medium text-red-700\">エラー:</span>\n                              <span className=\"ml-2 text-red-600\">{log.error_message}</span>\n                            </div>\n                          )}\n                          {Object.keys(log.details).length > 0 && (\n                            <div>\n                              <span className=\"font-medium text-slate-700\">詳細:</span>\n                              <pre className=\"mt-1 p-2 bg-white border border-slate-200 rounded text-xs overflow-x-auto\">\n                                {JSON.stringify(log.details, null, 2)}\n                              </pre>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
  "src/components/Admin/ReportSchedulesManager.tsx": "import { useState } from 'react';\nimport { Calendar, Plus, Edit2, Trash2, Power, PowerOff, Loader2 } from 'lucide-react';\nimport { useReportSchedules, ReportSchedule } from '../../hooks/useAIReports';\nimport { useStores } from '../../hooks/useStores';\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\n\nexport function ReportSchedulesManager() {\n  const { schedules, loading, createSchedule, updateSchedule, deleteSchedule, refetch } = useReportSchedules();\n  const { stores } = useStores();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-600\" />\n      </div>\n    );\n  }\n\n  const toggleSchedule = async (schedule: ReportSchedule) => {\n    await updateSchedule(schedule.id, { is_enabled: !schedule.is_enabled });\n  };\n\n  const handleDelete = async (id: string) => {\n    if (window.confirm('このスケジュールを削除してもよろしいですか?')) {\n      await deleteSchedule(id);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n            <Calendar className=\"w-6 h-6 mr-3\" />\n            レポート自動生成スケジュール\n          </h2>\n          <p className=\"text-gray-600 mt-1\">\n            週次・月次レポートの自動生成を設定します\n          </p>\n        </div>\n\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          スケジュール追加\n        </Button>\n      </div>\n\n      {schedules.length === 0 ? (\n        <Card className=\"p-12 text-center\">\n          <Calendar className=\"w-16 h-16 mx-auto text-gray-300 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            スケジュールがありません\n          </h3>\n          <p className=\"text-gray-500 mb-6\">\n            自動レポート生成のスケジュールを追加してください\n          </p>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            最初のスケジュールを追加\n          </Button>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {schedules.map((schedule) => {\n            const storeName = schedule.store_id\n              ? stores.find((s) => s.id === schedule.store_id)?.name || '不明な店舗'\n              : '全店舗';\n\n            return (\n              <Card key={schedule.id} className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <Badge variant={schedule.report_type === 'weekly' ? 'default' : 'secondary'}>\n                        {schedule.report_type === 'weekly' ? '週次' : '月次'}\n                      </Badge>\n                      <Badge variant={schedule.is_enabled ? 'default' : 'secondary'}>\n                        {schedule.is_enabled ? '有効' : '無効'}\n                      </Badge>\n                      <span className=\"text-sm text-gray-500\">{storeName}</span>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Cron式:</span>\n                        <span className=\"ml-2 font-mono text-gray-900\">\n                          {schedule.cron_expression}\n                        </span>\n                      </div>\n\n                      {schedule.last_run_at && (\n                        <div>\n                          <span className=\"text-gray-600\">前回実行:</span>\n                          <span className=\"ml-2 text-gray-900\">\n                            {new Date(schedule.last_run_at).toLocaleString('ja-JP')}\n                          </span>\n                        </div>\n                      )}\n\n                      {schedule.next_run_at && (\n                        <div>\n                          <span className=\"text-gray-600\">次回実行:</span>\n                          <span className=\"ml-2 text-gray-900\">\n                            {new Date(schedule.next_run_at).toLocaleString('ja-JP')}\n                          </span>\n                        </div>\n                      )}\n\n                      {schedule.notification_emails.length > 0 && (\n                        <div>\n                          <span className=\"text-gray-600\">通知先:</span>\n                          <span className=\"ml-2 text-gray-900\">\n                            {schedule.notification_emails.join(', ')}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2 ml-4\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => toggleSchedule(schedule)}\n                    >\n                      {schedule.is_enabled ? (\n                        <PowerOff className=\"w-4 h-4\" />\n                      ) : (\n                        <Power className=\"w-4 h-4\" />\n                      )}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(schedule.id)}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      {showCreateDialog && (\n        <CreateScheduleDialog\n          stores={stores}\n          onClose={() => setShowCreateDialog(false)}\n          onCreate={async (data) => {\n            await createSchedule(data);\n            setShowCreateDialog(false);\n            refetch();\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\ninterface CreateScheduleDialogProps {\n  stores: Array<{ id: string; name: string }>;\n  onClose: () => void;\n  onCreate: (data: Omit<ReportSchedule, 'id' | 'created_at' | 'updated_at' | 'last_run_at' | 'next_run_at'>) => void;\n}\n\nfunction CreateScheduleDialog({ stores, onClose, onCreate }: CreateScheduleDialogProps) {\n  const [reportType, setReportType] = useState<'weekly' | 'monthly'>('weekly');\n  const [storeId, setStoreId] = useState<string>('all');\n  const [emails, setEmails] = useState<string>('');\n\n  const handleSubmit = () => {\n    const cronExpression = reportType === 'weekly' ? '0 6 * * 1' : '0 6 1 * *';\n\n    onCreate({\n      report_type: reportType,\n      store_id: storeId === 'all' ? null : storeId,\n      is_enabled: true,\n      cron_expression: cronExpression,\n      notification_emails: emails.split(',').map((e) => e.trim()).filter(Boolean),\n    });\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"max-w-md w-full p-6\">\n        <h3 className=\"text-xl font-bold text-gray-900 mb-6\">\n          スケジュール追加\n        </h3>\n\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              レポート種別\n            </label>\n            <select\n              value={reportType}\n              onChange={(e) => setReportType(e.target.value as 'weekly' | 'monthly')}\n              className=\"w-full p-2 border border-gray-300 rounded-lg\"\n            >\n              <option value=\"weekly\">週次 (毎週月曜 6:00)</option>\n              <option value=\"monthly\">月次 (毎月1日 6:00)</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              対象店舗\n            </label>\n            <select\n              value={storeId}\n              onChange={(e) => setStoreId(e.target.value)}\n              className=\"w-full p-2 border border-gray-300 rounded-lg\"\n            >\n              <option value=\"all\">全店舗</option>\n              {stores.map((store) => (\n                <option key={store.id} value={store.id}>\n                  {store.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              通知先メールアドレス (カンマ区切り)\n            </label>\n            <input\n              type=\"text\"\n              value={emails}\n              onChange={(e) => setEmails(e.target.value)}\n              placeholder=\"email1@example.com, email2@example.com\"\n              className=\"w-full p-2 border border-gray-300 rounded-lg\"\n            />\n          </div>\n\n          <div className=\"flex gap-3 pt-4\">\n            <Button variant=\"outline\" onClick={onClose} className=\"flex-1\">\n              キャンセル\n            </Button>\n            <Button onClick={handleSubmit} className=\"flex-1\">\n              作成\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n",
  "src/components/Auth/LoginForm.tsx": "import React, { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { User, Mail, Lock } from 'lucide-react';\n\nexport const LoginForm: React.FC = () => {\n  const { signIn, signUp } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isSignUp, setIsSignUp] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!email || !password || (isSignUp && !name)) {\n      setError('すべての項目を入力してください');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError('');\n\n      if (isSignUp) {\n        const { error: signUpError } = await signUp(email, password, name, 'staff');\n        if (signUpError) {\n          setError(signUpError.message);\n        }\n      } else {\n        const { error: signInError } = await signIn(email, password);\n        if (signInError) {\n          setError(signInError.message);\n        }\n      }\n    } catch (err) {\n      console.error('Auth error:', err);\n      setError('認証に失敗しました。');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-slate-100 py-12 px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 flex items-center justify-center rounded-full bg-gradient-to-br from-blue-600 to-blue-700 shadow-lg\">\n            <User className=\"h-8 w-8 text-white\" />\n          </div>\n          <h2 className=\"mt-6 text-center text-3xl font-bold text-gray-900\">\n            業務報告システム\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            {isSignUp ? 'アカウントを作成' : 'ログインしてください'}\n          </p>\n        </div>\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <p className=\"text-sm text-red-600\">{error}</p>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"mt-8 space-y-6\">\n          <div className=\"space-y-4\">\n            {isSignUp && (\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  名前\n                </label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                  <input\n                    id=\"name\"\n                    type=\"text\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    className=\"pl-10 w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"山田 太郎\"\n                  />\n                </div>\n              </div>\n            )}\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                メールアドレス\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10 w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"you@example.com\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                パスワード\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10 w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"••••••••\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full flex justify-center py-3 px-4 border border-transparent text-base font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-300 disabled:cursor-not-allowed transition-colors shadow-md\"\n          >\n            {loading ? (\n              <div className=\"flex items-center\">\n                <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                処理中...\n              </div>\n            ) : (\n              <>{isSignUp ? 'アカウント作成' : 'ログイン'}</>\n            )}\n          </button>\n        </form>\n\n        <div className=\"text-center\">\n          <button\n            onClick={() => {\n              setIsSignUp(!isSignUp);\n              setError('');\n            }}\n            className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n          >\n            {isSignUp ? 'すでにアカウントをお持ちの方はログイン' : 'アカウントを新規作成'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};",
  "src/components/Charts/ExpenseChart.tsx": "import React from 'react';\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport { DailyReport } from '../../types';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\ninterface ExpenseChartProps {\n  reports: DailyReport[];\n}\n\nexport const ExpenseChart: React.FC<ExpenseChartProps> = ({ reports }) => {\n  // 直近7日間の報告から経費データを集計\n  const recentReports = reports.slice(0, 10); // 最新10件\n  \n  const expenseData = recentReports.reduce((acc, report) => {\n    acc.purchase += report.purchase;\n    acc.laborCost += report.laborCost;\n    acc.utilities += report.utilities;\n    acc.promotion += report.promotion;\n    acc.cleaning += report.cleaning;\n    acc.misc += report.misc;\n    acc.communication += report.communication;\n    acc.others += report.others;\n    return acc;\n  }, {\n    purchase: 0,\n    laborCost: 0,\n    utilities: 0,\n    promotion: 0,\n    cleaning: 0,\n    misc: 0,\n    communication: 0,\n    others: 0\n  });\n\n  const totalExpenses = Object.values(expenseData).reduce((sum, val) => sum + val, 0);\n\n  if (totalExpenses === 0) {\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n        <div className=\"text-gray-400 mb-4\">\n          <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z\" />\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z\" />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">経費データがありません</h3>\n        <p className=\"text-gray-500\">経費を含む報告を作成するとチャートが表示されます。</p>\n      </div>\n    );\n  }\n\n  const data = {\n    labels: ['仕入', '人件費', '光熱費', '広告費', '清掃費', '雑費', '通信費', 'その他'],\n    datasets: [\n      {\n        data: [\n          expenseData.purchase,\n          expenseData.laborCost,\n          expenseData.utilities,\n          expenseData.promotion,\n          expenseData.cleaning,\n          expenseData.misc,\n          expenseData.communication,\n          expenseData.others\n        ],\n        backgroundColor: [\n          'rgba(239, 68, 68, 0.8)',\n          'rgba(245, 158, 11, 0.8)',\n          'rgba(59, 130, 246, 0.8)',\n          'rgba(16, 185, 129, 0.8)',\n          'rgba(139, 92, 246, 0.8)',\n          'rgba(236, 72, 153, 0.8)',\n          'rgba(34, 197, 94, 0.8)',\n          'rgba(156, 163, 175, 0.8)'\n        ],\n        borderColor: [\n          'rgb(239, 68, 68)',\n          'rgb(245, 158, 11)',\n          'rgb(59, 130, 246)',\n          'rgb(16, 185, 129)',\n          'rgb(139, 92, 246)',\n          'rgb(236, 72, 153)',\n          'rgb(34, 197, 94)',\n          'rgb(156, 163, 175)'\n        ],\n        borderWidth: 2,\n      }\n    ]\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'right' as const,\n      },\n      title: {\n        display: true,\n        text: '経費内訳（最新データ）',\n        font: {\n          size: 16,\n          weight: 'bold' as const,\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context: any) {\n            const value = context.raw;\n            const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\n            const percentage = ((value / total) * 100).toFixed(1);\n            return `${context.label}: ¥${value.toLocaleString()} (${percentage}%)`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n      <Pie data={data} options={options} />\n    </div>\n  );\n};",
  "src/components/Charts/RechartsComponents.tsx": "import React from 'react';\nimport {\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend\n} from 'recharts';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { formatCurrency, formatPercent } from '@/lib/utils';\nimport { DailyReport } from '@/types';\n\ninterface SalesChartProps {\n  reports: DailyReport[];\n  period?: 'daily' | 'weekly' | 'monthly';\n  onPeriodChange?: (period: 'daily' | 'weekly' | 'monthly') => void;\n}\n\nexport const SalesChart: React.FC<SalesChartProps> = ({ \n  reports, \n  period = 'daily',\n  onPeriodChange \n}) => {\n  // データを期間別に集計\n  const chartData = React.useMemo(() => {\n    const groupedData = new Map();\n    \n    reports.forEach(report => {\n      const date = new Date(report.date);\n      let key: string;\n      \n      switch (period) {\n        case 'daily':\n          key = date.toISOString().split('T')[0];\n          break;\n        case 'weekly':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          key = weekStart.toISOString().split('T')[0];\n          break;\n        case 'monthly':\n          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          break;\n        default:\n          key = date.toISOString().split('T')[0];\n      }\n      \n      if (!groupedData.has(key)) {\n        groupedData.set(key, { \n          date: key, \n          sales: 0, \n          expenses: 0, \n          profit: 0,\n          storeCount: new Set()\n        });\n      }\n      \n      const data = groupedData.get(key);\n      const totalExpenses = report.purchase + report.laborCost + report.utilities + \n                           report.promotion + report.cleaning + report.misc + \n                           report.communication + report.others;\n      \n      data.sales += report.sales;\n      data.expenses += totalExpenses;\n      data.profit = data.sales - data.expenses;\n      data.storeCount.add(report.storeId);\n    });\n    \n    return Array.from(groupedData.values())\n      .map(item => ({\n        ...item,\n        storeCount: item.storeCount.size\n      }))\n      .sort((a, b) => a.date.localeCompare(b.date))\n      .slice(-30); // 最新30データポイント\n  }, [reports, period]);\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    switch (period) {\n      case 'daily':\n        return date.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' });\n      case 'weekly':\n        return `${date.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' })}週`;\n      case 'monthly':\n        return date.toLocaleDateString('ja-JP', { year: 'numeric', month: 'short' });\n      default:\n        return dateStr;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">売上推移</CardTitle>\n          {onPeriodChange && (\n            <Tabs value={period} onValueChange={(value) => onPeriodChange(value as any)}>\n              <TabsList>\n                <TabsTrigger value=\"daily\">日次</TabsTrigger>\n                <TabsTrigger value=\"weekly\">週次</TabsTrigger>\n                <TabsTrigger value=\"monthly\">月次</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <AreaChart data={chartData}>\n            <defs>\n              <linearGradient id=\"salesGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3}/>\n                <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0}/>\n              </linearGradient>\n              <linearGradient id=\"profitGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#10b981\" stopOpacity={0.3}/>\n                <stop offset=\"95%\" stopColor=\"#10b981\" stopOpacity={0}/>\n              </linearGradient>\n            </defs>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n            <XAxis \n              dataKey=\"date\" \n              tickFormatter={formatDate}\n              tick={{ fontSize: 12, fill: '#6b7280' }}\n            />\n            <YAxis \n              tickFormatter={(value) => formatCurrency(value)}\n              tick={{ fontSize: 12, fill: '#6b7280' }}\n            />\n            <Tooltip \n              formatter={(value: number, name: string) => [\n                formatCurrency(value),\n                name === 'sales' ? '売上' : name === 'expenses' ? '経費' : '利益'\n              ]}\n              labelFormatter={(label) => formatDate(label)}\n            />\n            <Area \n              type=\"monotone\" \n              dataKey=\"sales\" \n              stackId=\"1\"\n              stroke=\"#3b82f6\" \n              fill=\"url(#salesGradient)\"\n              strokeWidth={2}\n            />\n            <Area \n              type=\"monotone\" \n              dataKey=\"profit\" \n              stackId=\"2\"\n              stroke=\"#10b981\" \n              fill=\"url(#profitGradient)\"\n              strokeWidth={2}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\ninterface ExpenseChartProps {\n  reports: DailyReport[];\n  period?: 'daily' | 'weekly' | 'monthly';\n}\n\nexport const ExpenseChart: React.FC<ExpenseChartProps> = ({ reports, period = 'monthly' }) => {\n  const expenseData = React.useMemo(() => {\n    // 全店舗のデータを合計\n    const totals = reports.reduce((acc, report) => ({\n      purchase: acc.purchase + report.purchase,\n      laborCost: acc.laborCost + report.laborCost,\n      utilities: acc.utilities + report.utilities,\n      promotion: acc.promotion + report.promotion,\n      cleaning: acc.cleaning + report.cleaning,\n      misc: acc.misc + report.misc,\n      communication: acc.communication + report.communication,\n      others: acc.others + report.others\n    }), {\n      purchase: 0,\n      laborCost: 0,\n      utilities: 0,\n      promotion: 0,\n      cleaning: 0,\n      misc: 0,\n      communication: 0,\n      others: 0\n    });\n\n    return [\n      { name: '仕入', value: totals.purchase, color: '#ef4444' },\n      { name: '人件費', value: totals.laborCost, color: '#f97316' },\n      { name: '光熱費', value: totals.utilities, color: '#3b82f6' },\n      { name: '販促費', value: totals.promotion, color: '#10b981' },\n      { name: '清掃費', value: totals.cleaning, color: '#8b5cf6' },\n      { name: '通信費', value: totals.communication, color: '#06b6d4' },\n      { name: '雑費', value: totals.misc, color: '#f59e0b' },\n      { name: 'その他', value: totals.others, color: '#6b7280' }\n    ].filter(item => item.value > 0);\n  }, [reports, period]);\n\n  const total = expenseData.reduce((sum, item) => sum + item.value, 0);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">経費内訳</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={expenseData}\n              dataKey=\"value\"\n              nameKey=\"name\"\n              cx=\"50%\"\n              cy=\"50%\"\n              outerRadius={100}\n              innerRadius={40}\n            >\n              {expenseData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Pie>\n            <Tooltip \n              formatter={(value: number) => [\n                formatCurrency(value),\n                `${((value / total) * 100).toFixed(1)}%`\n              ]}\n            />\n            <Legend \n              formatter={(value, entry) => `${value} (${formatCurrency(entry.payload?.value || 0)})`}\n              wrapperStyle={{ fontSize: '12px' }}\n            />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};",
  "src/components/Charts/SalesChart.tsx": "import React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { DailyReport } from '../../types';\nimport { formatDate, formatCurrency } from '../../utils/calculations';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface SalesChartProps {\n  reports: DailyReport[];\n  targetSales?: number;\n}\n\nexport const SalesChart: React.FC<SalesChartProps> = ({ reports, targetSales }) => {\n  // 日付別にグループ化して集計\n  const groupedData = reports.reduce((acc, report) => {\n    if (!acc[report.date]) {\n      acc[report.date] = { sales: 0, expenses: 0 };\n    }\n    acc[report.date].sales += report.sales;\n    acc[report.date].expenses += (report.purchase + report.laborCost + report.utilities + \n      report.promotion + report.cleaning + report.misc + report.communication + report.others);\n    return acc;\n  }, {} as Record<string, { sales: number; expenses: number }>);\n\n  const sortedDates = Object.keys(groupedData).sort();\n  const salesData = sortedDates.map(date => groupedData[date].sales);\n  const profitData = sortedDates.map(date => groupedData[date].sales - groupedData[date].expenses);\n\n  if (sortedDates.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n        <div className=\"text-gray-400 mb-4\">\n          <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">データがありません</h3>\n        <p className=\"text-gray-500\">報告を作成するとチャートが表示されます。</p>\n      </div>\n    );\n  }\n\n  // 目標ライン用データ\n  const targetLineData = targetSales && sortedDates.length > 0 \n    ? sortedDates.map(() => targetSales / sortedDates.length) // 日割り目標\n    : null;\n\n  const datasets = [\n    {\n      label: '売上',\n      data: salesData,\n      backgroundColor: 'rgba(59, 130, 246, 0.8)',\n      borderColor: 'rgb(59, 130, 246)',\n      borderWidth: 1,\n    },\n    {\n      label: '営業利益',\n      data: profitData,\n      backgroundColor: 'rgba(16, 185, 129, 0.8)',\n      borderColor: 'rgb(16, 185, 129)',\n      borderWidth: 1,\n    }\n  ];\n\n  // 目標ラインを追加\n  if (targetLineData) {\n    datasets.push({\n      label: '売上目標（日割り）',\n      data: targetLineData,\n      backgroundColor: 'rgba(239, 68, 68, 0.2)',\n      borderColor: 'rgb(239, 68, 68)',\n      borderWidth: 2,\n      borderDash: [5, 5],\n      type: 'line' as const,\n      pointRadius: 0,\n      fill: false,\n    } as any);\n  }\n\n  const data = {\n    labels: sortedDates.map(date => formatDate(date)),\n    datasets\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: targetSales ? '売上と営業利益の推移（目標ライン付き）' : '売上と営業利益の推移',\n        font: {\n          size: 16,\n          weight: 'bold' as const,\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context: any) {\n            return `${context.dataset.label}: ${formatCurrency(context.raw)}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: 'category' as const,\n      },\n      y: {\n        beginAtZero: true,\n        ticks: {\n          callback: function(value: any) {\n            return formatCurrency(value);\n          }\n        }\n      }\n    },\n    interaction: {\n      mode: 'index' as const,\n      intersect: false,\n    },\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n      {targetSales && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-1 bg-red-500 border-dashed border border-red-500\"></div>\n            <span className=\"text-sm text-red-700\">\n              月間売上目標: {formatCurrency(targetSales)}（赤破線で表示）\n            </span>\n          </div>\n        </div>\n      )}\n      <Bar data={data} options={options} />\n    </div>\n  );\n};",
  "src/components/Chat/AIChat.tsx": "import React, { useState } from 'react';\nimport { Send, Bot, User } from 'lucide-react';\nimport { DailyReport } from '../../types';\nimport { formatCurrency } from '../../utils/calculations';\n\ninterface Message {\n  id: string;\n  type: 'user' | 'ai';\n  content: string;\n  timestamp: Date;\n}\n\ninterface AIChatProps {\n  reports: DailyReport[];\n}\n\nexport const AIChat: React.FC<AIChatProps> = ({ reports }) => {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'ai',\n      content: 'こんにちは！業務データについてご質問をどうぞ。例：「今月の売上合計は？」「経費の内訳を教えて」',\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    // AIの応答をシミュレート\n    setTimeout(() => {\n      const aiResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'ai',\n        content: getAIResponse(inputMessage, reports),\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, aiResponse]);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const getAIResponse = (question: string, reports: DailyReport[]): string => {\n    const q = question.toLowerCase();\n    \n    if (reports.length === 0) {\n      return '申し訳ございませんが、まだ報告データがありません。日次報告を作成してから再度お試しください。';\n    }\n\n    // 集計データを計算\n    const totalSales = reports.reduce((sum, report) => sum + report.sales, 0);\n    const totalExpenses = reports.reduce((sum, report) => \n      sum + report.purchase + report.laborCost + report.utilities + \n      report.promotion + report.cleaning + report.misc + \n      report.communication + report.others, 0);\n    const operatingProfit = totalSales - totalExpenses;\n    const profitMargin = totalSales > 0 ? (operatingProfit / totalSales) * 100 : 0;\n    \n    if (q.includes('売上') && q.includes('合計')) {\n      return `現在の売上合計は${formatCurrency(totalSales)}です。報告件数は${reports.length}件です。`;\n    } else if (q.includes('経費') && (q.includes('内訳') || q.includes('比率'))) {\n      const avgPurchase = reports.reduce((sum, r) => sum + r.purchase, 0);\n      const avgLabor = reports.reduce((sum, r) => sum + r.laborCost, 0);\n      const purchaseRatio = totalExpenses > 0 ? (avgPurchase / totalExpenses * 100).toFixed(1) : 0;\n      const laborRatio = totalExpenses > 0 ? (avgLabor / totalExpenses * 100).toFixed(1) : 0;\n      return `経費合計：${formatCurrency(totalExpenses)}\\n主な内訳：\\n• 仕入: ${purchaseRatio}%\\n• 人件費: ${laborRatio}%`;\n    } else if (q.includes('利益') || q.includes('営業利益')) {\n      return `営業利益は${formatCurrency(operatingProfit)}で、利益率は${profitMargin.toFixed(1)}%です。`;\n    } else if (q.includes('店舗') && (q.includes('比較') || q.includes('パフォーマンス'))) {\n      const storeData = reports.reduce((acc, report) => {\n        if (!acc[report.storeName]) {\n          acc[report.storeName] = { sales: 0, count: 0 };\n        }\n        acc[report.storeName].sales += report.sales;\n        acc[report.storeName].count += 1;\n        return acc;\n      }, {} as Record<string, { sales: number; count: number }>);\n      \n      const storeList = Object.entries(storeData).map(([name, data]) => \n        `• ${name}：売上${formatCurrency(data.sales)}（${data.count}件）`\n      ).join('\\n');\n      \n      return `店舗別パフォーマンス：\\n${storeList}`;\n    } else {\n      return '申し訳ございませんが、その質問については十分なデータがありません。「売上合計」「経費内訳」「利益率」「店舗比較」などについてお答えできます。';\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 flex flex-col h-96\">\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n          <Bot className=\"w-5 h-5 text-blue-600\" />\n          AIアシスタント\n        </h3>\n      </div>\n      \n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n          >\n            <div className={`flex gap-2 max-w-xs lg:max-w-md ${message.type === 'user' ? 'flex-row-reverse' : ''}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                message.type === 'user' ? 'bg-blue-500' : 'bg-green-500'\n              }`}>\n                {message.type === 'user' ? (\n                  <User className=\"w-4 h-4 text-white\" />\n                ) : (\n                  <Bot className=\"w-4 h-4 text-white\" />\n                )}\n              </div>\n              <div className={`px-4 py-2 rounded-lg ${\n                message.type === 'user' \n                  ? 'bg-blue-500 text-white' \n                  : 'bg-gray-100 text-gray-900'\n              }`}>\n                <p className=\"text-sm whitespace-pre-line\">{message.content}</p>\n              </div>\n            </div>\n          </div>\n        ))}\n        \n        {isLoading && (\n          <div className=\"flex gap-3 justify-start\">\n            <div className=\"flex gap-2\">\n              <div className=\"w-8 h-8 rounded-full bg-green-500 flex items-center justify-center\">\n                <Bot className=\"w-4 h-4 text-white\" />\n              </div>\n              <div className=\"px-4 py-2 bg-gray-100 rounded-lg\">\n                <div className=\"flex gap-1\">\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"px-4 py-4 border-t border-gray-200\">\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n            placeholder=\"質問を入力してください...\"\n            className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none\"\n            disabled={isLoading}\n          />\n          <button\n            onClick={handleSendMessage}\n            disabled={isLoading || !inputMessage.trim()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};",
  "src/components/Chat/AIChatPage.tsx": "import React, { useState, useRef, useEffect } from 'react';\nimport { \n  Send, \n  Bot, \n  User, \n  Sparkles, \n  TrendingUp, \n  TrendingDown,\n  BarChart3,\n  PieChart,\n  Target,\n  Calendar,\n  Store,\n  DollarSign,\n  Zap,\n  Brain,\n  Lightbulb,\n  Rocket,\n  ChevronRight,\n  ArrowRight,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  Trash2\n} from 'lucide-react';\nimport { DailyReport } from '../../types';\nimport { formatCurrency, formatPercent } from '../../lib/utils';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart as RechartsPieChart, Cell, LineChart, Line, Area, AreaChart } from 'recharts';\n\ninterface Message {\n  id: string;\n  type: 'user' | 'ai';\n  content: string;\n  timestamp: Date;\n  visualData?: {\n    type: 'chart' | 'metrics' | 'prediction' | 'comparison' | 'recommendations';\n    data: any;\n  };\n  suggestions?: string[];\n}\n\ninterface AIChatPageProps {\n  reports: DailyReport[];\n  stores: Array<{ id: string; name: string; }>;\n  selectedStoreId?: string | null;\n  user?: { name: string; role: string } | null;\n}\n\nexport const AIChatPage: React.FC<AIChatPageProps> = ({ \n  reports, \n  stores, \n  selectedStoreId,\n  user \n}) => {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'ai',\n      content: 'こんにちは！🤖 居酒屋いっき AI経営アナリストです。\\n\\n業務データを分析して、視覚的な洞察と未来予測をお届けします。何についてお聞きになりたいですか？',\n      suggestions: [\n        '今月の業績サマリーを表示',\n        '店舗別パフォーマンス分析',\n        '来月の売上予測',\n        '経費最適化提案',\n        '目標達成ロードマップ'\n      ],\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // 高度な視覚的AI分析システム\n  const generateVisualResponse = (question: string): { \n    content: string; \n    visualData?: any; \n    suggestions?: string[] \n  } => {\n    const q = question.toLowerCase();\n    \n    if (reports.length === 0) {\n      return {\n        content: '📊 分析可能なデータがまだありません。\\n\\n「新規報告」から日次報告を作成してください。',\n        suggestions: ['デモデータを生成', 'サンプル分析を表示']\n      };\n    }\n\n    // データ計算の基盤\n    const calculatePeriodData = (reportList: DailyReport[]) => {\n      return reportList.reduce((acc, report) => {\n        const expenses = report.purchase + report.laborCost + report.utilities + \n                        report.promotion + report.cleaning + report.misc + \n                        report.communication + report.others;\n        return {\n          sales: acc.sales + report.sales,\n          expenses: acc.expenses + expenses,\n          profit: acc.profit + (report.sales - expenses),\n          count: acc.count + 1\n        };\n      }, { sales: 0, expenses: 0, profit: 0, count: 0 });\n    };\n\n    const today = new Date().toISOString().split('T')[0];\n    const thisMonth = today.substring(0, 7);\n    const todayReports = reports.filter(r => r.date === today);\n    const thisMonthReports = reports.filter(r => r.date.startsWith(thisMonth));\n\n    // 店舗フィルタリング\n    let activeReports = reports;\n    if (selectedStoreId && selectedStoreId !== 'all') {\n      activeReports = reports.filter(r => r.storeId === selectedStoreId);\n    }\n\n    // 1. 業績サマリー\n    if (q.includes('業績') || q.includes('サマリー') || q.includes('概要')) {\n      const monthData = calculatePeriodData(thisMonthReports);\n      const profitMargin = monthData.sales > 0 ? (monthData.profit / monthData.sales) * 100 : 0;\n\n      // 日別売上チャートデータ\n      const dailyData = Array.from(new Set(reports.map(r => r.date)))\n        .sort()\n        .slice(-14) // 過去2週間\n        .map(date => {\n          const dayReports = reports.filter(r => r.date === date);\n          const dayTotals = calculatePeriodData(dayReports);\n          return {\n            date: new Date(date).toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' }),\n            sales: dayTotals.sales,\n            profit: dayTotals.profit,\n            stores: dayReports.length\n          };\n        });\n\n      return {\n        content: `📊 **${selectedStoreId === 'all' ? '全店舗' : '選択店舗'}業績サマリー**\\n\\n🏢 **今月実績:**\\n• 売上: ${formatCurrency(monthData.sales)}\\n• 利益: ${formatCurrency(monthData.profit)}\\n• 利益率: ${profitMargin.toFixed(1)}%\\n• 報告数: ${monthData.count}件\\n\\n${profitMargin >= 20 ? '🎉 優秀な業績です！' : profitMargin >= 15 ? '👍 良好な業績です' : '⚠️ 改善の余地があります'}`,\n        visualData: {\n          type: 'chart',\n          data: {\n            chartType: 'area',\n            data: dailyData,\n            title: '過去2週間の売上・利益推移',\n            metrics: [\n              { label: '今月売上', value: formatCurrency(monthData.sales), color: 'text-blue-600' },\n              { label: '今月利益', value: formatCurrency(monthData.profit), color: monthData.profit >= 0 ? 'text-green-600' : 'text-red-600' },\n              { label: '利益率', value: `${profitMargin.toFixed(1)}%`, color: profitMargin >= 15 ? 'text-green-600' : 'text-yellow-600' },\n              { label: '報告数', value: `${monthData.count}件`, color: 'text-gray-600' }\n            ]\n          }\n        },\n        suggestions: ['詳細な店舗別分析', '来月の売上予測', '経営改善提案']\n      };\n    }\n\n    // 2. 店舗比較分析\n    if (q.includes('店舗') && (q.includes('比較') || q.includes('分析') || q.includes('ランキング'))) {\n      const storeAnalysis = reports.reduce((acc, report) => {\n        if (!acc[report.storeName]) {\n          acc[report.storeName] = { sales: 0, expenses: 0, profit: 0, count: 0 };\n        }\n        const expenses = report.purchase + report.laborCost + report.utilities + \n                        report.promotion + report.cleaning + report.misc + \n                        report.communication + report.others;\n        acc[report.storeName].sales += report.sales;\n        acc[report.storeName].expenses += expenses;\n        acc[report.storeName].profit += (report.sales - expenses);\n        acc[report.storeName].count += 1;\n        return acc;\n      }, {} as Record<string, { sales: number; expenses: number; profit: number; count: number }>);\n\n      const storeChartData = Object.entries(storeAnalysis).map(([name, data]) => ({\n        name: name.replace('居酒屋いっき', ''),\n        sales: data.sales,\n        profit: data.profit,\n        profitMargin: data.sales > 0 ? (data.profit / data.sales) * 100 : 0,\n        efficiency: data.count > 0 ? data.sales / data.count : 0\n      })).sort((a, b) => b.sales - a.sales);\n\n      const topStore = storeChartData[0];\n      const recommendations = [];\n      \n      if (storeChartData.length > 1) {\n        const worstStore = storeChartData[storeChartData.length - 1];\n        if (topStore.profitMargin - worstStore.profitMargin > 5) {\n          recommendations.push(`${worstStore.name}店の利益率改善が急務です`);\n        }\n      }\n\n      return {\n        content: `🏆 **店舗パフォーマンス分析**\\n\\n👑 **トップパフォーマー:** ${topStore.name}店\\n• 売上: ${formatCurrency(topStore.sales)}\\n• 利益率: ${topStore.profitMargin.toFixed(1)}%\\n\\n📊 **全店舗比較チャートを表示中...**`,\n        visualData: {\n          type: 'comparison',\n          data: {\n            chartType: 'bar',\n            data: storeChartData,\n            title: '店舗別売上・利益比較',\n            recommendations\n          }\n        },\n        suggestions: ['トップ店舗の成功要因', '改善が必要な店舗の対策', '全店舗共通の課題']\n      };\n    }\n\n    // 3. 売上予測\n    if (q.includes('予測') || q.includes('将来') || q.includes('来月') || q.includes('見込み')) {\n      // 過去30日のトレンドから予測\n      const last30Days = reports.filter(r => {\n        const reportDate = new Date(r.date);\n        const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n        return reportDate >= thirtyDaysAgo;\n      });\n\n      const weeklyData = [];\n      for (let i = 0; i < 4; i++) {\n        const weekStart = new Date(Date.now() - (i * 7 + 6) * 24 * 60 * 60 * 1000);\n        const weekEnd = new Date(Date.now() - i * 7 * 24 * 60 * 60 * 1000);\n        const weekReports = last30Days.filter(r => {\n          const reportDate = new Date(r.date);\n          return reportDate >= weekStart && reportDate <= weekEnd;\n        });\n        const weekTotals = calculatePeriodData(weekReports);\n        weeklyData.unshift({\n          week: `第${4-i}週`,\n          sales: weekTotals.sales,\n          trend: i === 0 ? 0 : weekTotals.sales - (weeklyData[weeklyData.length-1]?.sales || 0)\n        });\n      }\n\n      // 線形予測\n      const avgWeeklySales = weeklyData.reduce((sum, w) => sum + w.sales, 0) / weeklyData.length;\n      const trendSlope = weeklyData.length > 1 ? \n        (weeklyData[weeklyData.length-1].sales - weeklyData[0].sales) / (weeklyData.length - 1) : 0;\n      \n      const nextWeekPrediction = avgWeeklySales + trendSlope;\n      const nextMonthPrediction = nextWeekPrediction * 4.33; // 1ヶ月 ≈ 4.33週\n\n      // 予測データに未来週を追加\n      const predictionData = [...weeklyData, {\n        week: '来週予測',\n        sales: nextWeekPrediction,\n        isPrediction: true,\n        confidence: Math.max(60, 90 - Math.abs(trendSlope) / avgWeeklySales * 100)\n      }];\n\n      return {\n        content: `🔮 **AI売上予測分析**\\n\\n📈 **来月予測売上:** ${formatCurrency(nextMonthPrediction)}\\n📊 **来週予測:** ${formatCurrency(nextWeekPrediction)}\\n\\n🎯 **予測精度:** ${Math.max(65, 85 - Math.abs(trendSlope) / avgWeeklySales * 50).toFixed(0)}%\\n\\n💡 **トレンド:** ${trendSlope > 0 ? '📈 上昇傾向' : trendSlope < 0 ? '📉 下降傾向' : '📊 安定推移'}`,\n        visualData: {\n          type: 'prediction',\n          data: {\n            chartType: 'line',\n            data: predictionData,\n            title: '売上トレンド予測（4週間＋来週）',\n            predictions: [\n              { period: '来週', value: nextWeekPrediction, type: 'sales' },\n              { period: '来月', value: nextMonthPrediction, type: 'sales' }\n            ]\n          }\n        },\n        suggestions: ['予測の改善要因', '売上向上戦略', 'リスク要因の分析']\n      };\n    }\n\n    // 4. 経営改善提案\n    if (q.includes('改善') || q.includes('提案') || q.includes('最適化')) {\n      const monthData = calculatePeriodData(thisMonthReports);\n      const currentProfitMargin = monthData.sales > 0 ? (monthData.profit / monthData.sales) * 100 : 0;\n      \n      const improvements = [\n        {\n          category: '仕入最適化',\n          impact: 'コスト5-8%削減',\n          timeframe: '2-3ヶ月',\n          actions: ['仕入先の見直し', 'ボリューム割引交渉', '季節メニュー導入'],\n          expectedSavings: monthData.expenses * 0.07\n        },\n        {\n          category: 'デジタル化推進',\n          impact: '効率性15%向上',\n          timeframe: '1-2ヶ月',\n          actions: ['POSシステム導入', 'モバイルオーダー', 'キャッシュレス決済'],\n          expectedSavings: monthData.sales * 0.03\n        },\n        {\n          category: 'メニュー戦略',\n          impact: '客単価10%向上',\n          timeframe: '1ヶ月',\n          actions: ['高利益率メニュー推進', 'セット商品開発', 'アップセル研修'],\n          expectedSavings: monthData.sales * 0.10\n        }\n      ];\n\n      const totalImpact = improvements.reduce((sum, imp) => sum + imp.expectedSavings, 0);\n\n      return {\n        content: `🚀 **AI経営改善提案**\\n\\n💡 **現在の利益率:** ${currentProfitMargin.toFixed(1)}%\\n🎯 **改善後予想:** ${((monthData.profit + totalImpact) / monthData.sales * 100).toFixed(1)}%\\n\\n📈 **予想効果:** 月間${formatCurrency(totalImpact)}の利益改善`,\n        visualData: {\n          type: 'recommendations',\n          data: {\n            improvements,\n            currentProfit: monthData.profit,\n            projectedProfit: monthData.profit + totalImpact,\n            currentMargin: currentProfitMargin,\n            projectedMargin: (monthData.profit + totalImpact) / monthData.sales * 100\n          }\n        },\n        suggestions: ['実装ロードマップ作成', '優先度別の実行計画', 'ROI分析']\n      };\n    }\n\n    // 5. 目標達成分析\n    if (q.includes('目標') || q.includes('達成')) {\n      const defaultTarget = selectedStoreId === 'all' ? 25000000 : 8000000;\n      const monthData = calculatePeriodData(thisMonthReports);\n      const achievement = (monthData.sales / defaultTarget) * 100;\n      const remaining = Math.max(0, defaultTarget - monthData.sales);\n      \n      const progressData = [\n        { label: '達成済み', value: Math.min(monthData.sales, defaultTarget), color: '#10b981' },\n        { label: '未達成', value: remaining, color: '#e5e7eb' }\n      ];\n\n      const dailyTarget = remaining / (30 - new Date().getDate()); // 残り日数での必要日商\n\n      return {\n        content: `🎯 **目標達成度分析**\\n\\n📊 **現在の進捗:** ${achievement.toFixed(1)}%\\n💰 **実績:** ${formatCurrency(monthData.sales)}\\n🎯 **目標:** ${formatCurrency(defaultTarget)}\\n\\n⚡ **残り必要売上:** ${formatCurrency(remaining)}\\n📅 **必要日商:** ${formatCurrency(dailyTarget)}`,\n        visualData: {\n          type: 'metrics',\n          data: {\n            chartType: 'progress',\n            progressData,\n            achievement,\n            target: defaultTarget,\n            current: monthData.sales,\n            dailyTarget\n          }\n        },\n        suggestions: ['目標達成戦略', '日次アクションプラン', '緊急対策案']\n      };\n    }\n\n    // 6. 経費分析\n    if (q.includes('経費') || q.includes('コスト')) {\n      const expenseData = reports.reduce((acc, report) => {\n        acc.purchase += report.purchase;\n        acc.laborCost += report.laborCost;\n        acc.utilities += report.utilities;\n        acc.promotion += report.promotion;\n        acc.cleaning += report.cleaning;\n        acc.misc += report.misc;\n        acc.communication += report.communication;\n        acc.others += report.others;\n        return acc;\n      }, {\n        purchase: 0, laborCost: 0, utilities: 0, promotion: 0,\n        cleaning: 0, misc: 0, communication: 0, others: 0\n      });\n\n      const total = Object.values(expenseData).reduce((sum, val) => sum + val, 0);\n      const pieData = [\n        { name: '仕入', value: expenseData.purchase, color: '#ef4444' },\n        { name: '人件費', value: expenseData.laborCost, color: '#f97316' },\n        { name: '光熱費', value: expenseData.utilities, color: '#3b82f6' },\n        { name: '販促費', value: expenseData.promotion, color: '#10b981' },\n        { name: '清掃費', value: expenseData.cleaning, color: '#8b5cf6' },\n        { name: '通信費', value: expenseData.communication, color: '#06b6d4' },\n        { name: '雑費', value: expenseData.misc, color: '#f59e0b' },\n        { name: 'その他', value: expenseData.others, color: '#6b7280' }\n      ].filter(item => item.value > 0);\n\n      return {\n        content: `💸 **経費構造分析**\\n\\n💰 **総経費:** ${formatCurrency(total)}\\n🥇 **最大項目:** ${pieData[0]?.name} (${((pieData[0]?.value || 0) / total * 100).toFixed(1)}%)\\n\\n📊 詳細な円グラフで内訳を表示中...`,\n        visualData: {\n          type: 'chart',\n          data: {\n            chartType: 'pie',\n            data: pieData,\n            title: '経費構成比',\n            total\n          }\n        },\n        suggestions: ['経費削減戦略', '最適な経費比率', 'コスト管理のベストプラクティス']\n      };\n    }\n\n    // デフォルト応答\n    return {\n      content: `🤖 **分析システム待機中**\\n\\n利用可能な分析機能:\\n📊 業績分析\\n🏆 店舗比較\\n🔮 売上予測\\n💡 改善提案\\n🎯 目標分析\\n\\n具体的な質問をお聞かせください。`,\n      suggestions: [\n        '今月の業績サマリーを表示',\n        '店舗別パフォーマンス分析', \n        '来月の売上予測',\n        '経費最適化提案'\n      ]\n    };\n  };\n\n  // 視覚的データのレンダリング\n  const renderVisualData = (visualData: any) => {\n    if (!visualData) return null;\n\n    switch (visualData.type) {\n      case 'chart':\n        return (\n          <Card className=\"mt-4 border-2 border-blue-100 bg-gradient-to-br from-blue-50 to-purple-50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n                {visualData.data.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {visualData.data.chartType === 'area' && (\n                <>\n                  <ResponsiveContainer width=\"100%\" height={200}>\n                    <AreaChart data={visualData.data.data}>\n                      <defs>\n                        <linearGradient id=\"salesGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                          <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n                          <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1}/>\n                        </linearGradient>\n                        <linearGradient id=\"profitGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                          <stop offset=\"5%\" stopColor=\"#10b981\" stopOpacity={0.8}/>\n                          <stop offset=\"95%\" stopColor=\"#10b981\" stopOpacity={0.1}/>\n                        </linearGradient>\n                      </defs>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis tickFormatter={(value) => `¥${(value/10000).toFixed(0)}万`} />\n                      <Tooltip formatter={(value: number) => [formatCurrency(value), '']} />\n                      <Area type=\"monotone\" dataKey=\"sales\" stackId=\"1\" stroke=\"#3b82f6\" fill=\"url(#salesGradient)\" />\n                      <Area type=\"monotone\" dataKey=\"profit\" stackId=\"2\" stroke=\"#10b981\" fill=\"url(#profitGradient)\" />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                  {visualData.data.metrics && (\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\n                      {visualData.data.metrics.map((metric: any, index: number) => (\n                        <div key={index} className=\"text-center p-3 bg-white rounded-lg border border-gray-200\">\n                          <p className=\"text-xs text-gray-600\">{metric.label}</p>\n                          <p className={`text-lg font-bold ${metric.color}`}>{metric.value}</p>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </>\n              )}\n              {visualData.data.chartType === 'pie' && (\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <RechartsPieChart>\n                    <Pie\n                      data={visualData.data.data}\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={60}\n                      innerRadius={20}\n                    >\n                      {visualData.data.data.map((entry: any, index: number) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value: number) => [formatCurrency(value), `${((value / visualData.data.total) * 100).toFixed(1)}%`]} />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n        );\n\n      case 'comparison':\n        return (\n          <Card className=\"mt-4 border-2 border-green-100 bg-gradient-to-br from-green-50 to-blue-50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Store className=\"w-5 h-5 text-green-600\" />\n                {visualData.data.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <BarChart data={visualData.data.data}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis tickFormatter={(value) => `¥${(value/10000).toFixed(0)}万`} />\n                  <Tooltip \n                    formatter={(value: number, name: string) => [\n                      formatCurrency(value),\n                      name === 'sales' ? '売上' : '利益'\n                    ]}\n                  />\n                  <Bar dataKey=\"sales\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n                  <Bar dataKey=\"profit\" fill=\"#10b981\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n              {visualData.data.recommendations?.length > 0 && (\n                <div className=\"mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <h4 className=\"font-medium text-yellow-800 mb-2 flex items-center gap-2\">\n                    <Lightbulb className=\"w-4 h-4\" />\n                    AI推奨アクション\n                  </h4>\n                  <ul className=\"text-sm text-yellow-700 space-y-1\">\n                    {visualData.data.recommendations.map((rec: string, index: number) => (\n                      <li key={index} className=\"flex items-center gap-2\">\n                        <ArrowRight className=\"w-3 h-3\" />\n                        {rec}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n\n      case 'prediction':\n        return (\n          <Card className=\"mt-4 border-2 border-purple-100 bg-gradient-to-br from-purple-50 to-pink-50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Brain className=\"w-5 h-5 text-purple-600\" />\n                {visualData.data.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={200}>\n                <LineChart data={visualData.data.data}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"week\" />\n                  <YAxis tickFormatter={(value) => `¥${(value/10000).toFixed(0)}万`} />\n                  <Tooltip \n                    formatter={(value: number) => [formatCurrency(value), '売上']}\n                    labelFormatter={(label) => label}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"sales\" \n                    stroke=\"#8b5cf6\" \n                    strokeWidth={3}\n                    dot={{ fill: '#8b5cf6', strokeWidth: 2, r: 6 }}\n                    strokeDasharray={(data: any) => data.isPrediction ? \"5 5\" : \"0\"}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n              <div className=\"mt-4 grid grid-cols-2 gap-4\">\n                {visualData.data.predictions.map((pred: any, index: number) => (\n                  <div key={index} className=\"text-center p-3 bg-white rounded-lg border border-purple-200\">\n                    <p className=\"text-xs text-purple-600 mb-1\">{pred.period}予測</p>\n                    <p className=\"text-lg font-bold text-purple-700\">{formatCurrency(pred.value)}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'recommendations':\n        return (\n          <Card className=\"mt-4 border-2 border-orange-100 bg-gradient-to-br from-orange-50 to-red-50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Rocket className=\"w-5 h-5 text-orange-600\" />\n                AI改善ロードマップ\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* 改善前後比較 */}\n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                  <div className=\"text-center p-4 bg-gray-100 rounded-lg\">\n                    <p className=\"text-sm text-gray-600 mb-1\">現在の月間利益</p>\n                    <p className=\"text-xl font-bold text-gray-700\">{formatCurrency(visualData.data.currentProfit)}</p>\n                    <p className=\"text-sm text-gray-500\">{visualData.data.currentMargin.toFixed(1)}%</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-green-100 rounded-lg\">\n                    <p className=\"text-sm text-green-600 mb-1\">改善後予想利益</p>\n                    <p className=\"text-xl font-bold text-green-700\">{formatCurrency(visualData.data.projectedProfit)}</p>\n                    <p className=\"text-sm text-green-600\">{visualData.data.projectedMargin.toFixed(1)}%</p>\n                  </div>\n                </div>\n\n                {/* 改善施策 */}\n                <div className=\"space-y-3\">\n                  {visualData.data.improvements.map((improvement: any, index: number) => (\n                    <div key={index} className=\"border border-gray-200 rounded-lg p-4 hover:bg-white transition-colors\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-gray-900 flex items-center gap-2\">\n                          <Zap className=\"w-4 h-4 text-orange-500\" />\n                          {improvement.category}\n                        </h4>\n                        <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full font-medium\">\n                          {improvement.impact}\n                        </span>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            {improvement.timeframe}\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <TrendingUp className=\"w-3 h-3 text-green-500\" />\n                            {formatCurrency(improvement.expectedSavings)}の改善\n                          </div>\n                        </div>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {improvement.actions.map((action: string, actionIndex: number) => (\n                            <span key={actionIndex} className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded\">\n                              {action}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'metrics':\n        return (\n          <Card className=\"mt-4 border-2 border-indigo-100 bg-gradient-to-br from-indigo-50 to-blue-50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Target className=\"w-5 h-5 text-indigo-600\" />\n                目標達成ダッシュボード\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* 進捗バー */}\n              <div className=\"mb-6\">\n                <div className=\"flex justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-gray-700\">目標達成度</span>\n                  <span className=\"text-sm font-bold text-indigo-600\">{visualData.data.achievement.toFixed(1)}%</span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                  <div \n                    className={`h-4 rounded-full transition-all duration-700 ${\n                      visualData.data.achievement >= 100 ? 'bg-green-500' : \n                      visualData.data.achievement >= 80 ? 'bg-yellow-500' : 'bg-red-500'\n                    }`}\n                    style={{ width: `${Math.min(visualData.data.achievement, 100)}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* メトリクス */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center p-3 bg-white rounded-lg border\">\n                  <p className=\"text-xs text-gray-600 mb-1\">現在実績</p>\n                  <p className=\"text-lg font-bold text-blue-600\">{formatCurrency(visualData.data.current)}</p>\n                </div>\n                <div className=\"text-center p-3 bg-white rounded-lg border\">\n                  <p className=\"text-xs text-gray-600 mb-1\">月間目標</p>\n                  <p className=\"text-lg font-bold text-purple-600\">{formatCurrency(visualData.data.target)}</p>\n                </div>\n                <div className=\"text-center p-3 bg-white rounded-lg border\">\n                  <p className=\"text-xs text-gray-600 mb-1\">必要日商</p>\n                  <p className=\"text-lg font-bold text-orange-600\">{formatCurrency(visualData.data.dailyTarget)}</p>\n                </div>\n              </div>\n\n              {/* 円グラフでの進捗表示 */}\n              <div className=\"mt-4\">\n                <ResponsiveContainer width=\"100%\" height={150}>\n                  <RechartsPieChart>\n                    <Pie\n                      data={visualData.data.progressData}\n                      dataKey=\"value\"\n                      nameKey=\"label\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={40}\n                      outerRadius={60}\n                    >\n                      {visualData.data.progressData.map((entry: any, index: number) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value: number) => [formatCurrency(value), '']} />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    // リアルなAI処理時間をシミュレート\n    setTimeout(() => {\n      const response = generateVisualResponse(inputMessage);\n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'ai',\n        content: response.content,\n        visualData: response.visualData,\n        suggestions: response.suggestions,\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, aiMessage]);\n      setIsLoading(false);\n    }, 1500 + Math.random() * 1000);\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputMessage(suggestion);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const clearChat = () => {\n    setMessages([{\n      id: '1',\n      type: 'ai',\n      content: '🤖 チャットをクリアしました。\\n\\n新しい分析をご希望でしたら、お気軽にお声かけください！',\n      suggestions: [\n        '今月の業績サマリーを表示',\n        '店舗別パフォーマンス分析',\n        '来月の売上予測',\n        '経営改善提案'\n      ],\n      timestamp: new Date()\n    }]);\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* ヘッダー */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-3 bg-white/20 rounded-lg\">\n              <Brain className=\"w-8 h-8\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold\">AI経営アナリスト</h1>\n              <p className=\"text-blue-100\">\n                居酒屋いっき専用 - 高度データ分析 & 未来予測システム\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"flex items-center gap-2 text-blue-100 mb-1\">\n              <Sparkles className=\"w-4 h-4\" />\n              <span className=\"text-sm\">分析データ: {reports.length}件</span>\n            </div>\n            <div className=\"text-sm\">\n              対象: {selectedStoreId === 'all' ? '🏢 全店舗' : '🏪 選択店舗'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* チャットインターフェース */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* メッセージエリア */}\n        <div className=\"lg:col-span-3\">\n          <Card className=\"h-[600px] flex flex-col\">\n            <CardHeader className=\"pb-3 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Bot className=\"w-5 h-5 text-blue-600\" />\n                  AIアナリスト会話\n                </CardTitle>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearChat}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  履歴クリア\n                </Button>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n              {messages.map((message) => (\n                <div key={message.id} className=\"space-y-4\">\n                  <div className={`flex gap-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>\n                    {message.type === 'ai' && (\n                      <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center flex-shrink-0\">\n                        <Bot className=\"w-5 h-5 text-white\" />\n                      </div>\n                    )}\n                    <div className={`max-w-[80%] ${message.type === 'user' ? 'order-1' : ''}`}>\n                      <div className={`px-6 py-4 rounded-2xl text-sm leading-relaxed ${\n                        message.type === 'user'\n                          ? 'bg-blue-600 text-white rounded-br-md'\n                          : 'bg-gray-100 text-gray-900 rounded-bl-md'\n                      }`}>\n                        <div className=\"whitespace-pre-line\">{message.content}</div>\n                        <p className={`text-xs mt-2 ${\n                          message.type === 'user' ? 'text-blue-100' : 'text-gray-500'\n                        }`}>\n                          {message.timestamp.toLocaleTimeString('ja-JP', { \n                            hour: '2-digit', \n                            minute: '2-digit' \n                          })}\n                        </p>\n                      </div>\n                      \n                      {/* 視覚的データの表示 */}\n                      {message.visualData && renderVisualData(message.visualData)}\n                      \n                      {/* 提案ボタン */}\n                      {message.type === 'ai' && message.suggestions && (\n                        <div className=\"mt-4 space-y-2\">\n                          <p className=\"text-xs text-gray-500 flex items-center gap-1\">\n                            <Lightbulb className=\"w-3 h-3\" />\n                            おすすめの分析:\n                          </p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {message.suggestions.map((suggestion, index) => (\n                              <Button\n                                key={index}\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleSuggestionClick(suggestion)}\n                                className=\"text-xs hover:bg-blue-50 hover:border-blue-300 hover:text-blue-700 transition-all duration-200\"\n                              >\n                                {suggestion}\n                                <ChevronRight className=\"w-3 h-3 ml-1\" />\n                              </Button>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    {message.type === 'user' && (\n                      <div className=\"w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center flex-shrink-0\">\n                        <User className=\"w-5 h-5 text-gray-600\" />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n              \n              {isLoading && (\n                <div className=\"flex gap-4 justify-start\">\n                  <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div className=\"bg-gray-100 px-6 py-4 rounded-2xl rounded-bl-md max-w-[80%]\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex gap-1\">\n                        <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                      <span className=\"text-sm text-gray-600\">高度分析処理中...</span>\n                      <Sparkles className=\"w-4 h-4 text-purple-500 animate-pulse\" />\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </CardContent>\n            \n            {/* 入力エリア */}\n            <div className=\"p-4 border-t border-gray-200\">\n              <div className=\"flex gap-3\">\n                <div className=\"flex-1 relative\">\n                  <input\n                    type=\"text\"\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"例: 今月の業績サマリーを表示\"\n                    className=\"w-full px-4 py-3 text-sm border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50 focus:bg-white transition-all duration-200\"\n                    disabled={isLoading}\n                  />\n                </div>\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={isLoading || !inputMessage.trim()}\n                  className=\"px-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 rounded-xl\"\n                >\n                  {isLoading ? (\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  ) : (\n                    <Send className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-2 flex items-center gap-1\">\n                <Zap className=\"w-3 h-3\" />\n                Enter送信 | 高度なデータ分析とビジュアル化に対応\n              </p>\n            </div>\n          </Card>\n        </div>\n\n        {/* サイドパネル */}\n        <div className=\"space-y-4\">\n          {/* クイックアクション */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <Rocket className=\"w-4 h-4 text-orange-500\" />\n                クイック分析\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              {[\n                '📊 今月の業績サマリーを表示',\n                '🏆 店舗別パフォーマンス分析',\n                '🔮 来月の売上予測',\n                '💡 経営改善提案',\n                '🎯 目標達成ロードマップ'\n              ].map((suggestion, index) => (\n                <Button\n                  key={index}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleSuggestionClick(suggestion)}\n                  className=\"w-full justify-start text-left text-xs h-auto py-2 hover:bg-blue-50\"\n                >\n                  {suggestion}\n                </Button>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* 分析状況 */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-green-500\" />\n                分析状況\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-gray-600\">分析対象</span>\n                <span className=\"text-xs font-medium\">\n                  {selectedStoreId === 'all' ? '全店舗' : '選択店舗'}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-gray-600\">データ件数</span>\n                <span className=\"text-xs font-medium text-blue-600\">{reports.length}件</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-gray-600\">AI精度</span>\n                <span className=\"text-xs font-medium text-green-600\">96.8%</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-gray-600\">最終分析</span>\n                <span className=\"text-xs font-medium text-gray-500\">\n                  {new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* システム状況 */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                システム状況\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-xs\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-green-600\">AI分析エンジン: 稼働中</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span className=\"text-green-600\">データ同期: 正常</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                <span className=\"text-blue-600\">視覚化: 有効</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                <span className=\"text-purple-600\">予測モデル: 学習済み</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};",
  "src/components/Chat/AIUsageIndicator.tsx": "import React from 'react'\nimport { AlertCircle, CheckCircle, Clock } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport type { AIUsageStatus } from '@/hooks/useAIUsageLimit'\n\ninterface AIUsageIndicatorProps {\n  status: AIUsageStatus | null\n  loading: boolean\n  compact?: boolean\n}\n\nexport const AIUsageIndicator: React.FC<AIUsageIndicatorProps> = ({\n  status,\n  loading,\n  compact = false\n}) => {\n  if (loading) {\n    return (\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n        <Clock className=\"w-4 h-4 animate-spin\" />\n        {!compact && <span>読み込み中...</span>}\n      </div>\n    )\n  }\n\n  if (!status) {\n    return null\n  }\n\n  const isUnlimited = status.dailyLimit === -1\n  const usagePercent = isUnlimited ? 0 : Math.min((status.currentCount / status.dailyLimit) * 100, 100)\n  const isWarning = usagePercent >= 80 && usagePercent < 100\n  const isError = usagePercent >= 100 || status.isLimited\n\n  const getTimeUntilReset = () => {\n    const now = new Date()\n    const resetTime = new Date(status.resetAt)\n    const diff = resetTime.getTime() - now.getTime()\n    const hours = Math.floor(diff / (1000 * 60 * 60))\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n\n    if (hours > 0) {\n      return `${hours}時間${minutes}分後`\n    }\n    return `${minutes}分後`\n  }\n\n  if (compact) {\n    return (\n      <div className=\"flex items-center gap-2\">\n        {isUnlimited ? (\n          <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 border-blue-300\">\n            無制限\n          </Badge>\n        ) : (\n          <>\n            <Badge\n              variant={isError ? 'destructive' : isWarning ? 'outline' : 'secondary'}\n              className={\n                isError\n                  ? ''\n                  : isWarning\n                  ? 'bg-yellow-50 text-yellow-700 border-yellow-300'\n                  : 'bg-green-50 text-green-700 border-green-300'\n              }\n            >\n              {status.currentCount}/{status.dailyLimit}回\n            </Badge>\n          </>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          {isUnlimited ? (\n            <>\n              <CheckCircle className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"text-sm font-medium text-blue-700\">AI利用: 無制限</span>\n            </>\n          ) : isError ? (\n            <>\n              <AlertCircle className=\"w-4 h-4 text-red-600\" />\n              <span className=\"text-sm font-medium text-red-700\">利用上限到達</span>\n            </>\n          ) : isWarning ? (\n            <>\n              <AlertCircle className=\"w-4 h-4 text-yellow-600\" />\n              <span className=\"text-sm font-medium text-yellow-700\">残りわずか</span>\n            </>\n          ) : (\n            <>\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              <span className=\"text-sm font-medium text-green-700\">利用可能</span>\n            </>\n          )}\n        </div>\n        {!isUnlimited && (\n          <span className=\"text-sm font-medium text-foreground\">\n            {status.remaining}回 / {status.dailyLimit}回\n          </span>\n        )}\n      </div>\n\n      {!isUnlimited && (\n        <>\n          <Progress\n            value={usagePercent}\n            className={`h-2 ${\n              isError\n                ? 'bg-red-100 [&>div]:bg-red-500'\n                : isWarning\n                ? 'bg-yellow-100 [&>div]:bg-yellow-500'\n                : 'bg-green-100 [&>div]:bg-green-500'\n            }`}\n          />\n\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <span>\n              {isError\n                ? '明日リセットされます'\n                : `残り${status.remaining}回利用可能`}\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <Clock className=\"w-3 h-3\" />\n              {getTimeUntilReset()}にリセット\n            </span>\n          </div>\n        </>\n      )}\n\n      {isError && (\n        <div className=\"text-xs text-red-600 bg-red-50 border border-red-200 rounded p-2\">\n          本日の利用上限に達しました。基本的なデータ分析機能は引き続きご利用いただけます。\n        </div>\n      )}\n\n      {isWarning && !isError && status.remaining <= 2 && (\n        <div className=\"text-xs text-yellow-700 bg-yellow-50 border border-yellow-200 rounded p-2\">\n          残り{status.remaining}回です。計画的にご利用ください。\n        </div>\n      )}\n    </div>\n  )\n}\n",
  "src/components/Dashboard/AIChatWidget.tsx": "import React, { useState, useRef, useEffect } from 'react';\nimport { MessageCircle, Send, Minimize2, Maximize2, X, Bot, User, Sparkles, HelpCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { DailyReport } from '@/types';\nimport { formatCurrency } from '@/lib/utils';\n\ninterface Message {\n  id: string;\n  type: 'user' | 'ai';\n  content: string;\n  timestamp: Date;\n  suggestions?: string[];\n}\n\ninterface AIChatWidgetProps {\n  reports: DailyReport[];\n}\n\nexport const AIChatWidget: React.FC<AIChatWidgetProps> = ({ reports }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'ai',\n      content: 'こんにちは！📊 居酒屋いっきの業務データ分析AIです。\\n\\n売上・経費・利益についてなんでもお聞きください。例えば：',\n      suggestions: [\n        '今月の売上合計は？',\n        '利益率が一番高い店舗は？',\n        '経費の内訳を教えて',\n        '前月と比較してどう？'\n      ],\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // メッセージ履歴を最下部にスクロール\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // 高度なAI応答生成\n  const generateAIResponse = (question: string): { content: string; suggestions?: string[] } => {\n    const q = question.toLowerCase();\n    \n    if (reports.length === 0) {\n      return {\n        content: '申し訳ございませんが、まだ分析できるデータがありません。\\n\\n「新規報告」ボタンから日次報告を作成してから、再度お試しください。',\n        suggestions: ['新規報告の作成方法は？', 'デモデータを生成して']\n      };\n    }\n\n    // データ分析の基本計算\n    const today = new Date().toISOString().split('T')[0];\n    const thisMonth = today.substring(0, 7);\n    const lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().substring(0, 7);\n    \n    const todayReports = reports.filter(r => r.date === today);\n    const thisMonthReports = reports.filter(r => r.date.startsWith(thisMonth));\n    const lastMonthReports = reports.filter(r => r.date.startsWith(lastMonth));\n    \n    const calculateTotals = (reportList: DailyReport[]) => {\n      return reportList.reduce((acc, report) => {\n        const totalExpenses = report.purchase + report.laborCost + report.utilities + \n                             report.promotion + report.cleaning + report.misc + \n                             report.communication + report.others;\n        \n        return {\n          sales: acc.sales + report.sales,\n          expenses: acc.expenses + totalExpenses,\n          purchase: acc.purchase + report.purchase,\n          profit: acc.profit + (report.sales - totalExpenses),\n          count: acc.count + 1\n        };\n      }, { sales: 0, expenses: 0, purchase: 0, profit: 0, count: 0 });\n    };\n\n    const todayTotals = calculateTotals(todayReports);\n    const thisMonthTotals = calculateTotals(thisMonthReports);\n    const lastMonthTotals = calculateTotals(lastMonthReports);\n    \n    // 店舗別分析\n    const storeAnalysis = reports.reduce((acc, report) => {\n      if (!acc[report.storeName]) {\n        acc[report.storeName] = { sales: 0, expenses: 0, profit: 0, count: 0 };\n      }\n      const expenses = report.purchase + report.laborCost + report.utilities + \n                      report.promotion + report.cleaning + report.misc + \n                      report.communication + report.others;\n      acc[report.storeName].sales += report.sales;\n      acc[report.storeName].expenses += expenses;\n      acc[report.storeName].profit += (report.sales - expenses);\n      acc[report.storeName].count += 1;\n      return acc;\n    }, {} as Record<string, { sales: number; expenses: number; profit: number; count: number }>);\n\n    // 質問パターン解析と回答生成\n    \n    // 1. 売上関連の質問\n    if (q.includes('売上') && (q.includes('合計') || q.includes('総'))) {\n      if (q.includes('今日') || q.includes('本日')) {\n        return {\n          content: `📊 **本日の売上合計**\\n\\n${formatCurrency(todayTotals.sales)} （${todayTotals.count}件の報告）\\n\\n${todayTotals.count === 0 ? '⚠️ 本日の報告がまだありません。' : '✅ 順調に報告が上がっています！'}`,\n          suggestions: ['今日の利益は？', '昨日と比較して', '今日の店舗別売上は？']\n        };\n      } else if (q.includes('今月')) {\n        const monthlyGrowth = lastMonthTotals.sales > 0 ? ((thisMonthTotals.sales - lastMonthTotals.sales) / lastMonthTotals.sales) * 100 : 0;\n        return {\n          content: `📈 **今月の売上合計**\\n\\n${formatCurrency(thisMonthTotals.sales)} （${thisMonthTotals.count}件の報告）\\n\\n前月比: ${monthlyGrowth >= 0 ? '📈' : '📉'} ${monthlyGrowth.toFixed(1)}%\\n前月: ${formatCurrency(lastMonthTotals.sales)}`,\n          suggestions: ['今月の利益率は？', '店舗別の売上ランキング', '目標達成度は？']\n        };\n      } else {\n        return {\n          content: `💰 **総売上合計**\\n\\n${formatCurrency(thisMonthTotals.sales)} （全期間: ${reports.length}件の報告）\\n\\n平均日商: ${formatCurrency(thisMonthTotals.sales / Math.max(thisMonthTotals.count, 1))}`,\n          suggestions: ['期間を指定して分析', '店舗別の売上は？', '利益率の分析']\n        };\n      }\n    }\n\n    // 2. 利益・利益率関連\n    if (q.includes('利益') && (q.includes('率') || q.includes('マージン'))) {\n      const profitMargin = thisMonthTotals.sales > 0 ? (thisMonthTotals.profit / thisMonthTotals.sales) * 100 : 0;\n      const storeMargins = Object.entries(storeAnalysis).map(([name, data]) => ({\n        name,\n        margin: data.sales > 0 ? (data.profit / data.sales) * 100 : 0\n      })).sort((a, b) => b.margin - a.margin);\n\n      return {\n        content: `📊 **利益率分析**\\n\\n🏢 全店舗平均: **${profitMargin.toFixed(1)}%**\\n\\n🏆 **店舗別ランキング:**\\n${storeMargins.map((store, index) => \n          `${index + 1}位. ${store.name}: ${store.margin.toFixed(1)}%`\n        ).join('\\n')}\\n\\n${profitMargin >= 20 ? '🎉 優秀な利益率です！' : profitMargin >= 15 ? '👍 良好な利益率です' : '⚠️ 利益率改善が必要です'}`,\n        suggestions: ['利益率を改善するには？', '経費削減のアドバイス', '最も利益率の高い店舗の詳細']\n      };\n    }\n\n    // 3. 店舗比較・ランキング\n    if (q.includes('店舗') && (q.includes('比較') || q.includes('ランキング') || q.includes('高い') || q.includes('一番'))) {\n      const storeRanking = Object.entries(storeAnalysis)\n        .map(([name, data]) => ({\n          name,\n          sales: data.sales,\n          profit: data.profit,\n          profitMargin: data.sales > 0 ? (data.profit / data.sales) * 100 : 0,\n          count: data.count\n        }))\n        .sort((a, b) => b.sales - a.sales);\n\n      return {\n        content: `🏆 **店舗別パフォーマンスランキング**\\n\\n📊 **売上ランキング:**\\n${storeRanking.map((store, index) => \n          `${['🥇', '🥈', '🥉'][index] || '🏪'} ${store.name}\\n   売上: ${formatCurrency(store.sales)}\\n   利益率: ${store.profitMargin.toFixed(1)}%`\n        ).join('\\n\\n')}`,\n        suggestions: ['トップ店舗の成功要因は？', '下位店舗の改善点', '全店舗の平均と比較']\n      };\n    }\n\n    // 4. 経費分析\n    if (q.includes('経費') && (q.includes('内訳') || q.includes('比率') || q.includes('分析'))) {\n      const expenseBreakdown = reports.reduce((acc, report) => {\n        acc.purchase += report.purchase;\n        acc.laborCost += report.laborCost;\n        acc.utilities += report.utilities;\n        acc.promotion += report.promotion;\n        acc.cleaning += report.cleaning;\n        acc.misc += report.misc;\n        acc.communication += report.communication;\n        acc.others += report.others;\n        return acc;\n      }, {\n        purchase: 0, laborCost: 0, utilities: 0, promotion: 0,\n        cleaning: 0, misc: 0, communication: 0, others: 0\n      });\n\n      const totalExpenses = Object.values(expenseBreakdown).reduce((sum, val) => sum + val, 0);\n      const expenseItems = [\n        { name: '仕入', value: expenseBreakdown.purchase },\n        { name: '人件費', value: expenseBreakdown.laborCost },\n        { name: '光熱費', value: expenseBreakdown.utilities },\n        { name: '販促費', value: expenseBreakdown.promotion },\n        { name: '清掃費', value: expenseBreakdown.cleaning },\n        { name: '通信費', value: expenseBreakdown.communication },\n        { name: '雑費', value: expenseBreakdown.misc },\n        { name: 'その他', value: expenseBreakdown.others }\n      ].filter(item => item.value > 0).sort((a, b) => b.value - a.value);\n\n      return {\n        content: `💸 **経費内訳分析**\\n\\n💰 経費合計: **${formatCurrency(totalExpenses)}**\\n\\n📊 **主な経費項目:**\\n${expenseItems.map(item => \n          `• ${item.name}: ${formatCurrency(item.value)} (${((item.value / totalExpenses) * 100).toFixed(1)}%)`\n        ).join('\\n')}\\n\\n💡 **分析結果:**\\n仕入費が${((expenseBreakdown.purchase / totalExpenses) * 100).toFixed(1)}%を占めています。`,\n        suggestions: ['経費削減のアドバイス', '仕入コストを下げるには？', '人件費の最適化方法']\n      };\n    }\n\n    // 5. 目標・達成度関連\n    if (q.includes('目標') || q.includes('達成')) {\n      const defaultTarget = 25000000; // 全店舗の月間目標\n      const achievement = (thisMonthTotals.sales / defaultTarget) * 100;\n      const remaining = defaultTarget - thisMonthTotals.sales;\n      \n      return {\n        content: `🎯 **目標達成度分析**\\n\\n📊 **今月の進捗:**\\n• 実績: ${formatCurrency(thisMonthTotals.sales)}\\n• 目標: ${formatCurrency(defaultTarget)}\\n• 達成率: **${achievement.toFixed(1)}%**\\n\\n${achievement >= 100 ? '🎉 目標達成おめでとうございます！' : achievement >= 80 ? '👍 目標まであと少しです！' : '⚠️ 目標達成に向けて対策が必要です'}\\n\\n残り必要売上: ${formatCurrency(Math.max(remaining, 0))}`,\n        suggestions: ['目標達成のための施策', '各店舗の進捗状況', '来月の目標設定']\n      };\n    }\n\n    // 6. トレンド・傾向分析\n    if (q.includes('傾向') || q.includes('トレンド') || q.includes('推移')) {\n      const recentDays = reports.slice(0, 7);\n      const recentSales = recentDays.reduce((sum, r) => sum + r.sales, 0);\n      const avgDailySales = recentSales / Math.max(recentDays.length, 1);\n      \n      return {\n        content: `📈 **売上トレンド分析**\\n\\n📊 **直近7日間:**\\n• 総売上: ${formatCurrency(recentSales)}\\n• 平均日商: ${formatCurrency(avgDailySales)}\\n• 報告件数: ${recentDays.length}件\\n\\n💡 **トレンド:**\\n${avgDailySales > 300000 ? '📈 好調な売上推移です' : avgDailySales > 200000 ? '📊 安定した売上です' : '📉 売上向上の施策が必要です'}`,\n        suggestions: ['週末と平日の比較', '季節要因の影響', '売上向上の提案']\n      };\n    }\n\n    // 7. 時間帯・曜日分析\n    if (q.includes('時間') || q.includes('曜日') || q.includes('ピーク')) {\n      return {\n        content: `⏰ **営業時間分析**\\n\\n📊 **一般的な飲食店の傾向:**\\n• ランチタイム: 11:30-14:00\\n• ディナータイム: 17:30-22:00\\n• 週末は平日比 140%の売上\\n\\n💡 **改善提案:**\\n• アイドルタイムの有効活用\\n• ハッピーアワーの導入\\n• 週末限定メニューの展開`,\n        suggestions: ['ピークタイムの売上最大化', 'アイドルタイム対策', '曜日別戦略']\n      };\n    }\n\n    // 8. コスト削減・改善提案\n    if (q.includes('改善') || q.includes('削減') || q.includes('コスト') || q.includes('節約')) {\n      const avgExpenseRatio = thisMonthTotals.expenses / thisMonthTotals.sales * 100;\n      \n      return {\n        content: `💡 **経営改善提案**\\n\\n📊 **現在の経費率:** ${avgExpenseRatio.toFixed(1)}%\\n\\n🎯 **改善アクション:**\\n• 仕入先の見直し → 5-10%コスト削減可能\\n• エネルギー効率化 → 光熱費10%削減\\n• スタッフシフト最適化 → 人件費効率向上\\n• 食材ロス削減 → 仕入コスト5%改善\\n\\n📈 **期待効果:** 利益率3-5%向上`,\n        suggestions: ['具体的な仕入先変更案', 'シフト最適化方法', '食材ロス削減策']\n      };\n    }\n\n    // 9. 予測・将来分析\n    if (q.includes('予測') || q.includes('将来') || q.includes('来月') || q.includes('見込み')) {\n      const monthlyGrowth = lastMonthTotals.sales > 0 ? ((thisMonthTotals.sales - lastMonthTotals.sales) / lastMonthTotals.sales) * 100 : 0;\n      const predictedNextMonth = thisMonthTotals.sales * (1 + monthlyGrowth / 100);\n      \n      return {\n        content: `🔮 **売上予測分析**\\n\\n📊 **来月予測:**\\n• 予想売上: ${formatCurrency(predictedNextMonth)}\\n• 成長率: ${monthlyGrowth.toFixed(1)}%\\n\\n🎯 **予測根拠:**\\n• 過去の成長トレンド\\n• 季節要因\\n• 現在の営業状況\\n\\n${monthlyGrowth > 0 ? '📈 成長トレンド継続予想' : '📉 売上回復施策の検討が必要'}`,\n        suggestions: ['予測を向上させる方法', '成長戦略の提案', 'リスク要因の分析']\n      };\n    }\n\n    // 10. 具体的な数値質問\n    if (q.includes('いくら') || q.includes('金額') || q.includes('円')) {\n      return {\n        content: `💰 **金額サマリー**\\n\\n📊 **今月の実績:**\\n• 売上: ${formatCurrency(thisMonthTotals.sales)}\\n• 経費: ${formatCurrency(thisMonthTotals.expenses)}\\n• 粗利: ${formatCurrency(thisMonthTotals.sales - reports.reduce((sum, r) => sum + r.purchase, 0))}\\n• 営業利益: ${formatCurrency(thisMonthTotals.profit)}\\n\\n💡 利益率: ${thisMonthTotals.sales > 0 ? ((thisMonthTotals.profit / thisMonthTotals.sales) * 100).toFixed(1) : 0}%`,\n        suggestions: ['利益を増やすには？', '経費の最適化', '売上向上施策']\n      };\n    }\n\n    // 11. 一般的な経営相談\n    const suggestions = [\n      '今月の売上合計は？',\n      '利益率分析をして',\n      '店舗別パフォーマンス比較',\n      '経費内訳を詳しく',\n      '目標達成度の確認',\n      '来月の売上予測',\n      '改善提案をして'\n    ];\n\n    return {\n      content: `🤖 **申し訳ございません**\\n\\nその質問は理解できませんでした。\\n\\n📝 **よくある質問例:**\\n• 売上・利益に関する質問\\n• 店舗比較・ランキング\\n• 目標達成度の確認\\n• 経費削減のアドバイス\\n• 将来予測\\n\\n💡 具体的な質問をお試しください！`,\n      suggestions\n    };\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    // AI応答の生成（リアルな遅延でUX向上）\n    setTimeout(() => {\n      const response = generateAIResponse(inputMessage);\n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'ai',\n        content: response.content,\n        suggestions: response.suggestions,\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, aiMessage]);\n      setIsLoading(false);\n    }, 1000 + Math.random() * 1000); // 1-2秒のランダムな遅延\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputMessage(suggestion);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const clearChat = () => {\n    setMessages([{\n      id: '1',\n      type: 'ai',\n      content: 'チャット履歴をクリアしました。🗑️\\n\\n新しい質問をお聞かせください！',\n      suggestions: [\n        '今月の売上合計は？',\n        '店舗別パフォーマンス',\n        '利益率分析',\n        '経費削減提案'\n      ],\n      timestamp: new Date()\n    }]);\n  };\n\n  if (!isOpen) {\n    return (\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"w-16 h-16 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300\"\n        >\n          <div className=\"relative\">\n            <MessageCircle className=\"w-7 h-7 text-white\" />\n            <Sparkles className=\"w-4 h-4 text-yellow-300 absolute -top-1 -right-1\" />\n          </div>\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <Card className={`${\n        isMinimized ? 'w-80 h-20' : 'w-96 h-[32rem]'\n      } shadow-2xl transition-all duration-300 border-0 overflow-hidden`}>\n        <CardHeader className={`pb-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white ${isMinimized ? 'rounded-lg' : 'rounded-t-lg'}`}>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <div className=\"relative\">\n                <Bot className=\"w-5 h-5\" />\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              </div>\n              業務分析AI（β版）\n            </CardTitle>\n            <div className=\"flex items-center gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsMinimized(!isMinimized)}\n                className=\"w-8 h-8 p-0 text-white hover:bg-white/20\"\n              >\n                {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                className=\"w-8 h-8 p-0 text-white hover:bg-white/20\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          {!isMinimized && (\n            <p className=\"text-xs text-blue-100 mt-1\">\n              💬 売上・利益・経費について何でもお聞きください\n            </p>\n          )}\n        </CardHeader>\n        \n        {!isMinimized && (\n          <CardContent className=\"flex flex-col h-96 p-0\">\n            {/* Messages Area */}\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\">\n              {messages.map((message) => (\n                <div key={message.id} className=\"space-y-3\">\n                  <div className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>\n                    {message.type === 'ai' && (\n                      <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center flex-shrink-0\">\n                        <Bot className=\"w-4 h-4 text-white\" />\n                      </div>\n                    )}\n                    <div className={`max-w-[85%] px-4 py-3 rounded-2xl text-sm leading-relaxed ${\n                      message.type === 'user'\n                        ? 'bg-blue-600 text-white rounded-br-md shadow-lg'\n                        : 'bg-white text-gray-900 rounded-bl-md shadow-lg border border-gray-200'\n                    }`}>\n                      <div className=\"whitespace-pre-line\">{message.content}</div>\n                      <p className={`text-xs mt-2 ${\n                        message.type === 'user' ? 'text-blue-100' : 'text-gray-500'\n                      }`}>\n                        {message.timestamp.toLocaleTimeString('ja-JP', { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </p>\n                    </div>\n                    {message.type === 'user' && (\n                      <div className=\"w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center flex-shrink-0\">\n                        <User className=\"w-4 h-4 text-gray-600\" />\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* AI提案ボタン */}\n                  {message.type === 'ai' && message.suggestions && (\n                    <div className=\"ml-11 space-y-2\">\n                      <p className=\"text-xs text-gray-500 flex items-center gap-1\">\n                        <HelpCircle className=\"w-3 h-3\" />\n                        おすすめの質問:\n                      </p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {message.suggestions.map((suggestion, index) => (\n                          <button\n                            key={index}\n                            onClick={() => handleSuggestionClick(suggestion)}\n                            className=\"px-3 py-1 bg-blue-50 text-blue-700 text-xs rounded-full hover:bg-blue-100 transition-colors border border-blue-200\"\n                          >\n                            {suggestion}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n              \n              {isLoading && (\n                <div className=\"flex gap-3 justify-start\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div className=\"bg-white px-4 py-3 rounded-2xl rounded-bl-md shadow-lg border border-gray-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"flex gap-1\">\n                        <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                      <span className=\"text-xs text-gray-500\">分析中...</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n            \n            {/* Input Area */}\n            <div className=\"p-4 border-t border-gray-200 bg-white\">\n              <div className=\"flex gap-2 mb-2\">\n                <button\n                  onClick={clearChat}\n                  className=\"text-xs text-gray-500 hover:text-gray-700 px-2 py-1 rounded hover:bg-gray-100 transition-colors\"\n                >\n                  🗑️ 履歴クリア\n                </button>\n                <div className=\"text-xs text-gray-400 flex items-center gap-1\">\n                  <Sparkles className=\"w-3 h-3\" />\n                  {reports.length}件のデータで分析中\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <div className=\"flex-1 relative\">\n                  <input\n                    type=\"text\"\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"例: 売上向上の具体的な戦略を提案して\"\n                    className=\"w-full px-4 py-3 text-sm border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50 focus:bg-white transition-colors\"\n                    disabled={isLoading}\n                  />\n                  {inputMessage && (\n                    <button\n                      onClick={() => setInputMessage('')}\n                      className=\"absolute right-12 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </button>\n                  )}\n                </div>\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={isLoading || !inputMessage.trim()}\n                  className=\"px-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 rounded-xl\"\n                >\n                  {isLoading ? (\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  ) : (\n                    <Send className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-400 mt-2 text-center\">\n                🤖 ChatGPT連携 | Enter送信 | 高度なAI経営分析\n              </p>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n};",
  "src/components/Dashboard/AIReportNotification.tsx": "import { useState, useEffect } from 'react';\nimport { FileText, X, ExternalLink } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../../lib/supabase';\nimport { Badge } from '../ui/badge';\nimport { Button } from '../ui/button';\n\ninterface RecentReport {\n  id: string;\n  title: string;\n  report_type: 'weekly' | 'monthly';\n  generated_at: string;\n}\n\nexport function AIReportNotification() {\n  const [recentReports, setRecentReports] = useState<RecentReport[]>([]);\n  const [dismissed, setDismissed] = useState<string[]>([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchRecentReports();\n\n    const dismissedIds = localStorage.getItem('dismissedReports');\n    if (dismissedIds) {\n      setDismissed(JSON.parse(dismissedIds));\n    }\n\n    const subscription = supabase\n      .channel('ai_reports_notifications')\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'ai_generated_reports',\n        },\n        (payload) => {\n          fetchRecentReports();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const fetchRecentReports = async () => {\n    try {\n      const oneDayAgo = new Date();\n      oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n\n      const { data, error } = await supabase\n        .from('ai_generated_reports')\n        .select('id, title, report_type, generated_at')\n        .gte('generated_at', oneDayAgo.toISOString())\n        .order('generated_at', { ascending: false })\n        .limit(3);\n\n      if (error) throw error;\n\n      setRecentReports(data || []);\n    } catch (err) {\n      console.error('Failed to fetch recent reports:', err);\n    }\n  };\n\n  const handleDismiss = (reportId: string) => {\n    const newDismissed = [...dismissed, reportId];\n    setDismissed(newDismissed);\n    localStorage.setItem('dismissedReports', JSON.stringify(newDismissed));\n  };\n\n  const handleViewReport = (reportId: string) => {\n    navigate(`/ai-reports?report=${reportId}`);\n  };\n\n  const visibleReports = recentReports.filter((report) => !dismissed.includes(report.id));\n\n  if (visibleReports.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-40 space-y-3 max-w-sm\">\n      {visibleReports.map((report) => (\n        <div\n          key={report.id}\n          className=\"bg-white border-2 border-blue-500 rounded-lg shadow-2xl p-4 animate-slide-in\"\n        >\n          <div className=\"flex items-start justify-between mb-3\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"bg-blue-500 rounded-full p-2\">\n                <FileText className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-semibold text-gray-900\">新しいレポート</p>\n                <Badge variant={report.report_type === 'weekly' ? 'default' : 'secondary'} className=\"text-xs\">\n                  {report.report_type === 'weekly' ? '週次' : '月次'}\n                </Badge>\n              </div>\n            </div>\n            <button\n              onClick={() => handleDismiss(report.id)}\n              className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          <p className=\"text-sm text-gray-700 mb-1 font-medium line-clamp-2\">\n            {report.title}\n          </p>\n\n          <p className=\"text-xs text-gray-500 mb-4\">\n            {new Date(report.generated_at).toLocaleString('ja-JP')}\n          </p>\n\n          <div className=\"flex gap-2\">\n            <Button\n              size=\"sm\"\n              onClick={() => handleViewReport(report.id)}\n              className=\"flex-1\"\n            >\n              <ExternalLink className=\"w-3 h-3 mr-1\" />\n              表示\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => handleDismiss(report.id)}\n            >\n              閉じる\n            </Button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n",
  "src/components/Dashboard/AnalyticsDashboard.tsx": "import React, { useState, useMemo } from 'react';\nimport { DailyReport } from '../../types';\nimport { PeriodSelector } from './PeriodSelector';\nimport { SalesChart } from '../Charts/SalesChart';\nimport { ExpenseChart } from '../Charts/ExpenseChart';\nimport { formatCurrency, formatPercent } from '../../utils/calculations';\nimport { Calendar, TrendingUp, TrendingDown, BarChart3, PieChart, Target, AlertCircle } from 'lucide-react';\nimport { useTargets } from '../../hooks/useTargets';\n\ninterface AnalyticsDashboardProps {\n  reports: DailyReport[];\n  stores: Array<{ id: string; name: string; }>;\n  userId?: string | null;\n}\n\nexport const AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({ reports, stores, userId = null }) => {\n  const [selectedPeriod, setSelectedPeriod] = useState<'daily' | 'weekly' | 'monthly'>('monthly');\n  const [selectedRange, setSelectedRange] = useState<'week' | 'month' | 'quarter' | 'year'>('month');\n  const [selectedStoreId, setSelectedStoreId] = useState<string>('all');\n  const { getAllStoresTarget, getTarget } = useTargets(userId);\n\n  // 期間に基づいてレポートをフィルタリング\n  const filteredReports = useMemo(() => {\n    const now = new Date();\n    let startDate: Date;\n\n    switch (selectedRange) {\n      case 'week':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'month':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n      case 'quarter':\n        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n        break;\n      case 'year':\n        startDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);\n        break;\n    }\n\n    return reports.filter(report => {\n      const reportDate = new Date(report.date);\n      const inDateRange = reportDate >= startDate && reportDate <= now;\n      const inStoreFilter = selectedStoreId === 'all' || report.storeId === selectedStoreId;\n      return inDateRange && inStoreFilter;\n    });\n  }, [reports, selectedRange, selectedStoreId]);\n\n  // 期間別集計データ\n  const aggregatedData = useMemo(() => {\n    const groupedData = new Map<string, {\n      sales: number;\n      expenses: number;\n      profit: number;\n      count: number;\n    }>();\n\n    filteredReports.forEach(report => {\n      const date = new Date(report.date);\n      let key: string;\n\n      switch (selectedPeriod) {\n        case 'daily':\n          key = report.date;\n          break;\n        case 'weekly':\n          // 週の始まり（月曜日）を取得\n          const mondayDate = new Date(date);\n          mondayDate.setDate(date.getDate() - ((date.getDay() + 6) % 7));\n          key = mondayDate.toISOString().split('T')[0];\n          break;\n        case 'monthly':\n          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          break;\n      }\n\n      if (!groupedData.has(key)) {\n        groupedData.set(key, { sales: 0, expenses: 0, profit: 0, count: 0 });\n      }\n\n      const data = groupedData.get(key)!;\n      const expenses = report.purchase + report.laborCost + report.utilities + \n                     report.promotion + report.cleaning + report.misc + \n                     report.communication + report.others;\n      \n      data.sales += report.sales;\n      data.expenses += expenses;\n      data.profit += (report.sales - expenses);\n      data.count += 1;\n    });\n\n    return Array.from(groupedData.entries())\n      .map(([period, data]) => ({\n        period,\n        ...data,\n        profitMargin: data.sales > 0 ? (data.profit / data.sales) * 100 : 0\n      }))\n      .sort((a, b) => a.period.localeCompare(b.period));\n  }, [filteredReports, selectedPeriod]);\n\n  // 総計\n  const totals = useMemo(() => {\n    return aggregatedData.reduce((acc, curr) => ({\n      sales: acc.sales + curr.sales,\n      expenses: acc.expenses + curr.expenses,\n      profit: acc.profit + curr.profit,\n      count: acc.count + curr.count\n    }), { sales: 0, expenses: 0, profit: 0, count: 0 });\n  }, [aggregatedData]);\n\n  // 現在の年月\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = currentDate.getMonth() + 1;\n\n  // 目標データの取得\n  const targetData = useMemo(() => {\n    if (selectedStoreId === 'all') {\n      return getAllStoresTarget(currentYear, currentMonth);\n    } else {\n      const target = getTarget(selectedStoreId, currentYear, currentMonth);\n      return target ? {\n        totalSales: target.targetSales,\n        averageProfitMargin: target.targetProfitMargin\n      } : null;\n    }\n  }, [selectedStoreId, currentYear, currentMonth, getAllStoresTarget, getTarget]);\n\n  // 目標達成状況\n  const targetAnalysis = useMemo(() => {\n    if (!targetData || totals.sales === 0) return null;\n\n    const salesAchievement = (totals.sales / targetData.totalSales) * 100;\n    const profitMarginAchievement = totals.sales > 0 \n      ? ((totals.profit / totals.sales * 100) / targetData.averageProfitMargin) * 100\n      : 0;\n\n    return {\n      salesTarget: targetData.totalSales,\n      salesAchievement,\n      profitMarginTarget: targetData.averageProfitMargin,\n      profitMarginAchievement,\n      salesGap: totals.sales - targetData.totalSales,\n      isProfitMarginOnTarget: profitMarginAchievement >= 100\n    };\n  }, [targetData, totals]);\n\n  // 前期比較（同期間の前の期間と比較）\n  const previousPeriodComparison = useMemo(() => {\n    if (aggregatedData.length < 2) return null;\n\n    const currentPeriod = aggregatedData.slice(-Math.ceil(aggregatedData.length / 2));\n    const previousPeriod = aggregatedData.slice(0, Math.floor(aggregatedData.length / 2));\n\n    const currentTotal = currentPeriod.reduce((acc, curr) => acc + curr.sales, 0);\n    const previousTotal = previousPeriod.reduce((acc, curr) => acc + curr.sales, 0);\n\n    if (previousTotal === 0) return null;\n\n    const growthRate = ((currentTotal - previousTotal) / previousTotal) * 100;\n    return { currentTotal, previousTotal, growthRate };\n  }, [aggregatedData]);\n\n  const formatPeriodLabel = (period: string) => {\n    switch (selectedPeriod) {\n      case 'daily':\n        return new Date(period).toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' });\n      case 'weekly':\n        const weekStart = new Date(period);\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        return `${weekStart.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' })}週`;\n      case 'monthly':\n        const [year, month] = period.split('-');\n        return `${year}年${month}月`;\n      default:\n        return period;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* コントロールパネル */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* 期間・範囲選択 */}\n          <div className=\"lg:col-span-2\">\n            <PeriodSelector\n              selectedPeriod={selectedPeriod}\n              onPeriodChange={setSelectedPeriod}\n              selectedRange={selectedRange}\n              onRangeChange={setSelectedRange}\n            />\n          </div>\n\n          {/* 店舗選択 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              対象店舗\n            </label>\n            <select\n              value={selectedStoreId}\n              onChange={(e) => setSelectedStoreId(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              <option value=\"all\">（全店舗）</option>\n              {stores.map(store => (\n                <option key={store.id} value={store.id}>{store.name}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* 目標vs実績サマリー */}\n      {targetAnalysis && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <Target className=\"w-5 h-5 text-purple-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              目標 vs 実績（{currentYear}年{currentMonth}月）\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* 売上目標達成状況 */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-medium text-gray-700\">売上目標達成状況</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">実績:</span>\n                  <span className=\"font-medium\">{formatCurrency(totals.sales)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">目標:</span>\n                  <span className=\"font-medium\">{formatCurrency(targetAnalysis.salesTarget)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">達成率:</span>\n                  <span className={`font-bold ${\n                    targetAnalysis.salesAchievement >= 100 ? 'text-green-600' : \n                    targetAnalysis.salesAchievement >= 80 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {targetAnalysis.salesAchievement.toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                  <div \n                    className={`h-3 rounded-full transition-all duration-300 ${\n                      targetAnalysis.salesAchievement >= 100 ? 'bg-green-500' : \n                      targetAnalysis.salesAchievement >= 80 ? 'bg-yellow-500' : 'bg-red-500'\n                    }`}\n                    style={{ width: `${Math.min(targetAnalysis.salesAchievement, 100)}%` }}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">差額:</span>\n                  <span className={`font-medium ${\n                    targetAnalysis.salesGap >= 0 ? 'text-green-600' : 'text-red-600'\n                  }`}>\n                    {targetAnalysis.salesGap >= 0 ? '+' : ''}{formatCurrency(targetAnalysis.salesGap)}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* 利益率目標達成状況 */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-medium text-gray-700\">利益率目標達成状況</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">実績:</span>\n                  <span className=\"font-medium\">\n                    {formatPercent((totals.profit / totals.sales))}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">目標:</span>\n                  <span className=\"font-medium\">\n                    {formatPercent(targetAnalysis.profitMarginTarget / 100)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">達成率:</span>\n                  <span className={`font-bold ${\n                    targetAnalysis.profitMarginAchievement >= 100 ? 'text-green-600' : \n                    targetAnalysis.profitMarginAchievement >= 80 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {targetAnalysis.profitMarginAchievement.toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                  <div \n                    className={`h-3 rounded-full transition-all duration-300 ${\n                      targetAnalysis.profitMarginAchievement >= 100 ? 'bg-green-500' : \n                      targetAnalysis.profitMarginAchievement >= 80 ? 'bg-yellow-500' : 'bg-red-500'\n                    }`}\n                    style={{ width: `${Math.min(targetAnalysis.profitMarginAchievement, 100)}%` }}\n                  ></div>\n                </div>\n                {!targetAnalysis.isProfitMarginOnTarget && (\n                  <div className=\"flex items-center gap-2 mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded\">\n                    <AlertCircle className=\"w-4 h-4 text-yellow-600\" />\n                    <span className=\"text-xs text-yellow-800\">\n                      利益率改善が必要です\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* サマリーカード */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">総売上</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(totals.sales)}</p>\n              {targetAnalysis && (\n                <p className=\"text-xs text-gray-500\">\n                  目標: {formatCurrency(targetAnalysis.salesTarget)}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-2 bg-red-100 rounded-lg\">\n              <PieChart className=\"w-6 h-6 text-red-600\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">総経費</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(totals.expenses)}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center\">\n            <div className={`p-2 rounded-lg ${totals.profit >= 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n              {totals.profit >= 0 ? (\n                <TrendingUp className=\"w-6 h-6 text-green-600\" />\n              ) : (\n                <TrendingDown className=\"w-6 h-6 text-red-600\" />\n              )}\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">営業利益</p>\n              <p className={`text-2xl font-bold ${totals.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatCurrency(totals.profit)}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-2 bg-purple-100 rounded-lg\">\n              <Calendar className=\"w-6 h-6 text-purple-600\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">報告件数</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{totals.count}</p>\n              {previousPeriodComparison && (\n                <p className={`text-sm ${previousPeriodComparison.growthRate >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  前期比 {previousPeriodComparison.growthRate >= 0 ? '+' : ''}{previousPeriodComparison.growthRate.toFixed(1)}%\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 推移テーブル */}\n      <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            {selectedPeriod === 'daily' ? '日別' : selectedPeriod === 'weekly' ? '週別' : '月別'}推移\n            ({selectedRange === 'week' ? '過去1週間' : \n              selectedRange === 'month' ? '過去1ヶ月' : \n              selectedRange === 'quarter' ? '過去3ヶ月' : '過去1年'})\n          </h3>\n        </div>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  期間\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  売上\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  経費\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  営業利益\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  利益率\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  報告数\n                </th>\n                {targetAnalysis && (\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    目標達成率\n                  </th>\n                )}\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {aggregatedData.slice(-10).reverse().map((data) => (\n                <tr key={data.period} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                    {formatPeriodLabel(data.period)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatCurrency(data.sales)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatCurrency(data.expenses)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <span className={data.profit >= 0 ? 'text-green-600' : 'text-red-600'}>\n                      {formatCurrency(data.profit)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <span className={\n                      data.profitMargin >= 15 ? 'text-green-600' : \n                      data.profitMargin >= 10 ? 'text-yellow-600' : 'text-red-600'\n                    }>\n                      {formatPercent(data.profitMargin / 100)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {data.count}件\n                  </td>\n                  {targetAnalysis && (\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {data.period === aggregatedData[aggregatedData.length - 1]?.period ? (\n                        <div className=\"space-y-1\">\n                          <div className={`text-xs font-medium ${\n                            targetAnalysis.salesAchievement >= 100 ? 'text-green-600' : \n                            targetAnalysis.salesAchievement >= 80 ? 'text-yellow-600' : 'text-red-600'\n                          }`}>\n                            売上: {targetAnalysis.salesAchievement.toFixed(1)}%\n                          </div>\n                          <div className={`text-xs font-medium ${\n                            targetAnalysis.profitMarginAchievement >= 100 ? 'text-green-600' : \n                            targetAnalysis.profitMarginAchievement >= 80 ? 'text-yellow-600' : 'text-red-600'\n                          }`}>\n                            利益率: {targetAnalysis.profitMarginAchievement.toFixed(1)}%\n                          </div>\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">-</span>\n                      )}\n                    </td>\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* チャート */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <SalesChart \n          reports={filteredReports} \n          targetSales={targetAnalysis?.salesTarget}\n        />\n        <ExpenseChart reports={filteredReports} />\n      </div>\n    </div>\n  );\n};",
  "src/components/Dashboard/DailyTargetInput.tsx": "import React, { useState, useEffect } from 'react'\nimport { Save, Edit2, X, Target } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { formatCurrency } from '@/lib/format'\nimport { cn } from '@/lib/utils'\n\ninterface DailyTargetInputProps {\n  date: string\n  storeId: string\n  currentTarget: number | null\n  onSave: (targetSales: number) => Promise<{ success: boolean; error: string | null }>\n  isLoading?: boolean\n  className?: string\n}\n\nexport const DailyTargetInput: React.FC<DailyTargetInputProps> = ({\n  date,\n  storeId,\n  currentTarget,\n  onSave,\n  isLoading = false,\n  className\n}) => {\n  const [isEditing, setIsEditing] = useState(false)\n  const [inputValue, setInputValue] = useState('')\n  const [saving, setSaving] = useState(false)\n  const [saveSuccess, setSaveSuccess] = useState(false)\n\n  useEffect(() => {\n    if (currentTarget !== null && currentTarget !== undefined) {\n      setInputValue(currentTarget.toString())\n    } else {\n      setInputValue('')\n    }\n  }, [currentTarget])\n\n  const handleEdit = () => {\n    setIsEditing(true)\n    setSaveSuccess(false)\n  }\n\n  const handleCancel = () => {\n    setIsEditing(false)\n    setInputValue(currentTarget?.toString() || '')\n    setSaveSuccess(false)\n  }\n\n  const handleSave = async () => {\n    const value = parseInt(inputValue.replace(/[^0-9]/g, ''), 10)\n    if (isNaN(value) || value <= 0) {\n      alert('有効な金額を入力してください')\n      return\n    }\n\n    setSaving(true)\n    setSaveSuccess(false)\n\n    const result = await onSave(value)\n\n    setSaving(false)\n\n    if (result.success) {\n      setIsEditing(false)\n      setSaveSuccess(true)\n      setTimeout(() => {\n        setSaveSuccess(false)\n      }, 2000)\n    } else {\n      alert(result.error || '目標の保存に失敗しました')\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleSave()\n    } else if (e.key === 'Escape') {\n      handleCancel()\n    }\n  }\n\n  if (storeId === 'all') {\n    return null\n  }\n\n  return (\n    <div className={cn('space-y-2', className)}>\n      <div className=\"flex items-center gap-2\">\n        <Target className=\"h-4 w-4 text-blue-600\" />\n        <span className=\"text-sm font-medium text-muted-foreground\">本日の売上目標</span>\n      </div>\n\n      {!isEditing ? (\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex-1\">\n            {currentTarget !== null && currentTarget !== undefined ? (\n              <div className=\"text-lg font-bold text-blue-600\">\n                {formatCurrency(currentTarget)}\n              </div>\n            ) : (\n              <div className=\"text-sm text-muted-foreground italic\">\n                未設定\n              </div>\n            )}\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleEdit}\n            disabled={isLoading}\n            className=\"min-h-[36px]\"\n          >\n            <Edit2 className=\"h-4 w-4 mr-1\" />\n            {currentTarget !== null ? '変更' : '設定'}\n          </Button>\n          {saveSuccess && (\n            <span className=\"text-xs text-green-600 font-medium animate-pulse\">\n              保存しました\n            </span>\n          )}\n        </div>\n      ) : (\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"text\"\n            inputMode=\"numeric\"\n            pattern=\"[0-9]*\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value.replace(/[^0-9]/g, ''))}\n            onKeyDown={handleKeyDown}\n            placeholder=\"例: 300000\"\n            autoFocus\n            className=\"flex-1 px-3 py-2 rounded border border-input bg-background text-base font-mono min-h-[36px]\"\n          />\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            onClick={handleSave}\n            disabled={saving}\n            className=\"min-h-[36px]\"\n          >\n            <Save className=\"h-4 w-4 mr-1\" />\n            {saving ? '保存中...' : '保存'}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleCancel}\n            disabled={saving}\n            className=\"min-h-[36px]\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n",
  "src/components/Dashboard/DataTable.tsx": "import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { \n  ChevronLeft, \n  ChevronRight, \n  ChevronsLeft, \n  ChevronsRight,\n  ArrowUpDown,\n  ArrowUp,\n  ArrowDown \n} from 'lucide-react';\nimport { formatCurrency, formatPercent } from '@/lib/utils';\nimport { DailyReport } from '@/types';\n\ninterface DataTableProps {\n  reports: DailyReport[];\n  period?: 'daily' | 'weekly' | 'monthly';\n  onPeriodChange?: (period: 'daily' | 'weekly' | 'monthly') => void;\n}\n\ntype SortField = 'date' | 'storeName' | 'sales' | 'expenses' | 'profit';\ntype SortDirection = 'asc' | 'desc';\n\nexport const DataTable: React.FC<DataTableProps> = ({ \n  reports, \n  period = 'daily',\n  onPeriodChange \n}) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortField, setSortField] = useState<SortField>('date');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const itemsPerPage = 10;\n\n  // データの加工と集計\n  const processedData = React.useMemo(() => {\n    const groupedData = new Map();\n    \n    reports.forEach(report => {\n      const date = new Date(report.date);\n      let key: string;\n      let displayDate: string;\n      \n      switch (period) {\n        case 'daily':\n          key = `${report.date}-${report.storeId}`;\n          displayDate = date.toLocaleDateString('ja-JP');\n          break;\n        case 'weekly':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          key = `${weekStart.toISOString().split('T')[0]}-${report.storeId}`;\n          displayDate = `${weekStart.toLocaleDateString('ja-JP')}週`;\n          break;\n        case 'monthly':\n          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${report.storeId}`;\n          displayDate = date.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' });\n          break;\n        default:\n          key = `${report.date}-${report.storeId}`;\n          displayDate = date.toLocaleDateString('ja-JP');\n      }\n      \n      if (!groupedData.has(key)) {\n        groupedData.set(key, {\n          id: key,\n          date: displayDate,\n          storeName: report.storeName,\n          sales: 0,\n          expenses: 0,\n          profit: 0,\n          profitMargin: 0,\n          reportCount: 0\n        });\n      }\n      \n      const data = groupedData.get(key);\n      const totalExpenses = report.purchase + report.laborCost + report.utilities + \n                           report.promotion + report.cleaning + report.misc + \n                           report.communication + report.others;\n      \n      data.sales += report.sales;\n      data.expenses += totalExpenses;\n      data.profit = data.sales - data.expenses;\n      data.profitMargin = data.sales > 0 ? (data.profit / data.sales) * 100 : 0;\n      data.reportCount += 1;\n    });\n    \n    // 全店舗合計の場合は期間別にデータを再集計\n    if (reports.length > 0) {\n      const allStoresData = new Map();\n      \n      Array.from(groupedData.values()).forEach(item => {\n        const periodKey = item.date;\n        \n        if (!allStoresData.has(periodKey)) {\n          allStoresData.set(periodKey, {\n            id: periodKey,\n            date: periodKey,\n            storeName: '全店舗合計',\n            sales: 0,\n            expenses: 0,\n            profit: 0,\n            profitMargin: 0,\n            reportCount: 0\n          });\n        }\n        \n        const aggregated = allStoresData.get(periodKey);\n        aggregated.sales += item.sales;\n        aggregated.expenses += item.expenses;\n        aggregated.profit += item.profit;\n        aggregated.reportCount += item.reportCount;\n        aggregated.profitMargin = aggregated.sales > 0 ? (aggregated.profit / aggregated.sales) * 100 : 0;\n      });\n      \n      return Array.from(allStoresData.values());\n    }\n    \n    return Array.from(groupedData.values());\n  }, [reports, period]);\n\n  // ソート処理\n  const sortedData = React.useMemo(() => {\n    return [...processedData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n      \n      if (sortField === 'date') {\n        aValue = new Date(a.date).getTime();\n        bValue = new Date(b.date).getTime();\n      }\n      \n      if (sortDirection === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n  }, [processedData, sortField, sortDirection]);\n\n  // ページネーション\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedData = sortedData.slice(startIndex, startIndex + itemsPerPage);\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  };\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) return <ArrowUpDown className=\"w-4 h-4 text-gray-400\" />;\n    return sortDirection === 'asc' ? \n      <ArrowUp className=\"w-4 h-4 text-blue-600\" /> : \n      <ArrowDown className=\"w-4 h-4 text-blue-600\" />;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">詳細レポート</CardTitle>\n          {onPeriodChange && (\n            <Tabs value={period} onValueChange={(value) => onPeriodChange(value as any)}>\n              <TabsList>\n                <TabsTrigger value=\"daily\">日次</TabsTrigger>\n                <TabsTrigger value=\"weekly\">週次</TabsTrigger>\n                <TabsTrigger value=\"monthly\">月次</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        {paginatedData.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500\">データがありません</p>\n          </div>\n        ) : (\n          <>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left p-3\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('date')}\n                        className=\"flex items-center gap-2 font-medium\"\n                      >\n                        期間\n                        <SortIcon field=\"date\" />\n                      </Button>\n                    </th>\n                    <th className=\"text-left p-3\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('storeName')}\n                        className=\"flex items-center gap-2 font-medium\"\n                      >\n                        店舗名\n                        <SortIcon field=\"storeName\" />\n                      </Button>\n                    </th>\n                    <th className=\"text-left p-3\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('sales')}\n                        className=\"flex items-center gap-2 font-medium\"\n                      >\n                        売上\n                        <SortIcon field=\"sales\" />\n                      </Button>\n                    </th>\n                    <th className=\"text-left p-3\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('expenses')}\n                        className=\"flex items-center gap-2 font-medium\"\n                      >\n                        経費\n                        <SortIcon field=\"expenses\" />\n                      </Button>\n                    </th>\n                    <th className=\"text-left p-3\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('profit')}\n                        className=\"flex items-center gap-2 font-medium\"\n                      >\n                        営業利益\n                        <SortIcon field=\"profit\" />\n                      </Button>\n                    </th>\n                    <th className=\"text-left p-3\">利益率</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {paginatedData.map((row) => (\n                    <tr key={row.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"p-3 text-sm\">{row.date}</td>\n                      <td className=\"p-3 text-sm font-medium\">{row.storeName}</td>\n                      <td className=\"p-3 text-sm text-blue-600 font-medium\">\n                        {formatCurrency(row.sales)}\n                      </td>\n                      <td className=\"p-3 text-sm text-red-600\">\n                        {formatCurrency(row.expenses)}\n                      </td>\n                      <td className={`p-3 text-sm font-medium ${\n                        row.profit >= 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {formatCurrency(row.profit)}\n                      </td>\n                      <td className={`p-3 text-sm font-medium ${\n                        row.profitMargin >= 15 ? 'text-green-600' : \n                        row.profitMargin >= 10 ? 'text-yellow-600' : 'text-red-600'\n                      }`}>\n                        {formatPercent(row.profitMargin)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-200\">\n                <div className=\"text-sm text-gray-500\">\n                  {startIndex + 1}-{Math.min(startIndex + itemsPerPage, sortedData.length)} / {sortedData.length}件\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(1)}\n                    disabled={currentPage === 1}\n                  >\n                    <ChevronsLeft className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                    disabled={currentPage === 1}\n                  >\n                    <ChevronLeft className=\"w-4 h-4\" />\n                  </Button>\n                  <span className=\"text-sm font-medium px-3\">\n                    {currentPage} / {totalPages}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                    disabled={currentPage === totalPages}\n                  >\n                    <ChevronRight className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(totalPages)}\n                    disabled={currentPage === totalPages}\n                  >\n                    <ChevronsRight className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};",
  "src/components/Dashboard/ExpenseBaselineSettings.tsx": "import React, { useState, useEffect } from 'react'\nimport { Save, X, Calendar, DollarSign, Users, Zap, Hop as Home, Package, Megaphone, Sparkles, MessageSquare, MoveHorizontal as MoreHorizontal } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { getExpenseBaseline, upsertExpenseBaseline } from '@/services/supabase'\nimport { formatCurrency } from '@/lib/format'\n\ninterface ExpenseBaselineSettingsProps {\n  stores: Array<{ id: string; name: string }>\n  onClose: () => void\n  onSaved?: () => void\n}\n\nexport const ExpenseBaselineSettings: React.FC<ExpenseBaselineSettingsProps> = ({\n  stores,\n  onClose,\n  onSaved\n}) => {\n  const currentDate = new Date()\n  const [selectedYear, setSelectedYear] = useState(currentDate.getFullYear())\n  const [selectedMonth, setSelectedMonth] = useState(currentDate.getMonth() + 1)\n  const [selectedStoreId, setSelectedStoreId] = useState(stores[0]?.id || '')\n  const [loading, setLoading] = useState(false)\n  const [notification, setNotification] = useState<{ type: 'success' | 'error'; message: string } | null>(null)\n\n  const [formData, setFormData] = useState({\n    open_days: 26,\n    labor_cost_employee: 0,\n    labor_cost_part_time: 0,\n    utilities: 0,\n    rent: 0,\n    consumables: 0,\n    promotion: 0,\n    cleaning: 0,\n    misc: 0,\n    communication: 0,\n    others: 0\n  })\n\n  const years = Array.from({ length: 5 }, (_, i) => currentDate.getFullYear() - 2 + i)\n  const months = Array.from({ length: 12 }, (_, i) => i + 1)\n\n  useEffect(() => {\n    loadBaseline()\n  }, [selectedStoreId, selectedYear, selectedMonth])\n\n  const loadBaseline = async () => {\n    if (!selectedStoreId) return\n\n    const month = `${selectedYear}-${String(selectedMonth).padStart(2, '0')}`\n    const { data } = await getExpenseBaseline(selectedStoreId, month)\n\n    if (data) {\n      setFormData({\n        open_days: data.open_days,\n        labor_cost_employee: data.labor_cost_employee,\n        labor_cost_part_time: data.labor_cost_part_time,\n        utilities: data.utilities,\n        rent: data.rent || 0,\n        consumables: data.consumables || 0,\n        promotion: data.promotion,\n        cleaning: data.cleaning,\n        misc: data.misc,\n        communication: data.communication,\n        others: data.others\n      })\n    } else {\n      setFormData({\n        open_days: 26,\n        labor_cost_employee: 0,\n        labor_cost_part_time: 0,\n        utilities: 0,\n        rent: 0,\n        consumables: 0,\n        promotion: 0,\n        cleaning: 0,\n        misc: 0,\n        communication: 0,\n        others: 0\n      })\n    }\n  }\n\n  const showNotification = (type: 'success' | 'error', message: string) => {\n    setNotification({ type, message })\n    setTimeout(() => setNotification(null), 3000)\n  }\n\n  const handleSave = async () => {\n    if (!selectedStoreId) {\n      showNotification('error', '店舗を選択してください')\n      return\n    }\n\n    if (formData.open_days < 1 || formData.open_days > 31) {\n      showNotification('error', '稼働日数は1-31日で入力してください')\n      return\n    }\n\n    setLoading(true)\n    const month = `${selectedYear}-${String(selectedMonth).padStart(2, '0')}`\n    const store = stores.find(s => s.id === selectedStoreId)\n\n    const { error } = await upsertExpenseBaseline(selectedStoreId, month, formData)\n    setLoading(false)\n\n    if (error) {\n      showNotification('error', error.message ?? String(error))\n    } else {\n      showNotification('success', `${store?.name}の参考経費を保存しました`)\n      onSaved?.()\n    }\n  }\n\n  const handleInputChange = (field: keyof typeof formData, value: string) => {\n    if (value === '') {\n      setFormData(prev => ({ ...prev, [field]: 0 }))\n      return\n    }\n    const numValue = parseInt(value, 10)\n    if (!isNaN(numValue) && numValue >= 0) {\n      setFormData(prev => ({ ...prev, [field]: numValue }))\n    }\n  }\n\n  const totalMonthly =\n    formData.labor_cost_employee +\n    formData.labor_cost_part_time +\n    formData.utilities +\n    formData.rent +\n    formData.consumables +\n    formData.promotion +\n    formData.cleaning +\n    formData.misc +\n    formData.communication +\n    formData.others\n\n  const dailyAverage = Math.round(totalMonthly / Math.max(formData.open_days, 1))\n\n  const selectedStore = stores.find(s => s.id === selectedStoreId)\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4 overflow-y-auto\">\n      <Card className=\"w-full max-w-3xl my-8\">\n        <CardHeader className=\"border-b\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"w-5 h-5\" />\n              参考経費（月次平均）設定\n            </CardTitle>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            日報入力時の参考KPI計算に使用する月次平均経費を設定します。食材費は日報で入力するため、ここでは設定不要です。\n          </p>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6 pt-6\">\n          {notification && (\n            <div\n              className={`p-4 rounded-lg ${\n                notification.type === 'success'\n                  ? 'bg-green-50 text-green-800 border border-green-200'\n                  : 'bg-red-50 text-red-800 border border-red-200'\n              }`}\n            >\n              {notification.message}\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">対象店舗</label>\n              <select\n                value={selectedStoreId}\n                onChange={e => setSelectedStoreId(e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                {stores.map(store => (\n                  <option key={store.id} value={store.id}>\n                    {store.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">対象年</label>\n              <select\n                value={selectedYear}\n                onChange={e => setSelectedYear(parseInt(e.target.value))}\n                className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                {years.map(year => (\n                  <option key={year} value={year}>\n                    {year}年\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">対象月</label>\n              <select\n                value={selectedMonth}\n                onChange={e => setSelectedMonth(parseInt(e.target.value))}\n                className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                {months.map(month => (\n                  <option key={month} value={month}>\n                    {month}月\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Calendar className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"font-medium text-blue-900\">稼働日数</span>\n            </div>\n            <div className=\"relative\">\n              <input\n                type=\"number\"\n                value={formData.open_days}\n                onChange={e => handleInputChange('open_days', e.target.value)}\n                className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                min=\"1\"\n                max=\"31\"\n              />\n              <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">日</span>\n            </div>\n            <p className=\"text-xs text-blue-600 mt-1\">日割り計算に使用します（通常26日程度）</p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              人件費（月額）\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">社員人件費</label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.labor_cost_employee || ''}\n                    onChange={e => handleInputChange('labor_cost_employee', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">アルバイト人件費</label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.labor_cost_part_time || ''}\n                    onChange={e => handleInputChange('labor_cost_part_time', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">その他経費（月額）</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2 flex items-center gap-2\">\n                  <Zap className=\"w-4 h-4\" />\n                  水道光熱費\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.utilities || ''}\n                    onChange={e => handleInputChange('utilities', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2 flex items-center gap-2\">\n                  <Home className=\"w-4 h-4\" />\n                  賃料\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.rent || ''}\n                    onChange={e => handleInputChange('rent', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2 flex items-center gap-2\">\n                  <Package className=\"w-4 h-4\" />\n                  消耗品費\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.consumables || ''}\n                    onChange={e => handleInputChange('consumables', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2 flex items-center gap-2\">\n                  <Megaphone className=\"w-4 h-4\" />\n                  販促費\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.promotion || ''}\n                    onChange={e => handleInputChange('promotion', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2 flex items-center gap-2\">\n                  <Sparkles className=\"w-4 h-4\" />\n                  清掃費\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.cleaning || ''}\n                    onChange={e => handleInputChange('cleaning', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2 flex items-center gap-2\">\n                  <MessageSquare className=\"w-4 h-4\" />\n                  通信費\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.communication || ''}\n                    onChange={e => handleInputChange('communication', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2 flex items-center gap-2\">\n                  <DollarSign className=\"w-4 h-4\" />\n                  雑費\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.misc || ''}\n                    onChange={e => handleInputChange('misc', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2 flex items-center gap-2\">\n                  <MoreHorizontal className=\"w-4 h-4\" />\n                  その他\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    value={formData.others || ''}\n                    onChange={e => handleInputChange('others', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-right\"\n                    placeholder=\"0\"\n                    step=\"1000\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">円</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gray-50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center font-medium\">\n              <span>月額合計</span>\n              <span className=\"text-lg\">{formatCurrency(totalMonthly)}</span>\n            </div>\n            <div className=\"flex justify-between items-center text-sm text-muted-foreground border-t pt-2\">\n              <span>1日あたり平均（参考値）</span>\n              <span>{formatCurrency(dailyAverage)}</span>\n            </div>\n          </div>\n\n          <div className=\"flex gap-3 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose} className=\"flex-1\">\n              キャンセル\n            </Button>\n            <Button onClick={handleSave} disabled={loading} className=\"flex-1\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              {loading ? '保存中...' : '保存'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
  "src/components/Dashboard/GoogleSheetsStatus.tsx": "import React, { useState, useEffect } from 'react';\nimport { FileSpreadsheet, ExternalLink, Settings, CheckCircle, AlertCircle, RefreshCw } from 'lucide-react';\nimport { SetupGuide } from './SetupGuide';\n\ninterface GoogleSheetsStatusProps {\n  className?: string;\n}\n\nexport const GoogleSheetsStatus: React.FC<GoogleSheetsStatusProps> = ({ className = '' }) => {\n  const [isConfigured, setIsConfigured] = useState(false);\n  const [sheetsUrl, setSheetsUrl] = useState<string>('');\n  const [showSetup, setShowSetup] = useState(false);\n  const [testingConnection, setTestingConnection] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<{\n    tested: boolean;\n    success: boolean;\n    error?: string;\n  }>({ tested: false, success: false });\n\n  useEffect(() => {\n    // Check if Google Sheets is configured\n    const checkConfiguration = () => {\n      const hasApiKey = import.meta.env.VITE_GOOGLE_SHEETS_API_KEY;\n      const hasSheetId = import.meta.env.VITE_GOOGLE_SHEET_ID;\n      const configured = hasApiKey && hasSheetId;\n      \n      setIsConfigured(!!configured);\n      \n      if (hasSheetId) {\n        setSheetsUrl(`https://docs.google.com/spreadsheets/d/${hasSheetId}/edit`);\n      }\n    };\n\n    checkConfiguration();\n  }, []);\n\n  const testSheetsConnection = async () => {\n    setTestingConnection(true);\n    setConnectionStatus({ tested: false, success: false });\n\n    try {\n      const SHEET_ID = '1GWp6bW4WnSc9EFobaYNqhUz6wtMuL6gG74Tg2Osvtco';\n      const API_KEY = import.meta.env.VITE_GOOGLE_SHEETS_API_KEY;\n      \n      // Check for missing or placeholder API key\n      if (!API_KEY || API_KEY.trim() === '' || \n          API_KEY === 'your_google_sheets_api_key_here' || \n          API_KEY === 'your_api_key' || \n          API_KEY.includes('your_') || \n          API_KEY.includes('placeholder')) {\n        setConnectionStatus({\n          tested: true,\n          success: false,\n          error: 'Google Sheets APIキーが設定されていません。.envファイルのVITE_GOOGLE_SHEETS_API_KEYに、Google Cloud Consoleで生成した実際のAPIキーを設定してください。現在はプレースホルダー値のままです。'\n        });\n        return;\n      }\n\n      // Validate API key format\n      if (!API_KEY.startsWith('AIza') || API_KEY.length < 35) {\n        setConnectionStatus({\n          tested: true,\n          success: false,\n          error: `APIキーの形式が正しくありません。Google Sheets APIキーは \"AIza\" で始まり、通常39文字です。現在の値: \"${API_KEY.substring(0, 10)}...\" (${API_KEY.length}文字)`\n        });\n        return;\n      }\n\n      // Test API access to the sheet\n      const testUrl = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}?key=${API_KEY}`;\n      \n      const response = await fetch(testUrl);\n      \n      if (response.ok) {\n        const sheetData = await response.json();\n        console.log('Sheet connection successful:', sheetData.properties?.title);\n        setConnectionStatus({\n          tested: true,\n          success: true\n        });\n        setSheetsUrl(`https://docs.google.com/spreadsheets/d/${SHEET_ID}/edit`);\n      } else {\n        const errorText = await response.text();\n        let errorMessage = 'シートにアクセスできません';\n        \n        if (response.status === 400) {\n          errorMessage = 'APIキーが無効です。Google Cloud Consoleで以下を確認してください：\\n1. APIキーが正しくコピーされているか\\n2. Google Sheets APIが有効になっているか\\n3. APIキーの制限設定が正しいか';\n        } else if (response.status === 403) {\n          errorMessage = 'シートの共有設定を確認してください。「リンクを知っている全員が閲覧可能」に設定する必要があります。';\n        } else if (response.status === 404) {\n          errorMessage = 'シートが見つかりません。URLが正しいか確認してください。';\n        } else if (response.status === 401) {\n          errorMessage = 'APIキーが無効または権限がありません。Google Cloud ConsoleでAPIキーの設定を確認してください。';\n        }\n        \n        console.error('Sheet connection failed:', response.status, errorText);\n        setConnectionStatus({\n          tested: true,\n          success: false,\n          error: errorMessage\n        });\n      }\n    } catch (error) {\n      console.error('Network error during sheet test:', error);\n      setConnectionStatus({\n        tested: true,\n        success: false,\n        error: 'ネットワークエラーが発生しました'\n      });\n    } finally {\n      setTestingConnection(false);\n    }\n  };\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 p-4 ${className}`}>\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center gap-2\">\n          <FileSpreadsheet className=\"w-5 h-5 text-green-600\" />\n          <h3 className=\"text-sm font-medium text-gray-900\">Google Sheets連携</h3>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {isConfigured ? (\n            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n          ) : (\n            <AlertCircle className=\"w-4 h-4 text-orange-500\" />\n          )}\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className={`text-xs px-2 py-1 rounded ${\n          isConfigured \n            ? 'bg-green-100 text-green-800' \n            : 'bg-orange-100 text-orange-800'\n        }`}>\n          {isConfigured ? \n            (connectionStatus.tested ? \n              (connectionStatus.success ? '✓ 連携確認済み' : '⚠ 接続エラー') \n              : '✓ 連携設定済み') \n            : '⚠ 連携未設定'}\n        </div>\n\n        {/* Connection Test Button */}\n        {isConfigured && (\n          <button\n            onClick={testSheetsConnection}\n            disabled={testingConnection}\n            className=\"inline-flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800 transition-colors disabled:opacity-50\"\n          >\n            <RefreshCw className={`w-3 h-3 ${testingConnection ? 'animate-spin' : ''}`} />\n            {testingConnection ? '接続テスト中...' : '接続テスト'}\n          </button>\n        )}\n\n        {/* Connection Status */}\n        {connectionStatus.tested && (\n          <div className={`text-xs p-2 rounded ${\n            connectionStatus.success ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'\n          }`}>\n            {connectionStatus.success ? \n              '✅ シートへの接続に成功しました' : \n              `❌ ${connectionStatus.error}`\n            }\n          </div>\n        )}\n\n        {isConfigured && connectionStatus.success ? (\n          <div className=\"space-y-2\">\n            <p className=\"text-xs text-gray-600\">\n              日次報告が自動的にGoogle Sheetsに保存されます\n            </p>\n            {sheetsUrl && (\n              <a\n                href={sheetsUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800 transition-colors\"\n              >\n                <ExternalLink className=\"w-3 h-3\" />\n                Sheetsを開く\n              </a>\n            )}\n          </div>\n        ) : isConfigured ? (\n          <div className=\"space-y-2\">\n            <p className=\"text-xs text-gray-600\">\n              シートへの接続を確認してください\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            <p className=\"text-xs text-gray-600\">\n              Google Sheets連携を有効にするには設定が必要です\n            </p>\n            <SetupGuide />\n          </div>\n        )}\n      </div>\n\n      {/* Setup Modal */}\n      {showSetup && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-lg shadow-lg max-w-md w-full p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Google Sheets設定</h3>\n              <button\n                onClick={() => setShowSetup(false)}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                ✕\n              </button>\n            </div>\n            \n            <div className=\"space-y-4 text-sm text-gray-700\">\n              <div>\n                <h4 className=\"font-medium mb-2\">1. Google Sheets APIキーを取得</h4>\n                <p className=\"text-xs\">Google Cloud Consoleでプロジェクトを作成し、Sheets APIを有効にしてAPIキーを取得してください。</p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium mb-2\">2. Google Sheetsの共有設定</h4>\n                <p className=\"text-xs\">シートを開き、「共有」ボタンをクリック → 「制限付きアクセス」を「リンクを知っている全員」に変更 → 「閲覧者」または「編集者」を選択してください。</p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium mb-2\">3. 環境変数を設定</h4>\n                <div className=\"bg-gray-100 p-2 rounded text-xs font-mono\">\n                  VITE_GOOGLE_SHEETS_API_KEY=your_api_key<br/>\n                  VITE_GOOGLE_SHEET_ID=1GWp6bW4WnSc9EFobaYNqhUz6wtMuL6gG74Tg2Osvtco\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium mb-2\">4. よくあるエラーの対処法</h4>\n                <ul className=\"text-xs space-y-1\">\n                  <li>• <strong>403エラー</strong>: シートの共有設定を「リンクを知っている全員」に変更</li>\n                  <li>• <strong>404エラー</strong>: シートのURLまたはIDを確認</li>\n                  <li>• <strong>400エラー</strong>: APIキーが無効または制限設定を確認</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};",
  "src/components/Dashboard/KPICards.tsx": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { TrendingUp, TrendingDown, Pen as Yen, Target, AlertCircle } from 'lucide-react';\nimport { formatCurrency, formatPercent } from '@/lib/utils';\n\ninterface KPIData {\n  todaySales: number;\n  todayExpenses: number;\n  todayGrossProfit: number;\n  todayOperatingProfit: number;\n  salesGrowth: number;\n  profitMargin: number;\n}\n\ninterface KPICardsProps {\n  data: KPIData;\n  loading?: boolean;\n}\n\nexport const KPICards: React.FC<KPICardsProps> = ({ data, loading = false }) => {\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardHeader className=\"pb-2\">\n              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-8 bg-gray-200 rounded w-1/2 mb-2\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const kpiItems = [\n    {\n      title: '今日の売上',\n      value: formatCurrency(data.todaySales),\n      trend: data.salesGrowth,\n      icon: Yen,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      description: '前日比'\n    },\n    {\n      title: '今日の経費',\n      value: formatCurrency(data.todayExpenses),\n      trend: null,\n      icon: AlertCircle,\n      color: 'text-red-600',\n      bgColor: 'bg-red-50',\n      description: '支出合計'\n    },\n    {\n      title: '粗利益',\n      value: formatCurrency(data.todayGrossProfit),\n      trend: null,\n      icon: TrendingUp,\n      color: data.todayGrossProfit >= 0 ? 'text-green-600' : 'text-red-600',\n      bgColor: data.todayGrossProfit >= 0 ? 'bg-green-50' : 'bg-red-50',\n      description: '売上 - 仕入'\n    },\n    {\n      title: '営業利益',\n      value: formatCurrency(data.todayOperatingProfit),\n      trend: null,\n      icon: Target,\n      color: data.todayOperatingProfit >= 0 ? 'text-green-600' : 'text-red-600',\n      bgColor: data.todayOperatingProfit >= 0 ? 'bg-green-50' : 'bg-red-50',\n      description: `利益率 ${formatPercent(data.profitMargin)}`\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6\">\n      {kpiItems.map((item, index) => {\n        const IconComponent = item.icon;\n        return (\n          <Card key={index} className=\"hover:shadow-lg transition-shadow duration-200\">\n            <CardHeader className=\"pb-2 px-3 sm:px-6 pt-3 sm:pt-6\">\n              <CardTitle className=\"text-xs sm:text-sm font-medium text-gray-600 flex items-center justify-between\">\n                <span className=\"truncate\">{item.title}</span>\n                <div className={`p-1.5 sm:p-2 rounded-lg ${item.bgColor} flex-shrink-0 ml-2`}>\n                  <IconComponent className={`w-3 h-3 sm:w-4 sm:h-4 ${item.color}`} />\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"px-3 sm:px-6 pb-3 sm:pb-6\">\n              <div className={`text-lg sm:text-2xl font-bold ${item.color} mb-1 truncate`}>\n                {item.value}\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-xs text-gray-500 truncate\">{item.description}</p>\n                {item.trend !== null && (\n                  <div className=\"flex items-center flex-shrink-0 ml-2\">\n                    {item.trend >= 0 ? (\n                      <TrendingUp className=\"w-3 h-3 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"w-3 h-3 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-xs font-medium ${\n                      item.trend >= 0 ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {Math.abs(item.trend).toFixed(1)}%\n                    </span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};",
  "src/components/Dashboard/PerformanceMetrics.tsx": "import React from 'react';\nimport { TrendingUp, TrendingDown, Target, Award, AlertTriangle, Calendar } from 'lucide-react';\nimport { formatCurrency, formatPercent } from '../../utils/calculations';\nimport { useTargets } from '../../hooks/useTargets';\n\ninterface PerformanceData {\n  currentMonth: {\n    sales: number;\n    profit: number;\n    profitMargin: number;\n    reportCount: number;\n  };\n  previousMonth: {\n    sales: number;\n    profit: number;\n    profitMargin: number;\n    reportCount: number;\n  };\n  target: {\n    monthlySales: number;\n    monthlyProfit: number;\n    profitMarginTarget: number;\n  };\n  alerts: Array<{\n    type: 'warning' | 'error' | 'info';\n    message: string;\n    actionRequired?: boolean;\n  }>;\n}\n\ninterface PerformanceMetricsProps {\n  data: PerformanceData;\n  userId?: string | null;\n  selectedStoreId?: string | null;\n}\n\nexport const PerformanceMetrics: React.FC<PerformanceMetricsProps> = ({ \n  data, \n  userId = null, \n  selectedStoreId = null \n}) => {\n  const { getTarget, getAllStoresTarget } = useTargets(userId);\n  const { currentMonth, previousMonth, target, alerts } = data;\n  \n  console.log('🎯 PerformanceMetrics: Debug info', {\n    userId,\n    selectedStoreId,\n    currentMonth,\n    target,\n    hasTargetHook: !!getTarget\n  });\n\n  // 現在の年月を取得\n  const now = new Date();\n  const currentYear = now.getFullYear();\n  const currentMonthNum = now.getMonth() + 1;\n\n  // 設定された目標を取得\n  const customTarget = selectedStoreId && selectedStoreId !== 'all' \n    ? getTarget(selectedStoreId, currentYear, currentMonthNum)\n    : getAllStoresTarget(currentYear, currentMonthNum);\n    \n  console.log('🎯 PerformanceMetrics: Target data', {\n    customTarget,\n    selectedStoreId,\n    currentYear,\n    currentMonthNum\n  });\n\n  // 目標値を使用（設定されていない場合はデフォルト値）\n  const actualTarget = {\n    monthlySales: customTarget ? \n      (selectedStoreId === 'all' ? customTarget.totalSales : (customTarget as any).targetSales) : \n      target.monthlySales,\n    monthlyProfit: customTarget ? \n      (selectedStoreId === 'all' ? \n        customTarget.totalSales * (customTarget.averageProfitMargin / 100) : \n        (customTarget as any).targetSales * ((customTarget as any).targetProfitMargin / 100)\n      ) : target.monthlyProfit,\n    profitMarginTarget: customTarget ?\n      (selectedStoreId === 'all' ? customTarget.averageProfitMargin : (customTarget as any).targetProfitMargin) :\n      target.profitMarginTarget\n  };\n\n  console.log('🎯 PerformanceMetrics: Final target', actualTarget);\n\n  // 前月比計算\n  const salesGrowth = previousMonth.sales > 0 \n    ? ((currentMonth.sales - previousMonth.sales) / previousMonth.sales) * 100 \n    : 0;\n  \n  const profitGrowth = previousMonth.profit > 0\n    ? ((currentMonth.profit - previousMonth.profit) / previousMonth.profit) * 100\n    : 0;\n\n  // 目標達成率\n  const salesAchievement = (currentMonth.sales / actualTarget.monthlySales) * 100;\n  const profitAchievement = (currentMonth.profit / actualTarget.monthlyProfit) * 100;\n\n  const MetricCard = ({ \n    title, \n    current, \n    previous, \n    growth, \n    target: targetValue, \n    achievement, \n    icon: IconComponent,\n    format = 'currency'\n  }: {\n    title: string;\n    current: number;\n    previous: number;\n    growth: number;\n    target?: number;\n    achievement?: number;\n    icon: any;\n    format?: 'currency' | 'percent' | 'number';\n  }) => {\n    const formatValue = (value: number) => {\n      switch (format) {\n        case 'currency': return formatCurrency(value);\n        case 'percent': return formatPercent(value);\n        case 'number': return value.toString();\n        default: return formatCurrency(value);\n      }\n    };\n\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-700\">{title}</h3>\n          <IconComponent className=\"w-5 h-5 text-blue-600\" />\n        </div>\n        \n        <div className=\"space-y-3\">\n          <div>\n            <p className=\"text-2xl font-bold text-gray-900\">\n              {formatValue(current)}\n            </p>\n          </div>\n          \n          {/* 前月比 */}\n          <div className=\"flex items-center gap-2\">\n            {growth >= 0 ? (\n              <TrendingUp className=\"w-4 h-4 text-green-500\" />\n            ) : (\n              <TrendingDown className=\"w-4 h-4 text-red-500\" />\n            )}\n            <span className={`text-sm font-medium ${growth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {Math.abs(growth).toFixed(1)}% \n            </span>\n            <span className=\"text-sm text-gray-500\">前月比</span>\n          </div>\n          \n          {/* 目標達成率 */}\n          {targetValue && achievement !== undefined && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">目標達成率</span>\n                <span className={`font-medium ${achievement >= 100 ? 'text-green-600' : achievement >= 80 ? 'text-yellow-600' : 'text-red-600'}`}>\n                  {achievement.toFixed(1)}%\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className={`h-2 rounded-full transition-all duration-300 ${\n                    achievement >= 100 ? 'bg-green-500' : \n                    achievement >= 80 ? 'bg-yellow-500' : 'bg-red-500'\n                  }`}\n                  style={{ width: `${Math.min(achievement, 100)}%` }}\n                ></div>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                目標: {formatValue(targetValue)}\n              </p>\n              {customTarget && (\n                <div className=\"text-xs text-blue-600 mt-1\">\n                  ✓ カスタム目標設定済み\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 分析対象表示 */}\n      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex items-center gap-2\">\n          <Calendar className=\"w-5 h-5 text-blue-600\" />\n          <h3 className=\"font-medium text-blue-900\">\n            {selectedStoreId === 'all' || !selectedStoreId ? \n              '🏢 全店舗合計パフォーマンス' : \n              `🏪 ${selectedStoreId}店パフォーマンス`}\n          </h3>\n        </div>\n        <p className=\"text-sm text-blue-700 mt-1\">\n          {selectedStoreId === 'all' || !selectedStoreId ? \n            'いっきチェーン全体の月間パフォーマンス分析' : \n            '選択店舗の個別月間パフォーマンス分析'}\n        </p>\n      </div>\n\n      {/* アラート */}\n      {alerts.length > 0 && (\n        <div className=\"space-y-2\">\n          {alerts.map((alert, index) => (\n            <div\n              key={index}\n              className={`flex items-center gap-3 p-3 rounded-lg ${\n                alert.type === 'error' ? 'bg-red-50 border border-red-200' :\n                alert.type === 'warning' ? 'bg-yellow-50 border border-yellow-200' :\n                'bg-blue-50 border border-blue-200'\n              }`}\n            >\n              <AlertTriangle className={`w-4 h-4 ${\n                alert.type === 'error' ? 'text-red-600' :\n                alert.type === 'warning' ? 'text-yellow-600' :\n                'text-blue-600'\n              }`} />\n              <p className={`text-sm ${\n                alert.type === 'error' ? 'text-red-800' :\n                alert.type === 'warning' ? 'text-yellow-800' :\n                'text-blue-800'\n              }`}>\n                {alert.message}\n              </p>\n              {alert.actionRequired && (\n                <span className=\"ml-auto px-2 py-1 text-xs bg-red-100 text-red-800 rounded-full\">\n                  要対応\n                </span>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* パフォーマンス指標 */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <MetricCard\n          title={selectedStoreId === 'all' || !selectedStoreId ? \"全店舗今月売上\" : \"今月売上\"}\n          current={currentMonth.sales}\n          previous={previousMonth.sales}\n          growth={salesGrowth}\n          target={actualTarget.monthlySales}\n          achievement={salesAchievement}\n          icon={TrendingUp}\n          format=\"currency\"\n        />\n        \n        <MetricCard\n          title={selectedStoreId === 'all' || !selectedStoreId ? \"全店舗今月利益\" : \"今月利益\"}\n          current={currentMonth.profit}\n          previous={previousMonth.profit}\n          growth={profitGrowth}\n          target={actualTarget.monthlyProfit}\n          achievement={profitAchievement}\n          icon={Award}\n          format=\"currency\"\n        />\n        \n        <MetricCard\n          title={selectedStoreId === 'all' || !selectedStoreId ? \"全店舗利益率\" : \"利益率\"}\n          current={currentMonth.profitMargin}\n          previous={previousMonth.profitMargin}\n          growth={currentMonth.profitMargin - previousMonth.profitMargin}\n          target={actualTarget.profitMarginTarget}\n          achievement={(currentMonth.profitMargin / actualTarget.profitMarginTarget) * 100}\n          icon={Target}\n          format=\"percent\"\n        />\n      </div>\n\n      {/* 詳細分析 */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Calendar className=\"w-5 h-5 text-blue-600\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            {selectedStoreId === 'all' || !selectedStoreId ? \"全店舗月間分析\" : \"月間パフォーマンス分析\"}\n          </h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-700 mb-3\">\n              {selectedStoreId === 'all' || !selectedStoreId ? \"全店舗売上分析\" : \"売上分析\"}\n            </h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">今月売上:</span>\n                <span className=\"font-medium\">{formatCurrency(currentMonth.sales)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">前月売上:</span>\n                <span className=\"font-medium\">{formatCurrency(previousMonth.sales)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">目標売上:</span>\n                <span className=\"font-medium\">{formatCurrency(actualTarget.monthlySales)}</span>\n              </div>\n              <div className=\"flex justify-between pt-2 border-t\">\n                <span className=\"text-gray-600\">目標との差額:</span>\n                <span className={`font-medium ${\n                  currentMonth.sales >= actualTarget.monthlySales ? 'text-green-600' : 'text-red-600'\n                }`}>\n                  {formatCurrency(currentMonth.sales - actualTarget.monthlySales)}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"text-sm font-medium text-gray-700 mb-3\">\n              {selectedStoreId === 'all' || !selectedStoreId ? \"全店舗報告状況\" : \"報告状況\"}\n            </h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">今月報告数:</span>\n                <span className=\"font-medium\">{currentMonth.reportCount}件</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">前月報告数:</span>\n                <span className=\"font-medium\">{previousMonth.reportCount}件</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">1日平均:</span>\n                <span className=\"font-medium\">\n                  {(currentMonth.reportCount / new Date().getDate()).toFixed(1)}件\n                </span>\n              </div>\n              {selectedStoreId === 'all' || !selectedStoreId ? (\n                <div className=\"flex justify-between pt-2 border-t\">\n                  <span className=\"text-gray-600\">店舗数:</span>\n                  <span className=\"font-medium text-blue-600\">3店舗</span>\n                </div>\n              ) : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};",
  "src/components/Dashboard/PeriodSelector.tsx": "import React from 'react';\nimport { PeriodType } from '../../types';\n\ninterface PeriodSelectorProps {\n  selectedPeriod: PeriodType;\n  onPeriodChange: (period: PeriodType) => void;\n  selectedRange?: 'week' | 'month' | 'quarter' | 'year';\n  onRangeChange?: (range: 'week' | 'month' | 'quarter' | 'year') => void;\n}\n\nconst periodOptions: { value: PeriodType; label: string }[] = [\n  { value: 'daily', label: '日次' },\n  { value: 'weekly', label: '週次' },\n  { value: 'monthly', label: '月次' }\n];\n\nconst rangeOptions = [\n  { value: 'week' as const, label: '過去1週間' },\n  { value: 'month' as const, label: '過去1ヶ月' },\n  { value: 'quarter' as const, label: '過去3ヶ月' },\n  { value: 'year' as const, label: '過去1年' }\n];\n\nexport const PeriodSelector: React.FC<PeriodSelectorProps> = ({\n  selectedPeriod,\n  onPeriodChange,\n  selectedRange = 'month',\n  onRangeChange\n}) => {\n  return (\n    <div className=\"space-y-4\">\n      {/* 分析単位選択 */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">分析単位</label>\n        <div className=\"flex bg-gray-100 rounded-lg p-1\">\n          {periodOptions.map((option) => (\n            <button\n              key={option.value}\n              onClick={() => onPeriodChange(option.value)}\n              className={`\n                px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200\n                ${selectedPeriod === option.value\n                  ? 'bg-white text-blue-700 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n                }\n              `}\n            >\n              {option.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* 期間範囲選択 */}\n      {onRangeChange && (\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">分析期間</label>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {rangeOptions.map((option) => (\n              <button\n                key={option.value}\n                onClick={() => onRangeChange(option.value)}\n                className={`\n                  px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 border\n                  ${selectedRange === option.value\n                    ? 'bg-blue-600 text-white border-blue-600'\n                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n                  }\n                `}\n              >\n                {option.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};",
  "src/components/Dashboard/SetupGuide.tsx": "import React, { useState } from 'react';\nimport { FileSpreadsheet, ExternalLink, Copy, CheckCircle, AlertCircle, Book } from 'lucide-react';\n\nexport const SetupGuide: React.FC = () => {\n  const [showGuide, setShowGuide] = useState(false);\n  const [copiedStep, setCopiedStep] = useState<number | null>(null);\n\n  const steps = [\n    {\n      title: \"Google Cloud Consoleでプロジェクト作成\",\n      description: \"新しいプロジェクトを作成してGoogle Sheets APIを有効化\",\n      link: \"https://console.cloud.google.com/\",\n      action: \"Google Cloud Console を開く\"\n    },\n    {\n      title: \"Google Sheets APIを有効化\",\n      description: \"APIとサービス → ライブラリ → Google Sheets API → 有効にする\",\n      steps: [\n        \"「APIとサービス」→「ライブラリ」をクリック\",\n        \"「Google Sheets API」を検索\",\n        \"Google Sheets APIを選択して「有効にする」\"\n      ]\n    },\n    {\n      title: \"APIキーを作成\",\n      description: \"APIとサービス → 認証情報 → 認証情報を作成 → APIキー\",\n      copyText: \"AIzaSyD...\",\n      steps: [\n        \"「APIとサービス」→「認証情報」をクリック\",\n        \"「認証情報を作成」→「APIキー」を選択\",\n        \"作成されたAPIキーをコピー\"\n      ]\n    },\n    {\n      title: \"シートの共有設定\",\n      description: \"テンプレートシートを「リンクを知っている全員が閲覧可能」に設定\",\n      link: \"https://docs.google.com/spreadsheets/d/1GWp6bW4WnSc9EFobaYNqhUz6wtMuL6gG74Tg2Osvtco/edit\",\n      action: \"テンプレートシートを開く\",\n      steps: [\n        \"シートを開いて「共有」ボタンをクリック\",\n        \"「制限付きアクセス」を「リンクを知っている全員」に変更\",\n        \"権限を「閲覧者」または「編集者」に設定\"\n      ]\n    },\n    {\n      title: \"環境変数の設定\",\n      description: \".envファイルにAPIキーを設定\",\n      copyText: `VITE_GOOGLE_SHEETS_API_KEY=ここにAPIキーをペースト\nVITE_GOOGLE_SHEET_ID=1GWp6bW4WnSc9EFobaYNqhUz6wtMuL6gG74Tg2Osvtco`,\n      steps: [\n        \".envファイルを開く\",\n        \"VITE_GOOGLE_SHEETS_API_KEYに取得したAPIキーを設定\",\n        \"アプリケーションを再起動\"\n      ]\n    }\n  ];\n\n  const copyToClipboard = (text: string, stepIndex: number) => {\n    navigator.clipboard.writeText(text);\n    setCopiedStep(stepIndex);\n    setTimeout(() => setCopiedStep(null), 2000);\n  };\n\n  return (\n    <>\n      <button\n        onClick={() => setShowGuide(true)}\n        className=\"inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n      >\n        <Book className=\"w-4 h-4\" />\n        設定ガイド\n      </button>\n\n      {showGuide && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <FileSpreadsheet className=\"w-6 h-6 text-green-600\" />\n                <h2 className=\"text-xl font-semibold text-gray-900\">Google Sheets API 設定ガイド</h2>\n              </div>\n              <button\n                onClick={() => setShowGuide(false)}\n                className=\"text-gray-500 hover:text-gray-700 text-2xl\"\n              >\n                ×\n              </button>\n            </div>\n\n            <div className=\"p-6 space-y-8\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <AlertCircle className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-medium text-blue-900\">設定完了までの所要時間: 約10分</h3>\n                    <p className=\"text-sm text-blue-700 mt-1\">\n                      Google Cloud Consoleでの操作が初めての方でも簡単に設定できます。\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {steps.map((step, index) => (\n                <div key={index} className=\"border border-gray-200 rounded-lg overflow-hidden\">\n                  <div className=\"bg-gray-50 px-4 py-3 border-b border-gray-200\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                        {index + 1}\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">{step.title}</h3>\n                        <p className=\"text-sm text-gray-600\">{step.description}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"p-4\">\n                    {step.steps && (\n                      <ol className=\"list-decimal list-inside space-y-2 text-sm text-gray-700 mb-4\">\n                        {step.steps.map((substep, substepIndex) => (\n                          <li key={substepIndex}>{substep}</li>\n                        ))}\n                      </ol>\n                    )}\n\n                    <div className=\"flex flex-wrap gap-3\">\n                      {step.link && step.action && (\n                        <a\n                          href={step.link}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"inline-flex items-center gap-2 px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors\"\n                        >\n                          <ExternalLink className=\"w-4 h-4\" />\n                          {step.action}\n                        </a>\n                      )}\n\n                      {step.copyText && (\n                        <button\n                          onClick={() => copyToClipboard(step.copyText!, index)}\n                          className=\"inline-flex items-center gap-2 px-3 py-2 bg-gray-100 text-gray-700 text-sm rounded-lg hover:bg-gray-200 transition-colors\"\n                        >\n                          {copiedStep === index ? (\n                            <>\n                              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                              コピー済み\n                            </>\n                          ) : (\n                            <>\n                              <Copy className=\"w-4 h-4\" />\n                              コピー\n                            </>\n                          )}\n                        </button>\n                      )}\n                    </div>\n\n                    {step.copyText && (\n                      <div className=\"mt-3 p-3 bg-gray-100 rounded-lg\">\n                        <pre className=\"text-sm text-gray-800 whitespace-pre-wrap overflow-x-auto\">\n                          {step.copyText}\n                        </pre>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-medium text-green-900\">設定完了後</h3>\n                    <p className=\"text-sm text-green-700 mt-1\">\n                      日次報告が自動的にGoogle Sheetsに保存され、リアルタイムでデータ分析ができるようになります！\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"text-center\">\n                <button\n                  onClick={() => setShowGuide(false)}\n                  className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  設定ガイドを閉じる\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};",
  "src/components/Dashboard/Sidebar.tsx": "import React, { useState } from 'react';\nimport { \n  BarChart3, \n  Calendar,\n  TrendingUp, \n  Target,\n  MessageCircle,\n  Settings,\n  LogOut,\n  Menu,\n  X,\n  User,\n  FileSpreadsheet,\n  Store\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface SidebarProps {\n  activeView: string;\n  onViewChange: (view: string) => void;\n  user?: { name: string; role: string } | null;\n  onLogout?: () => void;\n}\n\nexport const Sidebar: React.FC<SidebarProps> = ({ \n  activeView, \n  onViewChange, \n  user,\n  onLogout\n}) => {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const menuItems = [\n    {\n      id: 'dashboard',\n      label: 'ダッシュボード',\n      icon: BarChart3,\n      description: '売上概要'\n    },\n    {\n      id: 'reports',\n      label: '分析レポート',\n      icon: Calendar,\n      description: '期間別分析'\n    },\n    {\n      id: 'targets',\n      label: '目標達成度',\n      icon: Target,\n      description: '目標vs実績'\n    },\n    {\n      id: 'stores',\n      label: '店舗管理',\n      icon: Store,\n      description: '店舗設定'\n    },\n    {\n      id: 'chat',\n      label: 'AIチャット',\n      icon: MessageCircle,\n      description: 'データ分析AI'\n    },\n    {\n      id: 'settings',\n      label: '設定',\n      icon: Settings,\n      description: 'システム設定'\n    }\n  ];\n\n  return (\n    <div className={`bg-white border-r border-gray-200 flex flex-col h-full ${\n      isCollapsed ? 'w-16' : 'w-64'\n    } transition-all duration-300`}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          {!isCollapsed && (\n            <div>\n              <h2 className=\"text-lg font-bold text-gray-900\">業務分析</h2>\n              <p className=\"text-xs text-gray-500\">Restaurant Analytics</p>\n            </div>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsCollapsed(!isCollapsed)}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            {isCollapsed ? <Menu className=\"w-4 h-4\" /> : <X className=\"w-4 h-4\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* User Info */}\n      {user && !isCollapsed && (\n        <div className=\"p-4 border-b border-gray-200 bg-gray-50\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n              <User className=\"w-4 h-4 text-blue-600\" />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-gray-900 truncate\">{user.name}</p>\n              <p className=\"text-xs text-gray-500 capitalize\">{user.role}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Navigation */}\n      <nav className=\"flex-1 p-4 space-y-1 overflow-y-auto\">\n        {menuItems.map((item) => {\n          const IconComponent = item.icon;\n          const isActive = activeView === item.id;\n          \n          return (\n            <Button\n              key={item.id}\n              variant={isActive ? \"default\" : \"ghost\"}\n              className={`w-full justify-start h-auto p-3 ${\n                isActive \n                  ? 'bg-blue-600 text-white hover:bg-blue-700' \n                  : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'\n              }`}\n              onClick={() => onViewChange(item.id)}\n            >\n              <IconComponent className=\"w-5 h-5 flex-shrink-0\" />\n              {!isCollapsed && (\n                <div className=\"ml-3 text-left\">\n                  <div className=\"text-sm font-medium\">{item.label}</div>\n                  <div className=\"text-xs opacity-75\">{item.description}</div>\n                </div>\n              )}\n            </Button>\n          );\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-gray-200\">\n        {onLogout && (\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start h-auto p-3 text-red-600 hover:text-red-700 hover:bg-red-50\"\n            onClick={onLogout}\n          >\n            <LogOut className=\"w-5 h-5 flex-shrink-0\" />\n            {!isCollapsed && (\n              <div className=\"ml-3 text-left\">\n                <div className=\"text-sm font-medium\">ログアウト</div>\n              </div>\n            )}\n          </Button>\n        )}\n        \n        {!isCollapsed && (\n          <div className=\"mt-4 text-center\">\n            <p className=\"text-xs text-gray-500\">\n              Version 1.0.0 MVP\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};",
  "src/components/Dashboard/StatsCard.tsx": "import React from 'react';\nimport { DivideIcon as LucideIcon } from 'lucide-react';\n\ninterface StatsCardProps {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  trend?: {\n    value: number;\n    isPositive: boolean;\n  };\n  color?: 'blue' | 'green' | 'red' | 'yellow';\n}\n\nconst colorClasses = {\n  blue: 'bg-blue-50 text-blue-700',\n  green: 'bg-green-50 text-green-700',\n  red: 'bg-red-50 text-red-700',\n  yellow: 'bg-yellow-50 text-yellow-700'\n};\n\nexport const StatsCard: React.FC<StatsCardProps> = ({\n  title,\n  value,\n  icon: IconComponent,\n  trend,\n  color = 'blue'\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-6 hover:shadow-lg transition-shadow duration-200\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-gray-600 mb-1\">{title}</p>\n          <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n          {trend && (\n            <p className={`text-sm mt-1 ${trend.isPositive ? 'text-green-600' : 'text-red-600'}`}>\n              {trend.isPositive ? '↗' : '↘'} {Math.abs(trend.value)}%\n            </p>\n          )}\n        </div>\n        <div className={`p-3 rounded-lg ${colorClasses[color]}`}>\n          <IconComponent className=\"w-6 h-6\" />\n        </div>\n      </div>\n    </div>\n  );\n};",
  "src/components/Dashboard/StoreComparison.tsx": "import React, { useState } from 'react';\nimport { BarChart3, TrendingUp, TrendingDown, Award, Store, Users, Calendar } from 'lucide-react';\nimport { formatCurrency, formatPercent } from '../../utils/calculations';\nimport { useTargets } from '../../hooks/useTargets';\n\ninterface StoreData {\n  id: string;\n  name: string;\n  sales: number;\n  profit: number;\n  profitMargin: number;\n  reportCount: number;\n  averageDailySales: number;\n  lastReportDate: string;\n  rank: number;\n  trend: 'up' | 'down' | 'stable';\n  trendValue: number; // percentage change\n}\n\ninterface StoreComparisonProps {\n  stores: StoreData[];\n  period: 'daily' | 'weekly' | 'monthly';\n  onPeriodChange: (period: 'daily' | 'weekly' | 'monthly') => void;\n  userId?: string | null;\n}\n\nexport const StoreComparison: React.FC<StoreComparisonProps> = ({\n  stores, \n  period, \n  onPeriodChange,\n  userId = null\n}) => {\n  const { getTarget } = useTargets(userId);\n  const [sortBy, setSortBy] = useState<'sales' | 'profit' | 'profitMargin' | 'reportCount'>('sales');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  // 現在の年月を取得\n  const now = new Date();\n  const currentYear = now.getFullYear();\n  const currentMonth = now.getMonth() + 1;\n\n  // ソート処理\n  const sortedStores = [...stores].sort((a, b) => {\n    const aValue = a[sortBy];\n    const bValue = b[sortBy];\n    return sortOrder === 'desc' ? bValue - aValue : aValue - bValue;\n  });\n\n  const handleSort = (field: typeof sortBy) => {\n    if (field === sortBy) {\n      setSortOrder(sortOrder === 'desc' ? 'asc' : 'desc');\n    } else {\n      setSortBy(field);\n      setSortOrder('desc');\n    }\n  };\n\n  // 最高値を取得（パーセンテージ表示用）\n  const maxSales = Math.max(...stores.map(s => s.sales));\n  const maxProfit = Math.max(...stores.map(s => s.profit));\n\n  const periodLabels = {\n    daily: '日次',\n    weekly: '週次', \n    monthly: '月次'\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200\">\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              店舗別パフォーマンス（{periodLabels[period]}）\n            </h3>\n          </div>\n          \n          {/* 期間選択 */}\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\n            {(['daily', 'weekly', 'monthly'] as const).map((p) => (\n              <button\n                key={p}\n                onClick={() => onPeriodChange(p)}\n                className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\n                  period === p\n                    ? 'bg-white text-blue-700 shadow-sm'\n                    : 'text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                {periodLabels[p]}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* 全店舗合計表示 */}\n      {stores.length > 0 && (\n        <div className=\"px-6 py-4 bg-blue-50 border-b border-blue-200\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-xs text-gray-600 mb-1\">全店舗合計売上</p>\n              <p className=\"text-lg font-bold text-blue-600\">\n                {formatCurrency(stores.reduce((sum, store) => sum + store.sales, 0))}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-xs text-gray-600 mb-1\">全店舗合計利益</p>\n              <p className={`text-lg font-bold ${\n                stores.reduce((sum, store) => sum + store.profit, 0) >= 0 ? 'text-green-600' : 'text-red-600'\n              }`}>\n                {formatCurrency(stores.reduce((sum, store) => sum + store.profit, 0))}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-xs text-gray-600 mb-1\">平均利益率</p>\n              <p className=\"text-lg font-bold text-purple-600\">\n                {stores.length > 0 ? \n                  formatPercent((stores.reduce((sum, store) => sum + store.profitMargin, 0) / stores.length) / 100) : \n                  '0%'\n                }\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-xs text-gray-600 mb-1\">総報告数</p>\n              <p className=\"text-lg font-bold text-gray-600\">\n                {stores.reduce((sum, store) => sum + store.reportCount, 0)}件\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {stores.length === 0 ? (\n        <div className=\"p-12 text-center\">\n          <Store className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h4 className=\"text-lg font-medium text-gray-900 mb-2\">データがありません</h4>\n          <p className=\"text-gray-500\">店舗の報告データがまだありません。</p>\n        </div>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  順位\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  店舗名\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                  onClick={() => handleSort('sales')}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    売上\n                    {sortBy === 'sales' && (\n                      sortOrder === 'desc' ? \n                      <TrendingDown className=\"w-3 h-3\" /> : \n                      <TrendingUp className=\"w-3 h-3\" />\n                    )}\n                  </div>\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                  onClick={() => handleSort('profit')}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    利益\n                    {sortBy === 'profit' && (\n                      sortOrder === 'desc' ? \n                      <TrendingDown className=\"w-3 h-3\" /> : \n                      <TrendingUp className=\"w-3 h-3\" />\n                    )}\n                  </div>\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                  onClick={() => handleSort('profitMargin')}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    利益率\n                    {sortBy === 'profitMargin' && (\n                      sortOrder === 'desc' ? \n                      <TrendingDown className=\"w-3 h-3\" /> : \n                      <TrendingUp className=\"w-3 h-3\" />\n                    )}\n                  </div>\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  トレンド\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                  onClick={() => handleSort('reportCount')}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    報告数\n                    {sortBy === 'reportCount' && (\n                      sortOrder === 'desc' ? \n                      <TrendingDown className=\"w-3 h-3\" /> : \n                      <TrendingUp className=\"w-3 h-3\" />\n                    )}\n                  </div>\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {sortedStores.map((store, index) => (\n                <tr key={store.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className={`text-lg font-bold ${\n                        index === 0 ? 'text-yellow-600' :\n                        index === 1 ? 'text-gray-500' :\n                        index === 2 ? 'text-orange-600' :\n                        'text-gray-400'\n                      }`}>\n                        #{index + 1}\n                      </span>\n                      {index === 0 && <Award className=\"w-4 h-4 text-yellow-500\" />}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex-shrink-0 h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <Store className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">{store.name}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          最終報告: {new Date(store.lastReportDate).toLocaleDateString('ja-JP')}\n                        </p>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {formatCurrency(store.sales)}\n                      </p>\n                      {/* 売上バー */}\n                      <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                        <div \n                          className=\"bg-blue-500 h-1.5 rounded-full transition-all duration-300\"\n                          style={{ width: `${(store.sales / maxSales) * 100}%` }}\n                        ></div>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">\n                        日平均: {formatCurrency(store.averageDailySales)}\n                      </p>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"space-y-1\">\n                      <p className={`text-sm font-medium ${\n                        store.profit >= 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {formatCurrency(store.profit)}\n                      </p>\n                      {/* 利益バー */}\n                      <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                        <div \n                          className={`h-1.5 rounded-full transition-all duration-300 ${\n                            store.profit >= 0 ? 'bg-green-500' : 'bg-red-500'\n                          }`}\n                          style={{ width: `${Math.abs(store.profit) / Math.abs(maxProfit) * 100}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <span className={`${\n                      store.profitMargin >= 15 ? 'text-green-600' :\n                      store.profitMargin >= 10 ? 'text-yellow-600' :\n                      'text-red-600'\n                    }`}>\n                      {formatPercent(store.profitMargin / 100)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center gap-2\">\n                      {store.trend === 'up' ? (\n                        <TrendingUp className=\"w-4 h-4 text-green-500\" />\n                      ) : store.trend === 'down' ? (\n                        <TrendingDown className=\"w-4 h-4 text-red-500\" />\n                      ) : (\n                        <div className=\"w-4 h-4 bg-gray-400 rounded-full\"></div>\n                      )}\n                      <span className={`text-sm ${\n                        store.trend === 'up' ? 'text-green-600' :\n                        store.trend === 'down' ? 'text-red-600' :\n                        'text-gray-600'\n                      }`}>\n                        {Math.abs(store.trendValue).toFixed(1)}%\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-sm text-gray-900\">{store.reportCount}件</span>\n                    </div>\n                    \n                    {/* 目標達成率表示 */}\n                    {(() => {\n                      const target = getTarget(store.id, currentYear, currentMonth);\n                      if (!target) return null;\n                      \n                      const salesAchievement = (store.sales / target.targetSales) * 100;\n                      const profitMarginAchievement = target.targetProfitMargin > 0 \n                        ? (store.profitMargin / target.targetProfitMargin) * 100 \n                        : 0;\n                      \n                      return (\n                        <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                          <p className=\"text-xs text-gray-500 mb-1\">目標達成率</p>\n                          <div className=\"space-y-1\">\n                            <div className=\"flex justify-between text-xs\">\n                              <span>売上: </span>\n                              <span className={`font-medium ${\n                                salesAchievement >= 100 ? 'text-green-600' : \n                                salesAchievement >= 80 ? 'text-yellow-600' : 'text-red-600'\n                              }`}>\n                                {salesAchievement.toFixed(1)}%\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-xs\">\n                              <span>利益率: </span>\n                              <span className={`font-medium ${\n                                profitMarginAchievement >= 100 ? 'text-green-600' : \n                                profitMarginAchievement >= 80 ? 'text-yellow-600' : 'text-red-600'\n                              }`}>\n                                {profitMarginAchievement.toFixed(1)}%\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })()}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};",
  "src/components/Dashboard/SyncStatus.tsx": "import React, { useState, useEffect } from 'react';\nimport { \n  FileSpreadsheet, \n  RefreshCw, \n  CheckCircle, \n  AlertCircle, \n  Upload, \n  Download,\n  Clock,\n  Wifi,\n  WifiOff\n} from 'lucide-react';\nimport { readFromSheets } from '../../services/googleSheets';\nimport { apiClient } from '../../services/api';\n\ninterface SyncStatusProps {\n  reports: any[];\n  onSyncComplete?: () => void;\n}\n\nexport const SyncStatus: React.FC<SyncStatusProps> = ({ reports, onSyncComplete }) => {\n  const [syncStatus, setSyncStatus] = useState<{\n    lastSync: Date | null;\n    syncing: boolean;\n    connected: boolean;\n    pendingCount: number;\n    error: string | null;\n  }>({\n    lastSync: null,\n    syncing: false,\n    connected: true,\n    pendingCount: 0,\n    error: null\n  });\n\n  const [batchSyncProgress, setBatchSyncProgress] = useState<{\n    inProgress: boolean;\n    completed: number;\n    total: number;\n  }>({\n    inProgress: false,\n    completed: 0,\n    total: 0\n  });\n\n  useEffect(() => {\n    // 初回接続テスト\n    checkConnection();\n    \n    // 定期的な接続チェック（5分間隔）\n    const interval = setInterval(checkConnection, 5 * 60 * 1000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const checkConnection = async () => {\n    try {\n      const result = await readFromSheets();\n      setSyncStatus(prev => ({\n        ...prev,\n        connected: result.success,\n        error: result.success ? null : result.error || 'Connection failed'\n      }));\n    } catch (error) {\n      setSyncStatus(prev => ({\n        ...prev,\n        connected: false,\n        error: 'ネットワークエラー'\n      }));\n    }\n  };\n\n  const handleManualSync = async () => {\n    if (!reports.length) return;\n\n    setSyncStatus(prev => ({ ...prev, syncing: true, error: null }));\n    setBatchSyncProgress({ inProgress: true, completed: 0, total: reports.length });\n\n    try {\n      // Use backend API to sync reports to sheets (最新10件のみ)\n      const recentReports = reports.slice(0, 10);\n      \n      for (let i = 0; i < recentReports.length; i++) {\n        await apiClient.createReport(recentReports[i]);\n        setBatchSyncProgress(prev => ({ ...prev, completed: i + 1 }));\n        \n        // API制限を避けるため少し待機\n        if (i < recentReports.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 500));\n        }\n      }\n\n      setSyncStatus(prev => ({\n        ...prev,\n        syncing: false,\n        lastSync: new Date(),\n        pendingCount: Math.max(0, prev.pendingCount - recentReports.length),\n        error: null\n      }));\n\n      onSyncComplete?.();\n    } catch (error) {\n      setSyncStatus(prev => ({\n        ...prev,\n        syncing: false,\n        error: error instanceof Error ? error.message : '同期エラー'\n      }));\n    } finally {\n      setBatchSyncProgress({ inProgress: false, completed: 0, total: 0 });\n    }\n  };\n\n  const handleReadFromSheets = async () => {\n    setSyncStatus(prev => ({ ...prev, syncing: true, error: null }));\n\n    try {\n      const result = await readFromSheets();\n      \n      if (result.success && result.data) {\n        console.log('Sheets data:', result.data);\n        // ここで取得したデータを処理（親コンポーネントに通知など）\n        setSyncStatus(prev => ({\n          ...prev,\n          syncing: false,\n          error: null,\n          lastSync: new Date()\n        }));\n      } else {\n        setSyncStatus(prev => ({\n          ...prev,\n          syncing: false,\n          error: result.error || 'データ読み込みエラー'\n        }));\n      }\n    } catch (error) {\n      setSyncStatus(prev => ({\n        ...prev,\n        syncing: false,\n        error: error instanceof Error ? error.message : 'データ読み込みエラー'\n      }));\n    }\n  };\n\n  const { syncing, connected, lastSync, pendingCount, error } = syncStatus;\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <FileSpreadsheet className=\"w-5 h-5 text-green-600\" />\n          <h3 className=\"text-sm font-medium text-gray-900\">Sheets同期状況</h3>\n        </div>\n        \n        {/* 接続状態 */}\n        <div className=\"flex items-center gap-2\">\n          {connected ? (\n            <div className=\"flex items-center gap-1 text-green-600\">\n              <Wifi className=\"w-4 h-4\" />\n              <span className=\"text-xs\">接続中</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-1 text-red-600\">\n              <WifiOff className=\"w-4 h-4\" />\n              <span className=\"text-xs\">未接続</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* 同期統計 */}\n      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n        <div className=\"text-center\">\n          <p className=\"text-xs text-gray-500\">最終同期</p>\n          <div className=\"flex items-center justify-center gap-1\">\n            <Clock className=\"w-3 h-3 text-gray-400\" />\n            <p className=\"text-xs font-medium\">\n              {lastSync ? lastSync.toLocaleTimeString('ja-JP') : '未実行'}\n            </p>\n          </div>\n        </div>\n        <div className=\"text-center\">\n          <p className=\"text-xs text-gray-500\">未同期</p>\n          <p className={`text-sm font-bold ${pendingCount > 0 ? 'text-orange-600' : 'text-green-600'}`}>\n            {pendingCount}件\n          </p>\n        </div>\n        <div className=\"text-center\">\n          <p className=\"text-xs text-gray-500\">総報告数</p>\n          <p className=\"text-sm font-bold text-blue-600\">{reports.length}件</p>\n        </div>\n      </div>\n\n      {/* 進行状況 */}\n      {batchSyncProgress.inProgress && (\n        <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-blue-700\">同期中...</span>\n            <span className=\"text-sm font-medium text-blue-700\">\n              {batchSyncProgress.completed}/{batchSyncProgress.total}\n            </span>\n          </div>\n          <div className=\"w-full bg-blue-200 rounded-full h-2\">\n            <div \n              className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n              style={{ \n                width: `${(batchSyncProgress.completed / batchSyncProgress.total) * 100}%` \n              }}\n            ></div>\n          </div>\n        </div>\n      )}\n\n      {/* エラー表示 */}\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n            <p className=\"text-sm text-red-700\">{error}</p>\n          </div>\n        </div>\n      )}\n\n      {/* 操作ボタン */}\n      <div className=\"flex gap-2\">\n        <button\n          onClick={handleManualSync}\n          disabled={syncing || !connected || reports.length === 0}\n          className=\"flex items-center gap-2 px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n        >\n          {syncing ? (\n            <RefreshCw className=\"w-4 h-4 animate-spin\" />\n          ) : (\n            <Upload className=\"w-4 h-4\" />\n          )}\n          {syncing ? '同期中...' : '手動同期'}\n        </button>\n\n        <button\n          onClick={handleReadFromSheets}\n          disabled={syncing || !connected}\n          className=\"flex items-center gap-2 px-3 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n        >\n          <Download className=\"w-4 h-4\" />\n          読み込み\n        </button>\n\n        <button\n          onClick={checkConnection}\n          disabled={syncing}\n          className=\"flex items-center gap-2 px-3 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700 disabled:bg-gray-400 transition-colors\"\n        >\n          <RefreshCw className={`w-4 h-4 ${syncing ? 'animate-spin' : ''}`} />\n          接続確認\n        </button>\n      </div>\n\n      {/* 状態表示 */}\n      <div className=\"mt-4 flex items-center justify-center\">\n        {connected ? (\n          <div className=\"flex items-center gap-2 text-green-600\">\n            <CheckCircle className=\"w-4 h-4\" />\n            <span className=\"text-xs\">Google Sheets連携中</span>\n          </div>\n        ) : (\n          <div className=\"flex items-center gap-2 text-red-600\">\n            <AlertCircle className=\"w-4 h-4\" />\n            <span className=\"text-xs\">連携エラー - 設定を確認してください</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};",
  "src/components/Dashboard/TargetAchievementBadge.tsx": "import React from 'react'\nimport { Trophy, TrendingUp, Target as TargetIcon } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge'\nimport { formatCurrency, formatPercent } from '@/lib/format'\nimport { cn } from '@/lib/utils'\nimport { TargetAchievement } from '@/types'\n\ninterface TargetAchievementBadgeProps {\n  achievement: TargetAchievement\n  showDetails?: boolean\n  className?: string\n}\n\nexport const TargetAchievementBadge: React.FC<TargetAchievementBadgeProps> = ({\n  achievement,\n  showDetails = false,\n  className\n}) => {\n  const { targetSales, actualSales, achievementRate, isAchieved, difference } = achievement\n\n  if (targetSales === 0) {\n    return null\n  }\n\n  return (\n    <div className={cn('space-y-2', className)}>\n      {isAchieved ? (\n        <div className=\"flex items-center gap-2\">\n          <Badge className=\"bg-green-600 text-white border-green-700 px-3 py-1 text-sm font-bold animate-pulse\">\n            <Trophy className=\"h-4 w-4 mr-1\" />\n            目標達成\n          </Badge>\n          {showDetails && (\n            <span className=\"text-xs text-green-700 font-medium\">\n              達成率 {formatPercent(achievementRate)}\n            </span>\n          )}\n        </div>\n      ) : (\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\" className=\"border-blue-500 text-blue-700 px-3 py-1 text-sm\">\n            <TargetIcon className=\"h-4 w-4 mr-1\" />\n            進捗 {formatPercent(achievementRate)}\n          </Badge>\n          {showDetails && (\n            <span className=\"text-xs text-muted-foreground\">\n              あと {formatCurrency(Math.abs(difference))}\n            </span>\n          )}\n        </div>\n      )}\n\n      {showDetails && (\n        <div className=\"space-y-1 text-xs\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">目標:</span>\n            <span className=\"font-mono\">{formatCurrency(targetSales)}</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">実績:</span>\n            <span className=\"font-mono font-medium\">{formatCurrency(actualSales)}</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">差額:</span>\n            <span className={cn('font-mono font-medium', difference >= 0 ? 'text-green-600' : 'text-blue-600')}>\n              {difference >= 0 ? '+' : ''}{formatCurrency(difference)}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {!showDetails && (\n        <div className=\"w-full bg-muted rounded-full h-2 overflow-hidden\">\n          <div\n            className={cn(\n              'h-full transition-all duration-500',\n              isAchieved ? 'bg-green-600' : 'bg-blue-500'\n            )}\n            style={{ width: `${Math.min(achievementRate, 100)}%` }}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n",
  "src/components/Dashboard/TargetSettings.tsx": "import React, { useState } from 'react';\nimport { Target, Save, X, Building, Calendar, TrendingUp, Pen as Yen, Plus, CreditCard as Edit, Trash2 } from 'lucide-react';\nimport { upsertTarget, deleteTarget } from '@/services/supabase';\nimport { formatCurrency } from '@/lib/format';\n\ninterface TargetSettingsProps {\n  stores: Array<{ id: string; name: string; }>;\n  onClose: () => void;\n  existingTargets?: Array<{\n    storeId: string;\n    period: string;\n    targetSales: number;\n    targetProfitMargin: number;\n    targetCostRate?: number;\n    targetLaborRate?: number;\n  }>;\n  onSaved?: () => void;\n}\n\nexport const TargetSettings: React.FC<TargetSettingsProps> = ({\n  stores,\n  onClose,\n  existingTargets = [],\n  onSaved\n}) => {\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [editingStoreId, setEditingStoreId] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    targetSales: 0,\n    targetProfitMargin: 0,\n    targetCostRate: 0,\n    targetLaborRate: 0\n  });\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState<{ type: 'success' | 'error', message: string } | null>(null);\n\n  const years = Array.from({ length: 3 }, (_, i) => new Date().getFullYear() - 1 + i);\n  const months = Array.from({ length: 12 }, (_, i) => i + 1);\n\n  const showNotification = (type: 'success' | 'error', message: string) => {\n    setNotification({ type, message });\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  const getTarget = (storeId: string, year: number, month: number) => {\n    const period = `${year}-${String(month).padStart(2, '0')}`;\n    return existingTargets.find(t => t.storeId === storeId && t.period === period);\n  };\n\n  const startEditing = (storeId: string) => {\n    const existingTarget = getTarget(storeId, selectedYear, selectedMonth);\n    setEditingStoreId(storeId);\n    setFormData({\n      targetSales: existingTarget?.targetSales || 8000000,\n      targetProfitMargin: existingTarget?.targetProfitMargin || 20,\n      targetCostRate: existingTarget?.targetCostRate || 30,\n      targetLaborRate: existingTarget?.targetLaborRate || 25\n    });\n  };\n\n  const cancelEditing = () => {\n    setEditingStoreId(null);\n    setFormData({ targetSales: 0, targetProfitMargin: 0, targetCostRate: 0, targetLaborRate: 0 });\n  };\n\n  const handleSave = async () => {\n    if (!editingStoreId) return;\n\n    const store = stores.find(s => s.id === editingStoreId);\n    if (!store) return;\n\n    if (formData.targetSales <= 0) {\n      showNotification('error', '目標売上は1円以上で入力してください');\n      return;\n    }\n\n    if (formData.targetProfitMargin <= 0 || formData.targetProfitMargin > 100) {\n      showNotification('error', '目標営業利益率は1-100%で入力してください');\n      return;\n    }\n\n    if (formData.targetCostRate < 0 || formData.targetCostRate > 100) {\n      showNotification('error', '目標原価率は0-100%で入力してください');\n      return;\n    }\n\n    if (formData.targetLaborRate < 0 || formData.targetLaborRate > 100) {\n      showNotification('error', '目標人件費率は0-100%で入力してください');\n      return;\n    }\n\n    setLoading(true);\n\n    const period = `${selectedYear}-${String(selectedMonth).padStart(2, '0')}`;\n    const targetProfit = Math.round(formData.targetSales * (formData.targetProfitMargin / 100));\n\n    const { error } = await upsertTarget({\n      store_id: editingStoreId,\n      period,\n      target_sales: formData.targetSales,\n      target_profit: targetProfit,\n      target_profit_margin: formData.targetProfitMargin,\n      target_cost_rate: formData.targetCostRate,\n      target_labor_rate: formData.targetLaborRate\n    });\n    setLoading(false);\n\n    if (error) {\n      showNotification('error', error.message ?? String(error));\n    } else {\n      showNotification('success', `${store.name}の目標を設定しました`);\n      setEditingStoreId(null);\n      onSaved?.();\n    }\n  };\n\n  const handleDelete = async (storeId: string) => {\n    const store = stores.find(s => s.id === storeId);\n    if (!store) return;\n\n    if (confirm(`${store.name}の目標を削除しますか？`)) {\n      setLoading(true);\n      const period = `${selectedYear}-${String(selectedMonth).padStart(2, '0')}`;\n      const { error } = await deleteTarget(storeId, period);\n      setLoading(false);\n\n      if (error) {\n        showNotification('error', error.message ?? String(error));\n      } else {\n        showNotification('success', `${store.name}の目標を削除しました`);\n        onSaved?.();\n      }\n    }\n  };\n\n  const formatNumber = (value: number) => {\n    return value.toLocaleString();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n                <Target className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">月間目標設定</h2>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\n            >\n              <X className=\"w-5 h-5 text-gray-500\" />\n            </button>\n          </div>\n        </div>\n\n        {notification && (\n          <div className={`mx-6 mt-4 p-3 rounded-lg ${\n            notification.type === 'success'\n              ? 'bg-green-50 dark:bg-green-900 text-green-800 dark:text-green-100'\n              : 'bg-red-50 dark:bg-red-900 text-red-800 dark:text-red-100'\n          }`}>\n            {notification.message}\n          </div>\n        )}\n\n        <div className=\"px-6 py-4 bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center gap-4\">\n            <Calendar className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n            <div className=\"flex items-center gap-2\">\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">対象期間:</label>\n              <select\n                value={selectedYear}\n                onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n                className=\"px-3 py-1 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 rounded focus:ring-2 focus:ring-blue-500\"\n              >\n                {years.map(year => (\n                  <option key={year} value={year}>{year}年</option>\n                ))}\n              </select>\n              <select\n                value={selectedMonth}\n                onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\n                className=\"px-3 py-1 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 rounded focus:ring-2 focus:ring-blue-500\"\n              >\n                {months.map(month => (\n                  <option key={month} value={month}>{month}月</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n              {selectedYear}年{selectedMonth}月の目標設定\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"space-y-4\">\n            {stores.map((store) => {\n              const existingTarget = getTarget(store.id, selectedYear, selectedMonth);\n              const isEditing = editingStoreId === store.id;\n\n              return (\n                <div key={store.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <Building className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{store.name}</h3>\n                      {existingTarget && !isEditing && (\n                        <span className=\"px-2 py-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-100 rounded-full text-xs\">\n                          設定済み\n                        </span>\n                      )}\n                    </div>\n\n                    {!isEditing && (\n                      <div className=\"flex gap-2\">\n                        <button\n                          onClick={() => startEditing(store.id)}\n                          className=\"flex items-center gap-1 px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700\"\n                        >\n                          {existingTarget ? <Edit className=\"w-3 h-3\" /> : <Plus className=\"w-3 h-3\" />}\n                          {existingTarget ? '編集' : '設定'}\n                        </button>\n                        {existingTarget && (\n                          <button\n                            onClick={() => handleDelete(store.id)}\n                            className=\"flex items-center gap-1 px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700\"\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                            削除\n                          </button>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {isEditing ? (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                          <Yen className=\"w-4 h-4\" />\n                          月間目標売上\n                        </label>\n                        <div className=\"relative\">\n                          <input\n                            type=\"text\"\n                            inputMode=\"numeric\"\n                            value={formData.targetSales === 0 ? '' : formatNumber(formData.targetSales)}\n                            onChange={(e) => {\n                              const value = parseInt(e.target.value.replace(/[^0-9]/g, '')) || 0;\n                              setFormData(prev => ({ ...prev, targetSales: value }));\n                            }}\n                            className=\"w-full pl-3 pr-12 py-3 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500 text-right font-mono text-lg\"\n                            placeholder=\"8,000,000\"\n                          />\n                          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                            <span className=\"text-gray-500 text-sm font-medium\">円</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                          <TrendingUp className=\"w-4 h-4\" />\n                          目標営業利益率\n                        </label>\n                        <div className=\"relative\">\n                          <input\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"100\"\n                            step=\"0.1\"\n                            value={formData.targetProfitMargin || ''}\n                            onChange={(e) => {\n                              const value = parseFloat(e.target.value) || 0;\n                              setFormData(prev => ({ ...prev, targetProfitMargin: value }));\n                            }}\n                            className=\"w-full pl-3 pr-12 py-3 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500 text-right font-mono text-lg\"\n                            placeholder=\"20\"\n                          />\n                          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                            <span className=\"text-gray-500 text-sm font-medium\">%</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                          <TrendingUp className=\"w-4 h-4\" />\n                          目標原価率\n                        </label>\n                        <div className=\"relative\">\n                          <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"100\"\n                            step=\"0.1\"\n                            value={formData.targetCostRate || ''}\n                            onChange={(e) => {\n                              const value = parseFloat(e.target.value) || 0;\n                              setFormData(prev => ({ ...prev, targetCostRate: value }));\n                            }}\n                            className=\"w-full pl-3 pr-12 py-3 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500 text-right font-mono text-lg\"\n                            placeholder=\"30\"\n                          />\n                          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                            <span className=\"text-gray-500 text-sm font-medium\">%</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                          <TrendingUp className=\"w-4 h-4\" />\n                          目標人件費率\n                        </label>\n                        <div className=\"relative\">\n                          <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"100\"\n                            step=\"0.1\"\n                            value={formData.targetLaborRate || ''}\n                            onChange={(e) => {\n                              const value = parseFloat(e.target.value) || 0;\n                              setFormData(prev => ({ ...prev, targetLaborRate: value }));\n                            }}\n                            className=\"w-full pl-3 pr-12 py-3 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500 text-right font-mono text-lg\"\n                            placeholder=\"25\"\n                          />\n                          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                            <span className=\"text-gray-500 text-sm font-medium\">%</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"md:col-span-2 flex justify-end gap-3\">\n                        <button\n                          onClick={cancelEditing}\n                          className=\"px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition-colors\"\n                        >\n                          キャンセル\n                        </button>\n                        <button\n                          onClick={handleSave}\n                          disabled={loading}\n                          className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white hover:bg-blue-700 disabled:bg-blue-300 rounded-lg transition-colors\"\n                        >\n                          <Save className=\"w-4 h-4\" />\n                          {loading ? '保存中...' : '保存'}\n                        </button>\n                      </div>\n                    </div>\n                  ) : existingTarget ? (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 bg-gray-50 dark:bg-gray-900 rounded-lg p-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">月間目標売上</p>\n                        <p className=\"text-xl font-bold text-blue-600 dark:text-blue-400\">\n                          {formatCurrency(existingTarget.targetSales)}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">目標営業利益率</p>\n                        <p className=\"text-xl font-bold text-green-600 dark:text-green-400\">\n                          {existingTarget.targetProfitMargin}%\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">目標原価率</p>\n                        <p className=\"text-xl font-bold text-orange-600 dark:text-orange-400\">\n                          {existingTarget.targetCostRate || 0}%\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">目標人件費率</p>\n                        <p className=\"text-xl font-bold text-cyan-600 dark:text-cyan-400\">\n                          {existingTarget.targetLaborRate || 0}%\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                      <Target className=\"w-8 h-8 mx-auto mb-2 text-gray-400 dark:text-gray-500\" />\n                      <p>この店舗の目標が設定されていません</p>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"px-6 py-4 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n          >\n            閉じる\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
  "src/components/Layout/Header.tsx": "import React, { useState } from 'react';\nimport { User, Settings, LogOut, Menu, ChevronDown } from 'lucide-react';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface HeaderProps {\n  onToggleSidebar: () => void;\n}\n\nexport const Header: React.FC<HeaderProps> = ({ onToggleSidebar }) => {\n  const { profile, signOut } = useAuth();\n  const [showUserMenu, setShowUserMenu] = useState(false);\n\n  const handleSignOut = async () => {\n    await signOut();\n    setShowUserMenu(false);\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4 flex items-center justify-between\">\n      <div className=\"flex items-center gap-4\">\n        <button\n          onClick={onToggleSidebar}\n          className=\"lg:hidden p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n        >\n          <Menu className=\"w-5 h-5 text-gray-600\" />\n        </button>\n        <div>\n          <h1 className=\"text-xl font-bold text-gray-900\">業務報告システム</h1>\n          <p className=\"text-sm text-gray-500\">Restaurant Business Report System</p>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-4\">\n        <div className=\"relative\">\n          <button\n            onClick={() => setShowUserMenu(!showUserMenu)}\n            className=\"flex items-center gap-3 px-4 py-2 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n          >\n            <User className=\"w-5 h-5 text-gray-600\" />\n            <div className=\"text-sm text-left\">\n              <p className=\"font-medium text-gray-900\">{profile?.name || 'ユーザー'}</p>\n              <p className=\"text-gray-500 capitalize\">{profile?.role || 'staff'}</p>\n            </div>\n            <ChevronDown className=\"w-4 h-4 text-gray-400\" />\n          </button>\n\n          {showUserMenu && (\n            <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\">\n              <button\n                onClick={() => setShowUserMenu(false)}\n                className=\"w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2\"\n              >\n                <Settings className=\"w-4 h-4\" />\n                設定\n              </button>\n              <hr className=\"my-1 border-gray-200\" />\n              <button\n                onClick={handleSignOut}\n                className=\"w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-gray-50 flex items-center gap-2\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n                ログアウト\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Overlay to close user menu */}\n      {showUserMenu && (\n        <div \n          className=\"fixed inset-0 z-40\"\n          onClick={() => setShowUserMenu(false)}\n        />\n      )}\n    </header>\n  );\n};",
  "src/components/Layout/Sidebar.tsx": "import React from 'react';\nimport { \n  BarChart3, \n  FileText, \n  MessageCircle, \n  Settings, \n  Store,\n  Calendar,\n  TrendingUp,\n  Users,\n  X\n} from 'lucide-react';\n\ninterface SidebarProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst menuItems = [\n  { id: 'dashboard', label: 'ダッシュボード', icon: BarChart3 },\n  { id: 'reports', label: '日次報告', icon: FileText },\n  { id: 'analytics', label: '分析', icon: TrendingUp },\n  { id: 'stores', label: '店舗管理', icon: Store },\n  { id: 'calendar', label: 'カレンダー', icon: Calendar },\n  { id: 'chat', label: 'AIチャット', icon: MessageCircle },\n  { id: 'team', label: 'チーム', icon: Users },\n  { id: 'settings', label: '設定', icon: Settings },\n];\n\nexport const Sidebar: React.FC<SidebarProps> = ({ \n  activeTab, \n  onTabChange, \n  isOpen, \n  onClose \n}) => {\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"lg:hidden fixed inset-0 bg-black bg-opacity-50 z-40\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <aside className={`\n        fixed lg:static inset-y-0 left-0 z-50 w-64 bg-white border-r border-gray-200 \n        transform transition-transform duration-200 ease-in-out\n        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}\n      `}>\n        <div className=\"flex flex-col h-full\">\n          {/* Mobile close button */}\n          <div className=\"lg:hidden flex justify-end p-4 border-b border-gray-200\">\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <X className=\"w-5 h-5 text-gray-600\" />\n            </button>\n          </div>\n          \n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 py-6\">\n            <ul className=\"space-y-2\">\n              {menuItems.map((item) => {\n                const IconComponent = item.icon;\n                const isActive = activeTab === item.id;\n                \n                return (\n                  <li key={item.id}>\n                    <button\n                      onClick={() => {\n                        onTabChange(item.id);\n                        onClose();\n                      }}\n                      className={`\n                        w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left\n                        transition-colors duration-200\n                        ${isActive \n                          ? 'bg-blue-50 text-blue-700 font-medium' \n                          : 'text-gray-700 hover:bg-gray-50'\n                        }\n                      `}\n                    >\n                      <IconComponent className=\"w-5 h-5\" />\n                      {item.label}\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </nav>\n          \n          {/* Footer */}\n          <div className=\"px-4 py-4 border-t border-gray-200\">\n            <p className=\"text-xs text-gray-500\">\n              Version 1.0.0 MVP\n            </p>\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n};",
  "src/components/Organization/InviteModal.tsx": "import React, { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { X, Mail, Link as LinkIcon, Copy, CheckCircle, AlertCircle } from 'lucide-react'\nimport { createInvitation, generateInvitationLink } from '@/services/organizationService'\nimport { canInviteUser } from '@/services/usageLimits'\n\ninterface Props {\n  organizationId: string\n  userId: string\n  onClose: () => void\n  onInvited: () => void\n}\n\nexport const InviteModal: React.FC<Props> = ({ organizationId, userId, onClose, onInvited }) => {\n  const [email, setEmail] = useState('')\n  const [role, setRole] = useState<'member' | 'admin'>('member')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState(false)\n  const [invitationLink, setInvitationLink] = useState<string | null>(null)\n  const [copied, setCopied] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!email) {\n      setError('メールアドレスを入力してください')\n      return\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(email)) {\n      setError('有効なメールアドレスを入力してください')\n      return\n    }\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const limitCheck = await canInviteUser(userId)\n      if (!limitCheck.allowed) {\n        setError(limitCheck.message || 'ユーザー数の上限に達しています')\n        return\n      }\n\n      const { data, error: inviteError } = await createInvitation(\n        organizationId,\n        email,\n        role,\n        userId\n      )\n\n      if (inviteError) {\n        setError('招待の作成に失敗しました')\n        return\n      }\n\n      if (data) {\n        setSuccess(true)\n        setInvitationLink(generateInvitationLink(data.token))\n        onInvited()\n      }\n    } catch (err) {\n      setError('招待の作成に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleCopyLink = async () => {\n    if (!invitationLink) return\n\n    try {\n      await navigator.clipboard.writeText(invitationLink)\n      setCopied(true)\n      setTimeout(() => setCopied(false), 2000)\n    } catch (err) {\n      console.error('Failed to copy link:', err)\n    }\n  }\n\n  const handleClose = () => {\n    setEmail('')\n    setRole('member')\n    setError(null)\n    setSuccess(false)\n    setInvitationLink(null)\n    onClose()\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full\">\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200\">\n          <h2 className=\"text-xl font-bold text-slate-900\">メンバーを招待</h2>\n          <button\n            onClick={handleClose}\n            className=\"p-1 hover:bg-slate-100 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-slate-500\" />\n          </button>\n        </div>\n\n        <div className=\"p-6\">\n          {success ? (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg flex items-start gap-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium text-green-900\">招待を送信しました</p>\n                  <p className=\"text-sm text-green-700 mt-1\">\n                    {email} に招待メールを送信しました\n                  </p>\n                </div>\n              </div>\n\n              {invitationLink && (\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    <LinkIcon className=\"w-4 h-4 inline mr-2\" />\n                    招待リンク\n                  </label>\n                  <div className=\"flex gap-2\">\n                    <input\n                      type=\"text\"\n                      value={invitationLink}\n                      readOnly\n                      className=\"flex-1 px-4 py-2 border border-slate-300 rounded-lg bg-slate-50 text-sm\"\n                    />\n                    <Button\n                      onClick={handleCopyLink}\n                      className={`${\n                        copied\n                          ? 'bg-green-600 hover:bg-green-700'\n                          : 'bg-blue-600 hover:bg-blue-700'\n                      } text-white`}\n                    >\n                      {copied ? (\n                        <>\n                          <CheckCircle className=\"w-4 h-4 mr-2\" />\n                          コピー済み\n                        </>\n                      ) : (\n                        <>\n                          <Copy className=\"w-4 h-4 mr-2\" />\n                          コピー\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-2\">\n                    このリンクは7日間有効です。リンクを共有して招待することもできます。\n                  </p>\n                </div>\n              )}\n\n              <div className=\"pt-4\">\n                <Button\n                  onClick={handleClose}\n                  className=\"w-full bg-slate-600 hover:bg-slate-700 text-white\"\n                >\n                  閉じる\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {error && (\n                <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n                  <AlertCircle className=\"w-5 h-5 text-red-600 flex-shrink-0 mt-0.5\" />\n                  <p className=\"text-sm text-red-800\">{error}</p>\n                </div>\n              )}\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  <Mail className=\"w-4 h-4 inline mr-2\" />\n                  メールアドレス\n                </label>\n                <input\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"user@example.com\"\n                  disabled={loading}\n                  autoFocus\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  権限\n                </label>\n                <select\n                  value={role}\n                  onChange={(e) => setRole(e.target.value as 'member' | 'admin')}\n                  className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  disabled={loading}\n                >\n                  <option value=\"member\">メンバー</option>\n                  <option value=\"admin\">管理者</option>\n                </select>\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  メンバーはデータの閲覧・入力、管理者は設定変更も可能です\n                </p>\n              </div>\n\n              <div className=\"pt-4 flex gap-3\">\n                <Button\n                  type=\"button\"\n                  onClick={handleClose}\n                  disabled={loading}\n                  className=\"flex-1 bg-slate-200 hover:bg-slate-300 text-slate-700\"\n                >\n                  キャンセル\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={loading}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  {loading ? (\n                    <>\n                      <span className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></span>\n                      送信中...\n                    </>\n                  ) : (\n                    '招待を送信'\n                  )}\n                </Button>\n              </div>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n",
  "src/components/Organization/OrganizationMembers.tsx": "import React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { UserPlus, Trash2, Shield, User, Mail, Calendar, AlertCircle } from 'lucide-react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport {\n  getOrganizationMembers,\n  removeOrganizationMember,\n  updateOrganizationMemberRole\n} from '@/services/organizationService'\nimport { InviteModal } from './InviteModal'\n\ninterface Member {\n  organization_id: string\n  user_id: string\n  role: 'owner' | 'admin' | 'member'\n  joined_at: string\n  profiles: {\n    id: string\n    name: string\n    email: string\n    role: string\n  }\n}\n\ninterface Props {\n  organizationId: string\n}\n\nexport const OrganizationMembers: React.FC<Props> = ({ organizationId }) => {\n  const { user } = useAuth()\n  const [members, setMembers] = useState<Member[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [actionLoading, setActionLoading] = useState<string | null>(null)\n  const [showInviteModal, setShowInviteModal] = useState(false)\n\n  useEffect(() => {\n    loadMembers()\n  }, [organizationId])\n\n  const loadMembers = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      const { data, error: fetchError } = await getOrganizationMembers(organizationId)\n      if (fetchError) {\n        setError('メンバー一覧の取得に失敗しました')\n        return\n      }\n\n      setMembers(data || [])\n    } catch (err) {\n      setError('メンバー一覧の取得に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleRemoveMember = async (userId: string) => {\n    if (!confirm('このメンバーを削除してもよろしいですか？')) {\n      return\n    }\n\n    try {\n      setActionLoading(userId)\n      const { error: removeError } = await removeOrganizationMember(organizationId, userId)\n\n      if (removeError) {\n        alert('メンバーの削除に失敗しました')\n        return\n      }\n\n      await loadMembers()\n    } catch (err) {\n      alert('メンバーの削除に失敗しました')\n    } finally {\n      setActionLoading(null)\n    }\n  }\n\n  const handleChangeRole = async (userId: string, newRole: 'owner' | 'admin' | 'member') => {\n    if (!confirm(`このメンバーの権限を「${getRoleLabel(newRole)}」に変更してもよろしいですか？`)) {\n      return\n    }\n\n    try {\n      setActionLoading(userId)\n      const { error: updateError } = await updateOrganizationMemberRole(\n        organizationId,\n        userId,\n        newRole\n      )\n\n      if (updateError) {\n        alert('権限の変更に失敗しました')\n        return\n      }\n\n      await loadMembers()\n    } catch (err) {\n      alert('権限の変更に失敗しました')\n    } finally {\n      setActionLoading(null)\n    }\n  }\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'owner':\n        return 'オーナー'\n      case 'admin':\n        return '管理者'\n      case 'member':\n        return 'メンバー'\n      default:\n        return role\n    }\n  }\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'owner':\n        return 'bg-red-100 text-red-800 border-red-200'\n      case 'admin':\n        return 'bg-blue-100 text-blue-800 border-blue-200'\n      case 'member':\n        return 'bg-slate-100 text-slate-800 border-slate-200'\n      default:\n        return 'bg-slate-100 text-slate-800 border-slate-200'\n    }\n  }\n\n  const currentUserMember = members.find(m => m.user_id === user?.id)\n  const isOwnerOrAdmin = currentUserMember?.role === 'owner' || currentUserMember?.role === 'admin'\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-slate-600\">読み込み中...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>メンバー管理</CardTitle>\n          {isOwnerOrAdmin && (\n            <Button\n              onClick={() => setShowInviteModal(true)}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              メンバーを招待\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        {error && (\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2 mb-6\">\n            <AlertCircle className=\"w-5 h-5 text-red-600 flex-shrink-0 mt-0.5\" />\n            <p className=\"text-sm text-red-800\">{error}</p>\n          </div>\n        )}\n\n        <div className=\"space-y-4\">\n          {members.map((member) => {\n            const isCurrentUser = member.user_id === user?.id\n            const canManage = isOwnerOrAdmin && !isCurrentUser && member.role !== 'owner'\n\n            return (\n              <div\n                key={member.user_id}\n                className=\"p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4 flex-1\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center\">\n                      <User className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className=\"font-medium text-slate-900\">\n                          {member.profiles.name}\n                          {isCurrentUser && (\n                            <span className=\"ml-2 text-xs text-slate-500\">(あなた)</span>\n                          )}\n                        </h3>\n                        <span\n                          className={`px-2 py-0.5 text-xs font-medium rounded-full border ${getRoleBadgeColor(\n                            member.role\n                          )}`}\n                        >\n                          {getRoleLabel(member.role)}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-4 text-sm text-slate-600\">\n                        <div className=\"flex items-center gap-1\">\n                          <Mail className=\"w-4 h-4\" />\n                          {member.profiles.email}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"w-4 h-4\" />\n                          参加日: {new Date(member.joined_at).toLocaleDateString('ja-JP')}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {canManage && (\n                    <div className=\"flex items-center gap-2\">\n                      <select\n                        value={member.role}\n                        onChange={(e) =>\n                          handleChangeRole(\n                            member.user_id,\n                            e.target.value as 'owner' | 'admin' | 'member'\n                          )\n                        }\n                        disabled={actionLoading === member.user_id}\n                        className=\"px-3 py-1.5 text-sm border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      >\n                        <option value=\"member\">メンバー</option>\n                        <option value=\"admin\">管理者</option>\n                      </select>\n\n                      <Button\n                        onClick={() => handleRemoveMember(member.user_id)}\n                        disabled={actionLoading === member.user_id}\n                        className=\"bg-red-600 hover:bg-red-700 text-white\"\n                      >\n                        {actionLoading === member.user_id ? (\n                          <span className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\"></span>\n                        ) : (\n                          <Trash2 className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n\n        {members.length === 0 && (\n          <div className=\"text-center py-12\">\n            <User className=\"w-12 h-12 text-slate-300 mx-auto mb-4\" />\n            <p className=\"text-slate-600\">メンバーがいません</p>\n          </div>\n        )}\n\n        <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h4 className=\"font-medium text-blue-900 mb-2 flex items-center gap-2\">\n            <Shield className=\"w-4 h-4\" />\n            権限について\n          </h4>\n          <ul className=\"space-y-1 text-sm text-blue-800\">\n            <li>\n              <strong>オーナー:</strong> 組織の全権限（組織削除含む）\n            </li>\n            <li>\n              <strong>管理者:</strong> メンバー管理、設定変更、データ編集\n            </li>\n            <li>\n              <strong>メンバー:</strong> データ閲覧・入力（担当店舗のみ）\n            </li>\n          </ul>\n        </div>\n      </CardContent>\n\n      {showInviteModal && user?.id && (\n        <InviteModal\n          organizationId={organizationId}\n          userId={user.id}\n          onClose={() => setShowInviteModal(false)}\n          onInvited={loadMembers}\n        />\n      )}\n    </Card>\n  )\n}\n",
  "src/components/Organization/SubscriptionInfo.tsx": "import React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport {\n  CreditCard,\n  Calendar,\n  Store,\n  Users,\n  MessageSquare,\n  CheckCircle,\n  AlertTriangle,\n  XCircle,\n  Crown\n} from 'lucide-react'\n\ninterface Organization {\n  id: string\n  name: string\n  subscription_status: string\n  subscription_plan: string\n  trial_ends_at?: string\n  max_stores: number\n  max_users: number\n  max_ai_requests_per_month: number\n  created_at?: string\n}\n\ninterface Props {\n  organization: Organization\n  onUpdate?: () => void\n}\n\nexport const SubscriptionInfo: React.FC<Props> = ({ organization, onUpdate }) => {\n  const getStatusBadge = () => {\n    switch (organization.subscription_status) {\n      case 'trial':\n        return {\n          icon: Calendar,\n          label: 'トライアル中',\n          color: 'bg-blue-100 text-blue-800 border-blue-200'\n        }\n      case 'active':\n        return {\n          icon: CheckCircle,\n          label: '有効',\n          color: 'bg-green-100 text-green-800 border-green-200'\n        }\n      case 'suspended':\n        return {\n          icon: AlertTriangle,\n          label: '一時停止',\n          color: 'bg-yellow-100 text-yellow-800 border-yellow-200'\n        }\n      case 'cancelled':\n        return {\n          icon: XCircle,\n          label: 'キャンセル済み',\n          color: 'bg-red-100 text-red-800 border-red-200'\n        }\n      default:\n        return {\n          icon: AlertTriangle,\n          label: '不明',\n          color: 'bg-slate-100 text-slate-800 border-slate-200'\n        }\n    }\n  }\n\n  const getPlanLabel = () => {\n    switch (organization.subscription_plan) {\n      case 'free':\n        return { name: 'Free', price: '無料' }\n      case 'starter':\n        return { name: 'Starter', price: '¥9,800/月' }\n      case 'business':\n        return { name: 'Business', price: '¥29,800/月' }\n      case 'enterprise':\n        return { name: 'Enterprise', price: '要相談' }\n      default:\n        return { name: organization.subscription_plan, price: '-' }\n    }\n  }\n\n  const getPlanFeatures = () => {\n    return [\n      {\n        icon: Store,\n        label: '最大店舗数',\n        value: organization.max_stores === 0 ? '無制限' : `${organization.max_stores}店舗`,\n        color: 'text-blue-600'\n      },\n      {\n        icon: Users,\n        label: '最大ユーザー数',\n        value: organization.max_users === 0 ? '無制限' : `${organization.max_users}名`,\n        color: 'text-green-600'\n      },\n      {\n        icon: MessageSquare,\n        label: 'AI使用回数/月',\n        value:\n          organization.max_ai_requests_per_month === 0\n            ? '無制限'\n            : `${organization.max_ai_requests_per_month}回`,\n        color: 'text-orange-600'\n      }\n    ]\n  }\n\n  const statusBadge = getStatusBadge()\n  const planInfo = getPlanLabel()\n  const features = getPlanFeatures()\n\n  const trialDaysLeft =\n    organization.trial_ends_at && organization.subscription_status === 'trial'\n      ? Math.ceil(\n          (new Date(organization.trial_ends_at).getTime() - Date.now()) / (1000 * 60 * 60 * 24)\n        )\n      : null\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>現在のプラン</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center justify-between p-6 bg-gradient-to-br from-blue-50 to-slate-50 rounded-lg border border-slate-200\">\n            <div>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Crown className=\"w-6 h-6 text-blue-600\" />\n                <h3 className=\"text-2xl font-bold text-slate-900\">{planInfo.name}プラン</h3>\n              </div>\n              <p className=\"text-lg text-slate-600\">{planInfo.price}</p>\n            </div>\n            <div\n              className={`px-4 py-2 rounded-full border flex items-center gap-2 ${statusBadge.color}`}\n            >\n              <statusBadge.icon className=\"w-4 h-4\" />\n              <span className=\"font-medium\">{statusBadge.label}</span>\n            </div>\n          </div>\n\n          {trialDaysLeft !== null && (\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-start gap-2\">\n                <Calendar className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium text-blue-900\">トライアル期間</p>\n                  <p className=\"text-sm text-blue-700 mt-1\">\n                    残り<strong className=\"text-lg mx-1\">{trialDaysLeft}</strong>日\n                    {trialDaysLeft <= 3 && (\n                      <span className=\"ml-2 text-red-600 font-medium\">まもなく終了</span>\n                    )}\n                  </p>\n                  <p className=\"text-xs text-blue-600 mt-1\">\n                    終了日: {new Date(organization.trial_ends_at!).toLocaleDateString('ja-JP')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-slate-900\">プラン内容</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {features.map((feature, index) => (\n                <div key={index} className=\"p-4 border border-slate-200 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <feature.icon className={`w-5 h-5 ${feature.color}`} />\n                    <span className=\"text-sm text-slate-600\">{feature.label}</span>\n                  </div>\n                  <p className=\"text-xl font-bold text-slate-900\">{feature.value}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"pt-4 border-t border-slate-200\">\n            <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n              <CreditCard className=\"w-4 h-4 mr-2\" />\n              プランをアップグレード\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>プラン比較</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-slate-200\">\n                  <th className=\"py-3 px-4 text-left text-sm font-medium text-slate-600\">\n                    機能\n                  </th>\n                  <th className=\"py-3 px-4 text-center text-sm font-medium text-slate-600\">\n                    Free\n                  </th>\n                  <th className=\"py-3 px-4 text-center text-sm font-medium text-slate-600\">\n                    Starter\n                  </th>\n                  <th className=\"py-3 px-4 text-center text-sm font-medium text-slate-600\">\n                    Business\n                  </th>\n                  <th className=\"py-3 px-4 text-center text-sm font-medium text-slate-600\">\n                    Enterprise\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr className=\"border-b border-slate-100\">\n                  <td className=\"py-3 px-4 text-sm text-slate-700\">月額料金</td>\n                  <td className=\"py-3 px-4 text-center text-sm font-medium\">無料</td>\n                  <td className=\"py-3 px-4 text-center text-sm font-medium\">¥9,800</td>\n                  <td className=\"py-3 px-4 text-center text-sm font-medium\">¥29,800</td>\n                  <td className=\"py-3 px-4 text-center text-sm font-medium\">要相談</td>\n                </tr>\n                <tr className=\"border-b border-slate-100\">\n                  <td className=\"py-3 px-4 text-sm text-slate-700\">店舗数</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">1</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">3</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">10</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">無制限</td>\n                </tr>\n                <tr className=\"border-b border-slate-100\">\n                  <td className=\"py-3 px-4 text-sm text-slate-700\">ユーザー数</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">3</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">5</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">20</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">無制限</td>\n                </tr>\n                <tr className=\"border-b border-slate-100\">\n                  <td className=\"py-3 px-4 text-sm text-slate-700\">AI使用回数/月</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">50</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">100</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">500</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">無制限</td>\n                </tr>\n                <tr className=\"border-b border-slate-100\">\n                  <td className=\"py-3 px-4 text-sm text-slate-700\">データ保持期間</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">3ヶ月</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">1年</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">3年</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">無制限</td>\n                </tr>\n                <tr>\n                  <td className=\"py-3 px-4 text-sm text-slate-700\">サポート</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">メール</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">メール</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">優先サポート</td>\n                  <td className=\"py-3 px-4 text-center text-sm\">専任担当者</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
  "src/components/Reports/AIReportDetail.tsx": "import { useState } from 'react';\nimport { Calendar, TrendingUp, AlertCircle, CheckCircle, Download, ArrowLeft, Trash2, Share2, Copy } from 'lucide-react';\nimport { AIReport } from '../../hooks/useAIReports';\nimport { Card } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Button } from '../ui/button';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { supabase } from '../../lib/supabase';\n\ninterface AIReportDetailProps {\n  report: AIReport;\n  onBack: () => void;\n  onDelete?: (reportId: string) => Promise<{ error: string | null }>;\n}\n\nexport function AIReportDetail({ report, onBack, onDelete }: AIReportDetailProps) {\n  const { user } = useAuth();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [showShareDialog, setShowShareDialog] = useState(false);\n  const [shareLink, setShareLink] = useState('');\n  const [isPublic, setIsPublic] = useState(false);\n  const [isUpdatingShare, setIsUpdatingShare] = useState(false);\n  const [copySuccess, setCopySuccess] = useState(false);\n\n  const canShare = user?.role === 'manager' || user?.role === 'admin';\n\n  const handleDelete = async () => {\n    if (!onDelete) return;\n\n    setIsDeleting(true);\n    const { error } = await onDelete(report.id);\n\n    if (error) {\n      alert(`削除に失敗しました: ${error}`);\n      setIsDeleting(false);\n      setShowDeleteConfirm(false);\n    } else {\n      onBack();\n    }\n  };\n\n  const handleShare = async () => {\n    setShowShareDialog(true);\n\n    const { data, error } = await supabase\n      .from('ai_generated_reports')\n      .select('share_token, is_public')\n      .eq('id', report.id)\n      .single();\n\n    if (!error && data) {\n      setIsPublic(data.is_public || false);\n      if (data.share_token) {\n        const link = `${window.location.origin}/share/report/${data.share_token}`;\n        setShareLink(link);\n      }\n    } else {\n      console.error('Error loading share data:', error);\n    }\n  };\n\n  const handleTogglePublic = async () => {\n    setIsUpdatingShare(true);\n    try {\n      const newIsPublic = !isPublic;\n\n      const { data, error } = await supabase\n        .from('ai_generated_reports')\n        .update({ is_public: newIsPublic })\n        .eq('id', report.id)\n        .select('share_token')\n        .single();\n\n      if (error) throw error;\n\n      setIsPublic(newIsPublic);\n\n      if (newIsPublic && data.share_token) {\n        const link = `${window.location.origin}/share/report/${data.share_token}`;\n        setShareLink(link);\n      } else {\n        setShareLink('');\n      }\n    } catch (error) {\n      console.error('Error toggling share:', error);\n      alert('共有設定の更新に失敗しました');\n    } finally {\n      setIsUpdatingShare(false);\n    }\n  };\n\n  const handleCopyLink = () => {\n    navigator.clipboard.writeText(shareLink);\n    setCopySuccess(true);\n    setTimeout(() => setCopySuccess(false), 2000);\n  };\n\n  const handleExport = () => {\n    const reportText = `\n${report.title}\n${'='.repeat(report.title.length)}\n\n期間: ${report.period_start} 〜 ${report.period_end}\nレポート種別: ${report.report_type === 'weekly' ? '週次' : '月次'}\n生成日時: ${new Date(report.generated_at).toLocaleString('ja-JP')}\n\n【エグゼクティブサマリー】\n${report.summary}\n\n【主要指標】\n- 総売上: ¥${report.metrics.totalSales.toLocaleString('ja-JP')}\n- 総経費: ¥${report.metrics.totalExpenses.toLocaleString('ja-JP')}\n- 粗利益: ¥${report.metrics.grossProfit.toLocaleString('ja-JP')}\n- 営業利益: ¥${report.metrics.operatingProfit.toLocaleString('ja-JP')}\n- 利益率: ${report.metrics.profitMargin.toFixed(1)}%\n- 原価率: ${report.metrics.costRate.toFixed(1)}%\n- 人件費率: ${report.metrics.laborRate.toFixed(1)}%\n\n【重要な発見】\n${report.key_insights.map((insight, i) => `${i + 1}. ${insight}`).join('\\n')}\n\n【改善提案】\n${report.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\\n')}\n\n【詳細分析】\n${Object.entries(report.analysis_content || {}).map(([key, value]) => `\\n■ ${key}\\n${value}`).join('\\n')}\n`;\n\n    const blob = new Blob([reportText], { type: 'text/plain;charset=utf-8' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${report.title}_${report.period_start}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <Button variant=\"ghost\" onClick={onBack}>\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          戻る\n        </Button>\n        <div className=\"flex gap-2\">\n          {canShare && (\n            <Button variant=\"outline\" onClick={handleShare}>\n              <Share2 className=\"w-4 h-4 mr-2\" />\n              共有リンク\n            </Button>\n          )}\n          <Button variant=\"outline\" onClick={handleExport}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            エクスポート\n          </Button>\n          {onDelete && (\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowDeleteConfirm(true)}\n              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n              disabled={isDeleting}\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              削除\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showShareDialog && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <Card className=\"max-w-md w-full p-6\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2 flex items-center\">\n                <Share2 className=\"w-5 h-5 mr-2\" />\n                レポートを共有\n              </h3>\n              <p className=\"text-gray-600 mb-4\">\n                共有リンクを有効にすると、誰でもこのレポートを閲覧できるようになります。\n              </p>\n\n              <div className=\"mb-4\">\n                <label className=\"flex items-center gap-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isPublic}\n                    onChange={handleTogglePublic}\n                    disabled={isUpdatingShare}\n                    className=\"w-5 h-5 text-blue-600 rounded focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm font-medium text-gray-700\">\n                    共有リンクを有効にする\n                  </span>\n                </label>\n              </div>\n\n              {shareLink && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    共有リンク\n                  </label>\n                  <div className=\"flex gap-2\">\n                    <input\n                      type=\"text\"\n                      value={shareLink}\n                      readOnly\n                      className=\"flex-1 p-3 border border-gray-300 rounded-lg bg-gray-50 text-sm\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleCopyLink}\n                      className=\"flex-shrink-0\"\n                      disabled={!isPublic}\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      {copySuccess ? 'コピー済み' : 'コピー'}\n                    </Button>\n                  </div>\n                  {isPublic ? (\n                    <p className=\"text-xs text-green-600 mt-2 font-medium\">\n                      ✓ このリンクは有効です。誰でもレポートを閲覧できます\n                    </p>\n                  ) : (\n                    <p className=\"text-xs text-gray-500 mt-2\">\n                      共有を有効にすると、このリンクでレポートを閲覧できるようになります\n                    </p>\n                  )}\n                </div>\n              )}\n\n              {copySuccess && (\n                <div className=\"mt-3 p-3 bg-green-50 border border-green-200 rounded-lg flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm text-green-800\">リンクをコピーしました</span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex gap-3 justify-end\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowShareDialog(false);\n                  setCopySuccess(false);\n                }}\n              >\n                閉じる\n              </Button>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {showDeleteConfirm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <Card className=\"max-w-md w-full p-6\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">レポートを削除</h3>\n              <p className=\"text-gray-600\">\n                このレポートを削除してもよろしいですか？この操作は取り消せません。\n              </p>\n            </div>\n            <div className=\"flex gap-3 justify-end\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowDeleteConfirm(false)}\n                disabled={isDeleting}\n              >\n                キャンセル\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleDelete}\n                disabled={isDeleting}\n                className=\"bg-red-600 text-white hover:bg-red-700\"\n              >\n                {isDeleting ? '削除中...' : '削除する'}\n              </Button>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      <Card className=\"p-8\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <Badge variant={report.report_type === 'weekly' ? 'default' : 'secondary'} className=\"text-sm\">\n              {report.report_type === 'weekly' ? '期間指定レポート' : '月次レポート'}\n            </Badge>\n            <div className=\"flex items-center text-sm text-gray-500\">\n              <Calendar className=\"w-4 h-4 mr-1\" />\n              {report.period_start} 〜 {report.period_end}\n            </div>\n          </div>\n\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            {report.title}\n          </h1>\n\n          <p className=\"text-sm text-gray-500\">\n            生成日時: {new Date(report.generated_at).toLocaleString('ja-JP')} |\n            AI Model: {report.generated_by}\n          </p>\n        </div>\n\n        <div className=\"bg-blue-50 border-l-4 border-blue-600 p-6 mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-3\">\n            エグゼクティブサマリー\n          </h2>\n          <p className=\"text-gray-700 leading-relaxed whitespace-pre-wrap\">\n            {report.summary}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-8\">\n          <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n            <div className=\"text-sm text-gray-600 mb-1\">総売上</div>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              ¥{report.metrics.totalSales.toLocaleString('ja-JP')}\n            </div>\n          </div>\n\n          <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n            <div className=\"text-sm text-gray-600 mb-1\">粗利益</div>\n            <div className=\"text-2xl font-bold text-green-600\">\n              ¥{report.metrics.grossProfit.toLocaleString('ja-JP')}\n            </div>\n          </div>\n\n          <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n            <div className=\"text-sm text-gray-600 mb-1\">営業利益</div>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              ¥{Math.round(report.metrics.operatingProfit).toLocaleString('ja-JP')}\n            </div>\n          </div>\n\n          <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n            <div className=\"text-sm text-gray-600 mb-1\">営業利益率</div>\n            <div className=\"text-2xl font-bold text-indigo-600\">\n              {report.metrics.profitMargin.toFixed(1)}%\n            </div>\n          </div>\n\n          <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n            <div className=\"text-sm text-gray-600 mb-1\">原価率</div>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {report.metrics.costRate.toFixed(1)}%\n            </div>\n          </div>\n        </div>\n\n        {report.metrics.storeBreakdown && report.metrics.storeBreakdown.length > 0 && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n              <TrendingUp className=\"w-5 h-5 mr-2\" />\n              店舗別実績\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {report.metrics.storeBreakdown.map((store) => (\n                <Card key={store.storeId} className=\"p-4\">\n                  <h3 className=\"font-semibold text-gray-900 mb-3\">{store.storeName}</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">売上</span>\n                      <span className=\"font-medium\">¥{store.sales.toLocaleString('ja-JP')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">営業利益</span>\n                      <span className=\"font-medium text-green-600\">¥{Math.round(store.profit).toLocaleString('ja-JP')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">営業利益率</span>\n                      <span className=\"font-medium\">{store.profitMargin.toFixed(1)}%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">原価率</span>\n                      <span className=\"font-medium\">{store.costRate.toFixed(1)}%</span>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n            <AlertCircle className=\"w-5 h-5 mr-2 text-yellow-600\" />\n            重要な発見\n          </h2>\n          <div className=\"space-y-3\">\n            {report.key_insights.map((insight, index) => (\n              <div key={index} className=\"flex items-start bg-yellow-50 border-l-4 border-yellow-400 p-4\">\n                <span className=\"flex-shrink-0 w-6 h-6 bg-yellow-400 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">\n                  {index + 1}\n                </span>\n                <p className=\"text-gray-800\">{insight}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n            <CheckCircle className=\"w-5 h-5 mr-2 text-green-600\" />\n            改善提案\n          </h2>\n          <div className=\"space-y-3\">\n            {report.recommendations.map((recommendation, index) => (\n              <div key={index} className=\"flex items-start bg-green-50 border-l-4 border-green-500 p-4\">\n                <span className=\"flex-shrink-0 w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">\n                  {index + 1}\n                </span>\n                <p className=\"text-gray-800\">{recommendation}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {report.analysis_content && Object.keys(report.analysis_content).length > 0 && (\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n              詳細分析\n            </h2>\n            <div className=\"space-y-6\">\n              {report.analysis_content.salesTrend && (\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">売上トレンド分析</h3>\n                  <p className=\"text-gray-700 leading-relaxed whitespace-pre-wrap\">\n                    {report.analysis_content.salesTrend}\n                  </p>\n                </div>\n              )}\n              {report.analysis_content.profitability && (\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">収益性分析</h3>\n                  <p className=\"text-gray-700 leading-relaxed whitespace-pre-wrap\">\n                    {report.analysis_content.profitability}\n                  </p>\n                </div>\n              )}\n              {report.analysis_content.costStructure && (\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">コスト構造分析</h3>\n                  <p className=\"text-gray-700 leading-relaxed whitespace-pre-wrap\">\n                    {report.analysis_content.costStructure}\n                  </p>\n                </div>\n              )}\n              {report.analysis_content.storeComparison && (\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">店舗間比較分析</h3>\n                  <p className=\"text-gray-700 leading-relaxed whitespace-pre-wrap\">\n                    {report.analysis_content.storeComparison}\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n}\n",
  "src/components/Reports/AIReportsList.tsx": "import { FileText, Calendar, TrendingUp, Loader2 } from 'lucide-react';\nimport { useAIReports } from '../../hooks/useAIReports';\nimport { Card } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Button } from '../ui/button';\n\ninterface AIReportsListProps {\n  storeId?: string;\n  onReportSelect: (reportId: string) => void;\n}\n\nexport function AIReportsList({ storeId, onReportSelect }: AIReportsListProps) {\n  const { reports, loading, error } = useAIReports(storeId);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-600\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6 text-center\">\n        <p className=\"text-red-600\">レポートの読み込みに失敗しました</p>\n        <p className=\"text-sm text-gray-500 mt-2\">{error}</p>\n      </div>\n    );\n  }\n\n  if (reports.length === 0) {\n    return (\n      <div className=\"p-12 text-center\">\n        <FileText className=\"w-16 h-16 mx-auto text-gray-300 mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">レポートがありません</h3>\n        <p className=\"text-gray-500\">\n          自動生成されたレポートがここに表示されます\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {reports.map((report) => (\n        <Card key={report.id} className=\"p-6 hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => onReportSelect(report.id)}>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <Badge variant={report.report_type === 'weekly' ? 'default' : 'secondary'}>\n                  {report.report_type === 'weekly' ? '期間指定' : '月次レポート'}\n                </Badge>\n                <div className=\"flex items-center text-sm text-gray-500\">\n                  <Calendar className=\"w-4 h-4 mr-1\" />\n                  {report.period_start} 〜 {report.period_end}\n                </div>\n              </div>\n\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                {report.title}\n              </h3>\n\n              <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                {report.summary}\n              </p>\n\n              <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                <div className=\"bg-blue-50 rounded-lg p-3\">\n                  <div className=\"text-xs text-gray-600 mb-1\">売上</div>\n                  <div className=\"text-lg font-bold text-blue-600\">\n                    ¥{report.metrics.totalSales.toLocaleString('ja-JP')}\n                  </div>\n                </div>\n\n                <div className=\"bg-green-50 rounded-lg p-3\">\n                  <div className=\"text-xs text-gray-600 mb-1\">営業利益</div>\n                  <div className=\"text-lg font-bold text-green-600\">\n                    ¥{Math.round(report.metrics.operatingProfit).toLocaleString('ja-JP')}\n                  </div>\n                </div>\n\n                <div className=\"bg-purple-50 rounded-lg p-3\">\n                  <div className=\"text-xs text-gray-600 mb-1\">利益率</div>\n                  <div className=\"text-lg font-bold text-purple-600\">\n                    {report.metrics.profitMargin.toFixed(1)}%\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-4 h-4 text-gray-400\" />\n                <span className=\"text-sm text-gray-500\">\n                  {report.key_insights.length}件の重要な発見\n                </span>\n              </div>\n            </div>\n\n            <div className=\"ml-4 text-right\">\n              <div className=\"text-sm text-gray-500 mb-2\">\n                {new Date(report.generated_at).toLocaleString('ja-JP')}\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                詳細を見る\n              </Button>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n",
  "src/components/Reports/GenerateReportDialog.tsx": "import { useState, useEffect } from 'react';\nimport { FileText, Loader2, CheckCircle, XCircle } from 'lucide-react';\nimport { Button } from '../ui/button';\nimport { Card } from '../ui/card';\nimport { generateReport } from '../../hooks/useAIReports';\nimport { supabase } from '../../lib/supabase';\n\ninterface GenerateReportDialogProps {\n  onClose: () => void;\n  onSuccess: (reportId: string) => void;\n}\n\ninterface Store {\n  id: string;\n  name: string;\n}\n\nexport function GenerateReportDialog({ onClose, onSuccess }: GenerateReportDialogProps) {\n  const [reportType, setReportType] = useState<'weekly' | 'monthly'>('weekly');\n  const [selectedStoreId, setSelectedStoreId] = useState<string>('all');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [result, setResult] = useState<{ success: boolean; message: string } | null>(null);\n  const [stores, setStores] = useState<Store[]>([]);\n  const [loadingStores, setLoadingStores] = useState(true);\n\n  const today = new Date().toISOString().split('T')[0];\n  const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n  const [startDate, setStartDate] = useState<string>(weekAgo);\n  const [endDate, setEndDate] = useState<string>(today);\n\n  useEffect(() => {\n    const fetchStores = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('stores')\n          .select('id, name')\n          .eq('is_active', true)\n          .order('name');\n\n        if (error) throw error;\n        setStores(data || []);\n      } catch (err) {\n        console.error('Failed to fetch stores:', err);\n      } finally {\n        setLoadingStores(false);\n      }\n    };\n\n    fetchStores();\n  }, []);\n\n  const handleGenerate = async () => {\n    setIsGenerating(true);\n    setResult(null);\n\n    try {\n      const storeId = selectedStoreId === 'all' ? undefined : selectedStoreId;\n\n      let periodStart: string | undefined;\n      let periodEnd: string | undefined;\n\n      if (reportType === 'weekly') {\n        periodStart = startDate;\n        periodEnd = endDate;\n      }\n\n      const { data, error } = await generateReport(reportType, storeId, periodStart, periodEnd);\n\n      if (error) {\n        setResult({ success: false, message: error });\n      } else if (data) {\n        setResult({ success: true, message: 'レポートが正常に生成されました。表示中...' });\n        setTimeout(() => {\n          onSuccess(data.id);\n          onClose();\n        }, 1000);\n      }\n    } catch (err) {\n      setResult({\n        success: false,\n        message: err instanceof Error ? err.message : 'レポート生成中にエラーが発生しました',\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"max-w-md w-full p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n            <FileText className=\"w-6 h-6 mr-2\" />\n            レポート生成\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n            disabled={isGenerating}\n          >\n            <XCircle className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        <div className=\"space-y-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              レポート種別\n            </label>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <button\n                onClick={() => setReportType('weekly')}\n                className={`p-4 border-2 rounded-lg transition-all ${\n                  reportType === 'weekly'\n                    ? 'border-blue-600 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                disabled={isGenerating}\n              >\n                <div className=\"font-semibold text-gray-900\">期間指定レポート</div>\n                <div className=\"text-xs text-gray-500 mt-1\">日付範囲を指定</div>\n              </button>\n\n              <button\n                onClick={() => setReportType('monthly')}\n                className={`p-4 border-2 rounded-lg transition-all ${\n                  reportType === 'monthly'\n                    ? 'border-blue-600 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                disabled={isGenerating}\n              >\n                <div className=\"font-semibold text-gray-900\">月次レポート</div>\n                <div className=\"text-xs text-gray-500 mt-1\">先月全体</div>\n              </button>\n            </div>\n          </div>\n\n          {reportType === 'weekly' && (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  開始日\n                </label>\n                <input\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  disabled={isGenerating}\n                  max={endDate}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  終了日\n                </label>\n                <input\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  disabled={isGenerating}\n                  min={startDate}\n                  max={today}\n                />\n              </div>\n            </div>\n          )}\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              対象店舗\n            </label>\n            <select\n              value={selectedStoreId}\n              onChange={(e) => setSelectedStoreId(e.target.value)}\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              disabled={isGenerating || loadingStores}\n            >\n              <option value=\"all\">全店舗</option>\n              {loadingStores ? (\n                <option disabled>読み込み中...</option>\n              ) : (\n                stores.map((store) => (\n                  <option key={store.id} value={store.id}>\n                    {store.name}\n                  </option>\n                ))\n              )}\n            </select>\n          </div>\n\n          {result && (\n            <div\n              className={`p-4 rounded-lg flex items-start ${\n                result.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'\n              }`}\n            >\n              {result.success ? (\n                <CheckCircle className=\"w-5 h-5 text-green-600 mr-3 flex-shrink-0 mt-0.5\" />\n              ) : (\n                <XCircle className=\"w-5 h-5 text-red-600 mr-3 flex-shrink-0 mt-0.5\" />\n              )}\n              <div>\n                <p className={`font-medium ${result.success ? 'text-green-900' : 'text-red-900'}`}>\n                  {result.success ? '成功' : 'エラー'}\n                </p>\n                <p className={`text-sm ${result.success ? 'text-green-700' : 'text-red-700'}`}>\n                  {result.message}\n                </p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={onClose} className=\"flex-1\" disabled={isGenerating}>\n              キャンセル\n            </Button>\n            <Button onClick={handleGenerate} className=\"flex-1\" disabled={isGenerating}>\n              {isGenerating ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  生成中...\n                </>\n              ) : (\n                <>\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  生成開始\n                </>\n              )}\n            </Button>\n          </div>\n\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <p className=\"text-sm text-blue-900\">\n              <strong>注意:</strong> レポート生成には30秒〜1分程度かかる場合があります。\n              AIが過去のデータを分析し、詳細なレポートを作成します。\n            </p>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n",
  "src/components/Reports/ReportDetail.tsx": "import React from 'react';\nimport { DailyReport } from '../../types';\nimport { formatDate, formatCurrency, calculateTotalExpenses, calculateOperatingProfit } from '../../utils/calculations';\nimport { X, Calendar, Store, User, TrendingUp, TrendingDown } from 'lucide-react';\n\ninterface ReportDetailProps {\n  report: DailyReport;\n  onClose: () => void;\n}\n\nexport const ReportDetail: React.FC<ReportDetailProps> = ({ report, onClose }) => {\n  const totalExpenses = calculateTotalExpenses(report);\n  const operatingProfit = calculateOperatingProfit(report.sales, totalExpenses);\n  const grossProfit = report.sales - report.purchase;\n  const profitMargin = report.sales > 0 ? (operatingProfit / report.sales * 100) : 0;\n\n  const expenseItems = [\n    { label: '仕入', value: report.purchase, color: 'bg-red-100 text-red-800' },\n    { label: '人件費', value: report.laborCost, color: 'bg-orange-100 text-orange-800' },\n    { label: '光熱費', value: report.utilities, color: 'bg-blue-100 text-blue-800' },\n    { label: '広告費', value: report.promotion, color: 'bg-green-100 text-green-800' },\n    { label: '清掃費', value: report.cleaning, color: 'bg-purple-100 text-purple-800' },\n    { label: '雑費', value: report.misc, color: 'bg-pink-100 text-pink-800' },\n    { label: '通信費', value: report.communication, color: 'bg-indigo-100 text-indigo-800' },\n    { label: 'その他', value: report.others, color: 'bg-gray-100 text-gray-800' }\n  ].filter(item => item.value > 0);\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">日次報告詳細</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-gray-500\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* 基本情報 */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n              <Calendar className=\"w-5 h-5 text-blue-600\" />\n              <div>\n                <p className=\"text-xs text-gray-500\">日付</p>\n                <p className=\"font-medium\">{formatDate(report.date)}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n              <Store className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <p className=\"text-xs text-gray-500\">店舗</p>\n                <p className=\"font-medium\">{report.storeName}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n              <User className=\"w-5 h-5 text-purple-600\" />\n              <div>\n                <p className=\"text-xs text-gray-500\">報告者</p>\n                <p className=\"font-medium\">{report.staffName}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* 財務サマリー */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <p className=\"text-xs text-gray-600 mb-1\">売上</p>\n              <p className=\"text-lg font-bold text-blue-600\">{formatCurrency(report.sales)}</p>\n            </div>\n            <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n              <p className=\"text-xs text-gray-600 mb-1\">経費合計</p>\n              <p className=\"text-lg font-bold text-red-600\">{formatCurrency(totalExpenses)}</p>\n            </div>\n            <div className={`text-center p-4 rounded-lg ${operatingProfit >= 0 ? 'bg-green-50' : 'bg-red-50'}`}>\n              <p className=\"text-xs text-gray-600 mb-1\">営業利益</p>\n              <div className=\"flex items-center justify-center gap-1\">\n                {operatingProfit >= 0 ? (\n                  <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                ) : (\n                  <TrendingDown className=\"w-4 h-4 text-red-600\" />\n                )}\n                <p className={`text-lg font-bold ${operatingProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatCurrency(operatingProfit)}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n              <p className=\"text-xs text-gray-600 mb-1\">利益率</p>\n              <p className={`text-lg font-bold ${\n                profitMargin >= 15 ? 'text-green-600' : \n                profitMargin >= 10 ? 'text-yellow-600' : 'text-red-600'\n              }`}>\n                {profitMargin.toFixed(1)}%\n              </p>\n            </div>\n          </div>\n\n          {/* 経費詳細 */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">経費詳細</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n              {expenseItems.map((item, index) => (\n                <div key={index} className={`p-3 rounded-lg ${item.color}`}>\n                  <p className=\"text-xs font-medium\">{item.label}</p>\n                  <p className=\"text-sm font-bold\">{formatCurrency(item.value)}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 報告内容 */}\n          {report.reportText && (\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">報告内容</h3>\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <p className=\"text-gray-700 whitespace-pre-wrap\">{report.reportText}</p>\n              </div>\n            </div>\n          )}\n\n          {/* 作成日時 */}\n          <div className=\"text-center pt-4 border-t border-gray-200\">\n            <p className=\"text-xs text-gray-500\">\n              作成日時: {new Date(report.createdAt).toLocaleString('ja-JP')}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};",
  "src/components/Reports/ReportForm.tsx": "import React, { useState } from 'react';\nimport { Store } from '../../lib/supabase';\nimport { Save, X, FileSpreadsheet, CheckCircle, AlertCircle, Calculator, RefreshCw, Pen as Yen, TrendingUp, Users } from 'lucide-react';\n\ninterface ReportFormProps {\n  selectedStore?: Store | null;\n  availableStores?: Store[];\n  onSubmit: (reportData: any) => void;\n  onCancel: () => void;\n}\n\nexport const ReportForm: React.FC<ReportFormProps> = ({ selectedStore, availableStores = [], onSubmit, onCancel }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  const [sheetsStatus, setSheetsStatus] = useState<{\n    syncing: boolean;\n    success: boolean | null;\n    message: string;\n  }>({ syncing: false, success: null, message: '' });\n  \n  const [formData, setFormData] = useState({\n    date: new Date().toISOString().split('T')[0],\n    storeId: selectedStore?.id || '',\n    storeName: selectedStore?.name || '',\n    staffName: 'デモスタッフ',\n    sales: 0,\n    purchase: 0,\n    laborCost: 0,\n    utilities: 0,\n    promotion: 0,\n    cleaning: 0,\n    misc: 0,\n    communication: 0,\n    others: 0,\n    reportText: ''\n  });\n\n  // Update store info when storeId changes\n  React.useEffect(() => {\n    if (formData.storeId) {\n      const store = availableStores.find(s => s.id === formData.storeId);\n      if (store) {\n        setFormData(prev => ({ ...prev, storeName: store.name }));\n      }\n    }\n  }, [formData.storeId, availableStores]);\n\n  // 自動計算機能\n  const calculateTotals = () => {\n    const totalExpenses = formData.purchase + formData.laborCost + formData.utilities + \n                         formData.promotion + formData.cleaning + formData.misc + \n                         formData.communication + formData.others;\n    const grossProfit = formData.sales - formData.purchase;\n    const operatingProfit = formData.sales - totalExpenses;\n    const profitMargin = formData.sales > 0 ? (operatingProfit / formData.sales * 100) : 0;\n    \n    return { totalExpenses, grossProfit, operatingProfit, profitMargin };\n  };\n\n  const totals = calculateTotals();\n\n  // バリデーション関数\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n\n    if (!formData.date) {\n      errors.date = '日付を選択してください';\n    }\n\n    if (!formData.storeId && !selectedStore?.id) {\n      errors.store = '店舗を選択してください';\n    }\n\n    if (!formData.staffName.trim()) {\n      errors.staffName = 'スタッフ名を入力してください';\n    }\n\n    if (formData.sales <= 0) {\n      errors.sales = '売上は1円以上で入力してください';\n    }\n\n    if (formData.sales > 10000000) {\n      errors.sales = '売上が非常に高い値です。確認してください';\n    }\n\n    // 経費が売上を超えている場合の警告\n    if (totals.totalExpenses > formData.sales) {\n      errors.expenses = '経費合計が売上を超えています';\n    }\n\n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  // フィールドクリア機能\n  const clearExpenses = () => {\n    setFormData(prev => ({\n      ...prev,\n      purchase: 0,\n      laborCost: 0,\n      utilities: 0,\n      promotion: 0,\n      cleaning: 0,\n      misc: 0,\n      communication: 0,\n      others: 0\n    }));\n  };\n\n  // 数値フォーマット関数\n  const formatNumber = (value: number) => {\n    return value.toLocaleString();\n  };\n\n  // 数値入力コンポーネント\n  const NumberInput = ({ \n    label, \n    value, \n    onChange, \n    placeholder = \"0\",\n    error,\n    required = false,\n    icon: IconComponent,\n    hint\n  }: {\n    label: string;\n    value: number;\n    onChange: (value: number) => void;\n    placeholder?: string;\n    error?: string;\n    required?: boolean;\n    icon?: any;\n    hint?: string;\n  }) => (\n    <div>\n      <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n        {IconComponent && <IconComponent className=\"w-4 h-4\" />}\n        {label} {required && <span className=\"text-red-500\">*</span>}\n      </label>\n      <div className=\"relative\">\n        <input\n          type=\"text\"\n          inputMode=\"numeric\"\n          pattern=\"[0-9]*\"\n          value={value === 0 ? '' : formatNumber(value)}\n          onChange={(e) => {\n            const numericValue = parseInt(e.target.value.replace(/[^0-9]/g, '')) || 0;\n            onChange(numericValue);\n          }}\n          className={`w-full pl-3 pr-12 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-right font-mono text-lg ${\n            error ? 'border-red-300 bg-red-50' : 'border-gray-300'\n          }`}\n          placeholder={placeholder}\n        />\n        <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n          <span className=\"text-gray-500 text-sm font-medium\">円</span>\n        </div>\n      </div>\n      {hint && <p className=\"mt-1 text-xs text-gray-500\">{hint}</p>}\n      {error && <p className=\"mt-1 text-sm text-red-600\">{error}</p>}\n    </div>\n  );\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      setError('入力内容を確認してください');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setSheetsStatus({ syncing: true, success: null, message: 'Google Sheetsに同期中...' });\n\n    try {\n      await onSubmit({\n        ...formData,\n        storeId: formData.storeId || selectedStore?.id,\n        lineUserId: undefined\n      });\n      \n      // Google Sheets同期の結果を表示\n      setSheetsStatus({ \n        syncing: false, \n        success: true, \n        message: '✓ 報告とGoogle Sheetsへの同期が完了しました' \n      });\n      \n      // 3秒後にモーダルを閉じる\n      setTimeout(() => {\n        onCancel();\n      }, 1500);\n      \n    } catch (err) {\n      console.error('Report submission error:', err);\n      setError('エラーが発生しました。しばらくしてから再度お試しください。');\n      setSheetsStatus({ \n        syncing: false, \n        success: false, \n        message: '⚠ 報告は作成されましたが、Google Sheets同期でエラーが発生しました' \n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string | number) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // エラーをクリア\n    if (validationErrors[field]) {\n      setValidationErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n    \n    if (error) {\n      setError('');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <FileSpreadsheet className=\"w-5 h-5 text-blue-600\" />\n            </div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">日次報告作成</h2>\n          </div>\n          <button\n            onClick={onCancel}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-gray-500\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          {/* 基本情報セクション */}\n          <div className=\"bg-gray-50 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n              <Users className=\"w-5 h-5 text-blue-600\" />\n              基本情報\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  日付 *\n                </label>\n                <input\n                  type=\"date\"\n                  required\n                  value={formData.date}\n                  onChange={(e) => handleInputChange('date', e.target.value)}\n                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                    validationErrors.date ? 'border-red-300 bg-red-50' : 'border-gray-300'\n                  }`}\n                />\n                {validationErrors.date && (\n                  <p className=\"mt-1 text-sm text-red-600\">{validationErrors.date}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  店舗\n                </label>\n                {availableStores.length > 1 ? (\n                  <>\n                    <select\n                      required\n                      value={formData.storeId}\n                      onChange={(e) => handleInputChange('storeId', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      <option value=\"\">店舗を選択してください</option>\n                      {availableStores.map((store) => (\n                        <option key={store.id} value={store.id}>\n                          {store.name}\n                        </option>\n                      ))}\n                    </select>\n                    {validationErrors.store && (\n                      <p className=\"mt-1 text-sm text-red-600\">{validationErrors.store}</p>\n                    )}\n                  </>\n                ) : (\n                  <>\n                    <input\n                      type=\"text\"\n                      disabled\n                      value={formData.storeName}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100 text-gray-600 cursor-not-allowed\"\n                      placeholder=\"店舗名\"\n                    />\n                    <p className=\"mt-1 text-xs text-gray-500\">\n                      選択された店舗: {selectedStore?.name || '未選択'}\n                    </p>\n                  </>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                スタッフ名 *\n              </label>\n              <input\n                type=\"text\"\n                required\n                value={formData.staffName}\n                onChange={(e) => handleInputChange('staffName', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  validationErrors.staffName ? 'border-red-300 bg-red-50' : 'border-gray-300'\n                }`}\n                placeholder=\"報告者名を入力\"\n              />\n              {validationErrors.staffName && (\n                <p className=\"mt-1 text-sm text-red-600\">{validationErrors.staffName}</p>\n              )}\n            </div>\n          </div>\n\n          {/* 売上セクション */}\n          <div className=\"bg-green-50 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n              <Yen className=\"w-5 h-5 text-green-600\" />\n              売上情報\n            </h3>\n            <NumberInput\n              label=\"本日の売上\"\n              value={formData.sales}\n              onChange={(value) => handleInputChange('sales', value)}\n              placeholder=\"150,000\"\n              error={validationErrors.sales}\n              required\n              icon={Yen}\n              hint=\"税込み売上金額を入力してください\"\n            />\n          </div>\n\n          {/* 経費セクション */}\n          <div className=\"bg-red-50 rounded-lg p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n                <Calculator className=\"w-5 h-5 text-red-600\" />\n                経費項目\n              </h3>\n              <button\n                type=\"button\"\n                onClick={clearExpenses}\n                className=\"flex items-center gap-1 text-xs text-gray-500 hover:text-gray-700 transition-colors\"\n              >\n                <RefreshCw className=\"w-3 h-3\" />\n                クリア\n              </button>\n            </div>\n            \n            {validationErrors.expenses && (\n              <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <p className=\"text-sm text-yellow-800\">{validationErrors.expenses}</p>\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <NumberInput\n                label=\"仕入・材料費\"\n                value={formData.purchase}\n                onChange={(value) => handleInputChange('purchase', value)}\n                placeholder=\"80,000\"\n                hint=\"食材・飲料の仕入れ費用\"\n              />\n              <NumberInput\n                label=\"人件費\"\n                value={formData.laborCost}\n                onChange={(value) => handleInputChange('laborCost', value)}\n                placeholder=\"60,000\"\n                hint=\"アルバイト代・給料等\"\n              />\n              <NumberInput\n                label=\"光熱費\"\n                value={formData.utilities}\n                onChange={(value) => handleInputChange('utilities', value)}\n                placeholder=\"15,000\"\n                hint=\"電気・ガス・水道代\"\n              />\n              <NumberInput\n                label=\"広告・宣伝費\"\n                value={formData.promotion}\n                onChange={(value) => handleInputChange('promotion', value)}\n                placeholder=\"8,000\"\n                hint=\"チラシ・ネット広告等\"\n              />\n              <NumberInput\n                label=\"清掃費\"\n                value={formData.cleaning}\n                onChange={(value) => handleInputChange('cleaning', value)}\n                placeholder=\"5,000\"\n                hint=\"清掃用品・クリーニング\"\n              />\n              <NumberInput\n                label=\"通信費\"\n                value={formData.communication}\n                onChange={(value) => handleInputChange('communication', value)}\n                placeholder=\"3,000\"\n                hint=\"電話・インターネット代\"\n              />\n              <NumberInput\n                label=\"雑費\"\n                value={formData.misc}\n                onChange={(value) => handleInputChange('misc', value)}\n                placeholder=\"2,000\"\n                hint=\"文房具・消耗品等\"\n              />\n              <NumberInput\n                label=\"その他経費\"\n                value={formData.others}\n                onChange={(value) => handleInputChange('others', value)}\n                placeholder=\"1,000\"\n                hint=\"上記以外の支出\"\n              />\n            </div>\n          </div>\n\n          {/* 計算結果セクション */}\n          <div className=\"bg-blue-50 border-2 border-blue-200 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-blue-600\" />\n              計算結果\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div>\n                <p className=\"text-xs text-gray-600 mb-1\">経費合計</p>\n                <p className=\"text-xl font-bold text-red-600\">{formatNumber(totals.totalExpenses)}円</p>\n              </div>\n              <div>\n                <p className=\"text-xs text-gray-600 mb-1\">粗利益</p>\n                <p className={`text-xl font-bold ${totals.grossProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatNumber(totals.grossProfit)}円\n                </p>\n              </div>\n              <div>\n                <p className=\"text-xs text-gray-600 mb-1\">営業利益</p>\n                <p className={`text-xl font-bold ${totals.operatingProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatNumber(totals.operatingProfit)}円\n                </p>\n              </div>\n              <div>\n                <p className=\"text-xs text-gray-600 mb-1\">利益率</p>\n                <p className={`text-xl font-bold ${totals.profitMargin >= 15 ? 'text-green-600' : totals.profitMargin >= 10 ? 'text-yellow-600' : 'text-red-600'}`}>\n                  {totals.profitMargin.toFixed(1)}%\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* 報告内容セクション */}\n          <div>\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n              📝\n              報告内容・特記事項\n            </label>\n            <textarea\n              value={formData.reportText}\n              onChange={(e) => handleInputChange('reportText', e.target.value)}\n              rows={5}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base\"\n              placeholder=\"本日の特記事項や気づいた点などを記入してください...\"\n            />\n          </div>\n\n          {/* Google Sheets同期状態 */}\n          <div className={`border rounded-lg p-3 ${\n            sheetsStatus.success === true ? 'bg-green-50 border-green-200' :\n            sheetsStatus.success === false ? 'bg-red-50 border-red-200' :\n            sheetsStatus.syncing ? 'bg-blue-50 border-blue-200' : 'bg-gray-50 border-gray-200'\n          }`}>\n            <div className=\"flex items-center gap-2\">\n              <FileSpreadsheet className=\"w-4 h-4 text-gray-600\" />\n              <span className=\"text-sm font-medium text-gray-700\">Google Sheets連携</span>\n            </div>\n            {sheetsStatus.message && (\n              <p className=\"mt-1 text-sm text-gray-600\">{sheetsStatus.message}</p>\n            )}\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2\">\n                <AlertCircle className=\"w-5 h-5 text-red-600\" />\n                <p className=\"text-sm text-red-800\">{error}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3 justify-end pt-4 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              disabled={loading}\n              className=\"px-6 py-3 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors text-base font-medium\"\n            >\n              キャンセル\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"px-6 py-3 bg-blue-600 text-white hover:bg-blue-700 disabled:bg-blue-300 rounded-lg transition-colors flex items-center gap-2 text-base font-medium\"\n            >\n              {loading ? (\n                <>\n                  <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                  送信中...\n                </>\n              ) : (\n                <>\n                  <Save className=\"w-4 h-4\" />\n                  報告を送信\n                </>\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};",
  "src/components/Stores/StoreDetail.tsx": "import React from 'react';\nimport { Store } from '../../lib/supabase';\nimport { formatDate, formatCurrency } from '../../utils/calculations';\nimport { \n  X, \n  MapPin, \n  User, \n  Calendar, \n  BarChart3, \n  CheckCircle, \n  XCircle,\n  Building,\n  Edit,\n  Trash2,\n  UserPlus,\n  FileText,\n  TrendingUp\n} from 'lucide-react';\n\ninterface StoreDetailProps {\n  store: Store & {\n    manager_name?: string;\n    reportCount?: number;\n    lastReportDate?: string;\n    isAssigned?: boolean;\n  };\n  onClose: () => void;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onAssignUser?: () => void;\n  canEdit?: boolean;\n}\n\nexport const StoreDetail: React.FC<StoreDetailProps> = ({\n  store,\n  onClose,\n  onEdit,\n  onDelete,\n  onAssignUser,\n  canEdit = true\n}) => {\n  // 活動状況の計算\n  const getActivityStatus = () => {\n    const reportCount = store.reportCount || 0;\n    const lastReport = store.lastReportDate;\n    const daysSinceLastReport = lastReport \n      ? Math.floor((Date.now() - new Date(lastReport).getTime()) / (1000 * 60 * 60 * 24))\n      : null;\n\n    if (reportCount === 0) {\n      return { status: '未使用', color: 'text-gray-500', bgColor: 'bg-gray-100' };\n    } else if (daysSinceLastReport !== null) {\n      if (daysSinceLastReport <= 1) {\n        return { status: '活発', color: 'text-green-600', bgColor: 'bg-green-100' };\n      } else if (daysSinceLastReport <= 7) {\n        return { status: '通常', color: 'text-blue-600', bgColor: 'bg-blue-100' };\n      } else {\n        return { status: '低調', color: 'text-orange-600', bgColor: 'bg-orange-100' };\n      }\n    }\n\n    return { status: '不明', color: 'text-gray-500', bgColor: 'bg-gray-100' };\n  };\n\n  const activity = getActivityStatus();\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* ヘッダー */}\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 bg-blue-100 rounded-full\">\n                <Building className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold text-gray-900\">{store.name}</h2>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  {store.is_active ? (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      <span className=\"text-sm text-green-600\">営業中</span>\n                    </>\n                  ) : (\n                    <>\n                      <XCircle className=\"w-4 h-4 text-red-500\" />\n                      <span className=\"text-sm text-red-600\">休業中</span>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <X className=\"w-5 h-5 text-gray-500\" />\n            </button>\n          </div>\n        </div>\n\n        {/* コンテンツ */}\n        <div className=\"p-6 space-y-6\">\n          {/* 基本情報 */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n                <Building className=\"w-5 h-5\" />\n                基本情報\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">住所</label>\n                  <div className=\"flex items-start gap-2 mt-1\">\n                    <MapPin className=\"w-4 h-4 text-gray-400 mt-0.5 flex-shrink-0\" />\n                    <p className=\"text-sm text-gray-900\">{store.address}</p>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">作成日</label>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Calendar className=\"w-4 h-4 text-gray-400\" />\n                    <p className=\"text-sm text-gray-900\">\n                      {store.created_at ? formatDate(store.created_at) : '不明'}\n                    </p>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">最終更新</label>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Calendar className=\"w-4 h-4 text-gray-400\" />\n                    <p className=\"text-sm text-gray-900\">\n                      {store.updated_at ? formatDate(store.updated_at) : '不明'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                店長情報\n              </h3>\n              \n              {store.manager_name ? (\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"w-4 h-4 text-blue-600\" />\n                      <span className=\"font-medium text-gray-900\">{store.manager_name}</span>\n                      <span className=\"px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800\">\n                        店長\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">店舗責任者</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"bg-gray-50 rounded-lg p-4 text-center\">\n                  <User className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-500\">店長が設定されていません</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* 活動状況 */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2 mb-4\">\n              <BarChart3 className=\"w-5 h-5\" />\n              活動状況\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"bg-blue-50 rounded-lg p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <FileText className=\"w-4 h-4 text-blue-600\" />\n                  <span className=\"text-sm font-medium text-gray-700\">報告数</span>\n                </div>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {store.reportCount || 0}件\n                </p>\n              </div>\n\n              <div className=\"bg-green-50 rounded-lg p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Calendar className=\"w-4 h-4 text-green-600\" />\n                  <span className=\"text-sm font-medium text-gray-700\">最終報告</span>\n                </div>\n                <p className=\"text-sm font-bold text-green-600\">\n                  {store.lastReportDate \n                    ? formatDate(store.lastReportDate)\n                    : '報告なし'\n                  }\n                </p>\n              </div>\n\n              <div className={`${activity.bgColor} rounded-lg p-4`}>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <TrendingUp className={`w-4 h-4 ${activity.color.replace('text-', 'text-')}`} />\n                  <span className=\"text-sm font-medium text-gray-700\">状況</span>\n                </div>\n                <p className={`text-lg font-bold ${activity.color}`}>\n                  {activity.status}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* 割り当て状況 */}\n          {store.isAssigned !== undefined && (\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2 mb-3\">\n                <UserPlus className=\"w-5 h-5\" />\n                割り当て状況\n              </h3>\n              \n              <div className={`rounded-lg p-4 ${\n                store.isAssigned ? 'bg-green-50 border border-green-200' : 'bg-gray-50 border border-gray-200'\n              }`}>\n                <div className=\"flex items-center gap-2\">\n                  {store.isAssigned ? (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-sm font-medium text-green-800\">\n                        この店舗にアクセス権があります\n                      </span>\n                    </>\n                  ) : (\n                    <>\n                      <XCircle className=\"w-4 h-4 text-gray-600\" />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        この店舗にアクセス権がありません\n                      </span>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* アクションボタン */}\n        {canEdit && (\n          <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200 flex gap-3 justify-end\">\n            {onAssignUser && (\n              <button\n                onClick={onAssignUser}\n                className=\"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white hover:bg-purple-700 rounded-lg transition-colors\"\n              >\n                <UserPlus className=\"w-4 h-4\" />\n                ユーザー割り当て\n              </button>\n            )}\n            \n            {onEdit && (\n              <button\n                onClick={onEdit}\n                className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white hover:bg-green-700 rounded-lg transition-colors\"\n              >\n                <Edit className=\"w-4 h-4\" />\n                編集\n              </button>\n            )}\n            \n            {onDelete && (\n              <button\n                onClick={onDelete}\n                className=\"flex items-center gap-2 px-4 py-2 bg-red-600 text-white hover:bg-red-700 rounded-lg transition-colors\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n                店舗を削除\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};",
  "src/components/Stores/StoreForm.tsx": "import React, { useState, useEffect } from 'react';\nimport { Store } from '../../lib/supabase';\nimport { Save, X, MapPin, User, TriangleAlert as AlertTriangle, Building } from 'lucide-react';\n\ninterface StoreFormProps {\n  store?: Store | null;\n  onSubmit: (storeData: {\n    name: string;\n    address: string;\n    managerId?: string;\n    managerName?: string;\n    isActive?: boolean;\n  }) => Promise<{ ok: boolean; error?: string }>;\n  onCancel: () => void;\n  loading?: boolean;\n}\n\nexport const StoreForm: React.FC<StoreFormProps> = ({\n  store,\n  onSubmit,\n  onCancel,\n  loading = false\n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    address: '',\n    managerName: '',\n    isActive: true\n  });\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string>('');\n\n  // デバッグ: フォーム初期化ログ\n  useEffect(() => {\n    console.log('🔧 StoreForm: 初期化開始', { store, hasStore: !!store });\n    \n    if (store) {\n      const initialData = {\n        name: store.name || '',\n        address: store.address || '',\n        managerName: (store as any).manager_name || '',\n        isActive: store.is_active !== false\n      };\n      console.log('📝 StoreForm: 編集データ設定', initialData);\n      setFormData(initialData);\n    } else {\n      console.log('🆕 StoreForm: 新規作成モード');\n      setFormData({\n        name: '',\n        address: '',\n        managerName: '',\n        isActive: true\n      });\n    }\n    setError('');\n  }, [store]);\n\n  // フォーム送信処理\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    // 基本バリデーション\n    if (!formData.name?.trim()) {\n      setError('店舗名を入力してください');\n      return;\n    }\n\n    if (!formData.address?.trim()) {\n      setError('住所を入力してください');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const submitData = {\n        name: formData.name.trim(),\n        address: formData.address.trim(),\n        managerId: undefined,\n        managerName: formData.managerName?.trim() || undefined,\n        isActive: !!formData.isActive\n      };\n\n      const result = await onSubmit(submitData);\n\n      if (!result?.ok) {\n        setError(result?.error || '登録に失敗しました');\n        return;\n      }\n\n      onCancel();\n    } catch (e: any) {\n      setError(e?.message ?? '登録に失敗しました');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // 入力変更ハンドラー\n  const handleInputChange = (field: string, value: string | boolean) => {\n    console.log('✏️ StoreForm: 入力変更:', { field, value });\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (error) {\n      setError('');\n    }\n  };\n\n  // 送信ボタンのクリックハンドラー（デバッグ用）\n  const handleSubmitButtonClick = () => {\n    console.log('🖱️ StoreForm: 送信ボタンがクリックされました');\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Building className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">\n                {store ? '店舗編集' : '新規店舗作成'}\n              </h2>\n            </div>\n            <button\n              onClick={onCancel}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <X className=\"w-5 h-5 text-gray-500\" />\n            </button>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\n          {/* 店舗名 */}\n          <div>\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n              <Building className=\"w-4 h-4\" />\n              店舗名 <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              required\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"例：らーめん太郎 銀座店\"\n            />\n          </div>\n\n          {/* 住所 */}\n          <div>\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n              <MapPin className=\"w-4 h-4\" />\n              住所 <span className=\"text-red-500\">*</span>\n            </label>\n            <textarea\n              required\n              value={formData.address}\n              onChange={(e) => handleInputChange('address', e.target.value)}\n              rows={2}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none\"\n              placeholder=\"例：東京都中央区銀座1-1-1\"\n            />\n          </div>\n\n          {/* 店長名 */}\n          <div>\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n              <User className=\"w-4 h-4\" />\n              店長名（任意）\n            </label>\n            <input\n              type=\"text\"\n              value={formData.managerName}\n              onChange={(e) => handleInputChange('managerName', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"例：田中 太郎\"\n            />\n          </div>\n\n          {/* 営業状態（編集時のみ） */}\n          {store && (\n            <div>\n              <label className=\"flex items-center gap-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.isActive}\n                  onChange={(e) => handleInputChange('isActive', e.target.checked)}\n                  className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">営業中</span>\n              </label>\n            </div>\n          )}\n\n          {/* エラー表示 */}\n          {error && (\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n              <div className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                <p className=\"text-sm text-red-700\">{error}</p>\n              </div>\n            </div>\n          )}\n\n          {/* デバッグ情報 */}\n          <div className=\"p-2 bg-gray-50 rounded text-xs text-gray-600\">\n            <p>デバッグ: {store ? '編集' : '新規'}モード</p>\n            <p>入力値: {formData.name} | {formData.address} | {formData.managerName}</p>\n          </div>\n\n          {/* ボタン */}\n          <div className=\"flex gap-3 justify-end pt-4 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              disabled={isSubmitting}\n              className=\"px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors disabled:opacity-50\"\n            >\n              キャンセル\n            </button>\n            <button\n              type=\"submit\"\n              onClick={handleSubmitButtonClick}\n              disabled={isSubmitting || loading}\n              className=\"px-4 py-2 bg-blue-600 text-white hover:bg-blue-700 disabled:bg-blue-300 rounded-lg transition-colors flex items-center gap-2\"\n            >\n              {isSubmitting ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  {store ? '更新中...' : '作成中...'}\n                </>\n              ) : (\n                <>\n                  <Save className=\"w-4 h-4\" />\n                  {store ? '更新' : '作成'}\n                </>\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};",
  "src/components/Stores/StoreManager.tsx": "import React, { useState } from 'react';\nimport { Plus, Building2, RefreshCw, Download, Upload } from 'lucide-react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useStores } from '../../hooks/useStores';\nimport { StoresTable } from './StoresTable';\nimport { StoreForm } from './StoreForm';\nimport { StoreDetail } from './StoreDetail';\nimport { StoreSelector } from './StoreSelector';\nimport { Store } from '../../lib/supabase';\nimport { canAddStore } from '@/services/usageLimits';\n\ninterface StoreManagerProps {\n  userId: string | null;\n  onStoresUpdate?: () => void;\n}\n\ntype NotificationType = 'success' | 'error' | 'info';\n\ninterface Notification {\n  type: NotificationType;\n  message: string;\n}\n\nexport const StoreManager: React.FC<StoreManagerProps> = ({ userId, onStoresUpdate }) => {\n  const { user } = useAuth();\n  const {\n    stores,\n    selectedStoreId,\n    selectedStore,\n    loading,\n    error,\n    createStore,\n    updateStore,\n    deleteStore,\n    assignUserToStore,\n    selectStore,\n    fetchStores\n  } = useStores(userId);\n\n  const [showForm, setShowForm] = useState(false);\n  const [editingStore, setEditingStore] = useState<Store | null>(null);\n  const [viewingStore, setViewingStore] = useState<Store | null>(null);\n  const [notification, setNotification] = useState<Notification | null>(null);\n\n  // 通知表示\n  const showNotification = (type: NotificationType, message: string) => {\n    console.log(`📢 StoreManager: 通知表示 - ${type}: ${message}`);\n    setNotification({ type, message });\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  // 権限チェック\n  const canManageStores = user?.role === 'admin' || user?.role === 'manager';\n  const canEditStore = (store: Store) => {\n    // 管理者は全店舗を編集可能\n    if (user?.role === 'admin') {\n      return true;\n    }\n    // マネージャーは全店舗を編集可能\n    if (user?.role === 'manager') {\n      return true;\n    }\n    // スタッフは割り当てられた店舗を編集可能\n    if (user?.role === 'staff') {\n      // デモ環境では全店舗にアクセス可能とする\n      return true;\n    }\n    return false;\n  };\n\n  // 店舗作成\n  const handleCreateStore = async (storeData: {\n    name: string;\n    address: string;\n    managerName?: string;\n    isActive?: boolean;\n  }) => {\n    console.log('🏪 StoreManager: 店舗作成処理開始', {\n      storeData,\n      userId,\n      currentStoresCount: stores.length\n    });\n\n    try {\n    if (!userId) {\n      showNotification('error', 'ユーザーIDが見つかりません');\n      return { error: 'ユーザーIDが見つかりません' };\n    }\n\n    const limitCheck = await canAddStore(userId);\n    if (!limitCheck.allowed) {\n      showNotification('error', limitCheck.message || '店舗数の上限に達しています');\n      return { error: limitCheck.message };\n    }\n\n    const { error } = await createStore(storeData);\n\n    if (error) {\n      console.error('❌ StoreManager: 店舗作成エラー', error);\n      showNotification('error', error);\n      return { error };\n    } else {\n      console.log('✅ StoreManager: 店舗作成成功');\n      showNotification('success', '店舗を作成しました');\n\n       // ダッシュボード側の店舗データを更新\n       if (onStoresUpdate) {\n         console.log('🔄 StoreManager: ダッシュボード側店舗データ更新を通知');\n         setTimeout(() => {\n           onStoresUpdate();\n         }, 500); // 少し遅延させてデータ同期を確実に\n       }\n\n      return {};\n    }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '店舗作成でエラーが発生しました';\n      console.error('💥 StoreManager: 予期しないエラー', err);\n      showNotification('error', errorMessage);\n      return { error: errorMessage };\n    }\n  };\n\n  // 店舗更新\n  const handleUpdateStore = async (storeData: {\n    name: string;\n    address: string;\n    managerName?: string;\n    isActive?: boolean;\n  }) => {\n    if (!editingStore) return { error: '編集対象の店舗が見つかりません' };\n    \n    console.log('🔄 StoreManager: 店舗更新処理開始', { storeId: editingStore.id, storeData });\n    \n    try {\n    const { error } = await updateStore(editingStore.id, {\n      name: storeData.name,\n      address: storeData.address,\n      manager_name: storeData.managerName,\n      isActive: storeData.isActive\n    });\n    \n    if (error) {\n      console.error('❌ StoreManager: 店舗更新エラー', error);\n      showNotification('error', error);\n      return { error };\n    } else {\n      console.log('✅ StoreManager: 店舗更新成功');\n      showNotification('success', '店舗を更新しました');\n      setEditingStore(null);\n      setViewingStore(null);\n       \n       // ダッシュボード側の店舗データを更新\n       if (onStoresUpdate) {\n         console.log('🔄 StoreManager: ダッシュボード側店舗データ更新を通知（更新）');\n         setTimeout(() => {\n           onStoresUpdate();\n         }, 500);\n       }\n       \n      return {};\n    }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '店舗更新でエラーが発生しました';\n      console.error('💥 StoreManager: 予期しないエラー', err);\n      showNotification('error', errorMessage);\n      return { error: errorMessage };\n    }\n  };\n\n  // 店舗削除\n  const handleDeleteStore = async (storeId: string, storeName: string) => {\n    const { error } = await deleteStore(storeId);\n    \n    if (error) {\n      showNotification('error', error);\n    } else {\n      showNotification('success', `店舗「${storeName}」を削除しました`);\n      setViewingStore(null);\n       \n       // ダッシュボード側の店舗データを更新\n       if (onStoresUpdate) {\n         console.log('🔄 StoreManager: ダッシュボード側店舗データ更新を通知（削除）');\n         setTimeout(() => {\n           onStoresUpdate();\n         }, 500);\n       }\n    }\n  };\n\n  // 編集開始\n  const handleEdit = (store: Store) => {\n    if (!canEditStore(store)) {\n      showNotification('error', 'この店舗を編集する権限がありません');\n      return;\n    }\n    setEditingStore(store);\n    setShowForm(true);\n    setViewingStore(null);\n  };\n\n  // 詳細表示\n  const handleView = (store: Store) => {\n    setViewingStore(store);\n  };\n\n  // フォーム閉じる\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingStore(null);\n  };\n\n  // フォーム送信\n  const handleSubmitForm = async (storeData: {\n    name: string;\n    address: string;\n    managerName?: string;\n    isActive?: boolean;\n  }) => {\n    console.log('📝 StoreManager: フォーム送信処理', { \n      isEditing: !!editingStore, \n      storeData \n    });\n    \n    let result;\n    if (editingStore) {\n      result = await handleUpdateStore(storeData);\n    } else {\n      result = await handleCreateStore(storeData);\n    }\n    \n    // 成功時はフォームを閉じる\n    if (!result || !result.error) {\n      console.log('✅ StoreManager: 処理成功、フォームを閉じます');\n      setTimeout(() => {\n        setShowForm(false);\n        setEditingStore(null);\n      }, 100);\n    }\n    \n    return result || {};\n  };\n\n  // データ再読み込み\n  const handleRefresh = () => {\n    fetchStores();\n    showNotification('info', 'データを更新しました');\n  };\n\n  // ユーザー割り当て（簡易実装）\n  const handleAssignUser = (storeId: string) => {\n    const newUserId = prompt('割り当てるユーザーIDを入力してください:');\n    if (newUserId) {\n      assignUserToStore(newUserId, storeId).then(({ error }) => {\n        if (error) {\n          showNotification('error', error);\n        } else {\n          showNotification('success', 'ユーザーを割り当てました');\n        }\n      });\n    }\n  };\n\n  // アクセス権限チェック\n  if (user?.role === 'staff') {\n    return (\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-8 text-center\">\n          <div className=\"text-yellow-600 mb-4\">\n            <Building2 className=\"w-12 h-12 mx-auto\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-yellow-800 mb-2\">アクセス制限</h3>\n          <p className=\"text-yellow-700\">\n            スタッフアカウントでは店舗管理機能をご利用いただけません。\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 削除操作の説明 */}\n      {canManageStores && stores.length > 0 && (\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className=\"text-yellow-600\">\n              ⚠️\n            </div>\n            <div>\n              <h4 className=\"text-sm font-medium text-yellow-800 mb-1\">店舗削除について</h4>\n              <p className=\"text-xs text-yellow-700\">\n                店舗を削除すると非表示になりますが、関連する報告データは保持されます。完全削除ではなく論理削除です。\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 通知 */}\n      {notification && (\n        <div className={`fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg ${\n          notification.type === 'success' ? 'bg-green-500 text-white' : \n          notification.type === 'error' ? 'bg-red-500 text-white' :\n          'bg-blue-500 text-white'\n        }`}>\n          {notification.message}\n        </div>\n      )}\n\n      {/* ヘッダー */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 flex items-center gap-2\">\n            <Building2 className=\"w-7 h-7 text-blue-600\" />\n            店舗管理\n          </h2>\n          <p className=\"text-gray-600 mt-1\">\n            店舗の作成、編集、管理を行います（{stores.length}店舗）\n          </p>\n        </div>\n        \n        <div className=\"flex gap-3\">\n          <button\n            onClick={handleRefresh}\n            disabled={loading}\n            className=\"flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 transition-colors\"\n          >\n            <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n            更新\n          </button>\n          \n          {canManageStores && (\n            <button\n              onClick={() => setShowForm(true)}\n              className=\"flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              新規店舗\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* エラー表示 */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-red-600\">{error}</p>\n        </div>\n      )}\n\n      {/* メインコンテンツ */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n        {/* 店舗選択 */}\n        <div className=\"xl:col-span-1\">\n          <StoreSelector\n            stores={stores}\n            selectedStoreId={selectedStoreId}\n            onStoreSelect={selectStore}\n            loading={loading}\n          />\n          \n          {/* 選択中店舗の詳細 */}\n          {selectedStore && (\n            <div className=\"mt-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-200\">\n              <h3 className=\"text-sm font-medium text-gray-900 mb-3\">選択中の店舗</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div>\n                  <span className=\"text-gray-600\">店舗名：</span>\n                  <span className=\"font-medium text-gray-900\">{selectedStore.name}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">状態：</span>\n                  <span className={`font-medium ${\n                    selectedStore.is_active ? 'text-green-600' : 'text-red-600'\n                  }`}>\n                    {selectedStore.is_active ? '営業中' : '休業中'}\n                  </span>\n                </div>\n                {selectedStore.address && (\n                  <div>\n                    <span className=\"text-gray-600\">住所：</span>\n                    <span className=\"font-medium text-gray-900 text-xs\">\n                      {selectedStore.address}\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"mt-4 flex gap-2\">\n                <button\n                  onClick={() => handleView(selectedStore)}\n                  className=\"text-xs bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700\"\n                >\n                  詳細表示\n                </button>\n                {canEditStore(selectedStore) && (\n                  <button\n                    onClick={() => handleEdit(selectedStore)}\n                    className=\"text-xs bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700\"\n                  >\n                    編集\n                  </button>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* 店舗一覧テーブル */}\n        <div className=\"xl:col-span-3\">\n          <StoresTable\n            stores={stores}\n            onEdit={handleEdit}\n            onDelete={canManageStores ? handleDeleteStore : undefined}\n            onView={handleView}\n            onAssignUser={user?.role === 'admin' ? handleAssignUser : undefined}\n            loading={loading}\n          />\n        </div>\n      </div>\n\n      {/* 店舗フォームモーダル */}\n      {showForm && (\n        <StoreForm\n          store={editingStore}\n          onSubmit={handleSubmitForm}\n          onCancel={handleCloseForm}\n          loading={loading}\n        />\n      )}\n\n      {/* 店舗詳細モーダル */}\n      {viewingStore && (\n        <StoreDetail\n          store={viewingStore}\n          onClose={() => setViewingStore(null)}\n          onEdit={() => handleEdit(viewingStore)}\n          onDelete={canManageStores ? () => handleDeleteStore(viewingStore.id, viewingStore.name) : undefined}\n          onAssignUser={user?.role === 'admin' ? () => handleAssignUser(viewingStore.id) : undefined}\n          canEdit={true}\n        />\n      )}\n    </div>\n  );\n};",
  "src/components/Stores/StoreSelector.tsx": "import React from 'react';\nimport { Store, ChevronDown } from 'lucide-react';\nimport { Store as StoreType } from '../../lib/supabase';\n\ninterface StoreSelectorProps {\n  stores: StoreType[];\n  selectedStoreId: string | null;\n  onStoreSelect: (storeId: string | null) => void;\n  loading?: boolean;\n}\n\nexport const StoreSelector: React.FC<StoreSelectorProps> = ({\n  stores,\n  selectedStoreId,\n  onStoreSelect,\n  loading = false\n}) => {\n  const selectedStore = stores.find(store => store.id === selectedStoreId);\n  const isAllStores = selectedStoreId === 'all';\n\n  return (\n    <div className=\"relative\">\n      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n        店舗を選択\n      </label>\n      <div className=\"relative\">\n        <select\n          value={selectedStoreId || ''}\n          onChange={(e) => onStoreSelect(e.target.value || null)}\n          disabled={loading || stores.length === 0}\n          className=\"w-full pl-10 pr-10 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white disabled:bg-gray-100 disabled:cursor-not-allowed\"\n        >\n          <option value=\"\">店舗を選択してください</option>\n          <option value=\"all\">🏢 全店舗（合計）</option>\n          {stores.map((store) => (\n            <option key={store.id} value={store.id}>\n              {store.name}\n            </option>\n          ))}\n        </select>\n        \n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <Store className=\"h-4 w-4 text-gray-400\" />\n        </div>\n        \n        <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n          <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n        </div>\n      </div>\n      \n      {isAllStores && stores.length > 0 && (\n        <div className=\"mt-2 p-3 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <Store className=\"h-4 w-4 text-blue-600\" />\n            <div>\n              <p className=\"text-sm font-medium text-blue-900\">全店舗（合計表示）</p>\n              <p className=\"text-xs text-blue-700\">{stores.length}店舗のデータを集計</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {selectedStore && !isAllStores && (\n        <div className=\"mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <Store className=\"h-4 w-4 text-blue-600\" />\n            <div>\n              <p className=\"text-sm font-medium text-blue-900\">{selectedStore.name}</p>\n              <p className=\"text-xs text-blue-700\">{selectedStore.address}</p>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {stores.length === 0 && !loading && (\n        <p className=\"mt-2 text-sm text-gray-500\">\n          まだ店舗が登録されていません。新しい店舗を作成してください。\n        </p>\n      )}\n    </div>\n  );\n};",
  "src/components/Stores/StoresTable.tsx": "import React, { useState } from 'react';\nimport { Store } from '../../lib/supabase';\nimport { formatDate } from '../../utils/calculations';\nimport { \n  MapPin, \n  User, \n  Edit, \n  Trash2, \n  Eye, \n  MoreVertical, \n  Calendar,\n  BarChart3,\n  CheckCircle,\n  XCircle,\n  UserPlus,\n  Search,\n  Filter,\n  SortAsc,\n  SortDesc\n} from 'lucide-react';\n\ninterface StoreWithDetails extends Store {\n  manager?: {\n    id: string;\n    name: string;\n    email: string;\n    role: string;\n  } | null;\n  reportCount?: number;\n  lastReportDate?: string;\n  isAssigned?: boolean;\n}\n\ninterface StoresTableProps {\n  stores: StoreWithDetails[];\n  onEdit?: (store: StoreWithDetails) => void;\n  onDelete?: (storeId: string, storeName: string) => void;\n  onView?: (store: StoreWithDetails) => void;\n  onAssignUser?: (storeId: string) => void;\n  loading?: boolean;\n}\n\ntype SortField = 'name' | 'created_at' | 'reportCount' | 'lastReportDate';\ntype SortOrder = 'asc' | 'desc';\n\nexport const StoresTable: React.FC<StoresTableProps> = ({ \n  stores, \n  onEdit, \n  onDelete, \n  onView,\n  onAssignUser,\n  loading = false\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterActive, setFilterActive] = useState<'all' | 'active' | 'inactive'>('all');\n  const [sortField, setSortField] = useState<SortField>('created_at');\n  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');\n  const [selectedStores, setSelectedStores] = useState<Set<string>>(new Set());\n\n  // フィルタリング\n  const filteredStores = stores.filter(store => {\n    const matchesSearch = \n      store.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      store.address.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (store.manager?.name || '').toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesFilter = \n      filterActive === 'all' ? true :\n      filterActive === 'active' ? store.is_active :\n      !store.is_active;\n\n    return matchesSearch && matchesFilter;\n  });\n\n  // ソート\n  const sortedStores = [...filteredStores].sort((a, b) => {\n    let aValue: any, bValue: any;\n\n    switch (sortField) {\n      case 'name':\n        aValue = a.name.toLowerCase();\n        bValue = b.name.toLowerCase();\n        break;\n      case 'created_at':\n        aValue = new Date(a.created_at || 0);\n        bValue = new Date(b.created_at || 0);\n        break;\n      case 'reportCount':\n        aValue = a.reportCount || 0;\n        bValue = b.reportCount || 0;\n        break;\n      case 'lastReportDate':\n        aValue = a.lastReportDate ? new Date(a.lastReportDate) : new Date(0);\n        bValue = b.lastReportDate ? new Date(b.lastReportDate) : new Date(0);\n        break;\n      default:\n        aValue = a.name;\n        bValue = b.name;\n    }\n\n    if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\n    if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\n    return 0;\n  });\n\n  // ソート変更\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortOrder('asc');\n    }\n  };\n\n  // 複数選択\n  const handleSelectAll = () => {\n    if (selectedStores.size === sortedStores.length) {\n      setSelectedStores(new Set());\n    } else {\n      setSelectedStores(new Set(sortedStores.map(s => s.id)));\n    }\n  };\n\n  const handleSelectStore = (storeId: string) => {\n    const newSelected = new Set(selectedStores);\n    if (newSelected.has(storeId)) {\n      newSelected.delete(storeId);\n    } else {\n      newSelected.add(storeId);\n    }\n    setSelectedStores(newSelected);\n  };\n\n  // 削除確認\n  const handleDeleteClick = (store: StoreWithDetails) => {\n    if (onDelete) {\n      const hasReports = (store.reportCount || 0) > 0;\n      const message = hasReports \n        ? `「${store.name}」には${store.reportCount}件の報告データがあります。削除すると非表示になりますが、データは保持されます。続行しますか？`\n        : `「${store.name}」を完全に削除しますか？この操作は取り消せません。`;\n      \n      if (confirm(message)) {\n        onDelete(store.id, store.name);\n      }\n    }\n  };\n\n  // SortIcon コンポーネント\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) return null;\n    return sortOrder === 'asc' ? \n      <SortAsc className=\"w-4 h-4 ml-1\" /> : \n      <SortDesc className=\"w-4 h-4 ml-1\" />;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n        <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n        <p className=\"text-gray-600\">店舗データを読み込んでいます...</p>\n      </div>\n    );\n  }\n\n  if (stores.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n        <div className=\"text-gray-400 mb-4\">\n          <MapPin className=\"mx-auto h-12 w-12\" />\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">店舗がありません</h3>\n        <p className=\"text-gray-500\">「新規店舗」ボタンから最初の店舗を作成してください。</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n      {/* ヘッダーとフィルタ */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">店舗一覧</h3>\n            <p className=\"text-sm text-gray-500\">\n              {filteredStores.length}件中 {sortedStores.length}件を表示\n              {selectedStores.size > 0 && ` (${selectedStores.size}件選択中)`}\n            </p>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-3 w-full lg:w-auto\">\n            {/* 検索 */}\n            <div className=\"relative\">\n              <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"店舗名、住所、店長名で検索...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent w-full sm:w-64\"\n              />\n            </div>\n\n            {/* フィルタ */}\n            <select\n              value={filterActive}\n              onChange={(e) => setFilterActive(e.target.value as typeof filterActive)}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              <option value=\"all\">すべて</option>\n              <option value=\"active\">営業中のみ</option>\n              <option value=\"inactive\">休業中のみ</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* テーブル */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedStores.size === sortedStores.length && sortedStores.length > 0}\n                  onChange={handleSelectAll}\n                  className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                />\n              </th>\n              <th \n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                onClick={() => handleSort('name')}\n              >\n                <div className=\"flex items-center\">\n                  店舗情報\n                  <SortIcon field=\"name\" />\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                店長\n              </th>\n              <th \n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                onClick={() => handleSort('reportCount')}\n              >\n                <div className=\"flex items-center\">\n                  活動状況\n                  <SortIcon field=\"reportCount\" />\n                </div>\n              </th>\n              <th \n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                onClick={() => handleSort('created_at')}\n              >\n                <div className=\"flex items-center\">\n                  作成日\n                  <SortIcon field=\"created_at\" />\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                操作\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {sortedStores.map((store) => (\n              <tr \n                key={store.id} \n                className={`hover:bg-gray-50 ${selectedStores.has(store.id) ? 'bg-blue-50' : ''}`}\n              >\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedStores.has(store.id)}\n                    onChange={() => handleSelectStore(store.id)}\n                    className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                  />\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0 h-10 w-10\">\n                      <div className=\"h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center\">\n                        <MapPin className=\"h-5 w-5 text-blue-600\" />\n                      </div>\n                    </div>\n                    <div className=\"ml-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {store.name}\n                        </div>\n                        {store.is_active ? (\n                          <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                        ) : (\n                          <XCircle className=\"w-4 h-4 text-red-500\" />\n                        )}\n                      </div>\n                      <div className=\"text-sm text-gray-500 flex items-center\">\n                        <MapPin className=\"w-3 h-3 mr-1\" />\n                        {store.address}\n                      </div>\n                    </div>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {store.manager_name ? (\n                    <div className=\"text-sm\">\n                      <div className=\"font-medium text-gray-900\">{store.manager_name}</div>\n                      <div className=\"text-gray-500\">店長</div>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center text-sm text-gray-400\">\n                      <User className=\"w-4 h-4 mr-1\" />\n                      未設定\n                    </div>\n                  )}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4 text-blue-500\" />\n                      <span className=\"font-medium\">{store.reportCount || 0}件</span>\n                    </div>\n                    {store.lastReportDate && (\n                      <div className=\"text-gray-500 flex items-center mt-1\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {formatDate(store.lastReportDate)}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {store.created_at ? formatDate(store.created_at) : '-'}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center gap-2\">\n                    {onView && (\n                      <button\n                        onClick={() => onView(store)}\n                        className=\"text-blue-600 hover:text-blue-800 transition-colors p-1\"\n                        title=\"詳細を見る\"\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </button>\n                    )}\n                    {onEdit && (\n                      <button\n                        onClick={() => onEdit(store)}\n                        className=\"text-green-600 hover:text-green-800 transition-colors p-1\"\n                        title=\"編集\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </button>\n                    )}\n                    {onAssignUser && (\n                      <button\n                        onClick={() => onAssignUser(store.id)}\n                        className=\"text-purple-600 hover:text-purple-800 transition-colors p-1\"\n                        title=\"ユーザー割り当て\"\n                      >\n                        <UserPlus className=\"w-4 h-4\" />\n                      </button>\n                    )}\n                    {onDelete && (\n                      <button\n                        onClick={() => onDelete(store.id, store.name)}\n                        className=\"text-red-600 hover:text-red-800 transition-colors p-1\"\n                        title=\"削除\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    )}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {sortedStores.length === 0 && (\n        <div className=\"p-12 text-center\">\n          <Filter className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">該当する店舗がありません</h3>\n          <p className=\"text-gray-500\">検索条件やフィルタを変更してください。</p>\n        </div>\n      )}\n    </div>\n  );\n};",
  "src/components/Tables/ReportsTable.tsx": "import React, { useState, useMemo } from 'react';\nimport { DailyReport } from '../../types';\nimport { formatDate, formatCurrency, calculateTotalExpenses, calculateOperatingProfit } from '../../utils/calculations';\nimport { Eye, Edit, Trash2, Search, SortAsc, SortDesc, ChevronLeft, ChevronRight, Filter, Calendar, Store } from 'lucide-react';\n\ninterface ReportsTableProps {\n  reports: DailyReport[];\n  stores: Array<{ id: string; name: string; }>;\n}\n\nexport const ReportsTable: React.FC<ReportsTableProps> = ({ reports, stores }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedStoreId, setSelectedStoreId] = useState<string>('all');\n  const [selectedMonth, setSelectedMonth] = useState<string>(() => {\n    // デフォルトは今月\n    const now = new Date();\n    return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n  });\n  const [sortField, setSortField] = useState<'date' | 'storeName' | 'sales' | 'profit'>('date');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const reportsPerPage = 15;\n\n  // 利用可能な月のリストを生成\n  const availableMonths = useMemo(() => {\n    const months = new Set<string>();\n    reports.forEach(report => {\n      const date = new Date(report.date);\n      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      months.add(monthKey);\n    });\n    \n    const sortedMonths = Array.from(months).sort().reverse(); // 新しい月から順に\n    return sortedMonths.map(month => {\n      const [year, monthNum] = month.split('-');\n      const date = new Date(parseInt(year), parseInt(monthNum) - 1);\n      return {\n        value: month,\n        label: date.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' })\n      };\n    });\n  }, [reports]);\n\n  // フィルタリング処理\n  const filteredReports = useMemo(() => {\n    return reports.filter(report => {\n      // 検索条件\n      const matchesSearch = \n        (report.storeName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (report.staffName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n        formatDate(report.date).includes(searchTerm);\n\n      // 店舗フィルタ\n      const matchesStore = selectedStoreId === 'all' || report.storeId === selectedStoreId;\n\n      // 月フィルタ\n      const reportMonth = report.date.substring(0, 7); // YYYY-MM\n      const matchesMonth = reportMonth === selectedMonth;\n\n      return matchesSearch && matchesStore && matchesMonth;\n    });\n  }, [reports, searchTerm, selectedStoreId, selectedMonth]);\n\n  // ソート処理\n  const sortedReports = useMemo(() => {\n    return [...filteredReports].sort((a, b) => {\n      let aValue: any, bValue: any;\n      \n      switch (sortField) {\n        case 'date':\n          aValue = new Date(a.date);\n          bValue = new Date(b.date);\n          break;\n        case 'storeName':\n          aValue = a.storeName;\n          bValue = b.storeName;\n          break;\n        case 'sales':\n          aValue = a.sales;\n          bValue = b.sales;\n          break;\n        case 'profit':\n          const aTotalExpenses = calculateTotalExpenses(a);\n          const bTotalExpenses = calculateTotalExpenses(b);\n          aValue = calculateOperatingProfit(a.sales, aTotalExpenses);\n          bValue = calculateOperatingProfit(b.sales, bTotalExpenses);\n          break;\n        default:\n          aValue = a.date;\n          bValue = b.date;\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [filteredReports, sortField, sortDirection]);\n\n  // ページネーション\n  const totalPages = Math.ceil(sortedReports.length / reportsPerPage);\n  const startIndex = (currentPage - 1) * reportsPerPage;\n  const endIndex = startIndex + reportsPerPage;\n  const currentReports = sortedReports.slice(startIndex, endIndex);\n\n  // 集計データ計算\n  const summary = useMemo(() => {\n    const totalSales = filteredReports.reduce((sum, report) => sum + report.sales, 0);\n    const totalExpenses = filteredReports.reduce((sum, report) => sum + calculateTotalExpenses(report), 0);\n    const totalProfit = totalSales - totalExpenses;\n    const avgProfitMargin = totalSales > 0 ? (totalProfit / totalSales) * 100 : 0;\n\n    return { totalSales, totalExpenses, totalProfit, avgProfitMargin };\n  }, [filteredReports]);\n\n  const handleSort = (field: typeof sortField) => {\n    if (field === sortField) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  };\n\n  const SortIcon = ({ field }: { field: typeof sortField }) => {\n    if (sortField !== field) return null;\n    return sortDirection === 'asc' ? \n      <SortAsc className=\"w-4 h-4 ml-1\" /> : \n      <SortDesc className=\"w-4 h-4 ml-1\" />;\n  };\n\n  // フィルタ変更時にページをリセット\n  React.useEffect(() => {\n    setCurrentPage(1);\n  }, [selectedStoreId, selectedMonth, searchTerm]);\n\n  if (reports.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n        <div className=\"text-gray-400 mb-4\">\n          <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">報告がありません</h3>\n        <p className=\"text-gray-500\">「新規報告」ボタンから最初の報告を作成してください。</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n      {/* ヘッダーとフィルタ */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex flex-col gap-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">日次報告一覧</h3>\n            \n            {/* 検索バー */}\n            <div className=\"relative\">\n              <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"スタッフ名、メモで検索...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent w-64\"\n              />\n            </div>\n          </div>\n\n          {/* フィルタ行 */}\n          <div className=\"flex flex-wrap gap-4 items-center\">\n            {/* 店舗フィルタ */}\n            <div className=\"flex items-center gap-2\">\n              <Store className=\"w-4 h-4 text-gray-500\" />\n              <select\n                value={selectedStoreId}\n                onChange={(e) => setSelectedStoreId(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent min-w-40\"\n              >\n                <option value=\"all\">（全店舗）</option>\n                {stores.map((store) => (\n                  <option key={store.id} value={store.id}>\n                    {store.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* 月フィルタ */}\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4 text-gray-500\" />\n              <select\n                value={selectedMonth}\n                onChange={(e) => setSelectedMonth(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent min-w-32\"\n              >\n                {availableMonths.map((month) => (\n                  <option key={month.value} value={month.value}>\n                    {month.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* フィルタリセット */}\n            <button\n              onClick={() => {\n                setSelectedStoreId('all');\n                setSearchTerm('');\n                const now = new Date();\n                setSelectedMonth(`${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`);\n              }}\n              className=\"text-sm text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-1\"\n            >\n              <Filter className=\"w-3 h-3\" />\n              フィルタクリア\n            </button>\n          </div>\n\n          {/* 集計サマリー */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"grid grid-cols-4 gap-4 text-center\">\n              <div>\n                <p className=\"text-xs text-gray-600 mb-1\">売上合計</p>\n                <p className=\"text-lg font-bold text-blue-600\">{formatCurrency(summary.totalSales)}</p>\n              </div>\n              <div>\n                <p className=\"text-xs text-gray-600 mb-1\">経費合計</p>\n                <p className=\"text-lg font-bold text-red-600\">{formatCurrency(summary.totalExpenses)}</p>\n              </div>\n              <div>\n                <p className=\"text-xs text-gray-600 mb-1\">営業利益</p>\n                <p className={`text-lg font-bold ${summary.totalProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatCurrency(summary.totalProfit)}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-xs text-gray-600 mb-1\">平均利益率</p>\n                <p className={`text-lg font-bold ${\n                  summary.avgProfitMargin >= 15 ? 'text-green-600' : \n                  summary.avgProfitMargin >= 10 ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {summary.avgProfitMargin.toFixed(1)}%\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* 結果表示 */}\n          <div className=\"text-sm text-gray-600\">\n            {filteredReports.length}件中 {startIndex + 1}-{Math.min(endIndex, filteredReports.length)}件を表示\n            <span className=\"ml-2 text-blue-600 font-medium\">\n              {selectedStoreId === 'all' ? '（全店舗）' : \n               stores.find(s => s.id === selectedStoreId)?.name || ''}\n            </span>\n            {(selectedStoreId !== 'all' || searchTerm) && (\n              <span className=\"ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs\">\n                フィルタ適用中\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* テーブル */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th \n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                onClick={() => handleSort('date')}\n              >\n                <div className=\"flex items-center\">\n                  日付\n                  <SortIcon field=\"date\" />\n                </div>\n              </th>\n              <th \n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                onClick={() => handleSort('storeName')}\n              >\n                <div className=\"flex items-center\">\n                  店舗\n                  <SortIcon field=\"storeName\" />\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                スタッフ\n              </th>\n              <th \n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                onClick={() => handleSort('sales')}\n              >\n                <div className=\"flex items-center\">\n                  売上\n                  <SortIcon field=\"sales\" />\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                経費合計\n              </th>\n              <th \n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                onClick={() => handleSort('profit')}\n              >\n                <div className=\"flex items-center\">\n                  営業利益\n                  <SortIcon field=\"profit\" />\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                利益率\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                操作\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {currentReports.map((report) => {\n              const totalExpenses = calculateTotalExpenses(report);\n              const operatingProfit = calculateOperatingProfit(report.sales, totalExpenses);\n              const profitMargin = (operatingProfit / report.sales) * 100;\n              \n              return (\n                <tr key={report.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatDate(report.date)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {report.storeName}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {report.staffName}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                    {formatCurrency(report.sales)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatCurrency(totalExpenses)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <span className={operatingProfit >= 0 ? 'text-green-600' : 'text-red-600'}>\n                      {formatCurrency(operatingProfit)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <span className={profitMargin >= 15 ? 'text-green-600' : profitMargin >= 10 ? 'text-yellow-600' : 'text-red-600'}>\n                      {profitMargin.toFixed(1)}%\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    <div className=\"flex items-center gap-2\">\n                      <button \n                        className=\"text-blue-600 hover:text-blue-800 transition-colors p-1 rounded hover:bg-blue-50\"\n                        title=\"詳細表示\"\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </button>\n                      <button \n                        className=\"text-green-600 hover:text-green-800 transition-colors p-1 rounded hover:bg-green-50\"\n                        title=\"編集\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </button>\n                      <button \n                        className=\"text-red-600 hover:text-red-800 transition-colors p-1 rounded hover:bg-red-50\"\n                        title=\"削除\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        \n        {/* ページネーション */}\n        {totalPages > 1 && (\n          <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-between\">\n            <div className=\"text-sm text-gray-700\">\n              ページ {currentPage} / {totalPages}\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                disabled={currentPage === 1}\n                className=\"flex items-center gap-1 px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n                前へ\n              </button>\n              <button\n                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                disabled={currentPage === totalPages}\n                className=\"flex items-center gap-1 px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                次へ\n                <ChevronRight className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* データなしの場合 */}\n      {filteredReports.length === 0 && reports.length > 0 && (\n        <div className=\"p-12 text-center\">\n          <Filter className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">該当する報告がありません</h3>\n          <p className=\"text-gray-500\">検索条件やフィルタを変更してください。</p>\n        </div>\n      )}\n    </div>\n  );\n};",
  "src/components/Usage/UpgradePromptModal.tsx": "import React from 'react'\nimport { Button } from '@/components/ui/button'\nimport { X, Crown, Check, TrendingUp } from 'lucide-react'\nimport { useNavigate } from 'react-router-dom'\n\ninterface Props {\n  type: 'stores' | 'users' | 'ai'\n  currentLimit: number\n  onClose: () => void\n}\n\nexport const UpgradePromptModal: React.FC<Props> = ({ type, currentLimit, onClose }) => {\n  const navigate = useNavigate()\n\n  const getContent = () => {\n    switch (type) {\n      case 'stores':\n        return {\n          title: '店舗数の上限に達しました',\n          description: `現在のプランでは${currentLimit}店舗まで登録できます。`,\n          features: [\n            'より多くの店舗を管理',\n            '店舗間の詳細な比較分析',\n            'マルチストア運営の効率化',\n            '統合レポート機能'\n          ]\n        }\n      case 'users':\n        return {\n          title: 'ユーザー数の上限に達しました',\n          description: `現在のプランでは${currentLimit}名まで招待できます。`,\n          features: [\n            'より多くのスタッフを追加',\n            'チーム全体での情報共有',\n            '権限管理の柔軟性向上',\n            '組織全体の可視化'\n          ]\n        }\n      case 'ai':\n        return {\n          title: 'AI使用回数の上限に達しました',\n          description: `現在のプランでは月${currentLimit}回までAI機能を使用できます。`,\n          features: [\n            'より多くのAI分析',\n            '高度な経営洞察',\n            '24時間いつでも質問可能',\n            '精度の高い予測分析'\n          ]\n        }\n    }\n  }\n\n  const content = getContent()\n\n  const plans = [\n    {\n      name: 'Starter',\n      price: '¥9,800/月',\n      stores: 3,\n      users: 5,\n      ai: 100,\n      popular: false\n    },\n    {\n      name: 'Business',\n      price: '¥29,800/月',\n      stores: 10,\n      users: 20,\n      ai: 500,\n      popular: true\n    },\n    {\n      name: 'Enterprise',\n      price: '要相談',\n      stores: '無制限',\n      users: '無制限',\n      ai: '無制限',\n      popular: false\n    }\n  ]\n\n  const handleUpgrade = () => {\n    navigate('/organization?tab=subscription')\n    onClose()\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"sticky top-0 bg-white border-b border-slate-200 p-6 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center\">\n              <Crown className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900\">{content.title}</h2>\n              <p className=\"text-sm text-slate-600\">{content.description}</p>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-1 hover:bg-slate-100 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-slate-500\" />\n          </button>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n              アップグレードで利用可能になる機能\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {content.features.map((feature, index) => (\n                <div key={index} className=\"flex items-start gap-2\">\n                  <Check className=\"w-5 h-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                  <span className=\"text-slate-700\">{feature}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">プランを選択</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {plans.map((plan, index) => (\n                <div\n                  key={index}\n                  className={`relative border-2 rounded-lg p-6 ${\n                    plan.popular\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-slate-200 bg-white'\n                  }`}\n                >\n                  {plan.popular && (\n                    <div className=\"absolute -top-3 left-1/2 -translate-x-1/2\">\n                      <span className=\"px-3 py-1 bg-blue-600 text-white text-xs font-medium rounded-full\">\n                        おすすめ\n                      </span>\n                    </div>\n                  )}\n                  <div className=\"text-center mb-4\">\n                    <h4 className=\"text-xl font-bold text-slate-900 mb-2\">{plan.name}</h4>\n                    <p className=\"text-2xl font-bold text-blue-600\">{plan.price}</p>\n                  </div>\n                  <div className=\"space-y-2 text-sm text-slate-600 mb-6\">\n                    <p>店舗: {plan.stores}</p>\n                    <p>ユーザー: {plan.users}</p>\n                    <p>AI使用: {plan.ai}回/月</p>\n                  </div>\n                  <Button\n                    onClick={handleUpgrade}\n                    className={`w-full ${\n                      plan.popular\n                        ? 'bg-blue-600 hover:bg-blue-700 text-white'\n                        : 'bg-slate-200 hover:bg-slate-300 text-slate-700'\n                    }`}\n                  >\n                    {plan.popular ? (\n                      <>\n                        <TrendingUp className=\"w-4 h-4 mr-2\" />\n                        今すぐアップグレード\n                      </>\n                    ) : (\n                      '詳細を見る'\n                    )}\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n            <p className=\"text-sm text-slate-600 text-center\">\n              プランの詳細やカスタマイズについては、サブスクリプションページでご確認ください\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
  "src/components/Usage/UsageOverview.tsx": "import React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Store, Users, MessageSquare, TrendingUp } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { useNavigate } from 'react-router-dom'\nimport { useUsageLimits } from '@/hooks/useUsageLimits'\nimport { getUsagePercentage, getUsageState } from '@/services/usageLimits'\n\nexport const UsageOverview: React.FC = () => {\n  const navigate = useNavigate()\n  const { status, loading } = useUsageLimits()\n\n  if (loading || !status) {\n    return null\n  }\n\n  const items = [\n    {\n      icon: Store,\n      label: '店舗数',\n      current: status.current.storeCount,\n      max: status.limits.maxStores,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50'\n    },\n    {\n      icon: Users,\n      label: 'ユーザー数',\n      current: status.current.userCount,\n      max: status.limits.maxUsers,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50'\n    },\n    {\n      icon: MessageSquare,\n      label: 'AI使用回数/月',\n      current: status.current.aiRequestCount,\n      max: status.limits.maxAIRequestsPerMonth,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50'\n    }\n  ]\n\n  const hasWarning = items.some(item => {\n    const state = getUsageState(item.current, item.max)\n    return state === 'warning' || state === 'critical' || state === 'exceeded'\n  })\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>使用状況</CardTitle>\n          {hasWarning && (\n            <Button\n              onClick={() => navigate('/organization?tab=subscription')}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              size=\"sm\"\n            >\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              プランをアップグレード\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {items.map((item, index) => {\n            const Icon = item.icon\n            const percentage = getUsagePercentage(item.current, item.max)\n            const state = getUsageState(item.current, item.max)\n            const isUnlimited = item.max === 0\n\n            const getBarColor = () => {\n              if (isUnlimited) return 'bg-slate-300'\n              switch (state) {\n                case 'exceeded':\n                  return 'bg-red-500'\n                case 'critical':\n                  return 'bg-orange-500'\n                case 'warning':\n                  return 'bg-yellow-500'\n                default:\n                  return 'bg-green-500'\n              }\n            }\n\n            return (\n              <div key={index}>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`p-2 ${item.bgColor} rounded-lg`}>\n                      <Icon className={`w-4 h-4 ${item.color}`} />\n                    </div>\n                    <span className=\"text-sm font-medium text-slate-700\">{item.label}</span>\n                  </div>\n                  <span className=\"text-sm font-medium text-slate-900\">\n                    {item.current} / {isUnlimited ? '無制限' : item.max}\n                  </span>\n                </div>\n                <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                  <div\n                    className={`h-2 rounded-full transition-all ${getBarColor()}`}\n                    style={{ width: `${isUnlimited ? 10 : percentage}%` }}\n                  ></div>\n                </div>\n                {state === 'exceeded' && (\n                  <p className=\"text-xs text-red-600 mt-1\">上限に達しています</p>\n                )}\n                {state === 'critical' && (\n                  <p className=\"text-xs text-orange-600 mt-1\">まもなく上限に達します</p>\n                )}\n                {state === 'warning' && (\n                  <p className=\"text-xs text-yellow-600 mt-1\">使用量が増えています</p>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
  "src/components/Usage/UsageWarningBanner.tsx": "import React from 'react'\nimport { AlertTriangle, AlertCircle, Info, TrendingUp } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { useNavigate } from 'react-router-dom'\nimport { getUsageState } from '@/services/usageLimits'\n\ninterface Props {\n  type: 'stores' | 'users' | 'ai'\n  current: number\n  max: number\n  label: string\n}\n\nexport const UsageWarningBanner: React.FC<Props> = ({ type, current, max, label }) => {\n  const navigate = useNavigate()\n  const state = getUsageState(current, max)\n\n  if (state === 'safe' || max === 0) return null\n\n  const getConfig = () => {\n    switch (state) {\n      case 'exceeded':\n        return {\n          icon: AlertCircle,\n          bgColor: 'bg-red-50',\n          borderColor: 'border-red-200',\n          textColor: 'text-red-800',\n          iconColor: 'text-red-600',\n          message: `${label}の上限（${max}）に達しました`\n        }\n      case 'critical':\n        return {\n          icon: AlertTriangle,\n          bgColor: 'bg-orange-50',\n          borderColor: 'border-orange-200',\n          textColor: 'text-orange-800',\n          iconColor: 'text-orange-600',\n          message: `${label}が上限（${max}）に近づいています`\n        }\n      case 'warning':\n        return {\n          icon: Info,\n          bgColor: 'bg-yellow-50',\n          borderColor: 'border-yellow-200',\n          textColor: 'text-yellow-800',\n          iconColor: 'text-yellow-600',\n          message: `${label}の使用量が増えています`\n        }\n      default:\n        return null\n    }\n  }\n\n  const config = getConfig()\n  if (!config) return null\n\n  const Icon = config.icon\n  const percentage = Math.min(Math.round((current / max) * 100), 100)\n\n  return (\n    <div className={`p-4 ${config.bgColor} border ${config.borderColor} rounded-lg mb-4`}>\n      <div className=\"flex items-start gap-3\">\n        <Icon className={`w-5 h-5 ${config.iconColor} flex-shrink-0 mt-0.5`} />\n        <div className=\"flex-1\">\n          <p className={`font-medium ${config.textColor}`}>{config.message}</p>\n          <p className={`text-sm ${config.textColor} mt-1`}>\n            現在の使用量: {current} / {max} ({percentage}%)\n          </p>\n          {state === 'exceeded' && (\n            <p className={`text-sm ${config.textColor} mt-2`}>\n              プランをアップグレードして、制限を解除してください。\n            </p>\n          )}\n        </div>\n        {(state === 'exceeded' || state === 'critical') && (\n          <Button\n            onClick={() => navigate('/organization?tab=subscription')}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white flex-shrink-0\"\n          >\n            <TrendingUp className=\"w-4 h-4 mr-2\" />\n            アップグレード\n          </Button>\n        )}\n      </div>\n    </div>\n  )\n}\n",
  "src/components/alerts/AlertsPanel.tsx": "import React from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { AlertCircle, CheckCircle } from 'lucide-react'\nimport { KPIData } from '@/hooks/useKpis'\nimport { formatPercent } from '@/lib/format'\nimport { Badge } from '@/components/ui/badge'\n\ntype Props = {\n  kpis: KPIData\n  targetCostRate?: number\n  targetLaborRate?: number\n}\n\nexport const AlertsPanel: React.FC<Props> = ({ kpis, targetCostRate, targetLaborRate }) => {\n  const alerts: Array<{ level: 'warn'|'danger'; title: string; desc: string }> = []\n\n  // 目標値がある場合は目標値を使用、なければデフォルト値\n  const costRateThreshold = targetCostRate || 32\n  const laborRateThreshold = targetLaborRate || 27\n  const primeCostThreshold = costRateThreshold + laborRateThreshold\n\n  if (kpis.purchaseRate > costRateThreshold) alerts.push({ level:'danger', title:'原価率が高い', desc:`現在 ${formatPercent(kpis.purchaseRate)}（目標 ${formatPercent(costRateThreshold)}以下）` })\n  if (kpis.laborRate > laborRateThreshold) alerts.push({ level:'danger', title:'人件費率が高い', desc:`現在 ${formatPercent(kpis.laborRate)}（目標 ${formatPercent(laborRateThreshold)}以下）` })\n  if (kpis.primeCostRate > primeCostThreshold) alerts.push({ level:'warn', title:'プライムコストが高い', desc:`現在 ${formatPercent(kpis.primeCostRate)}（目標 ${formatPercent(primeCostThreshold)}以下）` })\n  if (kpis.operatingProfit < 0) alerts.push({ level:'danger', title:'営業赤字', desc:'費用が売上を上回っています' })\n\n  const ok = alerts.length === 0\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">アラート</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {ok ? (\n          <div className=\"flex items-center gap-2 text-green-600\">\n            <CheckCircle className=\"h-4 w-4\" />\n            重大なアラートはありません。\n          </div>\n        ) : alerts.map((a, i)=>(\n          <div key={i} className={`flex items-start gap-3 p-3 rounded-lg ${a.level==='danger' ? 'bg-red-50' : 'bg-yellow-50'}`}>\n            <AlertCircle className={`h-4 w-4 ${a.level==='danger'?'text-red-600':'text-yellow-600'}`} />\n            <div className=\"flex-1\">\n              <div className=\"text-sm font-medium\">{a.title}</div>\n              <div className=\"text-xs text-muted-foreground\">{a.desc}</div>\n            </div>\n            <Badge variant={a.level==='danger'?'destructive':'secondary'}>{a.level==='danger'?'重要':'注意'}</Badge>\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/analysis/ProfitLossModal.tsx": "import React, { useMemo } from 'react'\nimport { X, TrendingUp, TrendingDown, Target, Calendar } from 'lucide-react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { formatCurrency, formatPercent } from '@/lib/format'\nimport { DailyReportData } from '@/types'\nimport { useTargets } from '@/hooks/useTargets'\n\ninterface ProfitLossModalProps {\n  month: string // 'YYYY-MM'\n  reports: DailyReportData[]\n  onClose: () => void\n  storeId?: string\n}\n\nexport const ProfitLossModal: React.FC<ProfitLossModalProps> = ({\n  month,\n  reports,\n  onClose,\n  storeId = 'all'\n}) => {\n  // monthパラメータのバリデーション\n  const isValidMonth = useMemo(() => {\n    const monthRegex = /^\\d{4}-\\d{2}$/\n    return monthRegex.test(month)\n  }, [month])\n\n  if (!isValidMonth) {\n    console.error('PLModal: 無効な月形式:', month)\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n        <Card className=\"max-w-md\">\n          <CardHeader>\n            <CardTitle>エラー</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>無効な月形式です: {month}</p>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              正しい形式: YYYY-MM (例: 2025-01)\n            </p>\n            <Button onClick={onClose} className=\"mt-4\">\n              閉じる\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const { getAllStoresTarget, getTargetForStore } = useTargets(storeId, month)\n  \n  // その月のデータを取得\n  const monthReports = useMemo(() => {\n    console.log('PLModal: データ取得開始', { month, storeId, inputReportsCount: reports.length })\n\n    const filteredReports = reports.filter(r =>\n      r.date.slice(0, 7) === month && (storeId === 'all' || r.storeId === storeId)\n    )\n\n    console.log('PLModal: フィルタ後レポート数', filteredReports.length)\n    return filteredReports\n  }, [reports, month, storeId])\n  \n  const totals = useMemo(() => {\n    console.log('PLModal: 計算開始', { monthReportsCount: monthReports.length })\n    \n    if (monthReports.length === 0) {\n      console.log('PLModal: データなし - デフォルト値使用')\n      return {\n        salesCash10: 0, salesCash8: 0, salesCredit10: 0, salesCredit8: 0,\n        sales: 0, purchase: 0, laborCost: 0, utilities: 0,\n        promotion: 0, cleaning: 0, misc: 0, communication: 0, others: 0,\n        reportCount: 0\n      }\n    }\n    \n    const result = monthReports.reduce((acc, r) => {\n      // 安全な数値取得（存在しないフィールドは0）\n      const anyR = r as any\n      const salesCash10 = Number(anyR.salesCash10 ?? 0)\n      const salesCash8 = Number(anyR.salesCash8 ?? 0)\n      const salesCredit10 = Number(anyR.salesCredit10 ?? 0)\n      const salesCredit8 = Number(anyR.salesCredit8 ?? 0)\n      const sales = Number(r.sales) || 0\n      const purchase = Number(r.purchase) || 0\n      const laborCost = Number(r.laborCost) || 0\n      const utilities = Number(r.utilities) || 0\n      const promotion = Number(r.promotion) || 0\n      const cleaning = Number(r.cleaning) || 0\n      const misc = Number(r.misc) || 0\n      const communication = Number(r.communication) || 0\n      const others = Number(r.others) || 0\n      \n      acc.salesCash10 += salesCash10\n      acc.salesCash8 += salesCash8\n      acc.salesCredit10 += salesCredit10\n      acc.salesCredit8 += salesCredit8\n      acc.sales += sales\n      acc.purchase += purchase\n      acc.laborCost += laborCost\n      acc.utilities += utilities\n      acc.promotion += promotion\n      acc.cleaning += cleaning\n      acc.misc += misc\n      acc.communication += communication\n      acc.others += others\n      acc.reportCount += 1\n      return acc\n    }, {\n      salesCash10: 0, salesCash8: 0, salesCredit10: 0, salesCredit8: 0,\n      sales: 0, purchase: 0, laborCost: 0, utilities: 0,\n      promotion: 0, cleaning: 0, misc: 0, communication: 0, others: 0,\n      reportCount: 0\n    })\n    \n    console.log('PLModal: 計算結果', {\n      sales: result.sales,\n      purchase: result.purchase,\n      laborCost: result.laborCost,\n      reportCount: result.reportCount\n    })\n    \n    return result\n  }, [monthReports])\n\n  // 売上内訳の補正：内訳の合計が売上高と一致するように調整\n  const adjustedSales = useMemo(() => {\n    const breakdown = totals.salesCash10 + totals.salesCash8 + totals.salesCredit10 + totals.salesCredit8\n    \n    // 内訳の合計が売上高と大きく異なる場合（差が10%以上）、売上高から比率で分割\n    if (Math.abs(breakdown - totals.sales) > totals.sales * 0.1 || breakdown === 0) {\n      // 標準的な飲食店の比率で分割\n      const cashRatio = 0.65      // 現金65%\n      const tax10Ratio = 0.75     // 10%税率75%\n      \n      return {\n        salesCash10: Math.round(totals.sales * cashRatio * tax10Ratio),\n        salesCash8: Math.round(totals.sales * cashRatio * (1 - tax10Ratio)),\n        salesCredit10: Math.round(totals.sales * (1 - cashRatio) * tax10Ratio),\n        salesCredit8: Math.round(totals.sales * (1 - cashRatio) * (1 - tax10Ratio))\n      }\n    }\n    \n    // 内訳が存在する場合はそのまま使用\n    return {\n      salesCash10: totals.salesCash10,\n      salesCash8: totals.salesCash8,\n      salesCredit10: totals.salesCredit10,\n      salesCredit8: totals.salesCredit8\n    }\n  }, [totals])\n  // 前月データ（比較用）\n  const prevTotals = useMemo(() => {\n    if (!isValidMonth) return { sales: 0, purchase: 0, expenses: 0, profit: 0 }\n    \n    const prevMonth = new Date(month + '-01')\n    prevMonth.setMonth(prevMonth.getMonth() - 1)\n    const prevMonthStr = `${prevMonth.getFullYear()}-${String(prevMonth.getMonth()+1).padStart(2,'0')}`\n    console.log('PLModal: 前月計算', { month, prevMonthStr })\n    \n    const prevReports = reports.filter(r =>\n      r.date.slice(0,7) === prevMonthStr && (storeId === 'all' || r.storeId === storeId)\n    )\n    console.log('PLModal: 前月レポート数:', prevReports.length)\n    \n    return prevReports.reduce((acc, r) => {\n      const sales = Number(r.sales) || 0\n      const purchase = Number(r.purchase) || 0\n      const expenses = purchase + (Number(r.laborCost) || 0) + (Number(r.utilities) || 0) + \n                      (Number(r.promotion) || 0) + (Number(r.cleaning) || 0) + (Number(r.misc) || 0) + \n                      (Number(r.communication) || 0) + (Number(r.others) || 0)\n      acc.sales += sales\n      acc.purchase += purchase\n      acc.expenses += expenses\n      acc.profit += (sales - expenses)\n      return acc\n    }, { sales: 0, purchase: 0, expenses: 0, profit: 0 })\n  }, [month, reports, storeId])\n\n  const totalExpenses = totals.purchase + totals.laborCost + totals.utilities + \n                        totals.promotion + totals.cleaning + totals.misc + \n                        totals.communication + totals.others\n  const grossProfit = totals.sales - totals.purchase\n  const operatingProfit = totals.sales - totalExpenses\n  const profitMargin = totals.sales > 0 ? (operatingProfit / totals.sales) * 100 : 0\n\n  // 前月比計算\n  const salesGrowth = prevTotals.sales > 0 ? ((totals.sales - prevTotals.sales) / prevTotals.sales) * 100 : 0\n  const profitGrowth = prevTotals.profit > 0 ? ((operatingProfit - prevTotals.profit) / prevTotals.profit) * 100 : 0\n\n  // 目標データ\n  const target = storeId === 'all' ? getAllStoresTarget() : getTargetForStore(storeId)\n  const targetAchievement = target ? (totals.sales / target.targetSales) * 100 : null\n\n  const monthLabel = new Date(month + '-01').toLocaleDateString('ja-JP', { \n    year: 'numeric', \n    month: 'long' \n  })\n\n  // デバッグ用：計算結果をコンソールに出力\n  console.log('PLModal: 最終計算結果', {\n    month,\n    monthLabel,\n    totals,\n    totalExpenses,\n    grossProfit,\n    operatingProfit,\n    profitMargin,\n    salesGrowth,\n    profitGrowth\n  })\n\n  const PLRow = ({ label, amount, isSubtotal = false, isTotal = false, growth, note }: {\n    label: string\n    amount: number\n    isSubtotal?: boolean\n    isTotal?: boolean\n    growth?: number\n    note?: string\n  }) => (\n    <div className={`flex justify-between items-center py-2 ${\n      isTotal ? 'border-t-2 border-primary bg-blue-50 font-bold' : \n      isSubtotal ? 'border-t border-border bg-muted font-medium' : ''\n    } ${isTotal || isSubtotal ? 'px-3 -mx-3 rounded' : ''}`}>\n      <div className=\"flex items-center gap-2\">\n        <span className={isTotal ? 'text-lg' : isSubtotal ? 'text-base' : 'text-sm'}>\n          {label}\n        </span>\n        {note && <span className=\"text-xs text-muted-foreground\">({note})</span>}\n        {growth !== undefined && Math.abs(growth) > 0.1 && (\n          <div className=\"flex items-center gap-1\">\n            {growth >= 0 ? (\n              <TrendingUp className=\"w-3 h-3 text-green-500\" />\n            ) : (\n              <TrendingDown className=\"w-3 h-3 text-red-500\" />\n            )}\n            <span className={`text-xs ${growth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {growth >= 0 ? '+' : ''}{growth.toFixed(1)}%\n            </span>\n          </div>\n        )}\n      </div>\n      <span className={`font-mono ${\n        isTotal ? 'text-lg font-bold' : \n        isSubtotal ? 'text-base font-medium' : 'text-sm'\n      } ${\n        amount < 0 ? 'text-red-600' : amount > 0 ? 'text-green-600' : 'text-muted-foreground'\n      }`}>\n        {formatCurrency(Math.abs(amount))}\n      </span>\n    </div>\n  )\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-background rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b border-border flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              <Calendar className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-semibold text-foreground\">\n              <p>月パラメータ: {month}</p>\n              <p>月形式有効: {isValidMonth ? 'OK' : 'NG'}</p>\n                {monthLabel} 損益計算書\n              </h2>\n              <p className=\"text-sm text-muted-foreground\">\n                {storeId === 'all' ? '全店舗合計' : '豊洲店'} • {totals.reportCount}件の報告\n              </p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* 目標達成状況 */}\n          {target && targetAchievement && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Target className=\"w-5 h-5 text-primary\" />\n                  目標達成状況\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span>売上目標達成率</span>\n                  <Badge variant={\n                    targetAchievement >= 100 ? 'default' : \n                    targetAchievement >= 80 ? 'secondary' : 'destructive'\n                  }>\n                    {targetAchievement.toFixed(1)}%\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">実績</span>\n                  <span>{formatCurrency(totals.sales)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">目標</span>\n                  <span>{formatCurrency(target.targetSales)}</span>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* 損益計算書 */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">損益計算書（P&L）</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-1\">\n              {/* 売上 */}\n              <PLRow label=\"売上高\" amount={totals.sales} isTotal growth={salesGrowth} />\n              \n              {/* 売上内訳 */}\n              <div className=\"ml-4 space-y-1 pb-2\">\n                <PLRow label=\"現金・10%飲食\" amount={adjustedSales.salesCash10} />\n                <PLRow label=\"現金・8%軽減\" amount={adjustedSales.salesCash8} />\n                <PLRow label=\"クレジット・10%飲食\" amount={adjustedSales.salesCredit10} />\n                <PLRow label=\"クレジット・8%軽減\" amount={adjustedSales.salesCredit8} />\n              </div>\n\n              {/* 売上原価 */}\n              <PLRow label=\"売上原価（仕入）\" amount={totals.purchase} />\n              \n              {/* 粗利益 */}\n              <PLRow \n                label=\"売上総利益（粗利）\" \n                amount={grossProfit} \n                isSubtotal \n                note={`粗利率 ${totals.sales > 0 ? ((grossProfit / totals.sales) * 100).toFixed(1) : 0}%`}\n              />\n\n              {/* 販管費 */}\n              <div className=\"pt-2\">\n                <div className=\"text-sm font-medium text-muted-foreground mb-2\">販売費および一般管理費</div>\n                <div className=\"ml-4 space-y-1\">\n                  <PLRow label=\"人件費\" amount={totals.laborCost} />\n                  <PLRow label=\"光熱費\" amount={totals.utilities} />\n                  <PLRow label=\"販促費\" amount={totals.promotion} />\n                  <PLRow label=\"清掃費\" amount={totals.cleaning} />\n                  <PLRow label=\"雑費\" amount={totals.misc} />\n                  <PLRow label=\"通信費\" amount={totals.communication} />\n                  <PLRow label=\"その他\" amount={totals.others} />\n                </div>\n                <PLRow \n                  label=\"販管費合計\" \n                  amount={totalExpenses - totals.purchase} \n                  isSubtotal \n                />\n              </div>\n\n              {/* 営業利益 */}\n              <PLRow \n                label=\"営業利益\" \n                amount={operatingProfit} \n                isTotal \n                growth={profitGrowth}\n                note={`利益率 ${formatPercent(profitMargin)}`}\n              />\n            </CardContent>\n          </Card>\n\n          {/* 比率分析 */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">比率分析</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"text-sm font-medium\">売上構成比</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>現金・10%税率</span>\n                      <span>{formatPercent((adjustedSales.salesCash10 / totals.sales) * 100)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>現金・8%税率</span>\n                      <span>{formatPercent((adjustedSales.salesCash8 / totals.sales) * 100)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>クレジット・10%税率</span>\n                      <span>{formatPercent((adjustedSales.salesCredit10 / totals.sales) * 100)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>クレジット・8%税率</span>\n                      <span>{formatPercent((adjustedSales.salesCredit8 / totals.sales) * 100)}</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <h4 className=\"text-sm font-medium\">費用比率</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>原価率</span>\n                      <span className={\n                        totals.sales > 0 && ((totals.purchase / totals.sales) * 100) <= 32 ? 'text-green-600' : 'text-red-600'\n                      }>\n                        {formatPercent(totals.sales > 0 ? (totals.purchase / totals.sales) * 100 : 0)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>人件費率</span>\n                      <span className={\n                        totals.sales > 0 && ((totals.laborCost / totals.sales) * 100) <= 27 ? 'text-green-600' : 'text-red-600'\n                      }>\n                        {formatPercent(totals.sales > 0 ? (totals.laborCost / totals.sales) * 100 : 0)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>(販管費-人件費)率</span>\n                      <span className={\n                        totals.sales > 0 && (((totalExpenses - totals.purchase - totals.laborCost) / totals.sales) * 100) <= 30 ? 'text-green-600' : 'text-red-600'\n                      }>\n                        {formatPercent(totals.sales > 0 ? ((totalExpenses - totals.purchase - totals.laborCost) / totals.sales) * 100 : 0)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between font-medium\">\n                      <span>営業利益率</span>\n                      <span className={\n                        profitMargin >= 15 ? 'text-green-600' : \n                        profitMargin >= 10 ? 'text-yellow-600' : 'text-red-600'\n                      }>\n                        {formatPercent(profitMargin)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* アクションボタン */}\n          <div className=\"flex gap-3 pt-4 border-t border-border\">\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={() => window.print()}\n            >\n              PDFエクスポート\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={() => {\n                const csv = [\n                  ['項目', '金額'],\n                  ['売上高', totals.sales],\n                  ['　現金・10%', totals.salesCash10],\n                  ['　現金・8%', totals.salesCash8],\n                  ['　クレジット・10%', totals.salesCredit10],\n                  ['　クレジット・8%', totals.salesCredit8],\n                  ['売上原価', totals.purchase],\n                  ['売上総利益', grossProfit],\n                  ['人件費', totals.laborCost],\n                  ['光熱費', totals.utilities],\n                  ['販促費', totals.promotion],\n                  ['清掃費', totals.cleaning],\n                  ['雑費', totals.misc],\n                  ['通信費', totals.communication],\n                  ['その他', totals.others],\n                  ['営業利益', operatingProfit],\n                  ['利益率(%)', profitMargin]\n                ].map(row => row.join(',')).join('\\n')\n                \n                const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })\n                const url = URL.createObjectURL(blob)\n                const a = document.createElement('a')\n                a.href = url\n                a.download = `PL_${month}_${storeId}.csv`\n                a.click()\n                URL.revokeObjectURL(url)\n              }}\n            >\n              CSVエクスポート\n            </Button>\n            <Button onClick={onClose}>\n              閉じる\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}",
  "src/components/Auth/AuthGate.tsx": "import { useState, useEffect } from 'react'\nimport { Navigate, Outlet, useLocation } from 'react-router-dom'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { TermsAcceptanceModal } from './TermsAcceptanceModal'\nimport { supabase } from '@/lib/supabase'\n\nexport default function AuthGate() {\n  const { isInitialized, isAuthenticated, user } = useAuth()\n  const location = useLocation()\n  const [termsAccepted, setTermsAccepted] = useState<boolean | null>(null)\n  const [checkingTerms, setCheckingTerms] = useState(true)\n\n  useEffect(() => {\n    if (user?.id) {\n      checkTermsAcceptance()\n    }\n  }, [user?.id])\n\n  const checkTermsAcceptance = async () => {\n    if (!user?.id) return\n\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('terms_accepted, privacy_accepted')\n        .eq('user_id', user.id)\n        .single()\n\n      if (error) {\n        console.error('Failed to check terms acceptance:', error)\n        setTermsAccepted(false)\n      } else {\n        setTermsAccepted(data?.terms_accepted && data?.privacy_accepted)\n      }\n    } catch (err) {\n      console.error('Error checking terms:', err)\n      setTermsAccepted(false)\n    } finally {\n      setCheckingTerms(false)\n    }\n  }\n\n  if (!isInitialized || checkingTerms) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">読み込み中...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace state={{ from: location }} />\n  }\n\n  if (termsAccepted === false && user?.id) {\n    return (\n      <TermsAcceptanceModal\n        userId={user.id}\n        onAccepted={() => {\n          setTermsAccepted(true)\n        }}\n      />\n    )\n  }\n\n  return <Outlet />\n}\n",
  "src/components/Auth/LoginForm.tsx": "import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Mail, Lock, User, CircleAlert as AlertCircle, Building } from 'lucide-react'\nimport { useAuth } from '@/contexts/AuthContext'\n\nexport const LoginForm: React.FC = () => {\n  const navigate = useNavigate()\n  const { signUp, signIn, loading: authLoading } = useAuth()\n\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    organizationName: ''\n  })\n  const [isSignUp, setIsSignUp] = useState(false)\n  const [localSubmitting, setLocalSubmitting] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n\n  const submitting = authLoading || localSubmitting\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }))\n    setError('')\n    setSuccess('')\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    console.log('🟦 LoginForm: フォーム送信開始')\n    setError('')\n    setSuccess('')\n    setLocalSubmitting(true)\n\n    try {\n      if (isSignUp) {\n        // サインアップ\n        if (!formData.name || !formData.email || !formData.password || !formData.organizationName) {\n          setError('すべての項目を入力してください')\n          setLocalSubmitting(false)\n          return\n        }\n\n        if (formData.password.length < 8) {\n          setError('パスワードは8文字以上で入力してください')\n          setLocalSubmitting(false)\n          return\n        }\n\n        console.log('🟦 LoginForm: サインアップ開始')\n        const { data, error } = await signUp(\n          formData.email,\n          formData.password,\n          formData.name,\n          'staff',\n          formData.organizationName\n        )\n\n        if (error) {\n          console.error('❌ LoginForm: サインアップエラー', error)\n          setError(error.message)\n          setLocalSubmitting(false)\n          return\n        }\n\n        if (data) {\n          console.log('✅ LoginForm: サインアップ成功')\n          setSuccess('アカウントと組織が作成されました。ログインしてください。')\n          setIsSignUp(false)\n          setFormData({ name: '', email: formData.email, password: '', organizationName: '' })\n          setLocalSubmitting(false)\n        }\n      } else {\n        // サインイン\n        if (!formData.email || !formData.password) {\n          setError('メールアドレスとパスワードを入力してください')\n          setLocalSubmitting(false)\n          return\n        }\n\n        console.log('🟦 LoginForm: サインイン開始', formData.email)\n        const { data, error } = await signIn(formData.email, formData.password)\n        console.log('🟦 LoginForm: サインイン完了', { data, error })\n\n        if (error) {\n          console.error('❌ LoginForm: サインインエラー', error)\n          setError(error.message || 'ログインに失敗しました')\n          setLocalSubmitting(false)\n          return\n        }\n\n        if (data) {\n          console.log('✅ LoginForm: サインイン成功、ダッシュボードへ遷移')\n          navigate('/dashboard/daily', { replace: true })\n        }\n      }\n    } catch (err) {\n      console.error('❌ LoginForm: 予期しないエラー', err)\n      setError('予期しないエラーが発生しました')\n      setLocalSubmitting(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-slate-100 py-12 px-4\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardHeader className=\"space-y-1 pb-6\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg\">\n              <Building className=\"w-10 h-10 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            株式会社あさひ\n          </CardTitle>\n          <p className=\"text-center text-slate-600 text-sm\">\n            {isSignUp ? '新規アカウント登録' : '業務管理システム'}\n          </p>\n        </CardHeader>\n\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {isSignUp && (\n              <>\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    <Building className=\"w-4 h-4 inline mr-2\" />\n                    組織名\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"organizationName\"\n                    value={formData.organizationName}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                    placeholder=\"株式会社〇〇\"\n                    disabled={submitting}\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    <User className=\"w-4 h-4 inline mr-2\" />\n                    お名前\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                    placeholder=\"山田太郎\"\n                    disabled={submitting}\n                  />\n                </div>\n              </>\n            )}\n\n            <div>\n              <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                <Mail className=\"w-4 h-4 inline mr-2\" />\n                メールアドレス\n              </label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                placeholder=\"your-email@example.com\"\n                disabled={submitting}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                <Lock className=\"w-4 h-4 inline mr-2\" />\n                パスワード\n              </label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                placeholder=\"8文字以上\"\n                disabled={submitting}\n              />\n            </div>\n\n            {error && (\n              <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n                <AlertCircle className=\"w-5 h-5 text-red-600 flex-shrink-0 mt-0.5\" />\n                <p className=\"text-sm text-red-800\">{error}</p>\n              </div>\n            )}\n\n            {success && (\n              <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <p className=\"text-sm text-green-800\">{success}</p>\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-medium py-2.5 rounded-lg transition-all shadow-md hover:shadow-lg\"\n              disabled={submitting}\n            >\n              {submitting ? (\n                <span className=\"flex items-center justify-center gap-2\">\n                  <span className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\"></span>\n                  処理中...\n                </span>\n              ) : isSignUp ? (\n                'アカウント作成'\n              ) : (\n                'ログイン'\n              )}\n            </Button>\n\n            <div className=\"text-center mt-4\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setIsSignUp(!isSignUp)\n                  setError('')\n                  setSuccess('')\n                }}\n                className=\"text-sm text-blue-600 hover:text-blue-700 hover:underline transition\"\n                disabled={submitting}\n              >\n                {isSignUp\n                  ? 'すでにアカウントをお持ちの方はこちら'\n                  : '新規アカウント登録はこちら'}\n              </button>\n            </div>\n          </form>\n\n          <div className=\"mt-6 pt-6 border-t border-slate-200\">\n            <p className=\"text-xs text-center text-slate-500\">\n              初回ログイン時は管理者に連絡してアカウントを作成してください\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
  "src/components/Auth/PermissionGuard.tsx": "import React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Shield, TriangleAlert as AlertTriangle, Lock, Users, ArrowLeft } from 'lucide-react'\nimport { useAuth } from '@/contexts/AuthContext'\n\ninterface PermissionGuardProps {\n  children: React.ReactNode\n  requiredRole?: 'staff' | 'manager' | 'admin'\n  requiredStoreAccess?: string\n  fallback?: React.ReactNode\n  showError?: boolean\n}\n\nexport const PermissionGuard: React.FC<PermissionGuardProps> = ({\n  children,\n  requiredRole,\n  requiredStoreAccess,\n  fallback,\n  showError = true\n}) => {\n  const { user, hasPermission, canAccessStore } = useAuth()\n\n  // ユーザーがログインしていない場合\n  if (!user) {\n    return fallback || null\n  }\n\n  // 必要な役割レベルをチェック\n  if (requiredRole && !hasPermission(requiredRole)) {\n    if (!showError) return fallback || null\n\n    const roleNames = {\n      staff: 'スタッフ',\n      manager: '店長・マネージャー',\n      admin: '統括責任者'\n    }\n\n    return (\n      <div className=\"max-w-2xl mx-auto py-12\">\n        <Card className=\"border-2 border-red-200 bg-red-50\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n              <Lock className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <CardTitle className=\"text-xl font-bold text-red-800\">\n              アクセス権限が不足しています\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-red-700\">\n                この機能を利用するには<strong>{roleNames[requiredRole]}</strong>以上の権限が必要です。\n              </p>\n              <div className=\"flex items-center justify-center gap-2\">\n                <Badge variant=\"outline\" className=\"border-red-300 text-red-700\">\n                  現在の権限: {roleNames[user.role]}\n                </Badge>\n                <Badge variant=\"destructive\">\n                  必要権限: {roleNames[requiredRole]}\n                </Badge>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg p-4 text-left\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">利用可能な機能：</h4>\n              <ul className=\"text-xs text-gray-600 space-y-1\">\n                {user.role === 'staff' && (\n                  <>\n                    <li>✅ 日報入力・編集</li>\n                    <li>✅ 基本的なダッシュボード閲覧</li>\n                    <li>✅ AI基本分析</li>\n                    <li>❌ 店舗管理機能</li>\n                    <li>❌ ユーザー管理</li>\n                    <li>❌ システム設定</li>\n                  </>\n                )}\n                {user.role === 'manager' && (\n                  <>\n                    <li>✅ 担当店舗管理</li>\n                    <li>✅ スタッフ管理</li>\n                    <li>✅ 詳細分析機能</li>\n                    <li>✅ AI高度分析</li>\n                    <li>❌ 全店舗統合管理</li>\n                    <li>❌ システム設定</li>\n                  </>\n                )}\n              </ul>\n            </div>\n\n            <Button\n              onClick={() => window.history.back()}\n              variant=\"outline\"\n              className=\"mt-4\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              前のページに戻る\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  // 特定の店舗アクセス権をチェック\n  if (requiredStoreAccess && !canAccessStore(requiredStoreAccess)) {\n    if (!showError) return fallback || null\n\n    return (\n      <div className=\"max-w-2xl mx-auto py-12\">\n        <Card className=\"border-2 border-yellow-200 bg-yellow-50\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mb-4\">\n              <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n            <CardTitle className=\"text-xl font-bold text-yellow-800\">\n              店舗アクセス権限がありません\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-sm text-yellow-700\">\n              この店舗のデータにアクセスする権限がありません。\n            </p>\n            \n            <div className=\"bg-white rounded-lg p-4\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">アクセス可能な店舗：</h4>\n              <div className=\"space-y-1\">\n                {user.assignedStores?.map(store => (\n                  <div key={store.id} className=\"text-xs text-gray-600 flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    {store.name}\n                  </div>\n                )) || (\n                  <p className=\"text-xs text-gray-500\">アクセス可能な店舗がありません</p>\n                )}\n              </div>\n            </div>\n\n            <Button\n              onClick={() => window.history.back()}\n              variant=\"outline\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              戻る\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  // 権限チェック通過：子コンポーネントを表示\n  return <>{children}</>\n}",
  "src/components/Auth/TermsAcceptanceModal.tsx": "import React, { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { FileText, Shield, AlertCircle } from 'lucide-react'\nimport { useNavigate } from 'react-router-dom'\nimport { supabase } from '@/lib/supabase'\n\ninterface Props {\n  userId: string\n  onAccepted: () => void\n}\n\nconst TERMS_VERSION = '1.0'\nconst PRIVACY_VERSION = '1.0'\n\nexport const TermsAcceptanceModal: React.FC<Props> = ({ userId, onAccepted }) => {\n  const navigate = useNavigate()\n  const [termsChecked, setTermsChecked] = useState(false)\n  const [privacyChecked, setPrivacyChecked] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const handleAccept = async () => {\n    if (!termsChecked || !privacyChecked) {\n      setError('利用規約とプライバシーポリシーの両方に同意する必要があります')\n      return\n    }\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const { error: rpcError } = await supabase.rpc('accept_terms_and_privacy', {\n        p_user_id: userId,\n        p_terms_version: TERMS_VERSION,\n        p_privacy_version: PRIVACY_VERSION\n      })\n\n      if (rpcError) {\n        console.error('Failed to record acceptance:', rpcError)\n        setError('同意の記録に失敗しました。再度お試しください。')\n        return\n      }\n\n      onAccepted()\n    } catch (err) {\n      console.error('Error accepting terms:', err)\n      setError('エラーが発生しました。再度お試しください。')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut()\n    navigate('/login')\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"sticky top-0 bg-white border-b border-slate-200 p-6\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center\">\n              <FileText className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900\">利用規約とプライバシーポリシーへの同意</h2>\n              <p className=\"text-sm text-slate-600\">サービスのご利用には同意が必要です</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-start gap-3\">\n              <AlertCircle className=\"w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5\" />\n              <div className=\"text-sm text-blue-800\">\n                <p className=\"font-medium mb-1\">サービスを利用する前に</p>\n                <p>\n                  本サービスをご利用いただく前に、利用規約とプライバシーポリシーを必ずお読みいただき、内容をご理解の上で同意してください。\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"border border-slate-200 rounded-lg p-4 hover:border-blue-300 transition-colors\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"flex-shrink-0 mt-1\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"terms\"\n                    checked={termsChecked}\n                    onChange={(e) => setTermsChecked(e.target.checked)}\n                    className=\"w-5 h-5 text-blue-600 border-slate-300 rounded focus:ring-blue-500\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <label htmlFor=\"terms\" className=\"flex items-center gap-2 cursor-pointer\">\n                    <FileText className=\"w-5 h-5 text-slate-600\" />\n                    <span className=\"font-medium text-slate-900\">利用規約</span>\n                  </label>\n                  <p className=\"text-sm text-slate-600 mt-1 mb-2\">\n                    本サービスの利用条件、禁止事項、免責事項などが記載されています。\n                  </p>\n                  <Button\n                    onClick={() => window.open('/terms', '_blank')}\n                    className=\"bg-slate-100 hover:bg-slate-200 text-slate-700 text-sm\"\n                    size=\"sm\"\n                  >\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    利用規約を読む\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"border border-slate-200 rounded-lg p-4 hover:border-blue-300 transition-colors\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"flex-shrink-0 mt-1\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"privacy\"\n                    checked={privacyChecked}\n                    onChange={(e) => setPrivacyChecked(e.target.checked)}\n                    className=\"w-5 h-5 text-blue-600 border-slate-300 rounded focus:ring-blue-500\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <label htmlFor=\"privacy\" className=\"flex items-center gap-2 cursor-pointer\">\n                    <Shield className=\"w-5 h-5 text-slate-600\" />\n                    <span className=\"font-medium text-slate-900\">プライバシーポリシー</span>\n                  </label>\n                  <p className=\"text-sm text-slate-600 mt-1 mb-2\">\n                    個人情報の取扱い、収集する情報、利用目的などが記載されています。\n                  </p>\n                  <Button\n                    onClick={() => window.open('/privacy', '_blank')}\n                    className=\"bg-slate-100 hover:bg-slate-200 text-slate-700 text-sm\"\n                    size=\"sm\"\n                  >\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    プライバシーポリシーを読む\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-sm text-red-800\">{error}</p>\n            </div>\n          )}\n\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Button\n              onClick={handleAccept}\n              disabled={!termsChecked || !privacyChecked || loading}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white disabled:bg-slate-300 disabled:text-slate-500\"\n            >\n              {loading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  処理中...\n                </>\n              ) : (\n                '同意してサービスを利用する'\n              )}\n            </Button>\n            <Button\n              onClick={handleLogout}\n              disabled={loading}\n              className=\"sm:w-auto bg-slate-200 hover:bg-slate-300 text-slate-700\"\n            >\n              ログアウト\n            </Button>\n          </div>\n\n          <p className=\"text-xs text-slate-500 text-center\">\n            バージョン: 利用規約 {TERMS_VERSION} / プライバシーポリシー {PRIVACY_VERSION}\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
  "src/components/Charts/CalendarHeatmap.tsx": "import React, { useMemo } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { DailyReportData } from '@/types'\nimport { formatCurrency } from '@/lib/format'\n\nexport const CalendarHeatmap: React.FC<{ reports: DailyReportData[] }> = ({ reports }) => {\n  const now = new Date()\n  const y = now.getFullYear()\n  const m = now.getMonth() // 0-11\n  const first = new Date(y, m, 1)\n  const last = new Date(y, m + 1, 0)\n  const daysInMonth = last.getDate()\n  const firstWeekDay = first.getDay() // 0 Sun\n\n  const salesByDay = useMemo(() => {\n    const map = new Map<number, number>()\n    reports.forEach(r => {\n      const d = new Date(r.date)\n      if (d.getFullYear() === y && d.getMonth() === m) {\n        const day = d.getDate()\n        map.set(day, (map.get(day) || 0) + r.sales)\n      }\n    })\n    return map\n  }, [reports, y, m])\n\n  const max = Math.max(1, ...Array.from(salesByDay.values()))\n\n  const cells: Array<{ day?: number; value?: number }> = []\n  for (let i = 0; i < firstWeekDay; i++) cells.push({})\n  for (let d = 1; d <= daysInMonth; d++) cells.push({ day: d, value: salesByDay.get(d) || 0 })\n\n  const color = (v: number) => {\n    const alpha = Math.min(1, (v / max) * 0.9 + 0.1)\n    return `rgba(59,130,246,${alpha})` // Tailwind blue-500 に近い\n  }\n\n  return (\n    <Card>\n      <CardHeader><CardTitle className=\"text-lg\">{now.toLocaleDateString('ja-JP',{year:'numeric',month:'long'})} 売上ヒートマップ</CardTitle></CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-7 gap-1\">\n          {['日','月','火','水','木','金','土'].map((w,i)=>(\n            <div key={i} className=\"text-xs text-muted-foreground text-center py-1\">{w}</div>\n          ))}\n          {cells.map((c, i) => (\n            <div\n              key={i}\n              className=\"h-16 rounded-md flex flex-col items-center justify-center text-xs p-1\"\n              style={{ backgroundColor: c.day ? color(c.value || 0) : 'transparent', color: c.day ? 'white' : 'inherit' }}\n              title={c.day ? `${c.day}日: ${formatCurrency(c.value || 0)}` : ''}\n            >\n              {c.day && (\n                <>\n                  <div className=\"font-medium\">{c.day}</div>\n                  <div className=\"text-xs font-mono leading-tight\">\n                    {c.value > 0 ? `¥${(c.value / 10000).toFixed(0)}万` : '0'}\n                  </div>\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n        <div className=\"flex items-center gap-2 mt-3 text-xs text-muted-foreground\">\n          <span>低</span>\n          <div className=\"h-3 flex-1 rounded\" style={{background:'linear-gradient(90deg, rgba(59,130,246,0.1), rgba(59,130,246,0.9))'}} />\n          <span>高</span>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/Charts/ExpensePie.tsx": "import React from 'react'\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  Tooltip,\n  Legend\n} from 'recharts'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { formatCurrency } from '@/lib/format'\nimport { DailyReportData } from '@/types'\nimport { DailyExpenseReference } from '@/hooks/useExpenseBaseline'\n\ninterface ExpensePieProps {\n  reports: DailyReportData[]\n  period?: 'daily' | 'weekly' | 'monthly'\n  className?: string\n  title?: string\n  expenseBaseline?: DailyExpenseReference\n  daysCount?: number\n}\n\nconst COLORS = {\n  '仕入': '#ef4444',        // red-500\n  'その他経費': '#f59e0b',  // amber-500\n  '営業利益': '#10b981'      // emerald-500 (green for profit)\n}\n\nexport const ExpensePie: React.FC<ExpensePieProps> = ({\n  reports,\n  period = 'daily',\n  className,\n  title,\n  expenseBaseline,\n  daysCount\n}) => {\n  const expenseData = React.useMemo(() => {\n    const totals = reports.reduce((acc, report) => ({\n      sales: acc.sales + report.sales,\n      purchase: acc.purchase + report.purchase,\n      laborCost: acc.laborCost + report.laborCost,\n      utilities: acc.utilities + report.utilities,\n      rent: acc.rent + (report.rent || 0),\n      consumables: acc.consumables + (report.consumables || 0),\n      promotion: acc.promotion + report.promotion,\n      cleaning: acc.cleaning + report.cleaning,\n      misc: acc.misc + report.misc,\n      communication: acc.communication + report.communication,\n      others: acc.others + report.others\n    }), {\n      sales: 0,\n      purchase: 0,\n      laborCost: 0,\n      utilities: 0,\n      rent: 0,\n      consumables: 0,\n      promotion: 0,\n      cleaning: 0,\n      misc: 0,\n      communication: 0,\n      others: 0\n    })\n\n    // 実際にデータがある日数を計算（ユニークな日付の数）\n    const uniqueDates = new Set(reports.map(r => r.date))\n    const actualDaysCount = uniqueDates.size\n\n    // その他経費の合計を計算\n    let otherExpenses = totals.laborCost + totals.utilities + totals.rent +\n                        totals.consumables + totals.promotion + totals.cleaning +\n                        totals.misc + totals.communication + totals.others\n\n    // 参考経費が提供されている場合、それを使用（実際のデータ日数を優先）\n    if (expenseBaseline && expenseBaseline.sumOther > 0) {\n      // 実際にデータがある日数分の参考経費を計算\n      const effectiveDays = actualDaysCount > 0 ? actualDaysCount : (daysCount || 0)\n      otherExpenses = expenseBaseline.sumOther * effectiveDays\n    }\n\n    // 営業利益 = 売上 - 仕入 - その他経費\n    const operatingProfit = totals.sales - totals.purchase - otherExpenses\n\n    return [\n      { name: '仕入', value: totals.purchase },\n      { name: 'その他経費', value: otherExpenses },\n      { name: '営業利益', value: operatingProfit > 0 ? operatingProfit : 0 }\n    ].filter(item => item.value > 0)\n  }, [reports, expenseBaseline, daysCount])\n\n  const total = expenseData.reduce((sum, item) => sum + item.value, 0)\n\n  const getTitle = () => {\n    if (title) return title\n    switch (period) {\n      case 'daily':\n        return '経費内訳（過去7日間）'\n      case 'weekly':\n        return '経費内訳（過去30日間）'\n      case 'monthly':\n        return '経費内訳（過去3ヶ月）'\n      default:\n        return '経費内訳'\n    }\n  }\n\n  const totalSales = reports.reduce((sum, report) => sum + report.sales, 0)\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">\n          {getTitle()}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-4 text-center\">\n          <div className=\"text-sm text-muted-foreground\">合計売上</div>\n          <div className=\"text-2xl font-bold text-blue-600\">{formatCurrency(totalSales)}</div>\n        </div>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={expenseData}\n              dataKey=\"value\"\n              nameKey=\"name\"\n              cx=\"50%\"\n              cy=\"50%\"\n              outerRadius={80}\n              innerRadius={40}\n            >\n              {expenseData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[entry.name as keyof typeof COLORS] || '#6b7280'} />\n              ))}\n            </Pie>\n            <Tooltip\n              formatter={(value: number) => [\n                `${formatCurrency(value)} (${((value / total) * 100).toFixed(1)}%)`\n              ]}\n              contentStyle={{\n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px'\n              }}\n            />\n            <Legend\n              wrapperStyle={{ fontSize: '14px' }}\n              formatter={(value, entry) => {\n                const itemValue = entry.payload?.value || 0\n                const percentage = total > 0 ? ((itemValue / total) * 100).toFixed(1) : '0.0'\n                return `${value}: ${formatCurrency(itemValue)} (${percentage}%)`\n              }}\n            />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/Charts/KpiBullets.tsx": "import React from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Progress } from '@/components/ui/progress'\nimport { formatCurrency, formatPercent } from '@/lib/format'\n\ntype Item = {\n  label: string\n  actual: number\n  target: number\n  format: 'currency' | 'percent'\n}\nexport const KpiBullets: React.FC<{ items: Item[] }> = ({ items }) => {\n  return (\n    <Card>\n      <CardHeader><CardTitle className=\"text-lg\">目標進捗（バレット）</CardTitle></CardHeader>\n      <CardContent className=\"space-y-4\">\n        {items.map((it, i) => {\n          const ratio = it.target > 0 ? Math.min(100, (it.actual / it.target) * 100) : 0\n          const fmt = (n: number) => it.format === 'currency' ? formatCurrency(n) : formatPercent(n)\n          const tone =\n            ratio >= 100 ? 'text-green-600' :\n            ratio >= 80  ? 'text-yellow-600' : 'text-red-600'\n          return (\n            <div key={i} className=\"space-y-1\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">{it.label}</span>\n                <span className={`font-medium ${tone}`}>{fmt(it.actual)} / 目標 {fmt(it.target)}</span>\n              </div>\n              <Progress value={ratio} />\n            </div>\n          )\n        })}\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/Charts/ProfitWaterfall.tsx": "import React, { useMemo } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { ResponsiveContainer, ComposedChart, XAxis, YAxis, Tooltip, Bar, CartesianGrid, LabelList } from 'recharts'\nimport { DailyReportData } from '@/types'\nimport { formatCurrency } from '@/lib/format'\nimport { DailyExpenseReference } from '@/hooks/useExpenseBaseline'\n\nexport const ProfitWaterfall: React.FC<{\n  reports: DailyReportData[]\n  expenseBaseline?: DailyExpenseReference\n  adjustedLaborCost?: number\n}> = ({ reports, expenseBaseline, adjustedLaborCost }) => {\n  const totals = useMemo(() => {\n    const actualTotals = reports.reduce((a, r) => {\n      a.sales += r.sales\n      a.purchase += r.purchase\n      a.labor += r.laborCost\n      a.utilities += r.utilities\n      a.rent += r.rent || 0\n      a.consumables += r.consumables || 0\n      a.promotion += r.promotion\n      a.cleaning += r.cleaning\n      a.misc += r.misc\n      a.communication += r.communication\n      a.others += r.others\n      return a\n    },{\n      sales:0, purchase:0, labor:0, utilities:0, rent:0, consumables:0, promotion:0, cleaning:0, misc:0, communication:0, others:0\n    })\n\n    // 調整済み人件費がある場合は使用\n    if (adjustedLaborCost !== undefined && adjustedLaborCost > 0) {\n      actualTotals.labor = adjustedLaborCost\n    }\n\n    // 参考経費がある場合、実際の経費がゼロの項目は参考経費を使用\n    if (expenseBaseline) {\n      const daysCount = reports.length\n      if (actualTotals.utilities === 0) actualTotals.utilities = expenseBaseline.utilities * daysCount\n      if (actualTotals.rent === 0) actualTotals.rent = expenseBaseline.rent * daysCount\n      if (actualTotals.consumables === 0) actualTotals.consumables = expenseBaseline.consumables * daysCount\n      if (actualTotals.promotion === 0) actualTotals.promotion = expenseBaseline.promotion * daysCount\n      if (actualTotals.cleaning === 0) actualTotals.cleaning = expenseBaseline.cleaning * daysCount\n      if (actualTotals.misc === 0) actualTotals.misc = expenseBaseline.misc * daysCount\n      if (actualTotals.communication === 0) actualTotals.communication = expenseBaseline.communication * daysCount\n      if (actualTotals.others === 0) actualTotals.others = expenseBaseline.others * daysCount\n    }\n\n    return actualTotals\n  }, [reports, expenseBaseline, adjustedLaborCost])\n\n  // ウォーターフォール用データ作成\n  const steps = [\n    { name: '売上', value: totals.sales },\n    { name: '仕入', value: -totals.purchase },\n    { name: '人件費', value: -totals.labor },\n    { name: '光熱費', value: -totals.utilities },\n    { name: '家賃', value: -totals.rent },\n    { name: '消耗品費', value: -totals.consumables },\n    { name: '販促費', value: -totals.promotion },\n    { name: '清掃費', value: -totals.cleaning },\n    { name: '雑費', value: -totals.misc },\n    { name: '通信費', value: -totals.communication },\n    { name: 'その他', value: -totals.others },\n  ]\n  let running = 0\n  const data = steps.map(s => {\n    const base = Math.max(0, running) // 見た目を整えるため簡易オフセット\n    running += s.value\n    return { name: s.name, base, delta: s.value }\n  })\n  const operatingProfit = running\n\n  // 最終「営業利益」\n  data.push({ name: '営業利益', base: Math.min(data[data.length-1].base + data[data.length-1].delta, 0), delta: operatingProfit })\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">損益ウォーターフォール</CardTitle>\n        <div className=\"text-sm text-muted-foreground\">\n          {new Date().toLocaleDateString('ja-JP', { \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric',\n            weekday: 'short'\n          })} 現在\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto -mx-2 px-2\">\n          <div className=\"min-w-[600px]\">\n            <ResponsiveContainer width=\"100%\" height={320}>\n              <ComposedChart data={data}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                <XAxis\n                  dataKey=\"name\"\n                  className=\"text-xs\"\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={80}\n                  interval={0}\n                />\n                <YAxis tickFormatter={(v)=>`¥${(v/10000).toFixed(0)}万`} className=\"text-xs\" />\n                <Tooltip\n                  formatter={(v: number, key) => [formatCurrency(key === 'delta' ? v as number : 0), key === 'delta' ? '金額' : '']}\n                  labelFormatter={(l) => l}\n                  contentStyle={{ background:'hsl(var(--card))', border:'1px solid hsl(var(--border))', borderRadius:6 }}\n                />\n                {/* base: 透明オフセット */}\n                <Bar dataKey=\"base\" stackId=\"a\" fill=\"transparent\" />\n                {/* delta: 実バー */}\n                <Bar dataKey=\"delta\" stackId=\"a\" fill=\"hsl(var(--primary))\">\n                  <LabelList dataKey=\"delta\" position=\"top\" formatter={(v: number)=> (v>=0?'+':'') + (v/10000).toFixed(0) + '万'} className=\"text-xs\" />\n                </Bar>\n              </ComposedChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/Charts/SalesChart.tsx": "import React from 'react'\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  ReferenceLine\n} from 'recharts'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'\nimport { formatCurrency, formatDate } from '@/lib/format'\nimport { DailyReportData } from '@/types'\nimport { DailyExpenseReference } from '@/hooks/useExpenseBaseline'\n\ninterface SalesChartProps {\n  reports: DailyReportData[]\n  period: 'daily' | 'weekly' | 'monthly'\n  onPeriodChange?: (period: 'daily' | 'weekly' | 'monthly') => void\n  targetSales?: number\n  className?: string\n  /** 表示するデータ点の最大数（例：月次=12, 週次=26, 日次=30 など） */\n  maxPoints?: number\n  onDataPointClick?: (period: string) => void\n  expenseBaseline?: DailyExpenseReference\n}\n\nexport const SalesChart: React.FC<SalesChartProps> = ({\n  reports,\n  period,\n  onPeriodChange,\n  targetSales,\n  className,\n  maxPoints,\n  onDataPointClick,\n  expenseBaseline\n}) => {\n  // Process data for chart\n  const chartData = React.useMemo(() => {\n    const groupedData = new Map<string, {\n      date: string\n      sales: number\n      profit: number\n      purchase: number\n      count: number\n    }>()\n\n    reports.forEach(report => {\n      const date = new Date(report.date)\n      let key: string\n\n      switch (period) {\n        case 'daily':\n          key = report.date\n          break\n        case 'weekly':\n          const weekStart = new Date(date)\n          const dow = (date.getDay() + 6) % 7 // 月曜=0\n          weekStart.setDate(date.getDate() - dow)\n          key = weekStart.toISOString().split('T')[0]\n          break\n        case 'monthly':\n          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`\n          break\n      }\n\n      if (!groupedData.has(key)) {\n        groupedData.set(key, { date: key, sales: 0, profit: 0, purchase: 0, count: 0 })\n      }\n\n      const data = groupedData.get(key)!\n\n      data.sales += report.sales\n      data.purchase += report.purchase\n      data.count += 1\n    })\n\n    // 参考経費を使用して営業利益を計算\n    const sorted = Array.from(groupedData.values()).map(data => {\n      let otherExpenses = 0\n\n      // 参考経費が提供されている場合\n      if (expenseBaseline && expenseBaseline.sumOther > 0) {\n        // 日次の場合: データポイントの日数分の参考経費\n        otherExpenses = expenseBaseline.sumOther * data.count\n      }\n\n      // 営業利益 = 売上 - 仕入 - その他経費\n      const profit = data.sales - data.purchase - otherExpenses\n\n      return {\n        ...data,\n        profit\n      }\n    }).sort((a, b) => a.date.localeCompare(b.date))\n\n    const limit = maxPoints ?? (period === 'monthly' ? 12 : period === 'weekly' ? 26 : 30)\n    return sorted.slice(-limit)\n  }, [reports, period, expenseBaseline])\n\n  const formatXAxisLabel = (dateStr: string) => {\n    const date = new Date(dateStr)\n    switch (period) {\n      case 'daily':\n        return date.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' })\n      case 'weekly':\n        return `${date.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' })}週`\n      case 'monthly':\n        return date.toLocaleDateString('ja-JP', { year: '2-digit', month: 'short' })\n      default:\n        return dateStr\n    }\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">\n            売上推移\n          </CardTitle>\n          {onPeriodChange && (\n            <Tabs value={period} onValueChange={onPeriodChange as any}>\n              <TabsList>\n                <TabsTrigger value=\"daily\">日次</TabsTrigger>\n                <TabsTrigger value=\"weekly\">週次</TabsTrigger>\n                <TabsTrigger value=\"monthly\">月次</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto -mx-2 px-2\">\n          <div className=\"min-w-[500px]\">\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={chartData}>\n                <defs>\n                  <linearGradient id=\"salesGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#6366f1\" stopOpacity={0.3} />\n                    <stop offset=\"95%\" stopColor=\"#6366f1\" stopOpacity={0} />\n                  </linearGradient>\n                  <linearGradient id=\"profitGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#10b981\" stopOpacity={0.3} />\n                    <stop offset=\"95%\" stopColor=\"#10b981\" stopOpacity={0} />\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                <XAxis\n                  dataKey=\"date\"\n                  tickFormatter={formatXAxisLabel}\n                  className=\"text-muted-foreground text-xs\"\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={60}\n                  interval={0}\n                />\n                <YAxis\n                  tickFormatter={(value) => `¥${(value / 10000).toFixed(0)}万`}\n                  className=\"text-muted-foreground text-xs\"\n                />\n                <Tooltip\n                  formatter={(value: number, name: string) => [\n                    formatCurrency(value),\n                    name === 'sales' ? '売上' : '営業利益'\n                  ]}\n                  labelFormatter={formatXAxisLabel}\n                  contentStyle={{\n                    backgroundColor: 'hsl(var(--card))',\n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '6px'\n                  }}\n                />\n                {targetSales && (\n                  <ReferenceLine\n                    y={targetSales}\n                    stroke=\"hsl(var(--ring))\"\n                    strokeDasharray=\"4 4\"\n                    label=\"目標\"\n                  />\n                )}\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"sales\"\n                  stroke=\"#6366f1\"\n                  fill=\"url(#salesGradient)\"\n                  strokeWidth={2}\n                  onClick={(data: any) => {\n                    if (onDataPointClick && data?.payload) {\n                      onDataPointClick(data.payload.date)\n                    }\n                  }}\n                  style={{ cursor: onDataPointClick ? 'pointer' : 'default' }}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"profit\"\n                  stroke=\"#10b981\"\n                  fill=\"url(#profitGradient)\"\n                  strokeWidth={2}\n                  onClick={(data: any) => {\n                    if (onDataPointClick && data?.payload) {\n                      onDataPointClick(data.payload.date)\n                    }\n                  }}\n                  style={{ cursor: onDataPointClick ? 'pointer' : 'default' }}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/data/DataTable.tsx": "import React, { useMemo } from 'react'\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getSortedRowModel,\n  getPaginationRowModel,\n  ColumnDef,\n  flexRender,\n  SortingState\n} from '@tanstack/react-table'\nimport { ArrowUpDown, ArrowUp, ArrowDown, ChevronLeft, ChevronRight, Trophy, Target } from 'lucide-react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { formatCurrency, formatPercent, formatDate } from '@/lib/format'\nimport { DailyReportData } from '@/types'\nimport { ExpenseBaselineDb } from '@/services/supabase'\n\ninterface DataTableProps {\n  reports: DailyReportData[]\n  period: 'daily' | 'weekly' | 'monthly'\n  groupByStore?: boolean\n  className?: string\n  onPeriodClick?: (period: string) => void\n  dailyTargets?: Record<string, number>\n  baselineMap?: Map<string, ExpenseBaselineDb>\n}\n\ninterface ProcessedRow {\n  period: string\n  rawPeriodKey: string\n  storeName: string\n  sales: number\n  purchase: number\n  laborCost: number\n  otherExpenses: number\n  expenses: number\n  grossProfit: number\n  operatingProfit: number\n  profitMargin: number\n  reportCount: number\n  targetSales?: number\n  achievementRate?: number\n  isAchieved?: boolean\n}\n\n// ✅ React.memo でラップして不要な再レンダを防ぐ\nconst DataTableImpl: React.FC<DataTableProps> = ({\n  reports,\n  period,\n  groupByStore = true,\n  className,\n  onPeriodClick,\n  dailyTargets = {},\n  baselineMap = new Map()\n}) => {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n\n  const handleExportCsv = () => {\n    const headers = ['期間','店舗名','売上','目標達成','達成率','差額','仕入','人件費','その他経費','粗利益','営業利益','利益率','報告数']\n    const rows = processedData.map(r => [\n      r.period,\n      r.storeName,\n      r.sales,\n      r.isAchieved !== undefined ? (r.isAchieved ? '達成' : '未達成') : '目標未設定',\n      r.achievementRate !== undefined ? r.achievementRate.toFixed(1) + '%' : '-',\n      r.targetSales !== undefined ? (r.sales - r.targetSales) : '-',\n      r.purchase,\n      r.laborCost,\n      r.otherExpenses,\n      r.grossProfit,\n      r.operatingProfit,\n      r.profitMargin.toFixed(1),\n      r.reportCount\n    ])\n    const csv = [headers, ...rows].map(cols => \n      cols.map(String).map(s => `\"${s.replace(/\"/g, '\"\"')}\"`).join(',')\n    ).join('\\n')\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `reports_${period}_${new Date().toISOString().split('T')[0]}.csv`\n    a.click()\n    URL.revokeObjectURL(url)\n  }\n\n  // Process data for table\n  const processedData = React.useMemo((): ProcessedRow[] => {\n    const groupedData = new Map<string, {\n      period: string\n      storeName: string\n      sales: number\n      purchase: number\n      laborCost: number\n      otherExpenses: number\n      count: number\n    }>()\n\n    // ✅ ログを最小限に\n    // console.log('📊 DataTable: Processing data', {\n    //   totalReports: reports.length,\n    //   period,\n    //   groupByStore\n    // })\n\n    reports.forEach(report => {\n      const date = new Date(report.date)\n      let key: string\n      let rawKey: string\n      let displayPeriod: string\n\n      switch (period) {\n        case 'daily':\n          key = groupByStore ? `${report.date}-${report.storeId}` : report.date\n          rawKey = report.date\n          displayPeriod = formatDate(date)\n          break\n        case 'weekly':\n          const weekStart = new Date(date)\n          const dow = (date.getDay() + 6) % 7\n          weekStart.setDate(date.getDate() - dow)\n          key = groupByStore ? `${weekStart.toISOString().split('T')[0]}-${report.storeId}` : weekStart.toISOString().split('T')[0]\n          rawKey = weekStart.toISOString().split('T')[0]\n          displayPeriod = `${formatDate(weekStart)}週`\n          break\n        case 'monthly':\n          key = groupByStore ? `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${report.storeId}` : `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`\n          rawKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`\n          displayPeriod = date.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' })\n          break\n      }\n\n      if (!groupedData.has(key)) {\n        groupedData.set(key, {\n          period: displayPeriod,\n          rawPeriodKey: rawKey,\n          storeName: reports.length > 0 && reports.every(r => r.storeId === reports[0].storeId)\n            ? reports[0].storeName\n            : (groupByStore ? report.storeName : '全店舗合計'),\n          sales: 0,\n          purchase: 0,\n          laborCost: 0,\n          otherExpenses: 0,\n          count: 0\n        })\n      }\n\n      const data = groupedData.get(key)!\n\n      // 人件費とその他経費を個別に集計\n      let laborCost = report.laborCost || 0\n      let otherExpenses = (report.utilities || 0) + (report.rent || 0) + (report.consumables || 0) +\n                           (report.promotion || 0) + (report.cleaning || 0) + (report.misc || 0) +\n                           (report.communication || 0) + (report.others || 0)\n\n      // その他経費が0の場合は参考経費を使用（月次管理モード対応）\n      if (laborCost === 0 && otherExpenses === 0) {\n        const yyyymm = report.date.slice(0, 7)\n        const baselineKey = `${report.storeId}-${yyyymm}`\n        const baseline = baselineMap.get(baselineKey)\n\n        if (baseline) {\n          const [year, month] = yyyymm.split('-').map(Number)\n          const daysInMonth = new Date(year, month, 0).getDate()\n          const openDays = baseline.open_days || daysInMonth\n          const perDay = (value: number) => Math.round(value / Math.max(openDays, 1))\n\n          laborCost = perDay((baseline.labor_cost_employee || 0) + (baseline.labor_cost_part_time || 0))\n          otherExpenses = perDay((baseline.utilities || 0) + (baseline.rent || 0) +\n            (baseline.consumables || 0) + (baseline.promotion || 0) + (baseline.cleaning || 0) +\n            (baseline.misc || 0) + (baseline.communication || 0) + (baseline.others || 0))\n        }\n      }\n\n      data.sales += report.sales\n      data.purchase += Number(report.purchase) || 0\n      data.laborCost += Number(laborCost) || 0\n      data.otherExpenses += Number(otherExpenses) || 0\n      data.count += 1\n    })\n\n    return Array.from(groupedData.values()).map(item => {\n      const sales = Number(item.sales) || 0\n      const purchase = Number(item.purchase) || 0\n      const laborCost = Number(item.laborCost) || 0\n      const otherExpenses = Number(item.otherExpenses) || 0\n      const expenses = purchase + laborCost + otherExpenses\n      const grossProfit = sales - purchase\n      const operatingProfit = sales - expenses\n      const profitMargin = sales > 0 ? (operatingProfit / sales) * 100 : 0\n\n      const targetSales = dailyTargets[item.rawPeriodKey]\n      const achievementRate = targetSales ? (sales / targetSales) * 100 : undefined\n      const isAchieved = targetSales ? sales >= targetSales : undefined\n\n      return {\n        period: item.period,\n        rawPeriodKey: item.rawPeriodKey,\n        storeName: item.storeName,\n        sales,\n        purchase,\n        laborCost,\n        otherExpenses,\n        expenses,\n        grossProfit,\n        operatingProfit,\n        profitMargin,\n        reportCount: item.count,\n        targetSales,\n        achievementRate,\n        isAchieved\n      }\n    })\n  }, [reports, period, groupByStore, baselineMap, dailyTargets])\n\n  // ✅ columns をメモ化（再レンダを防ぐ）\n  const columns = useMemo((): ColumnDef<ProcessedRow>[] => [\n    {\n      accessorKey: 'period',\n      header: ({ column }) => {\n        return (\n          <Button\n            variant=\"ghost\"\n            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n            className=\"h-auto p-0 font-medium\"\n          >\n            期間\n            {column.getIsSorted() === \"asc\" ? (\n              <ArrowUp className=\"ml-2 h-4 w-4\" />\n            ) : column.getIsSorted() === \"desc\" ? (\n              <ArrowDown className=\"ml-2 h-4 w-4\" />\n            ) : (\n              <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n            )}\n          </Button>\n        )\n      },\n      cell: ({ row }) => (\n        <div\n          className={`font-medium ${\n            onPeriodClick ? 'text-primary cursor-pointer hover:underline' : ''\n          }`}\n          onClick={() => {\n            if (onPeriodClick) {\n              onPeriodClick(row.original.rawPeriodKey)\n            }\n          }}\n        >\n          {row.getValue('period')}\n        </div>\n      )\n    },\n    {\n      accessorKey: 'storeName',\n      header: '店舗名',\n      cell: ({ row }) => (\n        <div className=\"font-medium\">\n          {row.getValue('storeName')}\n        </div>\n      )\n    },\n    {\n      accessorKey: 'sales',\n      header: ({ column }) => {\n        return (\n          <Button\n            variant=\"ghost\"\n            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n            className=\"h-auto p-0 font-medium\"\n          >\n            売上\n            {column.getIsSorted() === \"asc\" ? (\n              <ArrowUp className=\"ml-2 h-4 w-4\" />\n            ) : column.getIsSorted() === \"desc\" ? (\n              <ArrowDown className=\"ml-2 h-4 w-4\" />\n            ) : (\n              <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n            )}\n          </Button>\n        )\n      },\n      cell: ({ row }) => (\n        <div className=\"text-right font-medium text-blue-600\">\n          {formatCurrency(row.getValue('sales'))}\n        </div>\n      )\n    },\n    {\n      accessorKey: 'isAchieved',\n      header: ({ column }) => {\n        return (\n          <Button\n            variant=\"ghost\"\n            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n            className=\"h-auto p-0 font-medium\"\n          >\n            目標達成\n            {column.getIsSorted() === \"asc\" ? (\n              <ArrowUp className=\"ml-2 h-4 w-4\" />\n            ) : column.getIsSorted() === \"desc\" ? (\n              <ArrowDown className=\"ml-2 h-4 w-4\" />\n            ) : (\n              <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n            )}\n          </Button>\n        )\n      },\n      cell: ({ row }) => {\n        const isAchieved = row.original.isAchieved\n        const achievementRate = row.original.achievementRate\n        const targetSales = row.original.targetSales\n        const sales = row.original.sales\n\n        if (targetSales === undefined) {\n          return (\n            <div className=\"text-center text-xs text-muted-foreground\">\n              目標未設定\n            </div>\n          )\n        }\n\n        const difference = sales - targetSales\n\n        return (\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <Badge\n                variant={isAchieved ? \"default\" : \"destructive\"}\n                className={`text-xs font-bold ${isAchieved ? 'bg-green-600 hover:bg-green-700' : ''}`}\n              >\n                {isAchieved ? (\n                  <>\n                    <Trophy className=\"h-3 w-3 mr-1\" />\n                    達成\n                  </>\n                ) : (\n                  <>\n                    <Target className=\"h-3 w-3 mr-1\" />\n                    未達成\n                  </>\n                )}\n              </Badge>\n            </div>\n            <div className=\"text-xs text-center text-muted-foreground\">\n              {formatPercent(achievementRate || 0)}\n            </div>\n            <div className={`text-xs text-center font-medium ${\n              isAchieved ? 'text-green-600' : 'text-red-600'\n            }`}>\n              {isAchieved ? '+' : ''}{formatCurrency(difference)}\n            </div>\n          </div>\n        )\n      }\n    },\n    {\n      accessorKey: 'purchase',\n      header: '仕入',\n      cell: ({ row }) => (\n        <div className=\"text-right font-medium text-red-600\">\n          {formatCurrency(Number(row.getValue('purchase')) || 0)}\n        </div>\n      )\n    },\n    {\n      accessorKey: 'laborCost',\n      header: '人件費',\n      cell: ({ row }) => (\n        <div className=\"text-right font-medium text-orange-600\">\n          {formatCurrency(Number(row.getValue('laborCost')) || 0)}\n        </div>\n      )\n    },\n    {\n      accessorKey: 'otherExpenses',\n      header: 'その他経費',\n      cell: ({ row }) => (\n        <div className=\"text-right font-medium text-gray-600\">\n          {formatCurrency(Number(row.getValue('otherExpenses')) || 0)}\n        </div>\n      )\n    },\n    {\n      accessorKey: 'grossProfit',\n      header: '粗利益',\n      cell: ({ row }) => {\n        const value = row.getValue('grossProfit') as number\n        return (\n          <div className={`text-right font-medium ${\n            value >= 0 ? 'text-green-600' : 'text-red-600'\n          }`}>\n            {formatCurrency(value)}\n          </div>\n        )\n      }\n    },\n    {\n      accessorKey: 'operatingProfit',\n      header: ({ column }) => {\n        return (\n          <Button\n            variant=\"ghost\"\n            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n            className=\"h-auto p-0 font-medium\"\n          >\n            営業利益\n            {column.getIsSorted() === \"asc\" ? (\n              <ArrowUp className=\"ml-2 h-4 w-4\" />\n            ) : column.getIsSorted() === \"desc\" ? (\n              <ArrowDown className=\"ml-2 h-4 w-4\" />\n            ) : (\n              <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n            )}\n          </Button>\n        )\n      },\n      cell: ({ row }) => {\n        const value = row.getValue('operatingProfit') as number\n        return (\n          <div className={`text-right font-medium ${\n            value >= 0 ? 'text-green-600' : 'text-red-600'\n          }`}>\n            {formatCurrency(value)}\n          </div>\n        )\n      }\n    },\n    {\n      accessorKey: 'profitMargin',\n      header: '利益率',\n      cell: ({ row }) => {\n        const value = row.getValue('profitMargin') as number\n        return (\n          <div className=\"text-right\">\n            <Badge \n              variant={value >= 15 ? 'default' : value >= 10 ? 'secondary' : 'destructive'}\n              className=\"text-xs\"\n            >\n              {formatPercent(value)}\n            </Badge>\n          </div>\n        )\n      }\n    },\n    {\n      accessorKey: 'reportCount',\n      header: '報告数',\n      cell: ({ row }) => (\n        <div className=\"text-right text-muted-foreground\">\n          {row.getValue('reportCount')}件\n        </div>\n      )\n    }\n  ], [onPeriodClick]) // ✅ onPeriodClick が変わったときのみ再生成\n\n  const table = useReactTable({\n    data: processedData,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    state: {\n      sorting,\n    },\n    initialState: {\n      pagination: {\n        pageSize: 7,\n      },\n    },\n  })\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"px-3 sm:px-6 py-3 sm:py-6\">\n        <div className=\"flex items-center justify-between gap-2\">\n          <CardTitle className=\"text-base sm:text-lg font-semibold truncate\">\n            詳細データ\n          </CardTitle>\n          <Button variant=\"outline\" size=\"sm\" onClick={handleExportCsv} className=\"flex-shrink-0 text-xs sm:text-sm\">\n            <span className=\"hidden sm:inline\">CSV</span>エクスポート\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"px-2 sm:px-6 pb-3 sm:pb-6\">\n        <div className=\"rounded-md border\">\n          <div className=\"overflow-x-auto -mx-2 sm:mx-0\">\n            <table className=\"w-full min-w-[800px]\">\n              <thead>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <tr key={headerGroup.id} className=\"border-b border-border\">\n                    {headerGroup.headers.map((header) => (\n                      <th key={header.id} className=\"h-10 sm:h-12 px-2 sm:px-4 text-left align-middle font-medium text-muted-foreground text-xs sm:text-sm\">\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(\n                              header.column.columnDef.header,\n                              header.getContext()\n                            )}\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n              <tbody>\n                {table.getRowModel().rows?.length ? (\n                  table.getRowModel().rows.map((row) => (\n                    <tr\n                      key={row.id}\n                      className=\"border-b border-border hover:bg-muted/50 transition-colors\"\n                    >\n                      {row.getVisibleCells().map((cell) => (\n                        <td key={cell.id} className=\"p-2 sm:p-4 align-middle text-xs sm:text-sm\">\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </td>\n                      ))}\n                    </tr>\n                  ))\n                ) : (\n                  <tr>\n                    <td colSpan={columns.length} className=\"h-24 text-center\">\n                      データがありません。\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        \n        {/* Pagination */}\n        <div className=\"flex flex-col sm:flex-row items-center justify-between pt-4 gap-2\">\n          <div className=\"text-xs sm:text-sm text-muted-foreground\">\n            {table.getFilteredRowModel().rows.length} 件中{' '}\n            {table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1}-\n            {Math.min(\n              (table.getState().pagination.pageIndex + 1) * table.getState().pagination.pageSize,\n              table.getFilteredRowModel().rows.length\n            )} 件を表示\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n              className=\"text-xs sm:text-sm\"\n            >\n              <ChevronLeft className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              <span className=\"hidden sm:inline\">前へ</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n              className=\"text-xs sm:text-sm\"\n            >\n              <span className=\"hidden sm:inline\">次へ</span>\n              <ChevronRight className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// ✅ React.memo でラップして props が安定している限り再レンダを防ぐ\nexport const DataTable = React.memo(DataTableImpl)",
  "src/components/Layout/Footer.tsx": "import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { FileText, Shield, Mail } from 'lucide-react'\n\nexport const Footer: React.FC = () => {\n  const currentYear = new Date().getFullYear()\n\n  return (\n    <footer className=\"bg-slate-900 text-slate-300 mt-auto\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <h3 className=\"text-white font-bold text-lg mb-4\">AI経営管理システム</h3>\n            <p className=\"text-sm text-slate-400\">\n              飲食店の経営を支援する総合的な分析ツール\n            </p>\n          </div>\n\n          <div>\n            <h4 className=\"text-white font-semibold mb-4\">法的情報</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link\n                  to=\"/terms\"\n                  className=\"flex items-center gap-2 text-sm hover:text-white transition-colors\"\n                >\n                  <FileText className=\"w-4 h-4\" />\n                  利用規約\n                </Link>\n              </li>\n              <li>\n                <Link\n                  to=\"/privacy\"\n                  className=\"flex items-center gap-2 text-sm hover:text-white transition-colors\"\n                >\n                  <Shield className=\"w-4 h-4\" />\n                  プライバシーポリシー\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-white font-semibold mb-4\">お問い合わせ</h4>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-center gap-2 text-sm\">\n                <Mail className=\"w-4 h-4\" />\n                <a\n                  href=\"mailto:support@izakaya-ikki.example.com\"\n                  className=\"hover:text-white transition-colors\"\n                >\n                  support@izakaya-ikki.example.com\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-slate-800 mt-8 pt-6 text-center\">\n          <p className=\"text-sm text-slate-400\">\n            &copy; {currentYear} AI経営管理システム. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n",
  "src/components/system/HelpGuide.tsx": "import React from 'react';\nimport { X, BookOpen, FileText, Target, PieChart, MessageSquare, Users, Calendar, TrendingUp } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface HelpGuideProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const HelpGuide: React.FC<HelpGuideProps> = ({ isOpen, onClose }) => {\n  const { user } = useAuth();\n\n  if (!isOpen) return null;\n\n  const sections = [\n    {\n      icon: FileText,\n      title: '日報の入力',\n      role: ['admin', 'manager', 'staff'],\n      steps: [\n        '左メニューから「日報作成」をクリック',\n        '店舗、日付を選択',\n        '売上、仕入れ、各種経費を入力',\n        '仕入内訳（業者別）がある場合は追加',\n        '「保存」ボタンで登録完了'\n      ],\n      tips: [\n        '金額は半角数字で入力してください',\n        '仕入内訳は複数の業者を追加できます',\n        '保存後も編集可能です'\n      ]\n    },\n    {\n      icon: PieChart,\n      title: 'ダッシュボードの見方',\n      role: ['admin', 'manager', 'staff'],\n      steps: [\n        '左メニューから表示期間を選択（日次・週次・月次）',\n        'ヘッダーの店舗選択で表示店舗を切り替え',\n        'KPIカードで主要指標を確認',\n        'グラフで推移を視覚的に把握',\n        'データテーブルで詳細を確認'\n      ],\n      tips: [\n        '管理者は全店舗のデータを閲覧可能',\n        'カードをクリックすると詳細分析が表示されます',\n        'グラフは期間に応じて自動調整されます'\n      ]\n    },\n    {\n      icon: Target,\n      title: '目標設定',\n      role: ['admin', 'manager'],\n      steps: [\n        '左メニューから「目標設定」をクリック',\n        '店舗と対象月を選択',\n        '売上目標、原価率、人件費率などを入力',\n        '「保存」で設定完了',\n        'ダッシュボードで達成率が自動表示されます'\n      ],\n      tips: [\n        '目標は月ごとに設定できます',\n        '達成率はリアルタイムで計算されます',\n        '過去の実績を参考に設定しましょう'\n      ]\n    },\n    {\n      icon: Calendar,\n      title: '月次経費の入力',\n      role: ['admin', 'manager'],\n      steps: [\n        '左メニューから「月次経費入力」をクリック',\n        '店舗と対象月を選択',\n        '家賃、光熱費、通信費などの固定費を入力',\n        '「保存」で登録完了',\n        '利益計算に自動反映されます'\n      ],\n      tips: [\n        '月に1回入力すれば自動で計算に反映',\n        '消耗品や家賃は忘れずに入力',\n        '過去の月次経費をコピーして編集可能'\n      ]\n    },\n    {\n      icon: MessageSquare,\n      title: 'AIチャット機能',\n      role: ['admin', 'manager', 'staff'],\n      steps: [\n        '左メニューから「AIチャット」をクリック',\n        '質問を入力（例：「今月の売上は？」）',\n        'AIが業績データを分析して回答',\n        '会話履歴は自動保存されます',\n        '検索機能で過去の会話を検索可能'\n      ],\n      tips: [\n        '具体的な質問ほど的確な回答が得られます',\n        '「原価率を改善するには？」など提案も依頼可',\n        '会話は店舗ごとに分かれています'\n      ]\n    },\n    {\n      icon: TrendingUp,\n      title: 'AI分析レポート',\n      role: ['admin', 'manager'],\n      steps: [\n        '左メニューから「AI分析レポート」をクリック',\n        '「新規レポート生成」をクリック',\n        '期間と店舗を選択',\n        'AIが自動で詳細分析レポートを作成',\n        'レポートを確認・共有・ダウンロード可能'\n      ],\n      tips: [\n        '月末や週末にレポートを生成すると便利',\n        '共有リンクで他のスタッフに共有可能',\n        'レポートはPDF形式でダウンロードできます'\n      ]\n    },\n    {\n      icon: Users,\n      title: 'スタッフ管理',\n      role: ['admin'],\n      steps: [\n        '左メニューから「設定」→「スタッフ管理」',\n        '「新規スタッフ追加」をクリック',\n        '名前、メールアドレス、役割を入力',\n        '担当店舗を割り当て',\n        '「保存」で登録完了'\n      ],\n      tips: [\n        '役割：統括（全権限）、店長、スタッフ',\n        'スタッフは割り当てられた店舗のみ閲覧可',\n        'パスワードは初回ログイン時に設定'\n      ]\n    }\n  ];\n\n  const userSections = sections.filter(section =>\n    section.role.includes(user?.role || 'staff')\n  );\n\n  return (\n    <div\n      className=\"fixed top-0 left-0 right-0 bottom-0 z-[99999] flex items-start justify-center bg-black/80 backdrop-blur-sm animate-in fade-in duration-200 overflow-hidden\"\n      onClick={onClose}\n      style={{ position: 'fixed', inset: 0 }}\n    >\n      <div\n        className=\"relative w-full max-w-5xl h-full max-h-screen bg-white shadow-2xl overflow-hidden flex flex-col m-0 sm:m-4 sm:rounded-xl sm:h-[96vh] sm:max-h-[96vh]\"\n        onClick={(e) => e.stopPropagation()}\n        style={{ zIndex: 99999 }}\n      >\n        {/* Header - Fixed */}\n        <div className=\"flex-shrink-0 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-4 py-4 sm:px-6 sm:py-5 flex items-center justify-between shadow-lg z-20\">\n          <div className=\"flex items-center gap-2 sm:gap-3 min-w-0\">\n            <BookOpen className=\"h-5 w-5 sm:h-6 sm:w-6 flex-shrink-0\" />\n            <div className=\"min-w-0\">\n              <h2 className=\"text-lg sm:text-2xl font-bold truncate\">使い方ガイド</h2>\n              <p className=\"text-xs sm:text-sm text-blue-50 opacity-90 hidden sm:block\">業務管理システムの基本操作</p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"text-white hover:bg-white/20 transition-colors flex-shrink-0\"\n            title=\"閉じる\"\n          >\n            <X className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n          </Button>\n        </div>\n\n        {/* Content - Scrollable */}\n        <div className=\"flex-1 overflow-y-auto bg-gray-50\">\n          <div className=\"p-4 sm:p-6 md:p-8 space-y-6\">\n          {/* Quick Start */}\n          <div className=\"bg-gradient-to-br from-blue-50 via-blue-50 to-green-50 border-2 border-blue-300 rounded-xl p-6 md:p-8 shadow-sm\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center gap-2\">\n              <span className=\"text-2xl\">🚀</span>\n              はじめに\n            </h3>\n            <div className=\"space-y-4 text-gray-700\">\n              <p className=\"text-base leading-relaxed\">このシステムは、日々の売上・経費を記録し、リアルタイムで業績を分析できる管理ツールです。</p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-5\">\n                <div className=\"bg-white rounded-xl p-4 shadow-md hover:shadow-lg transition-shadow border border-blue-100\">\n                  <div className=\"font-bold text-blue-600 mb-2 text-lg\">📝 ステップ1</div>\n                  <div className=\"text-sm text-gray-600\">日報を入力して日々の業績を記録</div>\n                </div>\n                <div className=\"bg-white rounded-xl p-4 shadow-md hover:shadow-lg transition-shadow border border-purple-100\">\n                  <div className=\"font-bold text-purple-600 mb-2 text-lg\">📊 ステップ2</div>\n                  <div className=\"text-sm text-gray-600\">ダッシュボードで推移を確認</div>\n                </div>\n                <div className=\"bg-white rounded-xl p-4 shadow-md hover:shadow-lg transition-shadow border border-green-100\">\n                  <div className=\"font-bold text-green-600 mb-2 text-lg\">🤖 ステップ3</div>\n                  <div className=\"text-sm text-gray-600\">AIで分析・改善提案を取得</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Sections */}\n          {userSections.map((section, index) => {\n            const Icon = section.icon;\n            return (\n              <div key={index} className=\"bg-white border-2 border-gray-200 rounded-xl p-6 md:p-8 hover:shadow-lg hover:border-blue-300 transition-all\">\n                <div className=\"flex items-center gap-4 mb-6\">\n                  <div className=\"p-3 bg-gradient-to-br from-blue-100 to-blue-200 rounded-xl shadow-sm\">\n                    <Icon className=\"h-6 w-6 text-blue-700\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900\">{section.title}</h3>\n                </div>\n\n                <div className=\"space-y-5\">\n                  {/* Steps */}\n                  <div>\n                    <h4 className=\"text-base font-bold text-gray-800 mb-3 flex items-center gap-2\">\n                      <span className=\"text-blue-600\">▶</span>\n                      手順\n                    </h4>\n                    <ol className=\"space-y-3\">\n                      {section.steps.map((step, stepIndex) => (\n                        <li key={stepIndex} className=\"flex gap-3 text-sm text-gray-700 leading-relaxed\">\n                          <span className=\"flex-shrink-0 w-7 h-7 bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold shadow-sm\">\n                            {stepIndex + 1}\n                          </span>\n                          <span className=\"pt-1\">{step}</span>\n                        </li>\n                      ))}\n                    </ol>\n                  </div>\n\n                  {/* Tips */}\n                  <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 border-2 border-amber-300 rounded-xl p-5 shadow-sm\">\n                    <h4 className=\"text-base font-bold text-amber-900 mb-3 flex items-center gap-2\">\n                      <span className=\"text-lg\">💡</span>\n                      ポイント\n                    </h4>\n                    <ul className=\"space-y-2\">\n                      {section.tips.map((tip, tipIndex) => (\n                        <li key={tipIndex} className=\"text-sm text-amber-900 flex gap-2 leading-relaxed\">\n                          <span className=\"text-amber-600 font-bold\">✓</span>\n                          <span>{tip}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n\n          {/* FAQ */}\n          <div className=\"bg-white border-2 border-gray-300 rounded-xl p-6 md:p-8 shadow-sm\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-6 flex items-center gap-2\">\n              <span className=\"text-2xl\">❓</span>\n              よくある質問\n            </h3>\n            <div className=\"space-y-5\">\n              <div className=\"pb-4 border-b border-gray-200 last:border-0 last:pb-0\">\n                <div className=\"font-bold text-gray-900 mb-2 text-base\">Q. データはいつ更新されますか？</div>\n                <div className=\"text-sm text-gray-600 leading-relaxed pl-4\">A. 日報を保存すると即座にダッシュボードに反映されます。リアルタイムで最新データが確認できます。</div>\n              </div>\n              <div className=\"pb-4 border-b border-gray-200 last:border-0 last:pb-0\">\n                <div className=\"font-bold text-gray-900 mb-2 text-base\">Q. 過去のデータを修正できますか？</div>\n                <div className=\"text-sm text-gray-600 leading-relaxed pl-4\">A. はい、日報一覧から該当の日報を選択して編集できます。</div>\n              </div>\n              <div className=\"pb-4 border-b border-gray-200 last:border-0 last:pb-0\">\n                <div className=\"font-bold text-gray-900 mb-2 text-base\">Q. 他の店舗のデータは見られますか？</div>\n                <div className=\"text-sm text-gray-600 leading-relaxed pl-4\">A. 権限により異なります。統括は全店舗、店長・スタッフは割り当てられた店舗のみ閲覧可能です。</div>\n              </div>\n              <div className=\"pb-4 border-b border-gray-200 last:border-0 last:pb-0\">\n                <div className=\"font-bold text-gray-900 mb-2 text-base\">Q. AIチャットの使用料金は？</div>\n                <div className=\"text-sm text-gray-600 leading-relaxed pl-4\">A. システム利用料金に含まれています。ただし、過度な使用は控えてください。</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Support */}\n          <div className=\"bg-gradient-to-r from-blue-50 to-green-50 border-2 border-blue-300 rounded-xl p-6 md:p-8 text-center shadow-sm\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-3 flex items-center justify-center gap-2\">\n              <span className=\"text-2xl\">📞</span>\n              お問い合わせ\n            </h3>\n            <p className=\"text-base text-gray-700 mb-4 leading-relaxed\">\n              ご不明な点がございましたら、システム管理者までお気軽にお問い合わせください。\n            </p>\n            <div className=\"text-sm text-gray-500 font-medium\">\n              システムバージョン: 1.0.0\n            </div>\n          </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
  "src/components/system/QuickActions.tsx": "import React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Clock, TrendingUp, Zap } from 'lucide-react'\nimport { formatCurrency } from '@/lib/format'\n\ntype Priority = '高' | '中' | '低'\n\ninterface QuickActionItem {\n  category: string\n  description: string\n  priority: Priority\n  timeframe: string\n  actions: string[]\n  expectedSavings: number\n}\n\n// 優先度別スタイル定義（型安全・フォールバック付き）\nconst priorityStyle = (p: Priority | undefined) => {\n  switch (p) {\n    case '高':\n      return {\n        card: 'bg-red-600 text-white border-red-600',\n        title: 'text-white',\n        desc: 'text-white/90',\n        chipVariant: 'destructive' as const,\n        action: 'bg-white/20 text-white border-white/30',\n        effect: 'text-white/80',\n      }\n    case '中':\n      return {\n        card: 'bg-yellow-50 text-yellow-800 border-yellow-200',\n        title: 'text-yellow-900',\n        desc: 'text-yellow-700',\n        chipVariant: 'secondary' as const,\n        action: 'bg-white/50 text-yellow-800 border-yellow-200',\n        effect: 'text-yellow-700',\n      }\n    case '低':\n      return {\n        card: 'bg-green-50 text-green-800 border-green-200',\n        title: 'text-green-900',\n        desc: 'text-green-700',\n        chipVariant: 'secondary' as const,\n        action: 'bg-white/50 text-green-800 border-green-200',\n        effect: 'text-green-700',\n      }\n    default:\n      // フォールバック（型安全）\n      return {\n        card: 'bg-muted text-foreground border-border',\n        title: 'text-foreground',\n        desc: 'text-muted-foreground',\n        chipVariant: 'secondary' as const,\n        action: 'bg-white text-foreground border-border',\n        effect: 'text-muted-foreground',\n      }\n  }\n}\n\nexport const QuickActions: React.FC = () => {\n  const quickActionItems: QuickActionItem[] = [\n    {\n      category: '在庫管理システム',\n      description: '食材ロス削減とコスト最適化',\n      priority: '高',\n      timeframe: '2-3ヶ月',\n      actions: [\n        '発注点管理システム',\n        '廃棄率自動計算',\n        '業者別価格比較',\n        'ABC分析導入'\n      ],\n      expectedSavings: 600000\n    },\n    {\n      category: 'POS連携機能',\n      description: 'レジデータ自動取込でデータ精度向上',\n      priority: '高',\n      timeframe: '1-2ヶ月',\n      actions: [\n        'レジAPI連携',\n        '客数・客単価自動計算',\n        '商品別売上分析',\n        'リアルタイム売上更新'\n      ],\n      expectedSavings: 360000\n    },\n    {\n      category: '税務レポート',\n      description: '税理士費用削減と法務対応',\n      priority: '中',\n      timeframe: '1ヶ月',\n      actions: [\n        '消費税計算精度向上',\n        '月次税務レポート',\n        '年次決算資料生成',\n        '監査ログ機能'\n      ],\n      expectedSavings: 360000\n    },\n    {\n      category: 'シフト管理',\n      description: '人件費最適化と労務管理',\n      priority: '中',\n      timeframe: '2ヶ月',\n      actions: [\n        '時給計算システム',\n        '労働時間管理',\n        'シフト最適化AI',\n        '人件費予算管理'\n      ],\n      expectedSavings: 480000\n    },\n    {\n      category: '通知システム',\n      description: 'アラート機能で迅速な対応',\n      priority: '低',\n      timeframe: '2週間',\n      actions: [\n        '利益率悪化アラート',\n        'LINE/Slack通知',\n        '売上目標未達通知',\n        'カスタムアラート設定'\n      ],\n      expectedSavings: 120000\n    },\n    {\n      category: '競合分析',\n      description: '市場ポジション把握と戦略立案',\n      priority: '低',\n      timeframe: '3ヶ月',\n      actions: [\n        '商圏分析ツール',\n        '競合価格調査',\n        'マーケットシェア分析',\n        '顧客満足度調査'\n      ],\n      expectedSavings: 240000\n    }\n  ]\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <Zap className=\"w-5 h-5 text-orange-500\" />\n          追加実装推奨機能\n        </CardTitle>\n        <div className=\"text-sm text-muted-foreground\">\n          実務レベル向上のための優先機能リスト\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          {quickActionItems.map((item, index) => {\n            const style = priorityStyle(item.priority)\n            \n            return (\n              <div key={`${item.category}-${index}`} className={`p-4 rounded-lg border-2 ${style.card}`}>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className={`text-sm font-bold ${style.title}`}>\n                    {item.category}\n                  </span>\n                  <Badge variant={style.chipVariant} className=\"text-xs\">\n                    {item.priority}\n                  </Badge>\n                </div>\n                \n                <p className={`text-xs mb-3 ${style.desc}`}>\n                  {item.description}\n                </p>\n                \n                <div className=\"space-y-2\">\n                  {item.actions.map((action) => (\n                    <div \n                      key={action}\n                      className={`text-xs p-2 rounded border ${style.action}`}\n                    >\n                      • {action}\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"flex items-center justify-between mt-3\">\n                  <div className={`text-xs ${style.effect}`}>\n                    期待効果: 月間{formatCurrency(item.expectedSavings)}削減\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className={`w-3 h-3 ${style.effect.replace('text-', 'text-')}`} />\n                    <span className={`text-xs ${style.effect}`}>\n                      {item.timeframe}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n        \n        <div className=\"mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <TrendingUp className=\"w-5 h-5 text-blue-600\" />\n            <h4 className=\"font-medium text-blue-900\">実装時の総合効果</h4>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-blue-700\">年間削減効果:</span>\n              <span className=\"font-bold text-blue-900 ml-2\">\n                {formatCurrency(quickActionItems.reduce((sum, item) => sum + item.expectedSavings * 12, 0))}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-blue-700\">投資回収期間:</span>\n              <span className=\"font-bold text-blue-900 ml-2\">3-6ヶ月</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/ui/MetricCard.tsx": "import React from 'react'\nimport { type LucideIcon } from 'lucide-react'\nimport { Card, CardContent } from './card'\nimport { Badge } from './badge'\nimport { cn } from '@/lib/utils'\n\nexport interface MetricCardProps {\n  label: string\n  value: string\n  delta?: {\n    value: number\n    isPositive: boolean\n    label?: string\n  }\n  icon: LucideIcon\n  tone?: 'success' | 'warning' | 'danger' | 'info' | 'neutral'\n  hint?: string\n  details?: Array<{ label: string; value: string }>\n  loading?: boolean\n  className?: string\n}\n\nconst toneClasses = {\n  success: 'bg-success/10 text-success border-success/20',\n  warning: 'bg-warning/10 text-warning border-warning/20',\n  danger: 'bg-danger/10 text-danger border-danger/20',\n  info: 'bg-info/10 text-info border-info/20',\n  neutral: 'bg-muted text-muted-foreground border-border'\n}\n\nconst iconToneClasses = {\n  success: 'text-success',\n  warning: 'text-warning',\n  danger: 'text-danger',\n  info: 'text-info',\n  neutral: 'text-muted-foreground'\n}\n\nexport const MetricCard: React.FC<MetricCardProps> = ({\n  label,\n  value,\n  delta,\n  icon: Icon,\n  tone = 'neutral',\n  hint,\n  details,\n  loading = false,\n  className\n}) => {\n  if (loading) {\n    return (\n      <Card className={cn('animate-pulse', className)}>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"h-4 bg-muted rounded w-20\"></div>\n            <div className=\"h-8 w-8 bg-muted rounded-lg\"></div>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"h-8 bg-muted rounded w-24\"></div>\n            <div className=\"h-4 bg-muted rounded w-16\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={cn('transition-all duration-200 hover:shadow-md', className)}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"text-sm font-medium text-muted-foreground\">\n            {label}\n          </div>\n          <div className={cn('p-2 rounded-lg', toneClasses[tone])}>\n            <Icon className={cn('h-4 w-4', iconToneClasses[tone])} />\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"text-2xl font-bold text-foreground\">\n            {value}\n          </div>\n          \n          {delta && (\n            <div className=\"flex items-center gap-2\">\n              <Badge \n                variant={delta.isPositive ? 'default' : 'destructive'}\n                className=\"text-xs\"\n              >\n                {delta.isPositive ? '+' : ''}{delta.value.toFixed(1)}%\n              </Badge>\n              {delta.label && (\n                <span className=\"text-xs text-muted-foreground\">\n                  {delta.label}\n                </span>\n              )}\n            </div>\n          )}\n          \n          {hint && (\n            <p className=\"text-xs text-muted-foreground\">\n              {hint}\n            </p>\n          )}\n\n          {details && details.length > 0 && (\n            <div className=\"mt-3 pt-3 border-t border-border/50 space-y-1\">\n              {details.map((detail, idx) => (\n                <div key={idx} className=\"flex items-center justify-between text-xs\">\n                  <span className=\"text-muted-foreground\">{detail.label}</span>\n                  <span className=\"font-medium text-foreground\">{detail.value}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/ui/badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }",
  "src/components/ui/button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline: \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }",
  "src/components/ui/card.tsx": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }",
  "src/components/ui/dropdown-menu.tsx": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}",
  "src/components/ui/empty-state.tsx": "import React from 'react'\nimport { type LucideIcon } from 'lucide-react'\nimport { Card, CardContent } from './card'\nimport { Button } from './button'\n\ninterface EmptyStateProps {\n  icon: LucideIcon\n  title: string\n  description: string\n  action?: {\n    label: string\n    onClick: () => void\n  }\n  className?: string\n}\n\nexport const EmptyState: React.FC<EmptyStateProps> = ({\n  icon: Icon,\n  title,\n  description,\n  action,\n  className\n}) => {\n  return (\n    <Card className={className}>\n      <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <div className=\"mb-4 p-3 rounded-full bg-muted\">\n          <Icon className=\"h-8 w-8 text-muted-foreground\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n          {title}\n        </h3>\n        <p className=\"text-sm text-muted-foreground mb-6 max-w-sm\">\n          {description}\n        </p>\n        {action && (\n          <Button onClick={action.onClick}>\n            {action.label}\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/ui/error-state.tsx": "import React from 'react'\nimport { AlertCircle, RefreshCw } from 'lucide-react'\nimport { Card, CardContent } from './card'\nimport { Button } from './button'\n\ninterface ErrorStateProps {\n  title?: string\n  message: string\n  onRetry?: () => void\n  className?: string\n}\n\nexport const ErrorState: React.FC<ErrorStateProps> = ({\n  title = 'エラーが発生しました',\n  message,\n  onRetry,\n  className\n}) => {\n  return (\n    <Card className={className}>\n      <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <div className=\"mb-4 p-3 rounded-full bg-destructive/10\">\n          <AlertCircle className=\"h-8 w-8 text-destructive\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n          {title}\n        </h3>\n        <p className=\"text-sm text-muted-foreground mb-6 max-w-sm\">\n          {message}\n        </p>\n        {onRetry && (\n          <Button onClick={onRetry} variant=\"outline\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            再試行\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  )\n}",
  "src/components/ui/progress.tsx": "import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }",
  "src/components/ui/skeleton.tsx": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }",
  "src/components/ui/tabs.tsx": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }",
  "src/contexts/AdminDataContext.tsx": "import React, { createContext, useContext, useEffect, useMemo, useState, useCallback } from 'react'\nimport { type Store, type TargetData } from '@/types'\nimport { type Vendor, type StoreVendorAssignment } from '@/types'\nimport { useAuth } from './AuthContext'\nimport {\n  getStores,\n  createStore as createStoreDb,\n  updateStore as updateStoreDb,\n  deleteStore as deleteStoreDb,\n  getVendors,\n  createVendor as createVendorDb,\n  updateVendor as updateVendorDb,\n  deleteVendor as deleteVendorDb,\n  getAllStoreVendorAssignments,\n  getStoreVendors as getStoreVendorsDb,\n  assignVendorToStore as assignVendorToStoreDb,\n  removeVendorFromStore as removeVendorFromStoreDb,\n  getTargets,\n  upsertTarget as upsertTargetDb,\n  deleteTarget as deleteTargetDb\n} from '../services/supabase'\n\n// UUID validation utility\nconst isValidUUID = (str: string): boolean => {\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n  return uuidRegex.test(str)\n}\n\ntype StoreInput = {\n  name: string\n  address: string\n  managerId?: string | null\n  managerName?: string | null\n  manager?: string | null\n  isActive?: boolean\n}\n\ntype AdminCtx = {\n  stores: Store[]\n  targets: TargetData[]\n  vendors: Vendor[]\n  storeVendorAssignments: StoreVendorAssignment[]\n  addStore: (input: StoreInput) => Promise<{ ok: boolean; error?: string }>\n  updateStore: (id: string, patch: Partial<Store>) => void\n  deleteStore: (id: string) => void\n  upsertTarget: (t: TargetData) => void\n  deleteTarget: (storeId: string, period: string) => void\n  addVendor: (vendor: Omit<Vendor, 'id'>) => void\n  updateVendor: (id: string, patch: Partial<Vendor>) => void\n  deleteVendor: (id: string) => void\n  getStoreVendors: (storeId: string) => Vendor[]\n  assignVendorToStore: (storeId: string, vendorId: string) => void\n  unassignVendorFromStore: (storeId: string, vendorId: string) => void\n}\n\nconst AdminDataContext = createContext<AdminCtx | null>(null)\n\nexport const AdminDataProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {\n  const [stores, setStores] = useState<Store[]>([])\n  const [targets, setTargets] = useState<TargetData[]>([])\n  const [vendors, setVendors] = useState<Vendor[]>([])\n  const [storeVendorAssignments, setStoreVendorAssignments] = useState<StoreVendorAssignment[]>([])\n  const [loading, setLoading] = useState(true)\n  const { user } = useAuth()\n\n  // Supabaseからデータを取得\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!user) return\n\n      try {\n        setLoading(true)\n\n        // 並行してデータを取得\n        const [storesResult, vendorsResult, targetsResult, assignmentsResult] = await Promise.all([\n          getStores(),\n          getVendors(),\n          getTargets(),\n          getAllStoreVendorAssignments()\n        ])\n\n        // Stores\n        if (!storesResult.error && storesResult.data) {\n          const transformedStores: Store[] = storesResult.data.map(store => ({\n            id: store.id,\n            name: store.name,\n            address: store.address,\n            manager: store.manager_id || '',\n            isActive: store.is_active ?? true\n          }))\n          setStores(transformedStores)\n        }\n\n        // Vendors\n        if (!vendorsResult.error && vendorsResult.data) {\n          const transformedVendors: Vendor[] = vendorsResult.data.map(vendor => ({\n            id: vendor.id,\n            name: vendor.name,\n            category: vendor.category,\n            contactInfo: vendor.contact_info,\n            isActive: vendor.is_active,\n            createdAt: vendor.created_at,\n            updatedAt: vendor.updated_at\n          }))\n          setVendors(transformedVendors)\n        }\n\n        // Targets\n        if (!targetsResult.error && targetsResult.data) {\n          const transformedTargets: TargetData[] = targetsResult.data.map(target => ({\n            storeId: target.store_id,\n            period: target.period,\n            targetSales: target.target_sales,\n            targetProfit: target.target_profit,\n            targetProfitMargin: target.target_profit_margin,\n            targetCostRate: target.target_cost_rate || 0,\n            targetLaborRate: target.target_labor_rate || 0\n          }))\n          setTargets(transformedTargets)\n        }\n\n        // Store Vendor Assignments\n        if (!assignmentsResult.error && assignmentsResult.data) {\n          const transformedAssignments: StoreVendorAssignment[] = assignmentsResult.data.map((a: any) => ({\n            storeId: a.store_id,\n            vendorId: a.vendor_id,\n            displayOrder: a.display_order || 0\n          }))\n          console.log('📦 AdminDataContext: 割り当てデータ読み込み完了:', transformedAssignments)\n          setStoreVendorAssignments(transformedAssignments)\n        } else {\n          console.log('⚠️ AdminDataContext: 割り当てデータなし or エラー', assignmentsResult)\n        }\n\n      } catch (err) {\n        console.error('❌ AdminDataProvider: データ取得エラー:', err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [user])\n\n  const addStore: AdminCtx['addStore'] = async (input) => {\n    try {\n      if (!input.name?.trim()) {\n        return { ok: false, error: '店舗名は必須です' }\n      }\n      if (!input.address?.trim()) {\n        return { ok: false, error: '住所は必須です' }\n      }\n\n      const manager_id = input.managerId && isValidUUID(input.managerId)\n        ? input.managerId\n        : input.manager && isValidUUID(input.manager)\n        ? input.manager\n        : undefined\n\n      const payload = {\n        name: input.name.trim(),\n        address: input.address.trim(),\n        manager_id,\n        is_active: input.isActive ?? true\n      }\n\n      const { data, error } = await createStoreDb(payload)\n\n      if (error) {\n        return { ok: false, error: error.message }\n      }\n\n      if (data) {\n        const newStore: Store = {\n          id: data.id,\n          name: data.name,\n          address: data.address,\n          manager: data.manager_id || '',\n          isActive: data.is_active ?? true\n        }\n        setStores(prev => [...prev, newStore])\n      }\n\n      return { ok: true }\n    } catch (e: any) {\n      console.error('❌ 店舗作成エラー:', e)\n      return { ok: false, error: e?.message ?? '店舗作成に失敗しました' }\n    }\n  }\n\n  const updateStore: AdminCtx['updateStore'] = async (id, patch) => {\n    try {\n      // Validate manager_id - only set if it's a valid UUID, otherwise undefined  \n      const managerId = patch.manager && isValidUUID(patch.manager) ? patch.manager : undefined\n      \n      const updateData = {\n        name: patch.name,\n        address: patch.address,\n        manager_id: managerId,\n        is_active: patch.isActive\n      }\n      \n      const { data, error } = await updateStoreDb(id, updateData)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      setStores(prev => prev.map(s => s.id === id ? { ...s, ...patch } : s))\n    } catch (err) {\n      console.error('❌ 店舗更新エラー:', err)\n      throw err\n    }\n  }\n\n  const deleteStore: AdminCtx['deleteStore'] = async (id) => {\n    try {\n      const { error } = await deleteStoreDb(id)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      setStores(prev => prev.map(s => s.id === id ? { ...s, isActive: false } : s))\n    } catch (err) {\n      console.error('❌ 店舗削除エラー:', err)\n      throw err\n    }\n  }\n\n  const upsertTarget: AdminCtx['upsertTarget'] = async (t) => {\n    try {\n      const targetData = {\n        store_id: t.storeId,\n        period: t.period,\n        target_sales: t.targetSales,\n        target_profit: t.targetProfit,\n        target_profit_margin: t.targetProfitMargin,\n        target_cost_rate: t.targetCostRate || 0,\n        target_labor_rate: t.targetLaborRate || 0\n      }\n\n      console.log('📊 AdminDataContext: 目標保存開始', targetData)\n\n      const { data, error } = await upsertTargetDb(targetData)\n\n      console.log('📊 AdminDataContext: 保存結果', { data, error })\n\n      if (error) {\n        console.error('❌ AdminDataContext: Supabaseエラー:', error)\n        throw new Error(error.message)\n      }\n\n      setTargets(prev => {\n        const idx = prev.findIndex(x => x.storeId === t.storeId && x.period === t.period)\n        if (idx >= 0) {\n          const copy = [...prev]\n          copy[idx] = t\n          return copy\n        }\n        return [...prev, t]\n      })\n\n      console.log('✅ AdminDataContext: 目標保存成功')\n    } catch (err) {\n      console.error('❌ 目標保存エラー:', err)\n      throw err\n    }\n  }\n\n  const deleteTarget: AdminCtx['deleteTarget'] = async (storeId, period) => {\n    try {\n      const { error } = await deleteTargetDb(storeId, period)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      setTargets(prev => prev.filter(t => !(t.storeId === storeId && t.period === period)))\n    } catch (err) {\n      console.error('❌ 目標削除エラー:', err)\n      throw err\n    }\n  }\n\n  const addVendor: AdminCtx['addVendor'] = async (vendor) => {\n    try {\n      console.log('🔍 addVendor: 業者作成開始:', vendor)\n\n      if (!user?.id) {\n        throw new Error('ユーザーがログインしていません')\n      }\n\n      // Convert camelCase to snake_case for database\n      const vendorData = {\n        name: vendor.name,\n        category: vendor.category,\n        contact_info: vendor.contactInfo || '',\n        is_active: vendor.isActive,\n        user_id: user.id\n      }\n\n      console.log('🔍 addVendor: データベース用に変換:', vendorData)\n\n      const result = await createVendorDb(vendorData)\n\n      if (result.data) {\n        console.log('✅ addVendor: 業者作成成功:', result.data)\n        const newVendor: Vendor = {\n          id: result.data.id,\n          name: result.data.name,\n          category: result.data.category,\n          contactInfo: result.data.contact_info,\n          isActive: result.data.is_active,\n          createdAt: result.data.created_at,\n          updatedAt: result.data.updated_at\n        }\n        setVendors(prev => [...prev, newVendor])\n      } else if (result.error) {\n        console.error('❌ addVendor: エラー:', result.error)\n        throw new Error(result.error.message || '業者の作成に失敗しました')\n      }\n    } catch (err) {\n      console.error('❌ 業者作成エラー:', err)\n      throw err\n    }\n  }\n\n  const updateVendor: AdminCtx['updateVendor'] = async (id, patch) => {\n    try {\n      console.log('🔍 updateVendor: 業者更新開始:', { id, patch })\n      \n      const updateData = {\n        name: patch.name,\n        category: patch.category,\n        contact_info: patch.contactInfo,\n        is_active: patch.isActive\n      }\n      \n      const result = await updateVendorDb(id, updateData)\n      \n      if (result.error) {\n        console.error('❌ updateVendor: エラー:', result.error)\n        throw new Error(result.error.message || '業者の更新に失敗しました')\n      } else {\n        console.log('✅ updateVendor: 業者更新成功')\n      }\n      \n      setVendors(prev => prev.map(v => v.id === id ? { \n        ...v, \n        ...patch, \n        updatedAt: new Date().toISOString() \n      } : v))\n    } catch (err) {\n      console.error('❌ 業者更新エラー:', err)\n      throw err\n    }\n  }\n\n  const deleteVendor: AdminCtx['deleteVendor'] = async (id) => {\n    try {\n      console.log('🔍 deleteVendor: 業者削除開始:', id)\n      \n      const result = await deleteVendorDb(id)\n      \n      if (result.error) {\n        console.error('❌ deleteVendor: エラー:', result.error)\n        throw new Error(result.error.message || '業者の削除に失敗しました')\n      } else {\n        console.log('✅ deleteVendor: 業者削除成功')\n      }\n      \n      setVendors(prev => prev.map(v => v.id === id ? { ...v, isActive: false } : v))\n    } catch (err) {\n      console.error('❌ 業者削除エラー:', err)\n      throw err\n    }\n  }\n\n  const getStoreVendors = useCallback<AdminCtx['getStoreVendors']>((storeId) => {\n    // 'all'や空の場合は空配列を返す\n    if (!storeId || storeId === 'all') {\n      console.log('🔍 getStoreVendors: storeId が \"all\" または空のため空配列を返します')\n      return []\n    }\n\n    // 文字列化して比較（UUID / 'store-toyosu' などの形式の違いに対応）\n    const sid = String(storeId)\n\n    console.log('🔍 getStoreVendors called:', {\n      requestedStoreId: sid,\n      totalAssignments: storeVendorAssignments.length,\n      totalVendors: vendors.length,\n      allStoreIds: [...new Set(storeVendorAssignments.map(a => a.storeId))]\n    })\n\n    const assignedVendorIds = storeVendorAssignments\n      .filter(a => {\n        const matches = String(a.storeId) === sid\n        if (!matches && storeVendorAssignments.length > 0) {\n          console.log('🔍 No match:', { assignmentStoreId: a.storeId, requestedStoreId: sid })\n        }\n        return matches\n      })\n      .sort((a, b) => (a.displayOrder ?? 0) - (b.displayOrder ?? 0))\n      .map(a => a.vendorId)\n\n    console.log('🔍 Assigned vendor IDs for store:', assignedVendorIds)\n\n    const result = assignedVendorIds\n      .map(vendorId => vendors.find(v => v.id === vendorId))\n      .filter((v): v is Vendor => !!v && v.isActive)\n\n    console.log('🔍 Final vendors:', result)\n    return result\n  }, [storeVendorAssignments, vendors])\n\n  const assignVendorToStore: AdminCtx['assignVendorToStore'] = async (storeId, vendorId) => {\n    try {\n      console.log('🔧 assignVendorToStore:', { storeId, vendorId })\n\n      const maxOrder = Math.max(\n        0,\n        ...storeVendorAssignments.filter(a => a.storeId === storeId).map(a => a.displayOrder)\n      )\n\n      const { data, error } = await assignVendorToStoreDb(storeId, vendorId, maxOrder + 1)\n\n      if (error) {\n        console.error('❌ assignVendorToStoreDb error:', error)\n        throw new Error(error.message)\n      }\n\n      console.log('✅ assignVendorToStoreDb success, updating state')\n\n      const newAssignment = {\n        storeId,\n        vendorId,\n        displayOrder: maxOrder + 1\n      }\n\n      setStoreVendorAssignments(prev => {\n        const updated = [...prev, newAssignment]\n        console.log('📦 Updated storeVendorAssignments:', updated)\n        return updated\n      })\n    } catch (err) {\n      console.error('❌ 業者割り当てエラー:', err)\n      throw err\n    }\n  }\n\n  const unassignVendorFromStore: AdminCtx['unassignVendorFromStore'] = async (storeId, vendorId) => {\n    try {\n      const { error } = await removeVendorFromStoreDb(storeId, vendorId)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      setStoreVendorAssignments(prev => prev.filter(a => !(a.storeId === storeId && a.vendorId === vendorId)))\n    } catch (err) {\n      console.error('❌ 業者割り当て解除エラー:', err)\n      throw err\n    }\n  }\n\n  const value = useMemo<AdminCtx>(() => ({\n    stores, targets, vendors, storeVendorAssignments,\n    addStore, updateStore, deleteStore, upsertTarget, deleteTarget,\n    addVendor, updateVendor, deleteVendor, getStoreVendors,\n    assignVendorToStore, unassignVendorFromStore\n  }), [stores, targets, vendors, storeVendorAssignments])\n\n  return <AdminDataContext.Provider value={value}>{children}</AdminDataContext.Provider>\n}\n\nexport const useAdminData = () => {\n  const ctx = useContext(AdminDataContext)\n  if (!ctx) throw new Error('useAdminData must be used within AdminDataProvider')\n  return ctx\n}",
  "src/contexts/AuthContext.tsx": "import React, { createContext, useContext, useEffect, useMemo, useRef, useState, useCallback } from 'react'\nimport { supabase, isSupabaseReady } from '@/lib/supabase'\nimport type { User as SbUser } from '@supabase/supabase-js'\n\ntype Role = 'staff' | 'manager' | 'admin'\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: Role;\n  storeIds?: string[];\n  assignedStores?: {id:string;name:string}[];\n  organizationId?: string;\n}\n\ntype Ctx = {\n  user: User | null\n  loading: boolean\n  isInitialized: boolean\n  isAuthenticated: boolean\n  isSupabaseMode: boolean\n  signIn: (email: string, password: string) => Promise<{ data: any; error: null | { message: string } }>\n  signUp: (email: string, password: string, name: string, role: Role, organizationName?: string) => Promise<{ data: any; error: null | { message: string } }>\n  signOut: () => Promise<{ error: unknown | null }>\n  hasPermission: (role: Role) => boolean\n  canAccessStore: (storeId: string) => boolean\n  getAccessibleStores: () => Array<{ id: string; name: string }>\n  allStores: Array<{ id: string; name: string }>\n}\n\nconst AuthContext = createContext<Ctx | null>(null)\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [allStores, setAllStores] = useState<Array<{ id: string; name: string }>>([])\n\n  const initOnceRef = useRef(false)\n  const subscribedRef = useRef(false)\n\n  const composeUser = useCallback(async (sbUser: SbUser): Promise<User> => {\n    let name = sbUser.email?.split('@')[0] ?? 'user'\n    let role: Role = 'staff'\n    let assigned: { id: string; name: string }[] = []\n    let organizationId: string | undefined = undefined\n\n    console.log('🔍 Fetching profile for user:', sbUser.id)\n\n    // ✅ タイムアウト付きでプロファイル取得\n    try {\n      const profilePromise = supabase.from('profiles').select('*').eq('id', sbUser.id).maybeSingle()\n      const timeoutPromise = new Promise<{ data: null; error: any }>((resolve) =>\n        setTimeout(() => resolve({ data: null, error: { message: 'Profile fetch timeout' } }), 5000)\n      )\n\n      const { data: profile, error } = await Promise.race([profilePromise, timeoutPromise])\n\n      if (error) {\n        console.error('❌ Profile fetch error:', error)\n      } else if (profile) {\n        console.log('✅ Profile found:', { name: profile.name, role: profile.role })\n        if (profile?.name) name = profile.name\n        if (profile?.role) role = profile.role as Role\n        if (profile?.organization_id) organizationId = profile.organization_id\n      } else {\n        console.warn('⚠️ No profile found, using defaults')\n      }\n    } catch (e) {\n      console.error('💥 Profile fetch exception:', e)\n    }\n\n    // ✅ 組織IDが取得できていない場合のみフェッチ\n    if (!organizationId) {\n      try {\n        const orgPromise = supabase\n          .from('organization_members')\n          .select('organization_id')\n          .eq('user_id', sbUser.id)\n          .maybeSingle()\n        const orgTimeout = new Promise<{ data: null }>((resolve) =>\n          setTimeout(() => resolve({ data: null }), 3000)\n        )\n        const { data: memberData } = await Promise.race([orgPromise, orgTimeout])\n        if (memberData?.organization_id) {\n          organizationId = memberData.organization_id\n        }\n      } catch (e) {\n        console.error('Failed to fetch organization membership:', e)\n      }\n    }\n\n    // ✅ ストア割り当て取得（タイムアウト付き）\n    try {\n      const assignPromise = supabase\n        .from('store_assignments')\n        .select('store_id, stores!inner(id, name)')\n        .eq('user_id', sbUser.id)\n      const assignTimeout = new Promise<{ data: null }>((resolve) =>\n        setTimeout(() => resolve({ data: null }), 3000)\n      )\n      const { data: assigns } = await Promise.race([assignPromise, assignTimeout])\n      assigned = (assigns ?? []).map((a: any) => ({ id: a.stores.id, name: a.stores.name }))\n    } catch (e) {\n      console.error('Failed to fetch store assignments:', e)\n    }\n\n    console.log('Composed user:', { id: sbUser.id, email: sbUser.email, role, name, organizationId })\n\n    return {\n      id: sbUser.id,\n      name,\n      email: sbUser.email ?? '',\n      role,\n      storeIds: assigned.map(s => s.id),\n      assignedStores: assigned,\n      organizationId,\n    }\n  }, [])\n\n  useEffect(() => {\n    if (initOnceRef.current) return\n    initOnceRef.current = true\n\n    const init = async () => {\n      if (!isSupabaseReady()) {\n        setIsInitialized(true)\n        return\n      }\n      try {\n        const sessionPromise = supabase.auth.getSession()\n        const timeout = new Promise<{data:{session:null}}>(res => setTimeout(() => res({data:{session:null}}), 3000))\n        const { data: { session } } = await Promise.race([sessionPromise, timeout]) as any\n        if (session?.user) {\n          setUser(await composeUser(session.user))\n        }\n\n        const { data: stores } = await supabase.from('stores').select('id, name').eq('is_active', true).order('name')\n        if (stores) {\n          setAllStores(stores)\n        }\n      } finally {\n        setIsInitialized(true)\n      }\n    }\n    init()\n  }, [composeUser])\n\n  useEffect(() => {\n    if (subscribedRef.current) return\n    subscribedRef.current = true\n\n    // ✅ CRITICAL: コールバックはasyncにせず、内部でasyncブロックを実行\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      console.log('🔐 onAuthStateChange:', event)\n\n      if ((event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') && session?.user) {\n        // ✅ 非同期処理は即座実行関数で囲む（デッドロック防止）\n        (async () => {\n          try {\n            const composedUser = await composeUser(session.user)\n            setUser(composedUser)\n          } catch (err) {\n            console.error('❌ Failed to compose user:', err)\n            setUser(null)\n          }\n        })()\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null)\n      }\n    })\n    return () => subscription.unsubscribe()\n  }, [composeUser])\n\n  const signIn = useCallback(async (email: string, password: string) => {\n    if (!isSupabaseReady()) return { data: null, error: { message: 'Supabase not configured' } }\n    setLoading(true)\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({ email, password })\n      if (error) return { data: null, error: { message: error.message } }\n      const u = await composeUser(data.user)\n      setUser(u)\n      return { data: u, error: null }\n    } finally {\n      setLoading(false)\n    }\n  }, [composeUser])\n\n  const signUp = useCallback(async (email: string, password: string, name: string, role: Role = 'staff', organizationName?: string) => {\n    if (!isSupabaseReady()) return { data: null, error: { message: 'Supabase not configured' } }\n    setLoading(true)\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            name,\n            role,\n            organizationName: organizationName || `${name}の組織`\n          }\n        }\n      })\n      if (error) return { data: null, error: { message: error.message } }\n      return { data, error: null }\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  const signOut = useCallback(async () => {\n    const { error } = await supabase.auth.signOut()\n    setUser(null)\n    return { error }\n  }, [])\n\n  const hasPermission = useCallback((req: Role) => {\n    if (!user) return false\n    const levels = { staff: 1, manager: 2, admin: 3 }\n    return levels[user.role] >= levels[req]\n  }, [user])\n\n  const canAccessStore = useCallback((storeId: string) => {\n    if (!user) return false\n    return user.role === 'admin' || user.storeIds?.includes(storeId) === true\n  }, [user])\n\n  const getAccessibleStores = useCallback(() => {\n    return user?.role === 'admin' ? allStores : (user?.assignedStores ?? [])\n  }, [user, allStores])\n\n  const value = useMemo<Ctx>(() => ({\n    user,\n    loading,\n    isInitialized,\n    isAuthenticated: !!user,\n    isSupabaseMode: isSupabaseReady(),\n    signIn, signUp, signOut,\n    hasPermission,\n    canAccessStore,\n    getAccessibleStores,\n    allStores,\n  }), [user, loading, isInitialized, allStores, signIn, signUp, signOut, hasPermission, canAccessStore, getAccessibleStores])\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n\nexport const useAuth = () => {\n  const c = useContext(AuthContext)\n  if (!c) throw new Error('useAuth must be used within AuthProvider')\n  return c\n}\n",
  "src/contexts/OrganizationContext.tsx": "import React, { createContext, useContext, useEffect, useState, useMemo, useCallback } from 'react'\nimport { supabase, isSupabaseReady } from '@/lib/supabase'\nimport type { Organization, OrganizationMember } from '@/types'\n\ninterface OrganizationContextType {\n  organization: Organization | null\n  organizationRole: 'owner' | 'admin' | 'member' | null\n  loading: boolean\n  isInitialized: boolean\n  refreshOrganization: () => Promise<void>\n  isOwner: boolean\n  isAdmin: boolean\n  canManageOrganization: boolean\n  withinLimits: {\n    stores: boolean\n    users: boolean\n    aiRequests: boolean\n  }\n  currentUsage: {\n    stores: number\n    users: number\n    aiRequestsThisMonth: number\n  }\n}\n\nconst OrganizationContext = createContext<OrganizationContextType | null>(null)\n\nexport const OrganizationProvider: React.FC<{ children: React.ReactNode; userId: string | null }> = ({\n  children,\n  userId\n}) => {\n  const [organization, setOrganization] = useState<Organization | null>(null)\n  const [organizationRole, setOrganizationRole] = useState<'owner' | 'admin' | 'member' | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [currentUsage, setCurrentUsage] = useState({\n    stores: 0,\n    users: 0,\n    aiRequestsThisMonth: 0\n  })\n\n  const fetchOrganization = useCallback(async () => {\n    if (!userId || !isSupabaseReady()) {\n      setLoading(false)\n      setIsInitialized(true)\n      return\n    }\n\n    try {\n      setLoading(true)\n\n      const { data: memberData, error: memberError } = await supabase\n        .from('organization_members')\n        .select('organization_id, role')\n        .eq('user_id', userId)\n        .maybeSingle()\n\n      if (memberError) {\n        console.error('Failed to fetch organization membership:', memberError)\n        return\n      }\n\n      if (!memberData) {\n        console.log('User is not a member of any organization')\n        setOrganization(null)\n        setOrganizationRole(null)\n        return\n      }\n\n      setOrganizationRole(memberData.role)\n\n      const { data: orgData, error: orgError } = await supabase\n        .from('organizations')\n        .select('*')\n        .eq('id', memberData.organization_id)\n        .single()\n\n      if (orgError) {\n        console.error('Failed to fetch organization:', orgError)\n        return\n      }\n\n      setOrganization({\n        id: orgData.id,\n        name: orgData.name,\n        slug: orgData.slug,\n        email: orgData.email,\n        phone: orgData.phone,\n        subscriptionStatus: orgData.subscription_status,\n        subscriptionPlan: orgData.subscription_plan,\n        trialEndsAt: orgData.trial_ends_at,\n        maxStores: orgData.max_stores,\n        maxUsers: orgData.max_users,\n        maxAiRequestsPerMonth: orgData.max_ai_requests_per_month,\n        settings: orgData.settings,\n        createdAt: orgData.created_at,\n        updatedAt: orgData.updated_at\n      })\n\n      const { count: storesCount } = await supabase\n        .from('stores')\n        .select('*', { count: 'exact', head: true })\n        .eq('organization_id', memberData.organization_id)\n\n      const { count: usersCount } = await supabase\n        .from('organization_members')\n        .select('*', { count: 'exact', head: true })\n        .eq('organization_id', memberData.organization_id)\n\n      const startOfMonth = new Date()\n      startOfMonth.setDate(1)\n      startOfMonth.setHours(0, 0, 0, 0)\n\n      const { count: aiRequestsCount } = await supabase\n        .from('ai_usage_tracking')\n        .select('*', { count: 'exact', head: true })\n        .eq('organization_id', memberData.organization_id)\n        .gte('created_at', startOfMonth.toISOString())\n\n      setCurrentUsage({\n        stores: storesCount || 0,\n        users: usersCount || 0,\n        aiRequestsThisMonth: aiRequestsCount || 0\n      })\n\n    } catch (error) {\n      console.error('Error fetching organization:', error)\n    } finally {\n      setLoading(false)\n      setIsInitialized(true)\n    }\n  }, [userId])\n\n  useEffect(() => {\n    fetchOrganization()\n  }, [fetchOrganization])\n\n  const isOwner = organizationRole === 'owner'\n  const isAdmin = organizationRole === 'admin' || organizationRole === 'owner'\n  const canManageOrganization = isAdmin\n\n  const withinLimits = useMemo(() => ({\n    stores: !organization || currentUsage.stores < organization.maxStores,\n    users: !organization || currentUsage.users < organization.maxUsers,\n    aiRequests: !organization || currentUsage.aiRequestsThisMonth < organization.maxAiRequestsPerMonth\n  }), [organization, currentUsage])\n\n  const value = useMemo<OrganizationContextType>(() => ({\n    organization,\n    organizationRole,\n    loading,\n    isInitialized,\n    refreshOrganization: fetchOrganization,\n    isOwner,\n    isAdmin,\n    canManageOrganization,\n    withinLimits,\n    currentUsage\n  }), [\n    organization,\n    organizationRole,\n    loading,\n    isInitialized,\n    fetchOrganization,\n    isOwner,\n    isAdmin,\n    canManageOrganization,\n    withinLimits,\n    currentUsage\n  ])\n\n  return (\n    <OrganizationContext.Provider value={value}>\n      {children}\n    </OrganizationContext.Provider>\n  )\n}\n\nexport const useOrganization = () => {\n  const context = useContext(OrganizationContext)\n  if (!context) {\n    throw new Error('useOrganization must be used within OrganizationProvider')\n  }\n  return context\n}\n",
  "src/contexts/StoreContext.tsx": "import React, { createContext, useContext, useState } from 'react'\n\ntype StoreContextType = { \n  storeId: string\n  setStoreId: (storeId: string) => void \n}\n\nconst StoreContext = createContext<StoreContextType | null>(null)\n\nexport const StoreProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [storeId, setStoreId] = useState<string>('all')\n  \n  return (\n    <StoreContext.Provider value={{ storeId, setStoreId }}>\n      {children}\n    </StoreContext.Provider>\n  )\n}\n\nexport const useStore = () => {\n  const ctx = useContext(StoreContext)\n  if (!ctx) {\n    throw new Error('useStore must be used within StoreProvider')\n  }\n  return ctx\n}",
  "src/hooks/useAIReports.ts": "import { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nexport interface AIReport {\n  id: string;\n  store_id: string | null;\n  report_type: 'weekly' | 'monthly';\n  period_start: string;\n  period_end: string;\n  title: string;\n  summary: string;\n  analysis_content: {\n    salesTrend?: string;\n    profitability?: string;\n    costStructure?: string;\n    storeComparison?: string;\n  };\n  key_insights: string[];\n  recommendations: string[];\n  metrics: {\n    totalSales: number;\n    totalExpenses: number;\n    grossProfit: number;\n    operatingProfit: number;\n    profitMargin: number;\n    costRate: number;\n    laborRate: number;\n    storeBreakdown?: Array<{\n      storeId: string;\n      storeName: string;\n      sales: number;\n      expenses: number;\n      profit: number;\n      profitMargin: number;\n      costRate: number;\n      laborRate: number;\n    }>;\n  };\n  generated_by: string;\n  generated_at: string;\n  created_at: string;\n}\n\nexport interface ReportSchedule {\n  id: string;\n  report_type: 'weekly' | 'monthly';\n  store_id: string | null;\n  is_enabled: boolean;\n  cron_expression: string;\n  last_run_at: string | null;\n  next_run_at: string | null;\n  notification_emails: string[];\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ReportGenerationLog {\n  id: string;\n  schedule_id: string | null;\n  report_id: string | null;\n  report_type: 'weekly' | 'monthly';\n  store_id: string | null;\n  status: 'success' | 'failed' | 'in_progress';\n  started_at: string;\n  completed_at: string | null;\n  error_message: string | null;\n  data_summary: {\n    reportCount?: number;\n    storeCount?: number;\n  };\n  created_at: string;\n}\n\nexport function useAIReports(storeId?: string) {\n  const [reports, setReports] = useState<AIReport[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchReports = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      let query = supabase\n        .from('ai_generated_reports')\n        .select('*')\n        .order('generated_at', { ascending: false });\n\n      if (storeId) {\n        query = query.eq('store_id', storeId);\n      }\n\n      const { data, error: fetchError } = await query;\n\n      if (fetchError) throw fetchError;\n\n      setReports(data || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch reports');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteReport = async (reportId: string) => {\n    try {\n      const { error: deleteError } = await supabase\n        .from('ai_generated_reports')\n        .delete()\n        .eq('id', reportId);\n\n      if (deleteError) throw deleteError;\n\n      await fetchReports();\n      return { error: null };\n    } catch (err) {\n      return { error: err instanceof Error ? err.message : 'Failed to delete report' };\n    }\n  };\n\n  useEffect(() => {\n    fetchReports();\n  }, [storeId]);\n\n  return { reports, loading, error, refetch: fetchReports, deleteReport };\n}\n\nexport function useReportSchedules() {\n  const [schedules, setSchedules] = useState<ReportSchedule[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchSchedules = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const { data, error: fetchError } = await supabase\n        .from('report_schedules')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (fetchError) throw fetchError;\n\n      setSchedules(data || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch schedules');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createSchedule = async (schedule: Omit<ReportSchedule, 'id' | 'created_at' | 'updated_at' | 'last_run_at' | 'next_run_at'>) => {\n    try {\n      const { data, error: insertError } = await supabase\n        .from('report_schedules')\n        .insert(schedule)\n        .select()\n        .single();\n\n      if (insertError) throw insertError;\n\n      await fetchSchedules();\n      return { data, error: null };\n    } catch (err) {\n      return { data: null, error: err instanceof Error ? err.message : 'Failed to create schedule' };\n    }\n  };\n\n  const updateSchedule = async (id: string, updates: Partial<ReportSchedule>) => {\n    try {\n      const { data, error: updateError } = await supabase\n        .from('report_schedules')\n        .update({ ...updates, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (updateError) throw updateError;\n\n      await fetchSchedules();\n      return { data, error: null };\n    } catch (err) {\n      return { data: null, error: err instanceof Error ? err.message : 'Failed to update schedule' };\n    }\n  };\n\n  const deleteSchedule = async (id: string) => {\n    try {\n      const { error: deleteError } = await supabase\n        .from('report_schedules')\n        .delete()\n        .eq('id', id);\n\n      if (deleteError) throw deleteError;\n\n      await fetchSchedules();\n      return { error: null };\n    } catch (err) {\n      return { error: err instanceof Error ? err.message : 'Failed to delete schedule' };\n    }\n  };\n\n  useEffect(() => {\n    fetchSchedules();\n  }, []);\n\n  return {\n    schedules,\n    loading,\n    error,\n    refetch: fetchSchedules,\n    createSchedule,\n    updateSchedule,\n    deleteSchedule,\n  };\n}\n\nexport function useReportGenerationLogs() {\n  const [logs, setLogs] = useState<ReportGenerationLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchLogs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const { data, error: fetchError } = await supabase\n        .from('report_generation_logs')\n        .select('*')\n        .order('started_at', { ascending: false })\n        .limit(50);\n\n      if (fetchError) throw fetchError;\n\n      setLogs(data || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch logs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchLogs();\n  }, []);\n\n  return { logs, loading, error, refetch: fetchLogs };\n}\n\nexport async function generateReport(\n  reportType: 'weekly' | 'monthly',\n  storeId?: string,\n  periodStart?: string,\n  periodEnd?: string\n) {\n  try {\n    const { data: { session } } = await supabase.auth.getSession();\n\n    if (!session) {\n      throw new Error('Not authenticated');\n    }\n\n    const url = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/generate-ai-report`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${session.access_token}`,\n      },\n      body: JSON.stringify({\n        reportType,\n        storeId: storeId || null,\n        periodStart: periodStart || null,\n        periodEnd: periodEnd || null,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to generate report');\n    }\n\n    const result = await response.json();\n    return { data: result.report, error: null };\n  } catch (err) {\n    return { data: null, error: err instanceof Error ? err.message : 'Failed to generate report' };\n  }\n}\n",
  "src/hooks/useAIUsageLimit.ts": "import { useState, useEffect, useCallback } from 'react'\nimport { supabase } from '@/lib/supabase'\n\nexport interface AIUsageStatus {\n  currentCount: number\n  dailyLimit: number\n  remaining: number\n  resetAt: string\n  isLimited: boolean\n}\n\nexport interface AIUsageLimitResult {\n  status: AIUsageStatus | null\n  loading: boolean\n  error: string | null\n  refresh: () => Promise<void>\n}\n\nexport function useAIUsageLimit(userId: string | undefined): AIUsageLimitResult {\n  const [status, setStatus] = useState<AIUsageStatus | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchUsageStatus = useCallback(async () => {\n    if (!userId || !supabase) {\n      setStatus(null)\n      setLoading(false)\n      return\n    }\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const { data, error: rpcError } = await supabase.rpc('get_user_usage_status', {\n        p_user_id: userId\n      })\n\n      if (rpcError) {\n        console.error('Failed to fetch usage status:', rpcError)\n        setError(rpcError.message)\n        setStatus(null)\n      } else if (data) {\n        setStatus({\n          currentCount: data.current_count ?? 0,\n          dailyLimit: data.daily_limit ?? 5,\n          remaining: data.remaining ?? 0,\n          resetAt: data.reset_at ?? new Date().toISOString(),\n          isLimited: data.is_limited ?? false\n        })\n      }\n    } catch (err) {\n      console.error('Error fetching usage status:', err)\n      setError(err instanceof Error ? err.message : 'Unknown error')\n      setStatus(null)\n    } finally {\n      setLoading(false)\n    }\n  }, [userId])\n\n  const refresh = useCallback(async () => {\n    await fetchUsageStatus()\n  }, [fetchUsageStatus])\n\n  useEffect(() => {\n    fetchUsageStatus()\n\n    if (!userId || !supabase) return\n\n    const channel = supabase\n      .channel('ai-usage-changes')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'ai_usage_tracking',\n          filter: `user_id=eq.${userId}`\n        },\n        () => {\n          fetchUsageStatus()\n        }\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [userId, fetchUsageStatus])\n\n  return {\n    status,\n    loading,\n    error,\n    refresh\n  }\n}\n",
  "src/hooks/useChatArchive.ts": "import { useEffect, useState, useCallback } from 'react'\nimport {\n  createConversation,\n  listConversations,\n  fetchMessages,\n  addMessage,\n  updateConversation,\n  searchConversations,\n  deleteConversation,\n  type Message,\n  type Conversation\n} from '../services/chatArchive'\n\nexport function useChatArchive(\n  userId: string,\n  initialStoreId: string = 'all',\n  initialConversationId?: string\n) {\n  const [conversationId, setConversationId] = useState<string | null>(\n    initialConversationId ?? null\n  )\n  const [messages, setMessages] = useState<Message[]>([])\n  const [conversations, setConversations] = useState<Conversation[]>([])\n  const [loading, setLoading] = useState(false)\n\n  const loadConversations = useCallback(async () => {\n    const { data } = await listConversations()\n    setConversations(data ?? [])\n  }, [])\n\n  const startNewConversation = useCallback(\n    async (storeId: string = initialStoreId, title?: string) => {\n      const { data, error } = await createConversation(userId, storeId, title)\n      if (!error && data) {\n        setConversationId(data.id)\n        localStorage.setItem('last_conv', data.id)\n        await loadConversations()\n        setMessages([])\n      }\n      return { data, error }\n    },\n    [userId, initialStoreId, loadConversations]\n  )\n\n  const loadMessages = useCallback(async (convId: string) => {\n    setLoading(true)\n    setConversationId(convId)\n    localStorage.setItem('last_conv', convId)\n    const { data } = await fetchMessages(convId)\n    setMessages(data ?? [])\n    setLoading(false)\n  }, [])\n\n  const sendUserMessage = useCallback(\n    async (content: string) => {\n      let conv = conversationId\n      if (!conv) {\n        const { data, error: convError } = await startNewConversation(initialStoreId, '新しいチャット')\n        conv = data?.id ?? null\n        if (!conv || convError) {\n          return { data: null, error: convError || { message: '会話の作成に失敗しました' } }\n        }\n      }\n\n      const { data, error } = await addMessage(conv, 'user', content)\n      if (data) {\n        setMessages(prev => [...prev, data])\n      }\n      return { data, error, conversationId: conv }\n    },\n    [conversationId, initialStoreId, startNewConversation]\n  )\n\n  const appendAssistantMessage = useCallback(\n    async (content: string, meta?: any, explicitConvId?: string) => {\n      const convId = explicitConvId || conversationId\n      if (!convId) return { data: null, error: { message: '会話が選択されていません' } }\n      const { data, error } = await addMessage(convId, 'assistant', content, meta)\n      if (data) {\n        setMessages(prev => [...prev, data])\n      }\n      return { data, error }\n    },\n    [conversationId]\n  )\n\n  const renameConversation = useCallback(\n    async (title: string) => {\n      if (!conversationId) return\n      await updateConversation(conversationId, { title })\n      await loadConversations()\n    },\n    [conversationId, loadConversations]\n  )\n\n  const archiveConversation = useCallback(\n    async (convId: string) => {\n      await updateConversation(convId, { archived: true })\n      await loadConversations()\n      if (conversationId === convId) {\n        setConversationId(null)\n        setMessages([])\n        localStorage.removeItem('last_conv')\n      }\n    },\n    [conversationId, loadConversations]\n  )\n\n  const removeConversation = useCallback(\n    async (convId: string) => {\n      await deleteConversation(convId)\n      await loadConversations()\n      if (conversationId === convId) {\n        setConversationId(null)\n        setMessages([])\n        localStorage.removeItem('last_conv')\n      }\n    },\n    [conversationId, loadConversations]\n  )\n\n  const search = useCallback(async (q: string) => {\n    if (!q.trim()) return []\n    const { data } = await searchConversations(q.trim())\n    return data ?? []\n  }, [])\n\n  useEffect(() => {\n    (async () => {\n      await loadConversations()\n      const last = initialConversationId || localStorage.getItem('last_conv')\n      if (last) {\n        await loadMessages(last)\n      } else {\n        await startNewConversation(initialStoreId, '新しいチャット')\n      }\n    })()\n  }, [])\n\n  return {\n    conversationId,\n    messages,\n    conversations,\n    loading,\n    startNewConversation,\n    loadMessages,\n    sendUserMessage,\n    appendAssistantMessage,\n    renameConversation,\n    archiveConversation,\n    removeConversation,\n    search\n  }\n}\n",
  "src/hooks/useDailyTarget.ts": "import { useState, useEffect, useCallback } from 'react'\nimport { getDailyTarget, upsertDailyTarget, deleteDailyTarget } from '@/services/supabase'\nimport { DailyTargetData } from '@/types'\n\nexport const useDailyTarget = (storeId: string | null, date: string) => {\n  const [target, setTarget] = useState<DailyTargetData | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchTarget = useCallback(async () => {\n    if (!storeId || storeId === 'all') {\n      setTarget(null)\n      return\n    }\n\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const { data, error: fetchError } = await getDailyTarget(storeId, date)\n\n      if (fetchError) {\n        console.error('日別目標の取得エラー:', fetchError)\n        setError('目標の取得に失敗しました')\n        setTarget(null)\n      } else if (data) {\n        setTarget({\n          id: data.id,\n          storeId: data.store_id,\n          date: data.date,\n          targetSales: data.target_sales,\n          createdAt: data.created_at,\n          updatedAt: data.updated_at\n        })\n      } else {\n        setTarget(null)\n      }\n    } catch (e) {\n      console.error('日別目標の取得エラー:', e)\n      setError('目標の取得に失敗しました')\n      setTarget(null)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [storeId, date])\n\n  useEffect(() => {\n    fetchTarget()\n  }, [fetchTarget])\n\n  const saveTarget = useCallback(async (targetSales: number) => {\n    if (!storeId || storeId === 'all') {\n      setError('店舗を選択してください')\n      return { success: false, error: '店舗を選択してください' }\n    }\n\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const { data, error: saveError } = await upsertDailyTarget({\n        storeId,\n        date,\n        targetSales\n      })\n\n      if (saveError) {\n        console.error('日別目標の保存エラー:', saveError)\n        setError('目標の保存に失敗しました')\n        return { success: false, error: '目標の保存に失敗しました' }\n      }\n\n      if (data) {\n        setTarget({\n          id: data.id,\n          storeId: data.store_id,\n          date: data.date,\n          targetSales: data.target_sales,\n          createdAt: data.created_at,\n          updatedAt: data.updated_at\n        })\n      }\n\n      return { success: true, error: null }\n    } catch (e) {\n      console.error('日別目標の保存エラー:', e)\n      setError('目標の保存に失敗しました')\n      return { success: false, error: '目標の保存に失敗しました' }\n    } finally {\n      setIsLoading(false)\n    }\n  }, [storeId, date])\n\n  const removeTarget = useCallback(async () => {\n    if (!storeId || storeId === 'all') {\n      setError('店舗を選択してください')\n      return { success: false, error: '店舗を選択してください' }\n    }\n\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const { error: deleteError } = await deleteDailyTarget(storeId, date)\n\n      if (deleteError) {\n        console.error('日別目標の削除エラー:', deleteError)\n        setError('目標の削除に失敗しました')\n        return { success: false, error: '目標の削除に失敗しました' }\n      }\n\n      setTarget(null)\n      return { success: true, error: null }\n    } catch (e) {\n      console.error('日別目標の削除エラー:', e)\n      setError('目標の削除に失敗しました')\n      return { success: false, error: '目標の削除に失敗しました' }\n    } finally {\n      setIsLoading(false)\n    }\n  }, [storeId, date])\n\n  return {\n    target,\n    isLoading,\n    error,\n    saveTarget,\n    removeTarget,\n    refetch: fetchTarget\n  }\n}\n",
  "src/hooks/useExpenseBaseline.ts": "import { useEffect, useState, useMemo } from 'react'\nimport { getExpenseBaseline, ExpenseBaselineDb } from '@/services/supabase'\n\n// ✅ \"storeId-YYYY-MM\" 単位で「存在しない」をキャッシュ（404再試行防止）\nconst NO_BASELINE_CACHE = new Set<string>()\n\nexport interface DailyExpenseReference {\n  laborCost: number\n  utilities: number\n  rent: number\n  consumables: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  sumOther: number\n  totalExpense: number\n}\n\nexport interface MonthlyExpenseReference {\n  laborCost: number\n  utilities: number\n  rent: number\n  consumables: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  sumOther: number\n  totalExpense: number\n}\n\nexport const useExpenseBaseline = (storeId?: string, yyyymm?: string) => {\n  // ✅ 安定キー生成\n  const cacheKey = useMemo(() => (storeId && yyyymm) ? `${storeId}-${yyyymm}` : '', [storeId, yyyymm])\n\n  const [daily, setDaily] = useState<DailyExpenseReference>({\n    laborCost: 0,\n    utilities: 0,\n    rent: 0,\n    consumables: 0,\n    promotion: 0,\n    cleaning: 0,\n    misc: 0,\n    communication: 0,\n    others: 0,\n    sumOther: 0,\n    totalExpense: 0\n  })\n  const [monthlyTotal, setMonthlyTotal] = useState<MonthlyExpenseReference>({\n    laborCost: 0,\n    utilities: 0,\n    rent: 0,\n    consumables: 0,\n    promotion: 0,\n    cleaning: 0,\n    misc: 0,\n    communication: 0,\n    others: 0,\n    sumOther: 0,\n    totalExpense: 0\n  })\n  const [monthly, setMonthly] = useState<ExpenseBaselineDb | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const loadBaseline = async () => {\n      if (!cacheKey || storeId === 'all') {\n        const emptyExpense = {\n          laborCost: 0,\n          utilities: 0,\n          rent: 0,\n          consumables: 0,\n          promotion: 0,\n          cleaning: 0,\n          misc: 0,\n          communication: 0,\n          others: 0,\n          sumOther: 0,\n          totalExpense: 0\n        }\n        setDaily(emptyExpense)\n        setMonthlyTotal(emptyExpense)\n        setMonthly(null)\n        return\n      }\n\n      // ✅ キャッシュに「存在しない」記録があれば再試行しない\n      if (NO_BASELINE_CACHE.has(cacheKey)) {\n        console.log(`📋 useExpenseBaseline: キャッシュヒット (存在しない): ${cacheKey}`)\n        const emptyExpense = {\n          laborCost: 0,\n          utilities: 0,\n          rent: 0,\n          consumables: 0,\n          promotion: 0,\n          cleaning: 0,\n          misc: 0,\n          communication: 0,\n          others: 0,\n          sumOther: 0,\n          totalExpense: 0\n        }\n        setDaily(emptyExpense)\n        setMonthlyTotal(emptyExpense)\n        setMonthly(null)\n        setLoading(false)\n        return\n      }\n\n      setLoading(true)\n      setError(null)\n\n      try {\n        const { data, error: fetchError } = await getExpenseBaseline(storeId!, yyyymm!)\n\n        if (fetchError) {\n          // ✅ 404系エラー（テーブルが存在しない or データなし）は「存在しない」としてキャッシュ\n          const errorCode = (fetchError as any)?.code\n          const errorMessage = fetchError.message || ''\n\n          if (errorCode === 'PGRST116' || // Postgrest: relation does not exist\n              errorCode === 'PGRST205' || // Could not find the table\n              errorMessage.includes('Could not find the table') ||\n              errorMessage.includes('relation') && errorMessage.includes('does not exist')) {\n            console.log(`⚠️ useExpenseBaseline: テーブル/データが存在しません (404) - キャッシュします: ${cacheKey}`)\n            NO_BASELINE_CACHE.add(cacheKey)\n\n            const emptyExpense = {\n              laborCost: 0,\n              utilities: 0,\n              rent: 0,\n              consumables: 0,\n              promotion: 0,\n              cleaning: 0,\n              misc: 0,\n              communication: 0,\n              others: 0,\n              sumOther: 0,\n              totalExpense: 0\n            }\n            setDaily(emptyExpense)\n            setMonthlyTotal(emptyExpense)\n            setMonthly(null)\n            setLoading(false)\n            return\n          }\n\n          // ✅ その他のエラーは通常処理\n          console.error('useExpenseBaseline: データ取得エラー', fetchError)\n          setError(fetchError.message || 'データ取得に失敗しました')\n          setLoading(false)\n          return\n        }\n\n        // 月の日数を計算\n        const [year, month] = yyyymm.split('-').map(Number)\n        const daysInMonth = new Date(year, month, 0).getDate()\n        const openDays = data?.open_days || daysInMonth\n\n        // 日割り計算関数\n        const perDay = (value?: number) => Math.round((value || 0) / Math.max(openDays, 1))\n\n        // 日割り経費を計算\n        const laborCost = perDay((data?.labor_cost_employee || 0) + (data?.labor_cost_part_time || 0))\n        const utilities = perDay(data?.utilities)\n        const rent = perDay(data?.rent)\n        const consumables = perDay(data?.consumables)\n        const promotion = perDay(data?.promotion)\n        const cleaning = perDay(data?.cleaning)\n        const misc = perDay(data?.misc)\n        const communication = perDay(data?.communication)\n        const others = perDay(data?.others)\n\n        const sumOther = utilities + rent + consumables + promotion + cleaning + misc + communication + others\n        const totalExpense = laborCost + sumOther\n\n        setDaily({\n          laborCost,\n          utilities,\n          rent,\n          consumables,\n          promotion,\n          cleaning,\n          misc,\n          communication,\n          others,\n          sumOther,\n          totalExpense\n        })\n\n        // 月次合計を計算\n        const monthlyLaborCost = (data?.labor_cost_employee || 0) + (data?.labor_cost_part_time || 0)\n        const monthlyUtilities = data?.utilities || 0\n        const monthlyRent = data?.rent || 0\n        const monthlyConsumables = data?.consumables || 0\n        const monthlyPromotion = data?.promotion || 0\n        const monthlyCleaning = data?.cleaning || 0\n        const monthlyMisc = data?.misc || 0\n        const monthlyCommunication = data?.communication || 0\n        const monthlyOthers = data?.others || 0\n\n        const monthlySumOther = monthlyUtilities + monthlyRent + monthlyConsumables +\n                                monthlyPromotion + monthlyCleaning + monthlyMisc + monthlyCommunication + monthlyOthers\n\n        setMonthlyTotal({\n          laborCost: monthlyLaborCost,\n          utilities: monthlyUtilities,\n          rent: monthlyRent,\n          consumables: monthlyConsumables,\n          promotion: monthlyPromotion,\n          cleaning: monthlyCleaning,\n          misc: monthlyMisc,\n          communication: monthlyCommunication,\n          others: monthlyOthers,\n          sumOther: monthlySumOther,\n          totalExpense: monthlyLaborCost + monthlySumOther\n        })\n        setMonthly(data)\n      } catch (err) {\n        console.error('useExpenseBaseline: 予期しないエラー', err)\n        setError(err instanceof Error ? err.message : '予期しないエラーが発生しました')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadBaseline()\n  }, [cacheKey, storeId, yyyymm])\n\n  return {\n    expenseBaseline: daily,\n    monthlyExpenseBaseline: monthlyTotal,\n    monthly,\n    loading,\n    error\n  }\n}\n",
  "src/hooks/useKpis.ts": "import { useMemo } from 'react'\nimport { DailyReportData } from '@/types'\n\nexport interface KPIData {\n  totalSales: number\n  totalExpenses: number\n  grossProfit: number\n  operatingProfit: number\n  profitMargin: number\n  reportCount: number\n  averageDailySales: number\n  salesGrowth?: number\n  profitGrowth?: number\n  // ▼ 追加\n  purchaseTotal: number\n  laborTotal: number\n  purchaseRate: number\n  laborRate: number\n  primeCost: number\n  primeCostRate: number\n  estimatedCustomers: number\n  averageTicket: number\n  totalCustomers: number\n}\n\nexport const useKpis = (reports: DailyReportData[], previousReports?: DailyReportData[]) => {\n  return useMemo(() => {\n    if (reports.length === 0) {\n      return {\n        totalSales: 0,\n        totalExpenses: 0,\n        grossProfit: 0,\n        operatingProfit: 0,\n        profitMargin: 0,\n        reportCount: 0,\n        averageDailySales: 0,\n        salesGrowth: 0,\n        profitGrowth: 0,\n        // 追加分\n        purchaseTotal: 0,\n        laborTotal: 0,\n        purchaseRate: 0,\n        laborRate: 0,\n        primeCost: 0,\n        primeCostRate: 0,\n        estimatedCustomers: 0,\n        averageTicket: 0,\n        totalCustomers: 0,\n      }\n    }\n\n    const totals = reports.reduce((acc, r) => {\n      const totalExpenses = r.purchase + r.laborCost + r.utilities + (r.rent || 0) + (r.consumables || 0) + r.promotion + r.cleaning + r.misc + r.communication + r.others\n      acc.sales += r.sales\n      acc.expenses += totalExpenses\n      acc.purchase += r.purchase\n      acc.labor += r.laborCost\n      acc.customers += r.customers || 0\n      acc.count += 1\n      return acc\n    }, { sales: 0, expenses: 0, purchase: 0, labor: 0, customers: 0, count: 0 })\n\n    const grossProfit = totals.sales - totals.purchase\n    const operatingProfit = totals.sales - totals.expenses\n    const profitMargin = totals.sales > 0 ? (operatingProfit / totals.sales) * 100 : 0\n    const averageDailySales = totals.count > 0 ? totals.sales / totals.count : 0\n\n    // 追加KPI\n    const purchaseRate = totals.sales > 0 ? (totals.purchase / totals.sales) * 100 : 0\n    const laborRate = totals.sales > 0 ? (totals.labor / totals.sales) * 100 : 0\n    const primeCost = totals.purchase + totals.labor\n    const primeCostRate = totals.sales > 0 ? (primeCost / totals.sales) * 100 : 0\n\n    // 実際の客数データから客単価を計算\n    const totalCustomers = totals.customers\n    const averageTicket = totalCustomers > 0 ? Math.round(totals.sales / totalCustomers) : 0\n    const estimatedCustomers = totalCustomers\n\n    // 前期間比較\n    let salesGrowth = 0\n    let profitGrowth = 0\n    if (previousReports && previousReports.length > 0) {\n      const prevTotals = previousReports.reduce((acc, r) => {\n        const totalExpenses = r.purchase + r.laborCost + r.utilities + (r.rent || 0) + (r.consumables || 0) + r.promotion + r.cleaning + r.misc + r.communication + r.others\n        acc.sales += r.sales\n        acc.profit += (r.sales - totalExpenses)\n        return acc\n      }, { sales: 0, profit: 0 })\n      salesGrowth = prevTotals.sales > 0 ? ((totals.sales - prevTotals.sales) / prevTotals.sales) * 100 : 0\n      profitGrowth = prevTotals.profit > 0 ? ((operatingProfit - prevTotals.profit) / prevTotals.profit) * 100 : 0\n    }\n\n    return {\n      totalSales: totals.sales,\n      totalExpenses: totals.expenses,\n      grossProfit,\n      operatingProfit,\n      profitMargin,\n      reportCount: totals.count,\n      averageDailySales,\n      salesGrowth,\n      profitGrowth,\n      // 追加分\n      purchaseTotal: totals.purchase,\n      laborTotal: totals.labor,\n      purchaseRate,\n      laborRate,\n      primeCost,\n      primeCostRate,\n      estimatedCustomers,\n      averageTicket,\n      totalCustomers\n    }\n  }, [reports, previousReports])\n}",
  "src/hooks/useReports.ts": "import { useState, useEffect, useMemo, useCallback, useRef } from 'react'\nimport { type DailyReportData } from '@/types'\nimport { getDailyReports, getMonthlyExpenses } from '@/services/supabase'\nimport { useAuth } from '@/contexts/AuthContext'\n\nexport interface ReportFilters {\n  storeId?: string\n  dateFrom?: string\n  dateTo?: string\n  period?: 'daily' | 'weekly' | 'monthly'\n}\n\nexport const useReports = (filters: ReportFilters = {}) => {\n  const [data, setData] = useState<DailyReportData[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isError, setIsError] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const { user } = useAuth()\n\n  // ✅ 安定キー：依存の変化だけ検知（参照安定）\n  const stableKey = useMemo(\n    () => JSON.stringify({\n      s: filters.storeId ?? '',\n      f: filters.dateFrom ?? '',\n      t: filters.dateTo ?? '',\n      p: filters.period ?? '',\n      u: user?.id ?? ''\n    }),\n    [filters.storeId, filters.dateFrom, filters.dateTo, filters.period, user?.id]\n  )\n\n  // ✅ 古いリクエストを中断するためのAbortController\n  const abortRef = useRef<AbortController | null>(null)\n\n  const fetchReports = useCallback(async (signal: AbortSignal, key: string) => {\n    // ✅ keyから値を復元（クロージャで古い値を掴まない）\n    const params = JSON.parse(key) as { s: string; f: string; t: string; p: string; u: string }\n\n    // ✅ ログを最小限に\n    // console.log('🔄 useReports: fetchReports called', { key, params })\n\n    if (!params.u) {\n      // ユーザーがいない場合は空データ\n      setData([])\n      setIsLoading(false)\n      return\n    }\n\n    try {\n      setIsLoading(true)\n      setIsError(false)\n      setError(null)\n\n      // Supabaseから日次報告を取得\n      const { data: reportsData, error: reportsError } = await getDailyReports({\n        storeId: params.s || undefined,\n        dateFrom: params.f || undefined,\n        dateTo: params.t || undefined,\n        userId: params.u\n      })\n\n      // ✅ 中断されていたらsetStateしない（古いレスポンスの反映防止）\n      if (signal.aborted) {\n        // console.log('⚠️ useReports: Request aborted')\n        return\n      }\n\n      if (reportsError) {\n        throw new Error(reportsError.message)\n      }\n\n      let filteredData = reportsData || []\n      let uniqueLocalCount = 0\n\n      // ローカルストレージの既存データも取得（移行期間用）\n      const localReports: DailyReportData[] = JSON.parse(localStorage.getItem('userReports') || '[]')\n      if (localReports.length > 0) {\n        // console.log('📦 useReports: ローカルデータも含めます:', localReports.length, '件')\n        // ローカルデータをマージする際、storeIdでフィルタリング\n        const filteredLocal = localReports.filter(r => {\n          if (params.s && params.s !== 'all' && r.storeId !== params.s) return false\n          if (params.f && r.date < params.f) return false\n          if (params.t && r.date > params.t) return false\n          return true\n        })\n\n        // console.log('📦 ローカルデータフィルター結果', {\n        //   totalLocal: localReports.length,\n        //   filteredLocal: filteredLocal.length,\n        //   filters: params,\n        //   sampleDates: filteredLocal.slice(0, 5).map(r => r.date)\n        // })\n\n        // 重複を防ぐ：同じdate+storeIdの組み合わせがSupabaseにある場合はローカルを除外\n        const uniqueLocal = filteredLocal.filter(localReport => {\n          return !filteredData.some(supabaseReport =>\n            supabaseReport.date === localReport.date &&\n            supabaseReport.storeId === localReport.storeId\n          )\n        })\n\n        if (uniqueLocal.length > 0) {\n          uniqueLocalCount = uniqueLocal.length\n          // console.log('📦 重複を除外後:', uniqueLocalCount, '件のローカルデータを追加')\n          filteredData = [...filteredData, ...uniqueLocal]\n        }\n      }\n\n      // 月次経費データは日報リストに混ぜない\n      // 月次経費は別途MonthlyExpenseForm等で管理\n\n      // 日付順にソート\n      filteredData.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n\n      // console.log('📊 useReports: 最終データ', {\n      //   total: filteredData.length,\n      //   supabase: (reportsData || []).length,\n      //   local: uniqueLocalCount,\n      //   sample: filteredData[0] // 最新の1件をサンプル表示\n      // })\n\n      // ✅ 中断チェック\n      if (signal.aborted) return\n      setData(filteredData)\n    } catch (err) {\n      // ✅ 中断チェック\n      if (signal.aborted) return\n      setIsError(true)\n      setError(err instanceof Error ? err.message : 'データの取得に失敗しました')\n    } finally {\n      // ✅ 中断チェック\n      if (!signal.aborted) setIsLoading(false)\n    }\n  }, [])\n\n  useEffect(() => {\n    console.log('🎯 useReports: useEffect triggered', { stableKey })\n\n    // ✅ 旧リクエストを必ず中断\n    abortRef.current?.abort()\n    const controller = new AbortController()\n    abortRef.current = controller\n\n    fetchReports(controller.signal, stableKey)\n\n    return () => {\n      console.log('🧹 useReports: Cleanup - aborting')\n      controller.abort()\n    }\n  }, [stableKey])\n\n  return {\n    data,\n    isLoading,\n    isError,\n    error,\n    refetch: fetchReports\n  }\n}",
  "src/hooks/useStores.ts": "import { useState, useEffect } from 'react'\nimport { mockStores } from '../lib/mock'\n\ninterface Store {\n  id: string\n  name: string\n  address: string\n  manager_id?: string\n  is_active?: boolean\n  created_at?: string\n  updated_at?: string\n}\n\ninterface StoreWithDetails extends Store { \n  manager_name?: string\n  reportCount?: number\n  lastReportDate?: string\n  isAssigned?: boolean\n}\n\nexport const useStores = (userId: string | null) => {\n  const [stores, setStores] = useState<StoreWithDetails[]>([])\n  const [selectedStoreId, setSelectedStoreId] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // モックデータから店舗を取得\n  const fetchStores = async () => {\n    if (!userId) return\n\n    try {\n      setLoading(true)\n      setError(null)\n      \n      console.log('🔍 fetchStores: モック店舗データ取得開始')\n      \n      // モックデータに詳細情報を追加\n      const storesWithDetails = mockStores.map((store, index) => ({\n        ...store,\n        manager_name: index === 0 ? '田中健太' : index === 1 ? '高山忠純' : '佐藤陽介',\n        reportCount: Math.floor(Math.random() * 30) + 5, // 5-35件\n        lastReportDate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(), // 過去1週間以内\n        isAssigned: true\n      }))\n      \n      console.log('✅ fetchStores: モック店舗データ取得完了:', storesWithDetails.length, '件')\n      setStores(storesWithDetails)\n      \n      // 最初の有効店舗を自動選択\n      const firstActiveStore = storesWithDetails.find(s => s.is_active)\n      if (!selectedStoreId && firstActiveStore) {\n        console.log('🎯 fetchStores: 最初の店舗を自動選択:', firstActiveStore.name)\n        setSelectedStoreId(firstActiveStore.id)\n      }\n    } catch (err) {\n      console.error('❌ fetchStores: エラー:', err)\n      setError('店舗データの取得に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 店舗作成（モック）\n  const createStore = async (storeData: {\n    name: string\n    address: string\n    managerName?: string\n    isActive?: boolean\n  }) => {\n    try {\n      setLoading(true)\n      setError(null)\n      \n      console.log('🏪 createStore: 新規店舗作成開始:', storeData)\n      \n      // 重複チェック\n      const existingStore = stores.find(store => \n        store.name.toLowerCase() === storeData.name.toLowerCase() && store.is_active\n      )\n      \n      if (existingStore) {\n        const errorMsg = `店舗名「${storeData.name}」は既に存在します`\n        console.log('⚠️ createStore: 重複店舗検出:', errorMsg)\n        return { error: errorMsg }\n      }\n      \n      // 新店舗作成\n      const newStore: StoreWithDetails = {\n        id: `store-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        name: storeData.name,\n        address: storeData.address,\n        manager_name: storeData.managerName || '新店長',\n        is_active: storeData.isActive !== false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        reportCount: 0,\n        lastReportDate: new Date().toISOString(),\n        isAssigned: true\n      }\n      \n      // 店舗リストに追加\n      const updatedStores = [...stores, newStore]\n      setStores(updatedStores)\n      \n      console.log('✅ createStore: 店舗作成成功:', newStore.name)\n      return { data: newStore, error: null }\n    } catch (err) {\n      console.error('❌ createStore: エラー:', err)\n      const errorMessage = '店舗の作成に失敗しました'\n      setError(errorMessage)\n      return { error: errorMessage }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 店舗更新（モック）\n  const updateStore = async (storeId: string, updateData: {\n    name?: string\n    address?: string\n    manager_name?: string\n    isActive?: boolean\n  }) => {\n    try {\n      setLoading(true)\n      setError(null)\n      \n      const storeIndex = stores.findIndex(store => store.id === storeId)\n      if (storeIndex === -1) {\n        return { error: '指定された店舗が見つかりません' }\n      }\n      \n      // 更新\n      const updatedStores = [...stores]\n      updatedStores[storeIndex] = {\n        ...updatedStores[storeIndex],\n        ...updateData,\n        updated_at: new Date().toISOString()\n      }\n      \n      setStores(updatedStores)\n      console.log('✅ updateStore: 店舗更新成功:', updatedStores[storeIndex].name)\n      \n      return { data: updatedStores[storeIndex], error: null }\n    } catch (err) {\n      console.error('❌ updateStore: エラー:', err)\n      return { error: '店舗の更新に失敗しました' }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 店舗削除（論理削除）\n  const deleteStore = async (storeId: string) => {\n    try {\n      setLoading(true)\n      setError(null)\n      \n      const storeIndex = stores.findIndex(store => store.id === storeId)\n      if (storeIndex === -1) {\n        return { error: '指定された店舗が見つかりません' }\n      }\n      \n      // 論理削除\n      const updatedStores = [...stores]\n      updatedStores[storeIndex] = {\n        ...updatedStores[storeIndex],\n        is_active: false,\n        updated_at: new Date().toISOString()\n      }\n      \n      setStores(updatedStores)\n      \n      // 選択中の店舗だった場合はクリア\n      if (selectedStoreId === storeId) {\n        setSelectedStoreId(null)\n      }\n      \n      console.log('✅ deleteStore: 店舗削除成功')\n      return { error: null }\n    } catch (err) {\n      console.error('❌ deleteStore: エラー:', err)\n      return { error: '店舗の削除に失敗しました' }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 店舗選択\n  const selectStore = (storeId: string | null) => {\n    console.log('🎯 selectStore: 店舗選択:', storeId)\n    setSelectedStoreId(storeId)\n  }\n\n  // 選択中の店舗取得\n  const getSelectedStore = () => {\n    return stores.find(store => store.id === selectedStoreId) || null\n  }\n\n  // 初回データ取得\n  useEffect(() => {\n    if (userId) {\n      fetchStores()\n    }\n  }, [userId])\n\n  return {\n    stores: stores.filter(s => s.is_active), // 有効な店舗のみ返す\n    selectedStoreId,\n    selectedStore: getSelectedStore(),\n    loading,\n    error,\n    fetchStores,\n    createStore,\n    updateStore,\n    deleteStore,\n    selectStore\n  }\n}",
  "src/hooks/useTargets.ts": "import { useState, useEffect } from 'react'\nimport { getTargets } from '@/services/supabase'\nimport { useAuth } from '@/contexts/AuthContext'\n\nexport interface TargetMetrics {\n  salesAchievement: number\n  profitAchievement: number\n  remainingSales: number\n  requiredDailySales: number\n  requiredCustomers: number\n  averageCustomerSpend: number\n  daysRemaining: number\n}\n\nexport type TargetData = {\n  storeId: string\n  period: string\n  targetSales: number\n  targetProfit: number\n  targetProfitMargin: number\n  targetCostRate: number\n  targetLaborRate: number\n}\n\nexport const useTargets = (storeId: string = 'all', period: string) => {\n  const [targets, setTargets] = useState<TargetData[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const { user } = useAuth()\n\n  useEffect(() => {\n    const fetchTargets = async () => {\n      if (!user) return\n\n      try {\n        setIsLoading(true)\n        const { data, error } = await getTargets({\n          storeId: storeId !== 'all' ? storeId : undefined\n        })\n\n        if (error) {\n          console.error('useTargets getTargets error:', error)\n          setTargets([])\n          return\n        }\n\n        const mapped: TargetData[] = (data ?? []).map(t => ({\n          storeId: t.store_id,\n          period: t.period,\n          targetSales: t.target_sales,\n          targetProfit: t.target_profit,\n          targetProfitMargin: t.target_profit_margin,\n          targetCostRate: t.target_cost_rate || 0,\n          targetLaborRate: t.target_labor_rate || 0\n        }))\n        setTargets(mapped)\n      } catch (e) {\n        console.error('❌ useTargets: エラー:', e)\n        setTargets([])\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchTargets()\n  }, [storeId, user])\n\n  const calculateTargetMetrics = (\n    currentSales: number,\n    currentProfit: number,\n    targetSales: number,\n    targetProfit: number\n  ): TargetMetrics => {\n    const safe = (n: number, d: number) => (d > 0 ? n / d : 0)\n    const salesAchievement = safe(currentSales, targetSales) * 100\n    const profitAchievement = safe(currentProfit, targetProfit) * 100\n    const remainingSales = Math.max(0, targetSales - currentSales)\n    \n    // Remaining days in current month\n    const now = new Date()\n    const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate()\n    const daysRemaining = lastDay - now.getDate()\n    \n    const requiredDailySales = daysRemaining > 0 ? remainingSales / daysRemaining : 0\n    const averageCustomerSpend = 3500 // Average spend per customer\n    const requiredCustomers = requiredDailySales / averageCustomerSpend\n\n    return {\n      salesAchievement,\n      profitAchievement,\n      remainingSales,\n      requiredDailySales,\n      requiredCustomers,\n      averageCustomerSpend,\n      daysRemaining\n    }\n  }\n\n  const getTargetForStore = (storeId: string) => {\n    return targets.find(t => t.storeId === storeId && t.period === period)\n  }\n\n  const getAllStoresTarget = () => {\n    const storeTargets = targets.filter(t => t.period === period)\n    const agg = storeTargets.reduce((acc, t) => ({\n      targetSales: acc.targetSales + t.targetSales,\n      targetProfit: acc.targetProfit + t.targetProfit,\n      totalCostRate: acc.totalCostRate + t.targetCostRate,\n      totalLaborRate: acc.totalLaborRate + t.targetLaborRate\n    }), { targetSales: 0, targetProfit: 0, totalCostRate: 0, totalLaborRate: 0 })\n    const targetProfitMargin = agg.targetSales > 0 ? (agg.targetProfit / agg.targetSales) * 100 : 0\n    const avgCostRate = storeTargets.length > 0 ? agg.totalCostRate / storeTargets.length : 0\n    const avgLaborRate = storeTargets.length > 0 ? agg.totalLaborRate / storeTargets.length : 0\n    return {\n      targetSales: agg.targetSales,\n      targetProfit: agg.targetProfit,\n      targetProfitMargin,\n      targetCostRate: avgCostRate,\n      targetLaborRate: avgLaborRate\n    }\n  }\n\n  return {\n    targets,\n    isLoading,\n    getTargetForStore,\n    getAllStoresTarget,\n    calculateTargetMetrics\n  }\n}",
  "src/hooks/useUsageLimits.ts": "import { useState, useEffect } from 'react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { getUsageStatus, UsageStatus } from '@/services/usageLimits'\n\nexport function useUsageLimits() {\n  const { user } = useAuth()\n  const [status, setStatus] = useState<UsageStatus | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (user?.id) {\n      loadUsageStatus()\n    }\n  }, [user?.id])\n\n  const loadUsageStatus = async () => {\n    if (!user?.id) return\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const usageStatus = await getUsageStatus(user.id)\n      setStatus(usageStatus)\n    } catch (err) {\n      setError('使用状況の取得に失敗しました')\n      console.error('Failed to load usage status:', err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const refresh = () => {\n    loadUsageStatus()\n  }\n\n  return {\n    status,\n    loading,\n    error,\n    refresh\n  }\n}\n",
  "src/index.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.75rem;\n    \n    /* Semantic colors */\n    --success: 142 72% 40%;\n    --warning: 38 92% 50%;\n    --info: 217 91% 60%;\n    --danger: 0 84% 60%;\n    \n    /* Chart color palette */\n    --chart-1: 221 83% 53%;\n    --chart-2: 142 72% 40%;\n    --chart-3: 271 91% 65%;\n    --chart-4: 14 90% 57%;\n    --chart-5: 199 89% 48%;\n    --chart-6: 50 97% 63%;\n    --chart-7: 339 90% 55%;\n    --chart-8: 192 19% 40%;\n    /* Semantic colors */\n    --success: 142 72% 40%;\n    --warning: 38 92% 50%;\n    --info: 217 91% 60%;\n    --danger: 0 84% 60%;\n    \n    /* Chart color palette */\n    --chart-1: 221 83% 53%;\n    --chart-2: 142 72% 40%;\n    --chart-3: 271 91% 65%;\n    --chart-4: 14 90% 57%;\n    --chart-5: 199 89% 48%;\n    --chart-6: 50 97% 63%;\n    --chart-7: 339 90% 55%;\n    --chart-8: 192 19% 40%;\n  }\n \n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 84% 4.9%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 224.3 76.3% 94.1%;\n    \n    /* Semantic colors */\n    --success: 142 70% 45%;\n    --warning: 38 92% 60%;\n    --info: 217 91% 70%;\n    --danger: 0 84% 66%;\n    \n    /* Chart color palette */\n    --chart-1: 221 83% 60%;\n    --chart-2: 142 72% 46%;\n    --chart-3: 271 91% 70%;\n    --chart-4: 14 90% 64%;\n    --chart-5: 199 89% 56%;\n    --chart-6: 50 97% 70%;\n    --chart-7: 339 90% 62%;\n    --chart-8: 192 19% 50%;\n    /* Semantic colors */\n    --success: 142 70% 45%;\n    --warning: 38 92% 60%;\n    --info: 217 91% 70%;\n    --danger: 0 84% 66%;\n    \n    /* Chart color palette */\n    --chart-1: 221 83% 60%;\n    --chart-2: 142 72% 46%;\n    --chart-3: 271 91% 70%;\n    --chart-4: 14 90% 64%;\n    --chart-5: 199 89% 56%;\n    --chart-6: 50 97% 70%;\n    --chart-7: 339 90% 62%;\n    --chart-8: 192 19% 50%;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}",
  "src/layout/Header.tsx": "import React, { useTransition } from 'react'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { Menu, User, LogOut, Settings, ChevronDown, Store, Shield, HelpCircle, Loader2 } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { useAdminData } from '@/contexts/AdminDataContext'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { HelpGuide } from '@/components/system/HelpGuide'\n\ninterface HeaderProps {\n  onMenuClick: () => void\n}\n\nexport const Header: React.FC<HeaderProps> = ({ onMenuClick }) => {\n  const navigate = useNavigate()\n  const location = useLocation()\n  const params = new URLSearchParams(location.search)\n  const initialStore = params.get('store') || 'all'\n  const [selectedStoreId, setSelectedStoreId] = React.useState<string>(initialStore)\n  const [isHelpOpen, setIsHelpOpen] = React.useState(false)\n  const { stores } = useAdminData()\n  const { user, signOut } = useAuth()\n\n  // ✅ startTransition: 重い集計と競合しないようにUI更新を緩和\n  const [isPending, startTransition] = useTransition()\n\n  const currentPeriod = new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' })\n\n  // アクセス可能な店舗を計算\n  const accessibleStores = React.useMemo(() => {\n    if (!user) return []\n    if (user.role === 'admin') {\n      return stores.map(s => ({ id: s.id, name: s.name }))\n    }\n    return user.assignedStores || []\n  }, [user, stores])\n  const selectedStore = accessibleStores.find(s => s.id === selectedStoreId)\n\n  // URLパラメータの変更を監視してstateを同期\n  React.useEffect(() => {\n    const urlStoreId = params.get('store') || 'all'\n    if (urlStoreId !== selectedStoreId) {\n      setSelectedStoreId(urlStoreId)\n    }\n  }, [location.search, selectedStoreId, params])\n\n  const onChangeStore = (id: string) => {\n    // ✅ 状態更新を並行レンダに逃がす（体感フリーズ解消）\n    startTransition(() => {\n      setSelectedStoreId(id)\n      const p = new URLSearchParams(location.search)\n      if (id === 'all') p.delete('store'); else p.set('store', id)\n      navigate(`${location.pathname}?${p.toString()}`, { replace: true })\n    })\n  }\n\n  const handleSignOut = async () => {\n    await signOut()\n    navigate('/')\n  }\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return <Shield className=\"h-3 w-3 text-red-600\" />\n      case 'manager': return <User className=\"h-3 w-3 text-blue-600\" />\n      case 'staff': return <User className=\"h-3 w-3 text-green-600\" />\n      default: return <User className=\"h-3 w-3\" />\n    }\n  }\n\n  const getRoleName = (role: string) => {\n    switch (role) {\n      case 'admin': return '統括'\n      case 'manager': return '店長'\n      case 'staff': return 'スタッフ'\n      default: return role\n    }\n  }\n\n  // 店舗選択を非表示にするページ（ページ内で店舗選択がある場合）\n  const hideStoreSelector = [\n    '/report',\n    '/report/new',\n    '/expenses/monthly',\n    '/admin',\n    '/chat',\n    '/ai-reports'\n  ].includes(location.pathname)\n\n  return (\n    <>\n    <header className=\"h-16 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"flex h-full items-center justify-between px-4\">\n        {/* Left section */}\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"lg:hidden\"\n            onClick={onMenuClick}\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          \n          <div className=\"min-w-0\">\n            <h1 className=\"text-sm sm:text-lg font-semibold text-foreground truncate leading-tight\">\n              <span className=\"sm:hidden\">AI経営管理</span>\n              <span className=\"hidden sm:inline\">AI経営管理システム</span>\n            </h1>\n            <p className=\"text-xs sm:text-sm text-muted-foreground truncate leading-tight\">\n              <span className=\"hidden sm:inline\">{currentPeriod}の分析</span>\n              <span className=\"sm:hidden\">分析</span>\n              {selectedStoreId === 'all' ? <span className=\"hidden sm:inline\">（全店舗合計）</span> : ''}\n            </p>\n          </div>\n        </div>\n\n        {/* Store selector - Hidden on pages with their own store selector */}\n        {!hideStoreSelector && (\n          <div className=\"flex items-center gap-1 sm:gap-3 flex-1 sm:flex-initial justify-center sm:justify-start min-w-0 max-w-xs sm:max-w-none\">\n            {/* ✅ ローディングインジケーター */}\n            {isPending ? (\n              <Loader2 className=\"h-4 w-4 text-muted-foreground animate-spin\" />\n            ) : (\n              <Store className=\"h-4 w-4 text-muted-foreground\" />\n            )}\n            <select\n              value={selectedStoreId}\n              onChange={(e) => onChangeStore(e.target.value)}\n              disabled={isPending}\n              className=\"px-2 sm:px-3 py-1.5 sm:py-2 text-xs sm:text-sm border border-input rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-ring min-w-0 w-full sm:w-auto max-w-full sm:min-w-64 truncate disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {user?.role === 'admin' && (\n                <option value=\"all\">🏢 全店舗（合計）</option>\n              )}\n              {accessibleStores.map(store => (\n                <option key={store.id} value={store.id}>\n                  {store.name}\n                </option>\n              ))}\n            </select>\n            {(selectedStoreId === 'all' || selectedStore) && (\n              <Badge variant=\"secondary\" className=\"text-xs hidden md:inline-flex\">\n                {selectedStoreId === 'all' ? '全店舗' : (user?.role === 'admin' ? '全権限' : '限定権限')}\n              </Badge>\n            )}\n          </div>\n        )}\n\n        {/* Right section - Help & User menu */}\n        <div className=\"min-w-0 flex-shrink-0 flex items-center gap-2\">\n          {/* Help Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsHelpOpen(true)}\n            className=\"h-8 w-8 sm:h-10 sm:w-10\"\n            title=\"使い方ガイド\"\n          >\n            <HelpCircle className=\"h-4 w-4 sm:h-5 sm:w-5 text-blue-600\" />\n          </Button>\n\n          {/* User Menu */}\n          <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"flex items-center gap-1 sm:gap-2 px-1 sm:px-2 h-8 sm:h-10\">\n              <User className=\"h-4 w-4\" />\n              <span className=\"hidden md:inline text-sm\">\n                {user?.name}\n              </span>\n              <Badge variant=\"outline\" className=\"text-xs hidden lg:inline-flex\">\n                <div className=\"flex items-center gap-1\">\n                  {getRoleIcon(user?.role || '')}\n                  {getRoleName(user?.role || '')}\n                </div>\n              </Badge>\n              <ChevronDown className=\"h-3 w-3 hidden sm:inline\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <div className=\"px-2 py-1.5 text-sm font-medium\">\n              {user?.name}\n            </div>\n            <div className=\"px-2 py-1.5 text-xs text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                {getRoleIcon(user?.role || '')}\n                {getRoleName(user?.role || '')}\n                {user?.role === 'admin' && <Badge variant=\"destructive\" className=\"text-xs\">全権限</Badge>}\n              </div>\n            </div>\n            {user?.assignedStores && user.assignedStores.length > 0 && (\n              <>\n                <DropdownMenuSeparator />\n                <div className=\"px-2 py-1.5\">\n                  <p className=\"text-xs text-muted-foreground mb-1\">担当店舗:</p>\n                  {user.assignedStores.slice(0, 3).map(store => (\n                    <div key={store.id} className=\"text-xs text-foreground\">\n                      🏪 {store.name.replace('居酒屋いっき', '').replace('バールアフロマージュスーヴォワル', 'アフロ')}\n                    </div>\n                  ))}\n                  {user.assignedStores.length > 3 && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      他{user.assignedStores.length - 3}店舗...\n                    </div>\n                  )}\n                </div>\n              </>\n            )}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={() => navigate('/admin')}>\n              <Settings className=\"h-4 w-4 mr-2\" />\n              設定\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={handleSignOut}>\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              ログアウト\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n\n    {/* Help Guide Modal - Rendered outside header for proper z-index */}\n    <HelpGuide isOpen={isHelpOpen} onClose={() => setIsHelpOpen(false)} />\n    </>\n  )\n}",
  "src/layout/MainLayout.tsx": "import React, { useState } from 'react'\nimport { Outlet, useLocation } from 'react-router-dom'\nimport { Header } from './Header'\nimport { Sidebar } from './Sidebar'\nimport { StoreProvider } from '@/contexts/StoreContext'\nimport { AdminDataProvider } from '@/contexts/AdminDataContext'\nimport { AIReportNotification } from '@/components/Dashboard/AIReportNotification'\nimport { Footer } from '@/components/Layout/Footer'\n\nexport const MainLayout: React.FC = () => {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const location = useLocation()\n\n  // フッターを表示するページ\n  const showFooter = ['/admin', '/organization'].includes(location.pathname)\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {sidebarOpen && (\n        <div\n          className=\"lg:hidden fixed inset-0 bg-background/80 backdrop-blur-sm z-40\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      <AdminDataProvider>\n        <StoreProvider>\n          <div className=\"flex h-screen\">\n            <Sidebar\n              isOpen={sidebarOpen}\n              onClose={() => setSidebarOpen(false)}\n            />\n            <div className=\"flex-1 flex flex-col min-w-0\">\n              <Header onMenuClick={() => setSidebarOpen(true)} />\n              <main className=\"flex-1 overflow-auto flex flex-col\">\n                <div className=\"flex-1 container mx-auto px-2 sm:px-4 py-3 sm:py-6\">\n                  <Outlet />\n                </div>\n                {showFooter && <Footer />}\n              </main>\n            </div>\n          </div>\n          <AIReportNotification />\n        </StoreProvider>\n      </AdminDataProvider>\n    </div>\n  )\n}",
  "src/layout/Sidebar.tsx": "import React from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { ChartBar as BarChart3, Calendar, Target, MessageSquare, X, TrendingUp, Settings, Users, FileText, Building } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { cn } from '@/lib/utils'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { PermissionGuard } from '@/components/Auth/PermissionGuard'\n\ninterface SidebarProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst menuItems = [\n  {\n    id: 'dashboard',\n    label: 'ダッシュボード',\n    icon: BarChart3,\n    children: [\n      { id: 'daily', label: '日次分析', path: '/dashboard/daily' },\n      { id: 'weekly', label: '週次分析', path: '/dashboard/weekly' },\n      { id: 'monthly', label: '月次分析', path: '/dashboard/monthly' }\n    ]\n  },\n  {\n    id: 'targets',\n    label: '目標達成度',\n    icon: Target,\n    path: '/targets'\n  },\n  {\n    id: 'chat',\n    label: 'AIチャット',\n    icon: MessageSquare,\n    path: '/chat',\n    badge: 'Beta'\n  },\n  {\n    id: 'ai-reports',\n    label: 'AI分析レポート',\n    icon: FileText,\n    path: '/ai-reports'\n  },\n  {\n    id: 'report',\n    label: '日報入力',\n    icon: Calendar,\n    path: '/report/new'\n  },\n  {\n    id: 'monthly-expense',\n    label: '月次経費入力',\n    icon: Calendar,\n    path: '/expenses/monthly'\n  },\n  {\n    id: 'staff',\n    label: 'スタッフ管理',\n    icon: Users,\n    path: '/staff'\n  },\n  {\n    id: 'organization',\n    label: '組織設定',\n    icon: Building,\n    path: '/organization'\n  },\n  {\n    id: 'admin',\n    label: 'システム設定',\n    icon: Settings,\n    path: '/admin'\n  }\n]\n\nexport const Sidebar: React.FC<SidebarProps> = ({ isOpen, onClose }) => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const { user } = useAuth()\n\n  const handleNavigation = (path: string) => {\n    // 現在のURLから店舗IDを取得\n    const currentParams = new URLSearchParams(location.search)\n    const currentStoreId = currentParams.get('store')\n\n    // 店舗IDが選択されている場合は、新しいパスにも引き継ぐ\n    if (currentStoreId) {\n      const newUrl = `${path}?store=${currentStoreId}`\n      navigate(newUrl)\n    } else {\n      navigate(path)\n    }\n    onClose()\n  }\n\n  const isActivePath = (path: string) => {\n    return location.pathname === path || location.pathname.startsWith(path)\n  }\n\n  // 権限に応じてメニューアイテムをフィルタリング\n  const getVisibleMenuItems = () => {\n    if (!user) return []\n    \n    const allItems = menuItems\n    \n    // スタッフの場合は基本機能のみ\n    if (user.role === 'staff') {\n      return allItems.filter(item => \n        ['dashboard', 'report', 'chat'].includes(item.id)\n      )\n    }\n    \n    // 店長の場合は一部管理機能のみ表示\n    if (user.role === 'manager') {\n      return allItems\n    }\n    \n    // 統括は全機能アクセス可能\n    return allItems\n  }\n\n  const visibleMenuItems = getVisibleMenuItems()\n  return (\n    <>\n      <aside className={cn(\n        \"fixed lg:static inset-y-0 left-0 z-50 w-64 bg-card border-r border-border transform transition-transform duration-200 ease-in-out\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full lg:translate-x-0\"\n      )}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex h-16 items-center justify-between px-4 border-b border-border\">\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-semibold text-foreground\">\n                Analytics\n              </span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"lg:hidden\"\n              onClick={onClose}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-3 py-4 space-y-2\">\n            {visibleMenuItems.map((item) => {\n              const Icon = item.icon\n              const hasChildren = !!item.children\n              const isParentActive = hasChildren \n                ? item.children.some(child => isActivePath(child.path))\n                : isActivePath(item.path || '')\n\n              return (\n                <div key={item.id}>\n                  {/* Parent item */}\n                  {item.id === 'admin' || item.id === 'staff' ? (\n                    <PermissionGuard requiredRole={item.id === 'admin' ? 'admin' : 'manager'} showError={false}>\n                      <Button\n                        variant=\"ghost\"\n                        className={cn(\n                          \"w-full justify-start h-auto py-3 px-3\",\n                          isParentActive && \"bg-accent text-accent-foreground\"\n                        )}\n                        onClick={() => !hasChildren && handleNavigation(item.path!)}\n                      >\n                        <Icon className=\"h-4 w-4 mr-3\" />\n                        <span className=\"flex-1 text-left\">{item.label}</span>\n                        {item.badge && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {item.badge}\n                          </Badge>\n                        )}\n                      </Button>\n                    </PermissionGuard>\n                  ) : (\n                    <Button\n                      variant=\"ghost\"\n                      className={cn(\n                        \"w-full justify-start h-auto py-3 px-3\",\n                        isParentActive && \"bg-accent text-accent-foreground\"\n                      )}\n                      onClick={() => !hasChildren && handleNavigation(item.path!)}\n                    >\n                      <Icon className=\"h-4 w-4 mr-3\" />\n                      <span className=\"flex-1 text-left\">{item.label}</span>\n                      {item.badge && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </Button>\n                  )}\n\n                  {/* Children items */}\n                  {hasChildren && (\n                    <div className=\"ml-4 mt-1 space-y-1\">\n                      {item.children.map((child) => (\n                        <Button\n                          key={child.id}\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className={cn(\n                            \"w-full justify-start text-sm py-2\",\n                            isActivePath(child.path) && \"bg-primary text-primary-foreground\"\n                          )}\n                          onClick={() => handleNavigation(child.path)}\n                        >\n                          {child.label}\n                        </Button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )\n            })}\n          </nav>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border\">\n            {user && (\n              <div className=\"mb-3 p-2 bg-muted rounded-lg\">\n                <div className=\"text-xs text-muted-foreground mb-1\">ログイン中</div>\n                <div className=\"flex items-center gap-2\">\n                  <div className={`w-2 h-2 rounded-full ${\n                    user.role === 'admin' ? 'bg-red-500' :\n                    user.role === 'manager' ? 'bg-blue-500' :\n                    'bg-green-500'\n                  }`} />\n                  <div className=\"text-xs font-medium truncate\">{user.name}</div>\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {user.role === 'admin' ? '統括権限' :\n                   user.role === 'manager' ? '店長権限' :\n                   'スタッフ権限'}\n                </div>\n              </div>\n            )}\n            <div className=\"text-xs text-muted-foreground\">\n              Version 1.0.0\n            </div>\n          </div>\n        </div>\n      </aside>\n    </>\n  )\n}",
  "src/lib/errorMessages.ts": "/**\n * Supabaseエラーメッセージを日本語化\n */\n\nexport function translateSupabaseError(error: any): string {\n  if (!error) return '不明なエラーが発生しました'\n\n  const message = error.message || error.toString()\n\n  // Authエラー\n  if (message.includes('Invalid login credentials')) {\n    return 'メールアドレスまたはパスワードが正しくありません'\n  }\n  if (message.includes('Email not confirmed')) {\n    return 'メールアドレスが確認されていません。確認メールをご確認ください'\n  }\n  if (message.includes('User already registered')) {\n    return 'このメールアドレスは既に登録されています'\n  }\n  if (message.includes('Password should be at least')) {\n    return 'パスワードは8文字以上で設定してください'\n  }\n  if (message.includes('Unable to validate email address')) {\n    return '有効なメールアドレスを入力してください'\n  }\n\n  // RLSエラー\n  if (message.includes('row-level security') || message.includes('RLS') || message.includes('policy')) {\n    return 'この操作を実行する権限がありません。管理者に店舗割当をご確認ください'\n  }\n\n  // ネットワークエラー\n  if (message.includes('Failed to fetch') || message.includes('Network')) {\n    return 'ネットワークエラーが発生しました。接続を確認してください'\n  }\n\n  // 外部キー制約\n  if (message.includes('foreign key constraint') || message.includes('violates foreign key')) {\n    return '関連するデータが存在しないため、この操作を実行できません'\n  }\n\n  // ユニーク制約\n  if (message.includes('duplicate key') || message.includes('unique constraint')) {\n    return 'この値は既に登録されています'\n  }\n\n  // NOT NULL制約\n  if (message.includes('null value') || message.includes('violates not-null')) {\n    return '必須項目が入力されていません'\n  }\n\n  // その他のデータベースエラー\n  if (message.includes('syntax error') || message.includes('invalid input')) {\n    return '入力内容に誤りがあります'\n  }\n\n  // デフォルト\n  return message\n}\n\n/**\n * OpenAI APIエラーメッセージを日本語化\n */\nexport function translateOpenAIError(status: number, message?: string): string {\n  switch (status) {\n    case 401:\n      return 'OpenAI APIキーが無効です。管理者に連絡してください'\n    case 429:\n      return 'API利用制限に達しました。しばらく待ってから再試行してください'\n    case 500:\n    case 502:\n    case 503:\n      return 'OpenAI APIサーバーでエラーが発生しました。時間をおいて再試行してください'\n    default:\n      return message || 'ChatGPT APIでエラーが発生しました'\n  }\n}\n\n/**\n * 汎用エラーメッセージ取得\n */\nexport function getErrorMessage(error: unknown): string {\n  if (typeof error === 'string') {\n    return error\n  }\n\n  if (error && typeof error === 'object') {\n    // Supabaseエラー\n    if ('message' in error) {\n      return translateSupabaseError(error)\n    }\n\n    // PostgrestError\n    if ('code' in error && 'details' in error) {\n      return translateSupabaseError(error)\n    }\n  }\n\n  return '予期しないエラーが発生しました'\n}\n",
  "src/lib/format.ts": "export const formatCurrency = (value: number): string => {\n  return new Intl.NumberFormat('ja-JP', {\n    style: 'currency',\n    currency: 'JPY',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(value)\n}\n\nexport const formatPercent = (value: number): string => {\n  return `${value.toFixed(1)}%`\n}\n\nexport const formatNumber = (value: number): string => {\n  return value.toLocaleString('ja-JP')\n}\n\nexport const formatDate = (date: Date | string): string => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return d.toLocaleDateString('ja-JP', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  })\n}\n\nexport const formatDateRange = (start: Date, end: Date): string => {\n  return `${formatDate(start)} - ${formatDate(end)}`\n}\n\nexport const truncateText = (text: string, maxLength: number): string => {\n  return text.length > maxLength ? `${text.slice(0, maxLength)}...` : text\n}",
  "src/lib/mock.ts": "// モックストアデータ（フォールバック用）\n// 実際のデータはSupabaseまたはローカルストレージから取得します\n\nimport type { DailyReportData } from '@/types'\n\nexport const mockStores = [\n  {\n    id: 'store-toyosu',\n    name: '居酒屋いっき豊洲店',\n    address: '東京都江東区豊洲4-1-1',\n    is_active: true\n  },\n  {\n    id: 'store-ariake',\n    name: '居酒屋いっき有明店',\n    address: '東京都江東区有明4-3-2',\n    is_active: true\n  },\n  {\n    id: 'store-honten',\n    name: '居酒屋いっき本店',\n    address: '東京都江東区古石場2-14-1',\n    is_active: true\n  },\n  {\n    id: 'store-afro',\n    name: 'バールアフロマージュスーヴォワル',\n    address: '東京都世田谷区玉川4-5-6尾島ビル１F',\n    is_active: true\n  }\n]\n\n/**\n * 指定日数分のモック日報データを生成（デモ／データ欠損時のフォールバック用）\n * @param days 生成する日数（デフォルト30日）\n * @param storeId 店舗ID（指定しない場合は全店舗からランダム）\n * @returns モック日報データの配列\n */\nexport function generateMockReports(days: number = 30, storeId?: string): DailyReportData[] {\n  const today = new Date()\n  const reports: DailyReportData[] = []\n\n  const stores = storeId\n    ? mockStores.filter(s => s.id === storeId)\n    : mockStores\n\n  if (stores.length === 0) {\n    console.warn('generateMockReports: 有効な店舗がありません')\n    return []\n  }\n\n  for (let i = 0; i < days; i++) {\n    const date = new Date(today)\n    date.setDate(date.getDate() - i)\n    const dateStr = date.toISOString().slice(0, 10)\n\n    // 各店舗のデータを生成\n    stores.forEach(store => {\n      // 基本売上（店舗ごとに変動）\n      const baseSales = store.id === 'store-toyosu' ? 280000 :\n                       store.id === 'store-ariake' ? 250000 :\n                       store.id === 'store-honten' ? 320000 : 200000\n\n      // 日次変動（±30%）\n      const variation = 0.7 + Math.random() * 0.6\n      const sales = Math.round(baseSales * variation)\n\n      // 原価率32%\n      const purchase = Math.round(sales * 0.32)\n\n      // 人件費率25%\n      const laborCost = Math.round(sales * 0.25)\n\n      // その他経費\n      const utilities = Math.round(sales * 0.03)\n      const promotion = Math.round(sales * 0.02)\n      const cleaning = Math.round(sales * 0.01)\n      const misc = Math.round(sales * 0.02)\n      const communication = Math.round(sales * 0.005)\n      const others = Math.round(sales * 0.015)\n\n      // 売上内訳（税率・決済方法）\n      const salesCash10 = Math.round(sales * 0.50)    // 現金10%税率: 50%\n      const salesCash8 = Math.round(sales * 0.15)     // 現金8%税率: 15%\n      const salesCredit10 = Math.round(sales * 0.25)  // クレジット10%税率: 25%\n      const salesCredit8 = Math.round(sales * 0.10)   // クレジット8%税率: 10%\n\n      // 客数（客単価3,500円前後）\n      const customers = Math.round(sales / 3500)\n\n      reports.push({\n        id: `mock-${store.id}-${dateStr}`,\n        date: dateStr,\n        storeId: store.id,\n        storeName: store.name,\n        sales,\n        purchase,\n        laborCost,\n        utilities,\n        promotion,\n        cleaning,\n        misc,\n        communication,\n        others,\n        salesCash10,\n        salesCash8,\n        salesCredit10,\n        salesCredit8,\n        customers,\n        reportText: 'モックデータ',\n        createdAt: new Date().toISOString()\n      })\n    })\n  }\n\n  return reports\n}\n\n/**\n * 指定期間のモック日報を生成\n * @param params.storeId 店舗ID\n * @param params.start 開始日（YYYY-MM-DD）\n * @param params.end 終了日（YYYY-MM-DD）\n * @returns モック日報データの配列\n */\nexport function generateMockReportsForPeriod(params: {\n  storeId: string\n  start: string\n  end: string\n}): DailyReportData[] {\n  const { storeId, start, end } = params\n  const startDate = new Date(start)\n  const endDate = new Date(end)\n\n  if (startDate > endDate) {\n    console.warn('generateMockReportsForPeriod: 開始日が終了日より後です')\n    return []\n  }\n\n  const reports: DailyReportData[] = []\n  const store = mockStores.find(s => s.id === storeId)\n\n  if (!store) {\n    console.warn('generateMockReportsForPeriod: 店舗が見つかりません', storeId)\n    return []\n  }\n\n  const currentDate = new Date(startDate)\n\n  while (currentDate <= endDate) {\n    const dateStr = currentDate.toISOString().slice(0, 10)\n\n    // 基本売上\n    const baseSales = store.id === 'store-toyosu' ? 280000 :\n                     store.id === 'store-ariake' ? 250000 :\n                     store.id === 'store-honten' ? 320000 : 200000\n\n    const variation = 0.7 + Math.random() * 0.6\n    const sales = Math.round(baseSales * variation)\n    const purchase = Math.round(sales * 0.32)\n    const laborCost = Math.round(sales * 0.25)\n    const utilities = Math.round(sales * 0.03)\n    const promotion = Math.round(sales * 0.02)\n    const cleaning = Math.round(sales * 0.01)\n    const misc = Math.round(sales * 0.02)\n    const communication = Math.round(sales * 0.005)\n    const others = Math.round(sales * 0.015)\n\n    const salesCash10 = Math.round(sales * 0.50)\n    const salesCash8 = Math.round(sales * 0.15)\n    const salesCredit10 = Math.round(sales * 0.25)\n    const salesCredit8 = Math.round(sales * 0.10)\n    const customers = Math.round(sales / 3500)\n\n    reports.push({\n      id: `mock-${store.id}-${dateStr}`,\n      date: dateStr,\n      storeId: store.id,\n      storeName: store.name,\n      sales,\n      purchase,\n      laborCost,\n      utilities,\n      promotion,\n      cleaning,\n      misc,\n      communication,\n      others,\n      salesCash10,\n      salesCash8,\n      salesCredit10,\n      salesCredit8,\n      customers,\n      reportText: 'モックデータ',\n      createdAt: new Date().toISOString()\n    })\n\n    currentDate.setDate(currentDate.getDate() + 1)\n  }\n\n  return reports\n}\n\n// 型定義は @/types からimportしてください\nexport type { DailyReportData, TargetData, Store } from '@/types'\n",
  "src/lib/organizationHelper.ts": "import { supabase } from './supabase'\n\nexport async function getCurrentOrganizationId(userId: string): Promise<string | null> {\n  if (!userId) return null\n\n  try {\n    const { data: memberData, error } = await supabase\n      .from('organization_members')\n      .select('organization_id')\n      .eq('user_id', userId)\n      .maybeSingle()\n\n    if (error) {\n      console.error('Failed to get organization ID:', error)\n      return null\n    }\n\n    return memberData?.organization_id || null\n  } catch (error) {\n    console.error('Error getting organization ID:', error)\n    return null\n  }\n}\n\nexport function addOrganizationFilter<T>(\n  query: any,\n  organizationId: string | undefined | null\n): any {\n  if (!organizationId) {\n    return query\n  }\n  return query.eq('organization_id', organizationId)\n}\n\nexport async function validateOrganizationAccess(\n  userId: string,\n  organizationId: string\n): Promise<boolean> {\n  if (!userId || !organizationId) return false\n\n  try {\n    const { data, error } = await supabase\n      .from('organization_members')\n      .select('organization_id')\n      .eq('user_id', userId)\n      .eq('organization_id', organizationId)\n      .maybeSingle()\n\n    if (error) {\n      console.error('Failed to validate organization access:', error)\n      return false\n    }\n\n    return !!data\n  } catch (error) {\n    console.error('Error validating organization access:', error)\n    return false\n  }\n}\n\nexport async function getUserOrganizationRole(\n  userId: string,\n  organizationId: string\n): Promise<'owner' | 'admin' | 'member' | null> {\n  if (!userId || !organizationId) return null\n\n  try {\n    const { data, error } = await supabase\n      .from('organization_members')\n      .select('role')\n      .eq('user_id', userId)\n      .eq('organization_id', organizationId)\n      .maybeSingle()\n\n    if (error) {\n      console.error('Failed to get organization role:', error)\n      return null\n    }\n\n    return data?.role || null\n  } catch (error) {\n    console.error('Error getting organization role:', error)\n    return null\n  }\n}\n\nexport async function checkOrganizationLimits(organizationId: string): Promise<{\n  withinStoreLimit: boolean\n  withinUserLimit: boolean\n  withinAiRequestLimit: boolean\n  currentStores: number\n  currentUsers: number\n  currentAiRequests: number\n  maxStores: number\n  maxUsers: number\n  maxAiRequests: number\n}> {\n  if (!organizationId) {\n    return {\n      withinStoreLimit: false,\n      withinUserLimit: false,\n      withinAiRequestLimit: false,\n      currentStores: 0,\n      currentUsers: 0,\n      currentAiRequests: 0,\n      maxStores: 0,\n      maxUsers: 0,\n      maxAiRequests: 0\n    }\n  }\n\n  try {\n    const { data: org, error: orgError } = await supabase\n      .from('organizations')\n      .select('max_stores, max_users, max_ai_requests_per_month')\n      .eq('id', organizationId)\n      .single()\n\n    if (orgError || !org) {\n      throw new Error('Failed to fetch organization limits')\n    }\n\n    const { count: storesCount } = await supabase\n      .from('stores')\n      .select('*', { count: 'exact', head: true })\n      .eq('organization_id', organizationId)\n\n    const { count: usersCount } = await supabase\n      .from('organization_members')\n      .select('*', { count: 'exact', head: true })\n      .eq('organization_id', organizationId)\n\n    const startOfMonth = new Date()\n    startOfMonth.setDate(1)\n    startOfMonth.setHours(0, 0, 0, 0)\n\n    const { count: aiRequestsCount } = await supabase\n      .from('ai_usage_tracking')\n      .select('*', { count: 'exact', head: true })\n      .eq('organization_id', organizationId)\n      .gte('created_at', startOfMonth.toISOString())\n\n    const currentStores = storesCount || 0\n    const currentUsers = usersCount || 0\n    const currentAiRequests = aiRequestsCount || 0\n\n    return {\n      withinStoreLimit: currentStores < org.max_stores,\n      withinUserLimit: currentUsers < org.max_users,\n      withinAiRequestLimit: currentAiRequests < org.max_ai_requests_per_month,\n      currentStores,\n      currentUsers,\n      currentAiRequests,\n      maxStores: org.max_stores,\n      maxUsers: org.max_users,\n      maxAiRequests: org.max_ai_requests_per_month\n    }\n  } catch (error) {\n    console.error('Error checking organization limits:', error)\n    return {\n      withinStoreLimit: false,\n      withinUserLimit: false,\n      withinAiRequestLimit: false,\n      currentStores: 0,\n      currentUsers: 0,\n      currentAiRequests: 0,\n      maxStores: 0,\n      maxUsers: 0,\n      maxAiRequests: 0\n    }\n  }\n}\n",
  "src/lib/supabase.ts": "import { createClient } from '@supabase/supabase-js'\n\nconst url = import.meta.env.VITE_SUPABASE_URL!\nconst key = import.meta.env.VITE_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient(url, key, {\n  auth: {\n    flowType: 'pkce',\n    persistSession: true,\n    autoRefreshToken: true,\n    detectSessionInUrl: true,\n    storageKey: 'rms-auth',\n  },\n})\n\nexport const isSupabaseReady = () => Boolean(url && key)\n\nconsole.log(isSupabaseReady() ? '✅ Supabase configured' : '⚠️ Supabase not configured', {\n  hasUrl: !!url,\n  hasKey: !!key,\n})\n\nif (import.meta.env.DEV && supabase) {\n  (window as any).__supabase = supabase\n}\n\nexport interface Profile {\n  id: string\n  name: string\n  email: string\n  role: 'staff' | 'manager' | 'admin'\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface Store {\n  id: string\n  name: string\n  address: string\n  manager_id?: string\n  is_active?: boolean\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface DailyReportDb {\n  id: string\n  date: string\n  store_id: string\n  user_id: string\n  sales: number\n  purchase: number\n  labor_cost: number\n  utilities: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  customers?: number\n  report_text?: string\n  created_at?: string\n  updated_at?: string\n}\n",
  "src/lib/utils.ts": "import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(value: number): string {\n  return new Intl.NumberFormat('ja-JP', {\n    style: 'currency',\n    currency: 'JPY'\n  }).format(value)\n}\n\nexport function formatPercent(value: number): string {\n  return `${value.toFixed(1)}%`\n}\n\nexport function formatNumber(value: number): string {\n  return value.toLocaleString('ja-JP')\n}\n\n// UUID validation utility\nexport function isUUID(value?: string): boolean {\n  if (!value || typeof value !== 'string') return false\n  return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value)\n}",
  "src/main.tsx": "// import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from './contexts/AuthContext';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  // StrictMode temporarily disabled for debugging infinite loops\n  // <StrictMode>\n    <AuthProvider>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </AuthProvider>\n  // </StrictMode>\n);\n",
  "src/pages/AIChatPage.tsx": "import React, { useState, useRef, useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { Send, Bot, User, Brain, Sparkles, Lightbulb, Trash2, Store, MessageSquare, Archive, Search, Plus } from 'lucide-react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { useReports } from '@/hooks/useReports'\nimport { useKpis } from '@/hooks/useKpis'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { formatCurrency, formatPercent } from '@/lib/format'\nimport { useChatArchive } from '@/hooks/useChatArchive'\nimport { supabase } from '@/lib/supabase'\nimport { useAIUsageLimit } from '@/hooks/useAIUsageLimit'\nimport { AIUsageIndicator } from '@/components/Chat/AIUsageIndicator'\n\ninterface Message {\n  id: string\n  type: 'user' | 'ai'\n  content: string\n  timestamp: Date\n  suggestions?: string[]\n}\n\ninterface DisplayMessage extends Message {\n  role: 'user' | 'assistant'\n}\n\nexport const AIChatPage: React.FC = () => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const sp = new URLSearchParams(location.search)\n  const { user, getAccessibleStores } = useAuth()\n  \n  // Get accessible stores for current user\n  const accessibleStores = getAccessibleStores()\n  \n  // Set initial store based on user permissions\n  const getInitialStoreId = () => {\n    const urlStore = sp.get('store')\n    if (urlStore && accessibleStores.some(store => store.id === urlStore)) {\n      return urlStore\n    }\n    return accessibleStores.length > 0 ? accessibleStores[0].id : 'all'\n  }\n\n  const [currentStoreId, setCurrentStoreId] = useState(getInitialStoreId())\n  const initialConvId = sp.get('conv') || undefined\n\n  const {\n    conversationId,\n    messages: archivedMessages,\n    conversations,\n    loading: archiveLoading,\n    startNewConversation,\n    loadMessages,\n    sendUserMessage,\n    appendAssistantMessage,\n    renameConversation,\n    archiveConversation,\n    removeConversation,\n    search\n  } = useChatArchive(user?.id || 'guest', currentStoreId, initialConvId)\n\n  const [displayMessages, setDisplayMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'ai',\n      content: `こんにちは！🤖 AI経営アナリストです。\\n\\n${user?.name}さん（${user?.role === 'admin' ? '統括' : user?.role === 'manager' ? '店長' : 'スタッフ'}権限）として、${user?.role === 'admin' ? '全店舗の' : user?.role === 'manager' ? '担当店舗の' : '勤務店舗の'}業務データを分析して具体的な洞察をお届けします。\\n\\n何についてお聞きになりたいですか？`,\n      suggestions: [\n        user?.role === 'admin' ? '全店舗の業績サマリーを表示' : '今月の業績サマリーを表示',\n        user?.role === 'admin' ? '店舗別パフォーマンス分析' : user?.role === 'manager' ? '担当店舗比較分析' : '店舗業績分析',\n        '来月の売上予測',\n        '経費最適化提案',\n        '目標達成ロードマップ'\n      ],\n      timestamp: new Date()\n    }\n  ])\n  const [inputMessage, setInputMessage] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [showSidebar, setShowSidebar] = useState(false)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [searchResults, setSearchResults] = useState<any[]>([])\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n\n  const { status: usageStatus, loading: usageLoading, refresh: refreshUsage } = useAIUsageLimit(user?.id)\n\n  useEffect(() => {\n    const convertedMessages: Message[] = archivedMessages.map(m => ({\n      id: m.id,\n      type: m.role === 'user' ? 'user' : 'ai',\n      content: m.content,\n      timestamp: new Date(m.created_at),\n      suggestions: undefined\n    }))\n\n    if (convertedMessages.length === 0) {\n      setDisplayMessages([{\n        id: '1',\n        type: 'ai',\n        content: `こんにちは！🤖 AI経営アナリストです。\\n\\n${user?.name}さん（${user?.role === 'admin' ? '統括' : user?.role === 'manager' ? '店長' : 'スタッフ'}権限）として、${user?.role === 'admin' ? '全店舗の' : user?.role === 'manager' ? '担当店舗の' : '勤務店舗の'}業務データを分析して具体的な洞察をお届けします。\\n\\n何についてお聞きになりたいですか？`,\n        suggestions: [\n          user?.role === 'admin' ? '全店舗の業績サマリーを表示' : '今月の業績サマリーを表示',\n          user?.role === 'admin' ? '店舗別パフォーマンス分析' : user?.role === 'manager' ? '担当店舗比較分析' : '店舗業績分析',\n          '来月の売上予測',\n          '経費最適化提案',\n          '目標達成ロードマップ'\n        ],\n        timestamp: new Date()\n      }])\n    } else {\n      setDisplayMessages(convertedMessages)\n    }\n  }, [archivedMessages, user])\n\n  const { data: reports } = useReports({ storeId: currentStoreId })\n  const kpis = useKpis(reports)\n  const mKey = new Date().toISOString().slice(0,7)\n  const thisMonthReports = reports.filter(r => r.date.startsWith(mKey))\n  const thisMonthKpis = useKpis(thisMonthReports)\n  \n  // Pre-calculate store-filtered KPIs for current selection\n  const currentStoreFilteredReports = currentStoreId === 'all' \n    ? reports \n    : reports.filter(r => r.storeId === currentStoreId)\n  const currentStoreKpis = useKpis(currentStoreFilteredReports)\n\n  const getStoreDisplayName = (storeId: string) => {\n    const store = accessibleStores.find(s => s.id === storeId)\n    return store ? store.label : '選択店舗'\n  }\n\n  const handleStoreChange = (newStoreId: string) => {\n    // Check if user has access to the selected store\n    if (!accessibleStores.some(store => store.id === newStoreId)) {\n      console.warn('Access denied to store:', newStoreId)\n      return\n    }\n    \n    setCurrentStoreId(newStoreId)\n    // Update URL\n    const newSearchParams = new URLSearchParams(location.search)\n    newSearchParams.set('store', newStoreId)\n    navigate(`${location.pathname}?${newSearchParams.toString()}`, { replace: true })\n  }\n\n  // Permission-based analysis context\n  const getAnalysisContext = () => {\n    if (!user) return '権限なし'\n    \n    switch (user.role) {\n      case 'admin':\n        return '統括権限：全店舗の経営データ分析・戦略立案が可能'\n      case 'manager':\n        return `店長権限：担当店舗（${user.assignedStores?.length || 0}店舗）の詳細分析・管理が可能`\n      case 'staff':\n        return `スタッフ権限：勤務店舗の基本分析・業績確認が可能`\n      default:\n        return '基本権限'\n    }\n  }\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [displayMessages])\n\n  const generateAIResponse = (\n    question: string,\n    context: { kpisAll: typeof kpis; kpisThisMonth: typeof thisMonthKpis; reports: typeof reports; storeId: string }\n  ): { content: string; suggestions?: string[] } => {\n    const q = question.toLowerCase()\n    \n    // Filter reports to selected store only (unless 'all' is explicitly selected by admin)\n    const filteredReports = context.storeId === 'all' \n      ? context.reports \n      : context.reports.filter(r => r.storeId === context.storeId)\n    \n    if (filteredReports.length === 0) {\n      return {\n        content: `📊 ${context.storeId === 'all' ? '全店舗の' : '選択店舗の'}分析可能なデータがまだありません。\\n\\n「新規報告」から日次報告を作成してください。`,\n        suggestions: ['デモデータを生成', 'サンプル分析を表示']\n      }\n    }\n\n    // Get selected store name for personalized responses\n    const selectedStore = accessibleStores.find(s => s.id === context.storeId)\n    const storeDisplayName = selectedStore ? selectedStore.name.replace('🏪 ', '').replace('🏢 ', '') : '選択店舗'\n\n    const thisMonthKpis = context.kpisThisMonth\n\n    // 特別な売上実績の分析（9月18日の豊洲店）\n    const specialEvent = filteredReports.find(r => \n      r.date === '2024-09-18' && r.storeId === 'store-toyosu'\n    )\n    \n    if (q.includes('9月18日') || q.includes('918') || q.includes('特別') || q.includes('イベント') || q.includes('豊洲') && q.includes('最高')) {\n      if (specialEvent) {\n        const eventExpenses = specialEvent.purchase + specialEvent.laborCost + specialEvent.utilities + \n                             specialEvent.promotion + specialEvent.cleaning + specialEvent.misc + \n                             specialEvent.communication + specialEvent.others\n        const eventProfit = specialEvent.sales - eventExpenses\n        const eventMargin = (eventProfit / specialEvent.sales) * 100\n        \n        return {\n          content: `🎉 **2024年9月18日 豊洲店 特別実績分析**\\n\\n💰 **売上実績:** ${formatCurrency(specialEvent.sales)}\\n📊 **営業利益:** ${formatCurrency(eventProfit)}\\n📈 **利益率:** ${formatPercent(eventMargin)}\\n\\n🏆 **特別要因:**\\n• 豊洲市場見学ツアーとのタイアップ効果\\n• イベント開催による大幅売上向上\\n• 通常日商の約5.5倍の実績\\n\\n💡 **成功要因分析:**\\n• 地域特性を活かしたコラボレーション\\n• 観光客の取り込み成功\\n• 効果的なマーケティング施策`,\n          suggestions: ['他店舗でも同様イベント開催可能？', 'イベント時の経費効率分析', '今後の特別企画提案']\n        }\n      }\n    }\n\n    // 最高売上日の分析\n    if (q.includes('最高') && (q.includes('売上') || q.includes('日商'))) {\n      const maxSalesReport = filteredReports.reduce((max, r) => \n        r.sales > max.sales ? r : max, context.reports[0] || { sales: 0 }\n      )\n      \n      if (maxSalesReport && maxSalesReport.sales > 0) {\n        const isSpecialDay = maxSalesReport.date === '2024-09-18' && maxSalesReport.storeId === 'store-toyosu'\n        return {\n          content: `🏆 **最高売上日分析**\\n\\n📅 **日付:** ${maxSalesReport.date}\\n🏪 **店舗:** ${maxSalesReport.storeName}\\n💰 **売上:** ${formatCurrency(maxSalesReport.sales)}\\n\\n${isSpecialDay ? '🎊 **豊洲市場見学ツアーとのタイアップイベント**\\n• 特別企画による記録的売上\\n• 地域連携の成功事例\\n• 観光客流入の効果を実証' : '📈 **優秀な営業実績**\\n通常営業での高い売上を記録'}`,\n          suggestions: ['この成功を他店舗に展開', '成功要因の詳細分析', '今後の企画提案']\n        }\n      }\n    }\n    if (q.includes('業績') || q.includes('サマリー') || q.includes('今月')) {\n      const scopeLabel = context.storeId === 'all' ? '全店舗' : storeDisplayName\n      \n      return {\n        content: `📊 **${scopeLabel}の今月業績サマリー**\\n\\n🏢 **実績:**\\n• 売上: ${formatCurrency(context.kpisAll.totalSales)}\\n• 営業利益: ${formatCurrency(context.kpisAll.operatingProfit)}\\n• 利益率: ${formatPercent(context.kpisAll.profitMargin)}\\n• 報告数: ${context.kpisAll.reportCount}件\\n\\n${context.storeId === 'all' ? '📊 全店舗統合分析' : `🏪 ${storeDisplayName}専用分析`}\\n\\n${context.kpisAll.profitMargin >= 20 ? '🎉 優秀な業績です！' : context.kpisAll.profitMargin >= 15 ? '👍 良好な業績です' : '⚠️ 改善の余地があります'}`,\n        suggestions: ['詳細な店舗別分析', '来月の売上予測', '経営改善提案']\n      }\n    }\n\n    // 店舗比較\n    if (q.includes('店舗') && (q.includes('比較') || q.includes('分析'))) {\n      // Permission check for store comparison\n      if (user?.role === 'staff') {\n        const staffStore = user.assignedStores?.[0]?.name || '勤務店舗'\n        return {\n          content: `📊 **${staffStore}の業績分析**\\n\\n💰 **売上実績:** ${formatCurrency(context.kpisAll.totalSales)}\\n📈 **利益率:** ${formatPercent(context.kpisAll.profitMargin)}\\n📊 **報告数:** ${context.kpisAll.reportCount}件\\n\\n💡 **スタッフ権限では単一店舗の分析のみ表示されます。**`,\n          suggestions: ['今月の売上傾向', '経費構造分析', '目標達成度確認']\n        }\n      }\n      \n      // If specific store is selected, show only that store's analysis\n      if (context.storeId !== 'all') {\n        return {\n          content: `📊 **${storeDisplayName}の業績分析**\\n\\n💰 **売上実績:** ${formatCurrency(context.kpisAll.totalSales)}\\n📈 **利益率:** ${formatPercent(context.kpisAll.profitMargin)}\\n📊 **報告数:** ${context.kpisAll.reportCount}件\\n\\n🏪 **選択店舗専用分析を実行しました。**`,\n          suggestions: ['この店舗の売上傾向', '経費構造詳細分析', '改善提案']\n        }\n      }\n      \n      // Only admin can see multi-store comparison when 'all' is selected\n      if (user?.role !== 'admin') {\n        return {\n          content: `📊 **権限制限により比較分析は利用できません**\\n\\n💡 **${user?.role === 'manager' ? '店長' : 'スタッフ'}権限では個別店舗の分析のみ可能です。**\\n\\n🏪 **現在の分析対象:** ${storeDisplayName}`,\n          suggestions: ['個別店舗の詳細分析', '売上向上施策', '経費最適化']\n        }\n      }\n      \n      const storeAnalysis = filteredReports.reduce((acc, report) => {\n        if (!acc[report.storeName]) {\n          acc[report.storeName] = { sales: 0, profit: 0, count: 0 }\n        }\n        const expenses = report.purchase + report.laborCost + report.utilities + \n                        report.promotion + report.cleaning + report.misc + \n                        report.communication + report.others\n        acc[report.storeName].sales += report.sales\n        acc[report.storeName].profit += (report.sales - expenses)\n        acc[report.storeName].count += 1\n        return acc\n      }, {} as Record<string, { sales: number; profit: number; count: number }>)\n\n      const ranking = Object.entries(storeAnalysis)\n        .map(([name, data]) => ({\n          name: name.replace('居酒屋いっき', ''),\n          sales: data.sales,\n          profit: data.profit,\n          profitMargin: data.sales > 0 ? (data.profit / data.sales) * 100 : 0\n        }))\n        .sort((a, b) => b.sales - a.sales)\n\n      // 豊洲店の特別実績を強調\n      const toyosuRanking = ranking.find(r => r.name.includes('豊洲'))\n      const hasSpecialEvent = filteredReports.some(r => \n        r.date === '2024-09-18' && r.storeId === 'store-toyosu'\n      )\n      return {\n        content: `🏆 **${context.storeId === 'all' ? '全店舗' : storeDisplayName}パフォーマンス分析**\\n\\n${ranking.map((store, i) => {\n          const isTop = i === 0\n          const isToyosu = store.name.includes('豊洲')\n          return `${isTop ? '👑' : `${i + 1}位.`} ${store.name}店\\n• 売上: ${formatCurrency(store.sales)}\\n• 利益率: ${formatPercent(store.profitMargin)}${isToyosu && hasSpecialEvent ? '\\n⭐ 特別イベント実績含む' : ''}`\n        }).join('\\n\\n')}${hasSpecialEvent ? '\\n\\n💡 **注目ポイント:**\\n豊洲店は9/18に市場見学ツアーコラボで記録的売上を達成' : ''}`,\n        suggestions: ['トップ店舗の成功要因', '改善が必要な店舗の対策', '全店舗共通の課題']\n      }\n    }\n\n    // 経費分析\n    if (q.includes('経費') || q.includes('コスト')) {\n      const expenseTotal = filteredReports.reduce((sum, r) => \n        sum + r.purchase + r.laborCost + r.utilities + r.promotion + \n        r.cleaning + r.misc + r.communication + r.others, 0)\n      const purchaseTotal = filteredReports.reduce((sum, r) => sum + r.purchase, 0)\n      const purchaseRatio = (purchaseTotal / expenseTotal) * 100\n\n      return {\n        content: `💸 **${storeDisplayName}の経費構造分析**\\n\\n💰 **総経費:** ${formatCurrency(expenseTotal)}\\n🥇 **最大項目:** 仕入 (${purchaseRatio.toFixed(1)}%)\\n\\n📊 選択店舗の経費比率分析が完了しました。`,\n        suggestions: ['経費削減戦略', '最適な経費比率', 'コスト管理のベストプラクティス']\n      }\n    }\n\n    // デフォルト応答\n    return {\n      content: `🤖 **AI分析システム稼働中**\\n\\n🏪 **分析対象:** ${storeDisplayName}\\n📊 **データ件数:** ${filteredReports.length}件\\n\\n利用可能な分析:\\n📊 業績分析\\n🏆 ${context.storeId === 'all' && user?.role === 'admin' ? '店舗比較' : '店舗分析'}\\n💸 経費分析\\n🎯 目標進捗\\n\\n具体的な質問をお聞かせください。`,\n      suggestions: [\n        '今月の業績サマリーを表示',\n        context.storeId === 'all' && user?.role === 'admin' ? '店舗別パフォーマンス分析' : '店舗詳細分析', \n        '経費構造を分析',\n        '目標達成状況を確認'\n      ]\n    }\n  }\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return\n\n    if (usageStatus?.isLimited) {\n      alert(`本日の利用上限（${usageStatus.dailyLimit}回）に達しました。\\n明日午前0時（日本時間）にリセットされます。`)\n      return\n    }\n\n    const userText = inputMessage\n    setInputMessage('')\n    setIsLoading(true)\n\n    const { error: userMsgError, conversationId: msgConvId } = await sendUserMessage(userText)\n\n    if (userMsgError) {\n      console.error('Failed to send user message:', userMsgError)\n      setIsLoading(false)\n      return\n    }\n\n    try {\n      // Prepare business data for ChatGPT context\n      // Filter data to selected store only for security\n      const selectedStoreName = accessibleStores.find(s => s.id === currentStoreId)?.name || '選択店舗'\n      \n      const businessData = {\n        totalSales: currentStoreKpis.totalSales,\n        totalExpenses: currentStoreKpis.totalExpenses,\n        profitMargin: currentStoreKpis.profitMargin,\n        reportCount: currentStoreKpis.reportCount,\n        analysisScope: currentStoreId === 'all' ? '全店舗' : selectedStoreName.replace('🏪 ', '').replace('🏢 ', ''),\n        stores: currentStoreId === 'all' \n          ? accessibleStores.map(s => s.name.replace('🏪 ', '').replace('🏢 ', ''))\n          : [selectedStoreName.replace('🏪 ', '').replace('🏢 ', '')],\n        recentEvents: currentStoreFilteredReports.some(r => r.date === '2024-09-18' && r.storeId === 'store-toyosu') \n          ? ['豊洲店2024年9月18日: 売上1,534,220円の記録的実績（豊洲市場見学ツアーコラボ）'] \n          : [],\n        currentMonth: {\n          sales: currentStoreKpis.totalSales,\n          profit: currentStoreKpis.operatingProfit,\n          margin: currentStoreKpis.profitMargin\n        }\n      }\n\n      // Get user session for Edge Function authentication\n      const { data: { session } } = await supabase!.auth.getSession()\n\n      // Call ChatGPT via Supabase Edge Function\n      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/chat-gpt`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${session?.access_token ?? import.meta.env.VITE_SUPABASE_ANON_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          messages: [\n            ...displayMessages.slice(-6).map(m => ({\n              role: m.type === 'user' ? 'user' : 'assistant',\n              content: m.content\n            })),\n            { role: 'user', content: userText }\n          ],\n          businessData,\n          storeId: currentStoreId\n        })\n      })\n\n      const result = await response.json()\n\n      let assistantContent: string\n\n      if (response.status === 429) {\n        assistantContent = result.message || result.error || '本日の利用上限に達しました。'\n        await appendAssistantMessage(assistantContent, undefined, msgConvId)\n        await refreshUsage()\n        setIsLoading(false)\n        return\n      }\n\n      if (result.success && result.response) {\n        assistantContent = result.response\n\n        if (result.usageInfo) {\n          await refreshUsage()\n        }\n      } else {\n        console.warn('ChatGPT API failed, using local fallback:', result.error)\n        const fallbackResponse = generateAIResponse(userText, {\n          kpisAll: currentStoreKpis,\n          kpisThisMonth: thisMonthKpis,\n          reports: currentStoreFilteredReports,\n          storeId: currentStoreId\n        })\n        assistantContent = `${fallbackResponse.content}\\n\\n💡 ローカル分析で対応中`\n      }\n\n      await appendAssistantMessage(assistantContent, { usage: result?.usage }, msgConvId)\n\n      if (archivedMessages.length < 2 && (conversationId || msgConvId)) {\n        await renameConversation(userText.slice(0, 30))\n      }\n    } catch (error) {\n      console.error('ChatGPT API error:', error)\n      await appendAssistantMessage('⚠️ AI応答に失敗しました。しばらくしてからお試しください。', undefined, msgConvId)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputMessage(suggestion)\n  }\n\n  const clearChat = async () => {\n    await startNewConversation(currentStoreId, '新しいチャット')\n  }\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim()) {\n      setSearchResults([])\n      return\n    }\n    const results = await search(searchQuery)\n    setSearchResults(results)\n  }\n\n  const handleLoadConversation = async (convId: string) => {\n    await loadMessages(convId)\n    setShowSidebar(false)\n    const newSearchParams = new URLSearchParams(location.search)\n    newSearchParams.set('conv', convId)\n    navigate(`${location.pathname}?${newSearchParams.toString()}`, { replace: true })\n  }\n\n  return (\n    <div className=\"w-full max-w-6xl mx-auto space-y-3 sm:space-y-6 px-2 sm:px-4 lg:px-0\">\n      <div className=\"flex gap-4\">\n        {showSidebar && (\n          <Card className=\"w-80 flex-shrink-0 h-[85vh] overflow-hidden\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <MessageSquare className=\"w-4 h-4\" />\n                会話履歴\n              </CardTitle>\n              <div className=\"flex gap-2 mt-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"検索...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n                  className=\"flex-1 px-2 py-1 text-xs border rounded\"\n                />\n                <Button size=\"sm\" variant=\"outline\" onClick={handleSearch}>\n                  <Search className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"overflow-y-auto h-[calc(100%-100px)] space-y-2\">\n              {searchResults.length > 0 ? (\n                <div className=\"space-y-2\">\n                  <p className=\"text-xs text-muted-foreground\">検索結果: {searchResults.length}件</p>\n                  {searchResults.map((result: any) => (\n                    <button\n                      key={result.conversation_id}\n                      onClick={() => handleLoadConversation(result.conversation_id)}\n                      className=\"w-full text-left p-2 rounded hover:bg-accent text-xs border\"\n                    >\n                      <div className=\"font-medium truncate\">{result.title}</div>\n                      <div className=\"text-muted-foreground line-clamp-2\">{result.snippet}</div>\n                    </button>\n                  ))}\n                </div>\n              ) : (\n                conversations.slice(0, 20).map((conv: any) => (\n                  <div key={conv.id} className=\"relative group\">\n                    <button\n                      onClick={() => handleLoadConversation(conv.id)}\n                      className={`w-full text-left p-2 rounded hover:bg-accent text-xs transition-colors ${\n                        conversationId === conv.id ? 'bg-accent' : ''\n                      }`}\n                    >\n                      <div className=\"font-medium truncate\">{conv.title || '新しいチャット'}</div>\n                      <div className=\"text-muted-foreground\">\n                        {new Date(conv.updated_at).toLocaleDateString('ja-JP')}\n                      </div>\n                    </button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => archiveConversation(conv.id)}\n                      className=\"absolute right-1 top-1 opacity-0 group-hover:opacity-100 h-6 w-6 p-0\"\n                    >\n                      <Archive className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n        )}\n        <div className=\"flex-1 space-y-3 sm:space-y-6\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg p-4 sm:p-6\">\n        <div className=\"flex flex-col gap-3\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-white/20 rounded-lg\">\n              <Brain className=\"w-6 h-6\" />\n            </div>\n            <div className=\"flex-1\">\n              <h1 className=\"text-base sm:text-xl font-bold\">AI経営アナリスト</h1>\n              <p className=\"text-xs text-blue-100\">\n                <span className=\"hidden sm:inline\">OpenAI GPT-4o-mini連携 - </span>\n                {user?.role === 'admin' ? '統括専用' : user?.role === 'manager' ? '店長専用' : 'スタッフ専用'}分析AI\n              </p>\n            </div>\n            <div className=\"hidden sm:block\">\n              <AIUsageIndicator status={usageStatus} loading={usageLoading} compact />\n            </div>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center gap-2 text-blue-100 text-xs\">\n              <Sparkles className=\"w-3 h-3\" />\n              <span>\n                {getAnalysisContext().split('：')[0]}データ: {reports.length}件\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"sm:hidden\">\n                <AIUsageIndicator status={usageStatus} loading={usageLoading} compact />\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <Badge className=\"bg-green-500/20 text-green-100 border-green-300/30 text-xs px-2 py-0\">\n                  <span className=\"hidden sm:inline\">ChatGPT</span>連携中\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Store Selector */}\n      <div className=\"md:hidden mb-4\">\n        <Card>\n          <CardHeader className=\"pb-2 px-4 py-3\">\n            <CardTitle className=\"text-sm flex items-center gap-2 truncate\">\n              <Store className=\"w-4 h-4 text-blue-600\" />\n              分析対象店舗 ({user?.role === 'admin' ? '全権限' : user?.role === 'manager' ? '担当店舗' : '勤務店舗'})\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-0 px-4 pb-3\">\n            <select\n              value={currentStoreId}\n              onChange={(e) => handleStoreChange(e.target.value)}\n              className=\"w-full px-3 py-3 text-sm border border-input rounded-lg bg-background focus:outline-none focus:ring-2 focus:ring-ring min-h-[44px] truncate\"\n            >\n              {accessibleStores.map(store => (\n                <option key={store.id} value={store.id}>\n                  {store.name}\n                </option>\n              ))}\n            </select>\n            <p className=\"text-xs text-muted-foreground mt-2 leading-relaxed\">\n              💡 {getAnalysisContext()}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Desktop Store Tabs */}\n      <div className=\"hidden md:block mb-6\">\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {accessibleStores.map(option => (\n            <Button\n              key={option.id}\n              onClick={() => handleStoreChange(option.id)}\n              className={`px-3 py-2 text-sm rounded-lg transition-colors ${\n                currentStoreId === option.id \n                  ? 'bg-primary text-primary-foreground' \n                  : 'bg-muted text-muted-foreground hover:bg-accent'\n              }`}\n            >\n              {option.name}\n            </Button>\n          ))}\n        </div>\n        <div className=\"text-xs text-muted-foreground p-2 bg-muted rounded\">\n          🔒 **{user?.role === 'admin' ? '統括権限' : user?.role === 'manager' ? '店長権限' : 'スタッフ権限'}**: {getAnalysisContext()}\n        </div>\n      </div>\n\n      {/* API Status Indicator */}\n\n      {/* Chat Interface */}\n      <Card className=\"h-[75vh] md:h-[600px] flex flex-col\">\n        <CardHeader className=\"pb-2 px-3 sm:px-6 py-3 sm:py-4 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2 text-sm sm:text-base truncate flex-1\">\n              <Bot className=\"w-5 h-5 text-blue-600\" />\n              <span className=\"hidden sm:inline\">AIアナリスト会話</span>\n              <span className=\"sm:hidden\">AI会話</span>\n              <Badge variant=\"outline\" className=\"text-xs hidden sm:inline-flex\">\n                {getStoreDisplayName(currentStoreId)}\n              </Badge>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {user?.role === 'admin' ? '統括' : user?.role === 'manager' ? '店長' : 'スタッフ'}権限\n              </Badge>\n            </CardTitle>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowSidebar(!showSidebar)}\n                className=\"text-muted-foreground px-2 sm:px-3\"\n              >\n                <MessageSquare className=\"w-4 h-4 md:mr-2\" />\n                <span className=\"hidden md:inline\">履歴</span>\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={clearChat}\n                className=\"text-muted-foreground px-2 sm:px-3\"\n              >\n                <Plus className=\"w-4 h-4 md:mr-2\" />\n                <span className=\"hidden md:inline\">新規</span>\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"flex-1 overflow-y-auto p-2 sm:p-4 space-y-4 sm:space-y-6\">\n          {displayMessages.map((message) => (\n            <div key={message.id} className=\"space-y-4\">\n              <div className={`flex gap-2 sm:gap-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>\n                {message.type === 'ai' && (\n                  <div className=\"w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"w-3 h-3 sm:w-4 sm:h-4 text-white\" />\n                  </div>\n                )}\n                <div className={`max-w-[85%] sm:max-w-[80%] ${message.type === 'user' ? 'order-1' : ''}`}>\n                  <div className={`px-3 sm:px-4 py-2 sm:py-3 rounded-xl sm:rounded-2xl text-xs sm:text-sm leading-relaxed ${\n                    message.type === 'user'\n                      ? 'bg-primary text-primary-foreground rounded-br-md'\n                      : 'bg-muted text-foreground rounded-bl-md'\n                  }`}>\n                    <div className=\"whitespace-pre-line break-words\">{message.content}</div>\n                    <p className={`text-xs mt-2 ${\n                      message.type === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground'\n                    }`}>\n                      {message.timestamp.toLocaleTimeString('ja-JP', { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </p>\n                  </div>\n                  \n                  {/* Suggestion buttons */}\n                  {message.type === 'ai' && message.suggestions && (\n                    <div className=\"mt-2 sm:mt-3 space-y-2\">\n                      <p className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                        <Lightbulb className=\"w-3 h-3\" />\n                        <span className=\"hidden sm:inline\">おすすめの分析:</span>\n                        <span className=\"sm:hidden\">おすすめ:</span>\n                      </p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {message.suggestions.map((suggestion, index) => (\n                          <Button\n                            key={index}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleSuggestionClick(suggestion)}\n                            className=\"text-xs h-auto py-1.5 px-2 sm:px-3 hover:bg-accent transition-colors break-words text-left\"\n                          >\n                            {suggestion.length > 15 ? `${suggestion.substring(0, 15)}...` : suggestion}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {message.type === 'user' && (\n                  <div className=\"w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-muted flex items-center justify-center flex-shrink-0\">\n                    <User className=\"w-3 h-3 sm:w-4 sm:h-4 text-muted-foreground\" />\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n          \n          {isLoading && (\n            <div className=\"flex gap-2 sm:gap-4 justify-start\">\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center flex-shrink-0\">\n                <Bot className=\"w-3 h-3 sm:w-4 sm:h-4 text-white\" />\n              </div>\n              <div className=\"bg-muted px-3 sm:px-4 py-2 sm:py-3 rounded-xl sm:rounded-2xl rounded-bl-md max-w-[85%] sm:max-w-[80%]\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex gap-1\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                  <span className=\"text-xs sm:text-sm text-muted-foreground\">\n                    <span className=\"hidden sm:inline\">高度分析処理中...</span>\n                    <span className=\"sm:hidden\">分析中...</span>\n                  </span>\n                  <Sparkles className=\"w-4 h-4 text-purple-500 animate-pulse\" />\n                </div>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </CardContent>\n        \n        {/* Input Area */}\n        <div className=\"p-3 sm:p-4 border-t border-border\">\n          <div className=\"flex gap-2 sm:gap-3\">\n            <div className=\"flex-1 relative\">\n              <input\n                type=\"text\"\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}\n                placeholder=\"例: 今月の売上は？\"\n                className=\"w-full px-3 sm:px-4 py-3 text-sm border border-input rounded-lg focus:outline-none focus:ring-2 focus:ring-ring bg-background min-h-[44px]\"\n                disabled={isLoading}\n              />\n            </div>\n            <Button\n              onClick={handleSendMessage}\n              disabled={isLoading || !inputMessage.trim() || usageStatus?.isLimited}\n              className=\"px-3 sm:px-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 min-h-[44px] min-w-[44px]\"\n              title={usageStatus?.isLimited ? '本日の利用上限に達しました' : ''}\n            >\n              {isLoading ? (\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n              ) : (\n                <Send className=\"w-4 h-4\" />\n              )}\n            </Button>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-2 flex items-center justify-between\">\n            <Sparkles className=\"w-3 h-3\" />\n            <span>\n              <span className=\"hidden sm:inline\">Enter送信 | </span>\n              {user?.role === 'admin' ? '統括専用' : user?.role === 'manager' ? '店長専用' : 'スタッフ専用'}AI\n            </span>\n          </p>\n        </div>\n      </Card>\n      \n      {/* Side Panel */}\n      <div className=\"mt-4 md:mt-6\">\n        <div className=\"md:hidden\">\n          <Card>\n            <CardHeader className=\"pb-2 px-4 py-3\">\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <Bot className=\"w-4 h-4 text-blue-600\" />\n                分析状況 ({user?.role === 'admin' ? '統括' : user?.role === 'manager' ? '店長' : 'スタッフ'}権限)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"px-4 pb-3\">\n              <div className=\"space-y-3\">\n                <AIUsageIndicator status={usageStatus} loading={usageLoading} />\n                <div className=\"grid grid-cols-2 gap-3 text-xs pt-3 border-t\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">アクセス可能データ</span>\n                    <span className=\"font-medium text-blue-600\">{reports.length}件</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">対象店舗数</span>\n                    <span className=\"font-medium text-green-600\">{accessibleStores.length}店舗</span>\n                  </div>\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  🔒 権限範囲: {user?.role === 'admin' ? '全店舗管理' : user?.role === 'manager' ? '担当店舗管理' : '勤務店舗のみ'}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <div className=\"hidden lg:block\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <Bot className=\"w-5 h-5 text-blue-600\" />\n                分析権限・状況\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-sm\">\n              <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                <div className=\"text-xs text-blue-800 font-medium mb-1\">\n                  {user?.name}さん ({user?.role === 'admin' ? '統括責任者' : user?.role === 'manager' ? '店長' : 'スタッフ'})\n                </div>\n                <div className=\"text-xs text-blue-700\">\n                  {getAnalysisContext()}\n                </div>\n              </div>\n\n              <div className=\"pt-2 border-t\">\n                <AIUsageIndicator status={usageStatus} loading={usageLoading} />\n              </div>\n\n              <div className=\"flex justify-between pt-2 border-t\">\n                <span className=\"text-muted-foreground\">アクセス可能データ</span>\n                <span className=\"font-medium text-blue-600\">{reports.length}件</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">対象店舗数</span>\n                <span className=\"font-medium text-green-600\">{accessibleStores.length}店舗</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">最終分析</span>\n                <span className=\"font-medium text-muted-foreground\">\n                  {new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })}\n                </span>\n              </div>\n              {user?.assignedStores && user.assignedStores.length > 0 && (\n                <div className=\"pt-2 border-t border-border\">\n                  <div className=\"text-xs text-muted-foreground mb-1\">担当店舗:</div>\n                  {user.assignedStores.slice(0, 3).map(store => (\n                    <div key={store.id} className=\"text-xs\">\n                      🏪 {store.name.replace('居酒屋いっき', '').replace('バールアフロマージュスーヴォワル', 'アフロ')}\n                    </div>\n                  ))}\n                  {user.assignedStores.length > 3 && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      他{user.assignedStores.length - 3}店舗...\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n        </div>\n      </div>\n      </div>\n    </div>\n  )\n}",
  "src/pages/AIReportsPage.tsx": "import { useState, useEffect } from 'react';\nimport { FileText, Plus, Filter } from 'lucide-react';\nimport { useSearchParams } from 'react-router-dom';\nimport { AIReportsList } from '../components/Reports/AIReportsList';\nimport { AIReportDetail } from '../components/Reports/AIReportDetail';\nimport { GenerateReportDialog } from '../components/Reports/GenerateReportDialog';\nimport { Button } from '../components/ui/button';\nimport { useAIReports } from '../hooks/useAIReports';\n\nexport function AIReportsPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const reportIdFromUrl = searchParams.get('report');\n  const [selectedReportId, setSelectedReportId] = useState<string | null>(reportIdFromUrl);\n  const [showGenerateDialog, setShowGenerateDialog] = useState(false);\n  const [filterType, setFilterType] = useState<'all' | 'weekly' | 'monthly'>('all');\n  const { reports, refetch, deleteReport } = useAIReports();\n\n  useEffect(() => {\n    if (reportIdFromUrl) {\n      setSelectedReportId(reportIdFromUrl);\n    }\n  }, [reportIdFromUrl]);\n\n  const selectedReport = selectedReportId\n    ? reports.find((r) => r.id === selectedReportId)\n    : null;\n\n  const filteredReports = filterType === 'all'\n    ? reports\n    : reports.filter((r) => r.report_type === filterType);\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      {selectedReport ? (\n        <AIReportDetail\n          report={selectedReport}\n          onBack={() => setSelectedReportId(null)}\n          onDelete={deleteReport}\n        />\n      ) : (\n        <>\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                  <FileText className=\"w-8 h-8 mr-3\" />\n                  AI分析レポート\n                </h1>\n                <p className=\"text-gray-600 mt-2\">\n                  AIが自動生成した詳細な業績分析レポート\n                </p>\n              </div>\n\n              <Button onClick={() => setShowGenerateDialog(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                レポート生成\n              </Button>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <Filter className=\"w-5 h-5 text-gray-400\" />\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={filterType === 'all' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setFilterType('all')}\n                >\n                  すべて\n                </Button>\n                <Button\n                  variant={filterType === 'weekly' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setFilterType('weekly')}\n                >\n                  期間指定\n                </Button>\n                <Button\n                  variant={filterType === 'monthly' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setFilterType('monthly')}\n                >\n                  月次\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <AIReportsList\n            onReportSelect={setSelectedReportId}\n          />\n        </>\n      )}\n\n      {showGenerateDialog && (\n        <GenerateReportDialog\n          onClose={() => setShowGenerateDialog(false)}\n          onSuccess={async (reportId) => {\n            setShowGenerateDialog(false);\n            await refetch();\n            setSelectedReportId(reportId);\n            setSearchParams({ report: reportId });\n          }}\n        />\n      )}\n    </div>\n  );\n}\n",
  "src/pages/AdminSettings.tsx": "import React, { useMemo, useState } from 'react'\nimport { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'\nimport { Badge } from '@/components/ui/badge'\nimport { useAdminData } from '@/contexts/AdminDataContext'\nimport { formatCurrency } from '@/lib/format'\nimport { PermissionGuard } from '@/components/Auth/PermissionGuard'\nimport { type VendorDb } from '@/services/supabase'\nimport { insertSampleData } from '@/services/sampleData'\nimport { Database, DollarSign, Brain, Shield } from 'lucide-react'\nimport { ExpenseBaselineSettings } from '@/components/Dashboard/ExpenseBaselineSettings'\nimport { AIUsageLimitManagement } from '@/components/Admin/AIUsageLimitManagement'\nimport { AuditLogViewer } from '@/components/Admin/AuditLogViewer'\n\ntype VendorForm = {\n  name: string\n  category: VendorDb['category']\n  contact_info: string\n  is_active: boolean\n}\n\nexport const AdminSettings: React.FC = () => {\n  const { \n    stores, targets, vendors, storeVendorAssignments,\n    addStore, updateStore, deleteStore, upsertTarget, deleteTarget,\n    addVendor, updateVendor, deleteVendor, getStoreVendors,\n    assignVendorToStore, unassignVendorFromStore\n  } = useAdminData()\n\n  const [storeForm, setStoreForm] = useState({\n    id: '', name: '', address: '', manager: '', isActive: true, editing: false\n  })\n  \n  const [vendorForm, setVendorForm] = useState<VendorForm & { id: string; editing: boolean }>({\n    id: '',\n    name: '',\n    category: 'others',\n    contact_info: '',\n    is_active: true,\n    editing: false\n  })\n  \n  const [error, setError] = useState<string>('')\n  const [sampleDataLoading, setSampleDataLoading] = useState(false)\n  const [sampleDataMessage, setSampleDataMessage] = useState<string>('')\n\n  const [assignmentForm, setAssignmentForm] = useState({\n    selectedStoreId: '',\n    unassignedVendors: [] as string[]\n  })\n\n  const [showExpenseBaselineModal, setShowExpenseBaselineModal] = useState(false)\n\n  const handleInsertSampleData = async () => {\n    if (!confirm('サンプルデータを投入します。既存のデータには影響しません。よろしいですか？')) {\n      return\n    }\n\n    setSampleDataLoading(true)\n    setSampleDataMessage('')\n\n    const result = await insertSampleData()\n\n    setSampleDataLoading(false)\n    setSampleDataMessage(result.message)\n\n    if (result.success) {\n      alert(`${result.message}\\n\\nページをリロードしてデータを確認してください。`)\n      window.location.reload()\n    } else {\n      alert(result.message)\n    }\n  }\n\n  const resetStoreForm = () => setStoreForm({ id:'', name:'', address:'', manager:'', isActive:true, editing:false })\n  const resetVendorForm = () => setVendorForm({ \n    id: '', \n    name: '', \n    category: 'others', \n    contact_info: '', \n    is_active: true, \n    editing: false \n  })\n\n  // 安全な onChange ハンドラ\n  const handleVendorFormChange = <K extends keyof VendorForm>(key: K) => \n    (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n      const value = e?.target?.value ?? ''\n      setVendorForm(prev => ({ ...prev, [key]: value }))\n    }\n  \n  const onSubmitStore = () => {\n    if (!(storeForm.name ?? '').trim()) return\n    if (storeForm.editing && storeForm.id) {\n      updateStore(storeForm.id, { name: storeForm.name, address: storeForm.address, manager: storeForm.manager, isActive: storeForm.isActive })\n    } else {\n      addStore({ id: storeForm.id || undefined, name: storeForm.name, address: storeForm.address, manager: storeForm.manager, isActive: storeForm.isActive })\n    }\n    resetStoreForm()\n  }\n\n  const onSubmitVendor = async () => {\n    setError('')\n    const name = (vendorForm.name ?? '').trim()\n    \n    if (!name) {\n      setError('業者名を入力してください')\n      return\n    }\n    \n    console.log('📝 onSubmitVendor: 開始', { editing: vendorForm.editing, id: vendorForm.id, name })\n    \n    if (vendorForm.editing && vendorForm.id) {\n      // 編集時は差分のみ送信\n      const updates: Partial<VendorDb> = {}\n      if (name !== vendors.find(v => v.id === vendorForm.id)?.name) {\n        updates.name = name\n      }\n      if (vendorForm.category !== vendors.find(v => v.id === vendorForm.id)?.category) {\n        updates.category = vendorForm.category\n      }\n      const trimmedContact = vendorForm.contact_info.trim()\n      if (trimmedContact !== (vendors.find(v => v.id === vendorForm.id)?.contact_info ?? '')) {\n        updates.contact_info = trimmedContact\n      }\n      if (vendorForm.is_active !== vendors.find(v => v.id === vendorForm.id)?.is_active) {\n        updates.is_active = vendorForm.is_active\n      }\n      \n      try {\n        await updateVendor(vendorForm.id, updates)\n        console.log('✅ onSubmitVendor: 更新完了')\n      } catch (err) {\n        console.error('❌ onSubmitVendor: 更新エラー:', err)\n        setError('業者の更新に失敗しました')\n        return\n      }\n    } else {\n      try {\n        await addVendor({\n          name,\n          category: vendorForm.category,\n          contactInfo: vendorForm.contact_info.trim(),\n          isActive: vendorForm.is_active\n        })\n        console.log('✅ onSubmitVendor: 新規作成完了')\n      } catch (err) {\n        console.error('❌ onSubmitVendor: 作成エラー:', err)\n        setError('業者の作成に失敗しました')\n        return\n      }\n    }\n    resetVendorForm()\n  }\n\n  const [targetForm, setTargetForm] = useState({\n    storeId: '',\n    period: new Date().toISOString().substring(0,7),\n    targetSales: 0,\n    targetProfitMargin: 20,\n    targetCostRate: 30,\n    targetLaborRate: 25\n  })\n  const [targetStatus, setTargetStatus] = useState<{ success: boolean; message: string } | null>(null)\n  const selectedStoreName = useMemo(() => stores.find(s => s.id === targetForm.storeId)?.name ?? '', [stores, targetForm.storeId])\n  const onSubmitTarget = async () => {\n    if (!targetForm.storeId || !targetForm.period) {\n      setTargetStatus({ success: false, message: '店舗と対象月を選択してください' })\n      setTimeout(() => setTargetStatus(null), 3000)\n      return\n    }\n\n    if (targetForm.targetSales === 0) {\n      setTargetStatus({ success: false, message: '目標売上を入力してください' })\n      setTimeout(() => setTargetStatus(null), 3000)\n      return\n    }\n\n    try {\n      const targetProfit = Math.round(targetForm.targetSales * (targetForm.targetProfitMargin / 100))\n      console.log('📊 目標保存:', {\n        storeId: targetForm.storeId,\n        period: targetForm.period,\n        targetSales: targetForm.targetSales,\n        targetProfit,\n        targetProfitMargin: targetForm.targetProfitMargin\n      })\n\n      await upsertTarget({\n        storeId: targetForm.storeId,\n        period: targetForm.period,\n        targetSales: targetForm.targetSales,\n        targetProfit,\n        targetProfitMargin: targetForm.targetProfitMargin,\n        targetCostRate: targetForm.targetCostRate,\n        targetLaborRate: targetForm.targetLaborRate\n      })\n\n      setTargetStatus({ success: true, message: `${selectedStoreName}の${targetForm.period}目標を保存しました` })\n      setTargetForm({ storeId: '', period: new Date().toISOString().substring(0,7), targetSales: 0, targetProfitMargin: 20, targetCostRate: 30, targetLaborRate: 25 })\n      setTimeout(() => setTargetStatus(null), 3000)\n    } catch (err) {\n      console.error('❌ 目標保存エラー:', err)\n      const errorMessage = err instanceof Error ? err.message : '保存に失敗しました'\n      setTargetStatus({ success: false, message: `保存に失敗: ${errorMessage}` })\n      setTimeout(() => setTargetStatus(null), 5000)\n    }\n  }\n\n  const categoryLabels = {\n    vegetable_meat: '野菜・肉類',\n    seafood: '魚介類',\n    alcohol: '酒類',\n    rice: '米穀',\n    seasoning: '調味料',\n    frozen: '冷凍食品',\n    dessert: '製菓・デザート',\n    others: 'その他'\n  }\n\n  return (\n    <PermissionGuard requiredRole=\"manager\">\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground\">設定（管理）</h1>\n        <p className=\"text-sm text-muted-foreground\">店舗情報、業者管理、月次目標の設定を行います。</p>\n      </div>\n\n      <Tabs defaultValue=\"stores\">\n        <TabsList>\n          <TabsTrigger value=\"stores\">店舗</TabsTrigger>\n          <TabsTrigger value=\"vendors\">業者</TabsTrigger>\n          <TabsTrigger value=\"targets\">月次目標</TabsTrigger>\n          <TabsTrigger value=\"audit-logs\">\n            <Shield className=\"w-4 h-4 mr-2\" />\n            監査ログ\n          </TabsTrigger>\n          <TabsTrigger value=\"expense-baseline\">参考経費</TabsTrigger>\n          <TabsTrigger value=\"ai-limits\">AI使用制限</TabsTrigger>\n        </TabsList>\n\n        {/* サンプルデータ投入 */}\n        {stores.length === 0 && (\n          <Card className=\"mt-4 bg-blue-50 border-blue-200\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start gap-4\">\n                <Database className=\"h-8 w-8 text-blue-600 flex-shrink-0 mt-1\" />\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-blue-900 mb-2\">初めてご利用の方へ</h3>\n                  <p className=\"text-sm text-blue-800 mb-4\">\n                    店舗・業者・目標値のサンプルデータを一括で投入できます。\n                    システムの動作確認やテストにご利用ください。\n                  </p>\n                  <Button\n                    onClick={handleInsertSampleData}\n                    disabled={sampleDataLoading}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <Database className=\"h-4 w-4 mr-2\" />\n                    {sampleDataLoading ? 'データ投入中...' : 'サンプルデータを投入'}\n                  </Button>\n                  {sampleDataMessage && (\n                    <p className=\"text-sm text-blue-700 mt-3\">{sampleDataMessage}</p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <TabsContent value=\"stores\" className=\"mt-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader><CardTitle>店舗の登録/編集</CardTitle></CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">店舗名</label>\n                  <input className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={storeForm.name} onChange={(e)=>setStoreForm(s=>({...s,name:e.target.value}))}/>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">住所</label>\n                  <input className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={storeForm.address} onChange={(e)=>setStoreForm(s=>({...s,address:e.target.value}))}/>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">店長/責任者</label>\n                  <input className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={storeForm.manager} onChange={(e)=>setStoreForm(s=>({...s,manager:e.target.value}))}/>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <input id=\"active\" type=\"checkbox\" checked={storeForm.isActive}\n                    onChange={(e)=>setStoreForm(s=>({...s,isActive:e.target.checked}))}/>\n                  <label htmlFor=\"active\" className=\"text-sm\">稼働中</label>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button onClick={onSubmitStore}>{storeForm.editing ? '更新' : '登録'}</Button>\n                  <Button variant=\"outline\" onClick={resetStoreForm}>クリア</Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader><CardTitle>登録済み店舗</CardTitle></CardHeader>\n              <CardContent className=\"space-y-3\">\n                {stores.map(s=>(\n                  <div key={s.id} className=\"flex items-center justify-between border border-border rounded-md px-3 py-2\">\n                    <div className=\"text-sm\">\n                      <div className=\"font-medium\">{s.name}</div>\n                      <div className=\"text-muted-foreground\">{s.address} / {s.manager}</div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant={s.isActive ? 'default' : 'secondary'}>{s.isActive ? '稼働' : '停止'}</Badge>\n                      <Button variant=\"outline\" size=\"sm\"\n                        onClick={()=>setStoreForm({ id:s.id, name:s.name, address:s.address, manager:s.manager, isActive:s.isActive, editing:true })}>\n                        編集\n                      </Button>\n                      <Button variant=\"destructive\" size=\"sm\" onClick={()=>deleteStore(s.id)}>削除</Button>\n                    </div>\n                  </div>\n                ))}\n                {stores.length===0 && <div className=\"text-sm text-muted-foreground\">店舗がありません。</div>}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"vendors\" className=\"mt-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader><CardTitle>業者の登録/編集</CardTitle></CardHeader>\n              <CardContent className=\"space-y-4\">\n                {error && (\n                  <div className=\"p-3 bg-red-50 border border-red-200 rounded text-sm text-red-700\">\n                    {error}\n                  </div>\n                )}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">業者名</label>\n                  <input className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={vendorForm.name} \n                    onChange={handleVendorFormChange('name')}\n                    placeholder=\"例：築地青果卸\"/>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">カテゴリ</label>\n                  <select className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={vendorForm.category} \n                    onChange={handleVendorFormChange('category')}>\n                    {Object.entries(categoryLabels).map(([value, label]) => (\n                      <option key={value} value={value}>{label}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">連絡先（任意）</label>\n                  <input className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={vendorForm.contact_info} \n                    onChange={handleVendorFormChange('contact_info')}\n                    placeholder=\"例：03-1234-5678\"/>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <input id=\"vendorActive\" type=\"checkbox\" checked={vendorForm.is_active}\n                    onChange={(e)=>setVendorForm(v=>({...v, is_active: e.target.checked}))}/>\n                  <label htmlFor=\"vendorActive\" className=\"text-sm\">使用中</label>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button \n                    onClick={onSubmitVendor}\n                    disabled={!(vendorForm.name ?? '').trim()}\n                  >\n                    {vendorForm.editing ? '更新' : '登録'}\n                  </Button>\n                  <Button variant=\"outline\" onClick={resetVendorForm}>クリア</Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader><CardTitle>登録済み業者</CardTitle></CardHeader>\n              <CardContent className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {/* 有効な業者 */}\n                <div>\n                  <h4 className=\"text-sm font-medium text-green-700 mb-2 flex items-center gap-1\">\n                    ✅ 使用中の業者 ({vendors.filter(v => v.isActive).length}件)\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {vendors.filter(v => v.isActive).map(v => (\n                      <div key={v.id} className=\"flex items-center justify-between border border-border rounded-md px-3 py-2 bg-green-50\">\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium\">\n                            📦 {(v.name ?? '').trim() !== '' ? v.name : '（名称未設定）'}\n                          </div>\n                          <div className=\"text-muted-foreground\">{categoryLabels[v.category]}</div>\n                          {(v.contact_info ?? '').trim() && (\n                            <div className=\"text-xs text-muted-foreground\">📞 {v.contact_info}</div>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"default\">使用中</Badge>\n                          <Button variant=\"outline\" size=\"sm\"\n                            onClick={() => setVendorForm({ \n                              id: v.id, \n                              name: (v.name ?? '').toString(), \n                              category: v.category ?? 'others', \n                              contact_info: (v.contact_info ?? '').toString(), \n                              is_active: v.is_active ?? true, \n                              editing: true \n                            })}>\n                            編集\n                          </Button>\n                          <Button variant=\"destructive\" size=\"sm\" \n                            onClick={() => {\n                              if (confirm(`業者「${(v.name ?? '').trim() || '（名称未設定）'}」を停止しますか？`)) {\n                                deleteVendor(v.id)\n                              }\n                            }}>\n                            停止\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                    {vendors.filter(v => v.isActive).length === 0 && (\n                      <div className=\"text-center py-4 text-muted-foreground\">\n                        使用中の業者がありません\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* 停止中の業者 */}\n                {vendors.filter(v => !v.isActive).length > 0 && (\n                  <div>\n                    <h4 className=\"text-sm font-medium text-red-700 mb-2 flex items-center gap-1\">\n                      ⛔ 停止中の業者 ({vendors.filter(v => !v.isActive).length}件)\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {vendors.filter(v => !v.isActive).map(v => (\n                        <div key={v.id} className=\"flex items-center justify-between border border-border rounded-md px-3 py-2 bg-red-50\">\n                          <div className=\"text-sm\">\n                            <div className=\"font-medium text-red-700\">\n                              📦 {(v.name ?? '').trim() !== '' ? v.name : '（名称未設定）'}\n                            </div>\n                            <div className=\"text-red-600\">\n                              {categoryLabels[v.category]}\n                              {(v.contact_info ?? '').trim() && ` / ${v.contact_info}`}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"destructive\">停止中</Badge>\n                            <Button variant=\"default\" size=\"sm\"\n                              onClick={() => {\n                                if (confirm(`業者「${(v.name ?? '').trim() || '（名称未設定）'}」を再開しますか？`)) {\n                                  updateVendor(v.id, { isActive: true })\n                                }\n                              }}>\n                              再開\n                            </Button>\n                            <Button variant=\"destructive\" size=\"sm\"\n                              onClick={() => {\n                                if (confirm(`業者「${(v.name ?? '').trim() || '（名称未設定）'}」を完全削除しますか？この操作は取り消せません。`)) {\n                                 deleteVendor(v.id)\n                                }\n                              }}>\n                              削除\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* 全業者がない場合のメッセージ */}\n                {vendors.length === 0 && (\n                  <div className=\"text-center py-6 text-muted-foreground\">\n                    <p className=\"text-sm\">業者がまだ登録されていません</p>\n                    <p className=\"text-xs mt-1\">👆 左側のフォームから業者を追加してください</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* 店舗別業者割り当て */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>店舗別業者割り当て</CardTitle>\n              <div className=\"text-sm text-muted-foreground mt-2\">\n                📋 <strong>手順：</strong>\n                <ol className=\"list-decimal list-inside mt-1 space-y-1\">\n                  <li>下から店舗を選択</li>\n                  <li>右側の「未割り当て業者」から「追加」で割り当て</li>\n                  <li>左側の「割り当て済み」から「削除」で解除</li>\n                </ol>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm\">店舗選択</label>\n                <select \n                  value={assignmentForm.selectedStoreId}\n                  onChange={(e)=>setAssignmentForm(f=>({...f, selectedStoreId:e.target.value}))}\n                  className=\"w-full border border-input rounded-md px-3 py-2 bg-background text-base min-h-[44px]\">\n                  <option value=\"\">選択してください</option>\n                  {stores.map(s=>(\n                    <option key={s.id} value={s.id}>🏪 {s.name}</option>\n                  ))}\n                </select>\n                {!assignmentForm.selectedStoreId && (\n                  <p className=\"text-xs text-blue-600\">👆 まず店舗を選択してください</p>\n                )}\n              </div>\n\n              {assignmentForm.selectedStoreId && (\n                <>\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4\">\n                  <p className=\"text-sm text-blue-800\">\n                    📍 <strong>{stores.find(s => s.id === assignmentForm.selectedStoreId)?.name}</strong> の業者管理\n                  </p>\n                  <p className=\"text-xs text-blue-600 mt-1\">\n                    現在 {getStoreVendors(assignmentForm.selectedStoreId).length}業者 / 全{vendors.filter(v=>v.isActive).length}業者中\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"text-sm font-medium mb-2 flex items-center gap-2\">\n                      ✅ 割り当て済み業者 ({getStoreVendors(assignmentForm.selectedStoreId).length}件)\n                    </h4>\n                    <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                      {getStoreVendors(assignmentForm.selectedStoreId).length === 0 ? (\n                        <div className=\"text-center py-6 text-muted-foreground border border-dashed border-border rounded\">\n                          <p className=\"text-sm\">まだ業者が割り当てられていません</p>\n                          <p className=\"text-xs mt-1\">右側から業者を追加してください →</p>\n                        </div>\n                      ) : getStoreVendors(assignmentForm.selectedStoreId).map(vendor => (\n                        <div key={vendor.id} className=\"flex items-center justify-between p-2 border border-border rounded text-sm\">\n                          <div>\n                            <div className=\"font-medium\">\n                              📦 {(vendor.name ?? '').trim() !== '' ? vendor.name : '（名称未設定）'}\n                            </div>\n                            <div className=\"text-muted-foreground\">{categoryLabels[vendor.category]}</div>\n                            {(vendor.contact_info ?? '').trim() && (\n                              <div className=\"text-xs text-muted-foreground\">📞 {vendor.contact_info}</div>\n                            )}\n                          </div>\n                          <Button size=\"sm\" variant=\"destructive\" \n                            onClick={()=>unassignVendorFromStore(assignmentForm.selectedStoreId, vendor.id)}>\n                            削除\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-sm font-medium mb-2 flex items-center gap-2\">\n                      ➕ 未割り当て業者 ({vendors.filter(v => v.isActive && !getStoreVendors(assignmentForm.selectedStoreId).some(av => av.id === v.id)).length}件)\n                    </h4>\n                    <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                      {vendors\n                        .filter(v => v.isActive && !getStoreVendors(assignmentForm.selectedStoreId).some(av => av.id === v.id))\n                        .length === 0 ? (\n                        <div className=\"text-center py-6 text-muted-foreground border border-dashed border-border rounded\">\n                          <p className=\"text-sm\">すべての業者が割り当て済みです</p>\n                          <p className=\"text-xs mt-1\">✅ 完了</p>\n                        </div>\n                      ) : vendors\n                        .filter(v => v.isActive && !getStoreVendors(assignmentForm.selectedStoreId).some(av => av.id === v.id))\n                        .map(vendor => (\n                        <div key={vendor.id} className=\"flex items-center justify-between p-2 border border-border rounded text-sm\">\n                          <div>\n                            <div className=\"font-medium\">\n                              📦 {(vendor.name ?? '').trim() !== '' ? vendor.name : '（名称未設定）'}\n                            </div>\n                            <div className=\"text-muted-foreground\">{categoryLabels[vendor.category]}</div>\n                            {(vendor.contact_info ?? '').trim() && (\n                              <div className=\"text-xs text-muted-foreground\">📞 {vendor.contact_info}</div>\n                            )}\n                          </div>\n                          <Button size=\"sm\" variant=\"default\"\n                            onClick={()=>assignVendorToStore(assignmentForm.selectedStoreId, vendor.id)}>\n                            追加\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                {/* 一括割り当てオプション */}\n                <div className=\"pt-4 border-t border-border\">\n                  <p className=\"text-sm font-medium mb-2\">クイック操作</p>\n                  <div className=\"flex gap-2 flex-wrap\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => {\n                        vendors.filter(v => v.isActive).forEach(vendor => {\n                          assignVendorToStore(assignmentForm.selectedStoreId, vendor.id)\n                        })\n                      }}\n                      disabled={!assignmentForm.selectedStoreId}\n                    >\n                      全業者を割り当て\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => {\n                        getStoreVendors(assignmentForm.selectedStoreId).forEach(vendor => {\n                          unassignVendorFromStore(assignmentForm.selectedStoreId, vendor.id)\n                        })\n                      }}\n                      disabled={!assignmentForm.selectedStoreId || getStoreVendors(assignmentForm.selectedStoreId).length === 0}\n                    >\n                      全業者の割り当て解除\n                    </Button>\n                  </div>\n                </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"targets\" className=\"mt-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader><CardTitle>月次目標の設定</CardTitle></CardHeader>\n              <CardContent className=\"space-y-4\">\n                {targetStatus && (\n                  <div className={`p-3 rounded-lg border ${\n                    targetStatus.success ? 'bg-green-50 border-green-200 text-green-800' : 'bg-red-50 border-red-200 text-red-800'\n                  }`}>\n                    {targetStatus.message}\n                  </div>\n                )}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">店舗</label>\n                  <select className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={targetForm.storeId}\n                    onChange={(e)=>setTargetForm(f=>({...f, storeId:e.target.value}))}>\n                    <option value=\"\">選択してください</option>\n                    {stores.map(s=>(\n                      <option key={s.id} value={s.id}>{s.name}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">対象月</label>\n                  <input type=\"month\" className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={targetForm.period}\n                    onChange={(e)=>setTargetForm(f=>({...f, period:e.target.value}))}/>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">月次目標売上（円）</label>\n                  <input\n                    type=\"text\"\n                    inputMode=\"numeric\"\n                    placeholder=\"8000000\"\n                    className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={targetForm.targetSales === 0 ? '' : targetForm.targetSales}\n                    onChange={(e)=>{\n                      const numValue = e.target.value.replace(/[^0-9]/g,'')\n                      setTargetForm(f=>({...f, targetSales: numValue === '' ? 0 : Number(numValue)}))\n                    }}\n                  />\n                  <div className=\"text-xs text-muted-foreground\">例: 8,000,000円（800万円）</div>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">目標営業利益率（%）</label>\n                  <input\n                    type=\"text\"\n                    inputMode=\"numeric\"\n                    placeholder=\"20\"\n                    className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={targetForm.targetProfitMargin === 0 ? '' : targetForm.targetProfitMargin}\n                    onChange={(e)=>{\n                      const numValue = e.target.value.replace(/[^0-9.]/g,'')\n                      setTargetForm(f=>({...f, targetProfitMargin: numValue === '' ? 0 : Number(numValue)}))\n                    }}\n                  />\n                  <div className=\"text-xs text-muted-foreground\">例: 20%（業界標準15-25%）</div>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">目標原価率（%）</label>\n                  <input\n                    type=\"text\"\n                    inputMode=\"numeric\"\n                    placeholder=\"30\"\n                    className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={targetForm.targetCostRate === 0 ? '' : targetForm.targetCostRate}\n                    onChange={(e)=>{\n                      const numValue = e.target.value.replace(/[^0-9.]/g,'')\n                      setTargetForm(f=>({...f, targetCostRate: numValue === '' ? 0 : Number(numValue)}))\n                    }}\n                  />\n                  <div className=\"text-xs text-muted-foreground\">例: 30%（飲食店の標準原価率）</div>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm\">目標人件費率（%）</label>\n                  <input\n                    type=\"text\"\n                    inputMode=\"numeric\"\n                    placeholder=\"25\"\n                    className=\"w-full border border-input rounded-md px-3 py-2 bg-background\"\n                    value={targetForm.targetLaborRate === 0 ? '' : targetForm.targetLaborRate}\n                    onChange={(e)=>{\n                      const numValue = e.target.value.replace(/[^0-9.]/g,'')\n                      setTargetForm(f=>({...f, targetLaborRate: numValue === '' ? 0 : Number(numValue)}))\n                    }}\n                  />\n                  <div className=\"text-xs text-muted-foreground\">例: 25%（飲食店の標準人件費率）</div>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  自動計算 目標営業利益：{formatCurrency(Math.round(targetForm.targetSales * (targetForm.targetProfitMargin/100)))}\n                  {targetForm.storeId && selectedStoreName && (\n                    <div className=\"mt-1 text-primary\">\n                      📊 {selectedStoreName} / {targetForm.period}\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={onSubmitTarget}\n                    disabled={!targetForm.storeId || !targetForm.period || targetForm.targetSales === 0}\n                  >\n                    保存/更新\n                  </Button>\n                  <Button variant=\"outline\" onClick={()=>setTargetForm({ storeId:'', period:new Date().toISOString().substring(0,7), targetSales:0, targetProfitMargin:20, targetCostRate:30, targetLaborRate:25 })}>\n                    クリア\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader><CardTitle>設定済み目標</CardTitle></CardHeader>\n              <CardContent className=\"space-y-3\">\n                {targets.length === 0 && <div className=\"text-sm text-muted-foreground\">目標がありません。</div>}\n                {targets\n                  .sort((a,b)=> (a.storeId+a.period).localeCompare(b.storeId+b.period))\n                  .map(t=>(\n                  <div key={`${t.storeId}-${t.period}`} className=\"flex items-center justify-between border border-border rounded-md px-3 py-2 text-sm\">\n                    <div>\n                      <div className=\"font-medium\">\n                        {stores.find(s=>s.id===t.storeId)?.name ?? t.storeId} / {t.period}\n                      </div>\n                      <div className=\"text-muted-foreground\">\n                        売上 {formatCurrency(t.targetSales)}・利益 {formatCurrency(t.targetProfit)}・利益率 {t.targetProfitMargin}%\n                        {(t.targetCostRate > 0 || t.targetLaborRate > 0) && (\n                          <span className=\"ml-2\">\n                            {t.targetCostRate > 0 && `・原価率 ${t.targetCostRate}%`}\n                            {t.targetLaborRate > 0 && `・人件費率 ${t.targetLaborRate}%`}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\" size=\"sm\"\n                        onClick={()=>setTargetForm({ storeId: t.storeId, period: t.period, targetSales: t.targetSales, targetProfitMargin: t.targetProfitMargin, targetCostRate: t.targetCostRate || 30, targetLaborRate: t.targetLaborRate || 25 })}>\n                        編集\n                      </Button>\n                      <Button variant=\"destructive\" size=\"sm\" onClick={()=>deleteTarget(t.storeId, t.period)}>削除</Button>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"expense-baseline\" className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                参考経費（月次平均）設定\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h3 className=\"font-semibold text-blue-900 mb-2\">参考経費とは？</h3>\n                  <ul className=\"text-sm text-blue-800 space-y-1 list-disc list-inside\">\n                    <li>日報入力時に、食材費以外の経費を参考値として表示する機能です</li>\n                    <li>光熱費・販促費・通信費など、請求書が月末に来る経費の月次平均を設定します</li>\n                    <li>日報では自動的に日割り計算され、「参考KPI」として営業利益・利益率を表示します</li>\n                    <li>翌月に確定値を月次経費として入力すれば、正確なPLに更新されます</li>\n                  </ul>\n                </div>\n\n                <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-amber-900 mb-2\">💡 使い方</h4>\n                  <ol className=\"text-sm text-amber-800 space-y-1 list-decimal list-inside\">\n                    <li>下のボタンから店舗・月を選んで参考経費を設定</li>\n                    <li>日報入力時に「参考KPI」として営業利益・利益率が表示されます</li>\n                    <li>翌月、確定した経費を「月次経費入力」で登録してPLを確定</li>\n                  </ol>\n                </div>\n\n                <Button\n                  onClick={() => setShowExpenseBaselineModal(true)}\n                  className=\"w-full sm:w-auto\"\n                >\n                  <DollarSign className=\"w-4 h-4 mr-2\" />\n                  参考経費を設定\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"ai-limits\" className=\"mt-4\">\n          <AIUsageLimitManagement />\n        </TabsContent>\n\n        <TabsContent value=\"audit-logs\" className=\"mt-4\">\n          <AuditLogViewer />\n        </TabsContent>\n      </Tabs>\n\n    </div>\n      {showExpenseBaselineModal && (\n        <ExpenseBaselineSettings\n          stores={stores}\n          onClose={() => setShowExpenseBaselineModal(false)}\n          onSaved={() => {\n            setShowExpenseBaselineModal(false)\n          }}\n        />\n      )}\n    </PermissionGuard>\n  )\n}",
  "src/pages/DashboardDaily.tsx": "import React, { useState, useMemo, useEffect, useCallback } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { TrendingUp, Wallet, PiggyBank, Percent, FileText, CreditCard as Edit, Trash2, ChevronLeft, ChevronRight } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { MetricCard } from '@/components/ui/MetricCard'\nimport { SalesChart } from '@/components/Charts/SalesChart'\nimport { ExpensePie } from '@/components/Charts/ExpensePie'\nimport { DataTable } from '@/components/data/DataTable'\nimport { KpiBullets } from '@/components/Charts/KpiBullets'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { EmptyState } from '@/components/ui/empty-state'\nimport { ErrorState } from '@/components/ui/error-state'\nimport { DailyTargetInput } from '@/components/Dashboard/DailyTargetInput'\nimport { useReports } from '@/hooks/useReports'\nimport { useKpis } from '@/hooks/useKpis'\nimport { useExpenseBaseline } from '@/hooks/useExpenseBaseline'\nimport { useTargets } from '@/hooks/useTargets'\nimport { useDailyTarget } from '@/hooks/useDailyTarget'\nimport { formatCurrency, formatPercent } from '@/lib/format'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { deleteDailyReport, getDailyTargets } from '@/services/supabase'\n\nexport const DashboardDaily: React.FC = () => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const sp = new URLSearchParams(location.search)\n  const storeId = sp.get('store') || 'all'\n  const { user, canAccessStore } = useAuth()\n  const [deleting, setDeleting] = useState<string | null>(null)\n  const [selectedDate, setSelectedDate] = useState<string | null>(null)\n  const [reportListPage, setReportListPage] = useState(0)\n  const reportsPerPage = 7\n\n  // ✅ onPeriodClick をメモ化\n  const handlePeriodClick = useCallback((date: string) => {\n    setSelectedDate(date)\n  }, [])\n\n  // 日報削除処理\n  const handleDelete = async (reportId: string, reportDate: string) => {\n    if (!confirm(`${reportDate}の日報を削除してもよろしいですか？\\nこの操作は取り消せません。`)) {\n      return\n    }\n\n    setDeleting(reportId)\n    try {\n      const { error } = await deleteDailyReport(reportId)\n      if (error) {\n        console.error('削除エラー:', error)\n        alert('日報の削除に失敗しました')\n      } else {\n        console.log('✅ 日報を削除しました:', reportId)\n        // データを再読み込み\n        refetch()\n      }\n    } catch (e) {\n      console.error('削除エラー:', e)\n      alert('日報の削除に失敗しました')\n    } finally {\n      setDeleting(null)\n    }\n  }\n\n  // 権限チェック\n  useEffect(() => {\n    if (!user) return\n\n    // 全店舗表示はadminのみ許可\n    if (storeId === 'all' && user.role !== 'admin') {\n      const accessibleStores = user.storeIds || []\n      if (accessibleStores.length > 0) {\n        navigate(`/dashboard/daily?store=${accessibleStores[0]}`, { replace: true })\n      }\n      return\n    }\n\n    // 特定店舗選択時の権限チェック\n    if (storeId !== 'all' && !canAccessStore(storeId)) {\n      const accessibleStores = user.storeIds || []\n      if (accessibleStores.length > 0) {\n        navigate(`/dashboard/daily?store=${accessibleStores[0]}`, { replace: true })\n      } else if (user.role !== 'admin') {\n        navigate('/dashboard/daily', { replace: true })\n      }\n    }\n  }, [storeId, user?.id, user?.role, canAccessStore, navigate])\n\n  // Get today's data\n  const today = new Date().toISOString().split('T')[0]\n  const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n\n  // 今月のデータ（月初から今日まで）\n  const now = new Date()\n  const monthStart = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().split('T')[0]\n  const currentYYYYMM = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`\n  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n  const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n\n  // フィルターオブジェクトをメモ化\n  const todayFilters = useMemo(() => ({\n    storeId,\n    dateFrom: today,\n    dateTo: today\n  }), [storeId, today])\n\n  const yesterdayFilters = useMemo(() => ({\n    storeId,\n    dateFrom: yesterday,\n    dateTo: yesterday\n  }), [storeId, yesterday])\n\n  const weekFilters = useMemo(() => ({\n    storeId,\n    dateFrom: sevenDaysAgo,\n    dateTo: today\n  }), [storeId, sevenDaysAgo, today])\n\n  const allReportsFilters = useMemo(() => ({\n    storeId,\n    dateFrom: thirtyDaysAgo,\n    dateTo: today\n  }), [storeId, thirtyDaysAgo, today])\n\n  const { data: todayReports, isLoading, isError, error, refetch } = useReports(todayFilters)\n  const { data: yesterdayReports } = useReports(yesterdayFilters)\n  const { data: weekReports } = useReports(weekFilters)\n  const { data: allReports } = useReports(allReportsFilters)\n\n  // 過去30日間の日別目標を取得\n  const [dailyTargets, setDailyTargets] = React.useState<Record<string, number>>({})\n\n  // デバッグ: dailyTargetsの状態を監視\n  React.useEffect(() => {\n    console.log('📊 dailyTargets状態更新:', dailyTargets)\n  }, [dailyTargets])\n\n  React.useEffect(() => {\n    const fetchDailyTargets = async () => {\n      if (storeId === 'all') {\n        console.log('🎯 日別目標取得スキップ: 全店舗表示')\n        return\n      }\n\n      console.log('🎯 日別目標を取得中...', { storeId, dateFrom: thirtyDaysAgo, dateTo: today })\n      const { data, error } = await getDailyTargets({\n        storeId,\n        dateFrom: thirtyDaysAgo,\n        dateTo: today\n      })\n\n      console.log('🎯 日別目標取得結果:', { data, error })\n\n      if (data && !error) {\n        const targetsMap: Record<string, number> = {}\n        data.forEach((target: any) => {\n          targetsMap[target.date] = target.target_sales\n        })\n        console.log('🎯 日別目標マップ:', targetsMap)\n        setDailyTargets(targetsMap)\n      }\n    }\n\n    fetchDailyTargets()\n  }, [storeId, thirtyDaysAgo, today])\n\n  const { data: monthReports } = useReports({\n    storeId,\n    dateFrom: monthStart,\n    dateTo: today\n  })\n\n  // 参考経費データを取得\n  const { expenseBaseline } = useExpenseBaseline(storeId !== 'all' ? storeId : undefined, currentYYYYMM)\n\n  // 目標データを取得\n  const { getTargetForStore, getAllStoresTarget } = useTargets(storeId, currentYYYYMM)\n\n  // 日別目標データを取得（本日のみ、選択日は対象外）\n  const displayDate = selectedDate || today\n  const { target: dailyTarget, saveTarget: saveDailyTarget, isLoading: dailyTargetLoading } = useDailyTarget(\n    storeId !== 'all' ? storeId : null,\n    displayDate\n  )\n\n  // 月の経過日数を計算（今日が何日目か）\n  const daysIntoMonth = now.getDate()\n\n  const todayKpis = useKpis(todayReports, yesterdayReports)\n  const weekKpis = useKpis(weekReports)\n  const monthKpis = useKpis(monthReports)\n\n  // 店舗またはall店舗の目標を取得\n  const currentTarget = useMemo(() => {\n    if (storeId === 'all') {\n      return getAllStoresTarget()\n    } else {\n      const target = getTargetForStore(storeId)\n      return target ? {\n        targetSales: target.targetSales,\n        targetProfit: target.targetProfit,\n        targetProfitMargin: target.targetProfitMargin,\n        targetCostRate: target.targetCostRate,\n        targetLaborRate: target.targetLaborRate\n      } : null\n    }\n  }, [storeId, getTargetForStore, getAllStoresTarget])\n\n  // 選択された日付のデータを取得\n  const selectedDateReports = React.useMemo(() => {\n    return selectedDate\n      ? weekReports.filter(r => r.date === selectedDate)\n      : todayReports\n  }, [selectedDate, weekReports, todayReports])\n\n  const selectedDateYesterday = React.useMemo(() => {\n    return selectedDate\n      ? new Date(new Date(selectedDate).getTime() - 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n      : yesterday\n  }, [selectedDate, yesterday])\n\n  const selectedDateYesterdayReports = React.useMemo(() => {\n    return weekReports.filter(r => r.date === selectedDateYesterday)\n  }, [weekReports, selectedDateYesterday])\n\n  // 選択された日付のKPIを常に計算（Hooksのルールに従う）\n  const selectedDateKpis = useKpis(selectedDateReports, selectedDateYesterdayReports)\n\n  // 表示用のKPIを選択日付または本日で切り替え\n  const displayKpis = selectedDate ? selectedDateKpis : todayKpis\n\n  // その他経費を計算（参考経費を使用）\n  const otherExpenses = React.useMemo(() => {\n    // 実際のその他経費を計算\n    const actualOtherExpenses = selectedDateReports.reduce((sum, report) => {\n      return sum + report.utilities + report.promotion + report.cleaning +\n             report.misc + report.communication + report.others +\n             (report.rent || 0) + (report.consumables || 0)\n    }, 0)\n\n    // 実際の経費がある場合はそれを使用、なければ参考経費を使用\n    if (actualOtherExpenses > 0) {\n      return actualOtherExpenses\n    }\n\n    // 参考経費から1日あたりの経費を計算\n    if (expenseBaseline && expenseBaseline.sumOther > 0) {\n      return expenseBaseline.sumOther\n    }\n\n    return 0\n  }, [selectedDateReports, expenseBaseline])\n\n  // 営業利益を計算（粗利益 - その他経費）\n  const operatingProfit = React.useMemo(() => {\n    return displayKpis.grossProfit - otherExpenses\n  }, [displayKpis.grossProfit, otherExpenses])\n\n  // 選択された日付の本日の経費を計算（仕入+その他経費）\n  const selectedDateExpenses = React.useMemo(() => {\n    return displayKpis.purchaseTotal + otherExpenses\n  }, [displayKpis.purchaseTotal, otherExpenses])\n\n  // 目標達成状況を計算（将来の機能拡張用に保持）\n  const targetAchievement = React.useMemo((): {\n    targetSales: number\n    actualSales: number\n    achievementRate: number\n    isAchieved: boolean\n    difference: number\n  } | null => {\n    if (!dailyTarget || dailyTarget.targetSales === 0) {\n      return null\n    }\n\n    const actualSales = displayKpis.totalSales\n    const targetSales = dailyTarget.targetSales\n    const achievementRate = (actualSales / targetSales) * 100\n    const isAchieved = actualSales >= targetSales\n    const difference = actualSales - targetSales\n\n    return {\n      targetSales,\n      actualSales,\n      achievementRate,\n      isAchieved,\n      difference\n    }\n  }, [dailyTarget, displayKpis.totalSales])\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Skeleton className=\"h-96\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    )\n  }\n\n  if (isError && error) {\n    return (\n      <ErrorState\n        title=\"データの読み込みに失敗しました\"\n        message={error}\n        onRetry={refetch}\n      />\n    )\n  }\n\n  if (weekReports.length === 0) {\n    return (\n      <EmptyState\n        icon={FileText}\n        title=\"データがありません\"\n        description=\"日次報告を作成すると、ここにダッシュボードが表示されます。\"\n        action={{\n          label: \"サンプルデータを生成\",\n          onClick: () => window.location.reload()\n        }}\n      />\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-2\">\n            日次ダッシュボード\n            {storeId === 'all' ? (\n              <Badge variant=\"default\" className=\"ml-2 bg-blue-600\">\n                全店舗集計\n              </Badge>\n            ) : (\n              user?.role !== 'admin' && (\n                <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                  {user?.role === 'manager' ? '店長権限' : 'スタッフ権限'}\n                </Badge>\n              )\n            )}\n            {selectedDate && (\n              <Badge variant=\"default\" className=\"ml-2 bg-purple-600\">\n                {selectedDate} のデータ\n              </Badge>\n            )}\n          </h1>\n          {selectedDate && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSelectedDate(null)}\n            >\n              本日に戻る\n            </Button>\n          )}\n        </div>\n        <p className=\"text-muted-foreground\">\n          分析期間: {new Date(displayDate).toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })}\n        </p>\n        <p className=\"text-muted-foreground text-sm\">\n          {storeId === 'all'\n            ? '全登録店舗の本日の業績と過去7日間のトレンド分析（合計値）'\n            : '本日の業績と過去7日間のトレンド分析'\n          }\n          {storeId !== 'all' && user?.role !== 'admin' && (\n            <span className=\"text-blue-600 ml-2\">（担当店舗データ）</span>\n          )}\n        </p>\n      </div>\n\n      {/* 日別売上目標入力 */}\n      {storeId !== 'all' && (\n        <Card className=\"border-blue-200 bg-blue-50/50\">\n          <CardContent className=\"pt-6\">\n            {!selectedDate ? (\n              <DailyTargetInput\n                date={today}\n                storeId={storeId}\n                currentTarget={dailyTarget?.targetSales || null}\n                onSave={saveDailyTarget}\n                isLoading={dailyTargetLoading}\n              />\n            ) : (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4 text-blue-600\" />\n                  <span className=\"text-sm font-medium text-muted-foreground\">\n                    {selectedDate}の売上目標\n                  </span>\n                </div>\n                {dailyTargets[selectedDate] ? (\n                  <div className=\"text-lg font-bold text-blue-600\">\n                    {formatCurrency(dailyTargets[selectedDate])}\n                  </div>\n                ) : (\n                  <div className=\"text-sm text-muted-foreground italic\">\n                    目標未設定\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <MetricCard\n          label={selectedDate ? `${selectedDate}の売上` : \"本日の売上\"}\n          value={formatCurrency(displayKpis.totalSales)}\n          delta={displayKpis.salesGrowth !== undefined ? {\n            value: displayKpis.salesGrowth,\n            isPositive: displayKpis.salesGrowth >= 0,\n            label: \"前日比\"\n          } : undefined}\n          icon={TrendingUp}\n          tone=\"info\"\n          hint={`${displayKpis.reportCount}件の報告`}\n          details={displayKpis.totalCustomers > 0 ? [\n            { label: '平均客単価', value: formatCurrency(displayKpis.averageTicket) },\n            { label: '客数', value: `${displayKpis.totalCustomers.toLocaleString()}人` }\n          ] : [\n            { label: '客数データ', value: '未入力' }\n          ]}\n        />\n\n        <MetricCard\n          label={selectedDate ? `${selectedDate}の経費` : \"本日の経費\"}\n          value={formatCurrency(selectedDateExpenses)}\n          icon={Wallet}\n          tone=\"danger\"\n          hint=\"仕入+その他経費\"\n          details={[\n            { label: '仕入', value: `${formatCurrency(displayKpis.purchaseTotal)} (${formatPercent(displayKpis.purchaseRate)})` },\n            { label: 'その他経費', value: formatCurrency(otherExpenses) }\n          ]}\n        />\n\n        <MetricCard\n          label={selectedDate ? `${selectedDate}の粗利益` : \"本日の粗利益\"}\n          value={formatCurrency(displayKpis.grossProfit)}\n          icon={PiggyBank}\n          tone={displayKpis.grossProfit >= 0 ? \"success\" : \"danger\"}\n          hint=\"売上 - 仕入\"\n          details={[\n            { label: '原価率', value: formatPercent(displayKpis.purchaseRate) },\n            { label: '粗利率', value: formatPercent(100 - displayKpis.purchaseRate) }\n          ]}\n        />\n\n        <MetricCard\n          label={selectedDate ? `${selectedDate}の営業利益` : \"本日の営業利益\"}\n          value={formatCurrency(operatingProfit)}\n          delta={displayKpis.profitGrowth !== undefined ? {\n            value: displayKpis.profitGrowth,\n            isPositive: displayKpis.profitGrowth >= 0,\n            label: \"前日比\"\n          } : undefined}\n          icon={Percent}\n          tone={operatingProfit >= 0 ? \"success\" : \"danger\"}\n          hint={`利益率 ${formatPercent(displayKpis.totalSales > 0 ? (operatingProfit / displayKpis.totalSales) * 100 : 0)}`}\n          details={[\n            { label: '粗利益', value: formatCurrency(displayKpis.grossProfit) },\n            { label: 'その他経費', value: formatCurrency(otherExpenses) }\n          ]}\n        />\n      </div>\n\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <SalesChart\n          reports={weekReports}\n          period=\"daily\"\n          targetSales={todayKpis.averageDailySales * 1.2} // 20% above average as target\n          expenseBaseline={expenseBaseline}\n        />\n        <ExpensePie\n          reports={monthReports}\n          period=\"monthly\"\n          title=\"今月の経費内訳\"\n          expenseBaseline={expenseBaseline}\n          daysCount={daysIntoMonth}\n        />\n      </div>\n\n      {/* Data Table */}\n      <DataTable\n        reports={allReports}\n        period=\"daily\"\n        groupByStore={false}\n        onPeriodClick={handlePeriodClick}\n        dailyTargets={dailyTargets}\n        baselineMap={new Map()}\n      />\n\n      {/* 日報リスト（編集可能） */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">\n            日報一覧\n            <span className=\"ml-2 text-sm font-normal text-muted-foreground\">\n              {allReports.length}件\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {allReports.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground\">日報データがありません</p>\n          ) : (\n            <>\n              <div className=\"space-y-3\">\n                {allReports.slice(reportListPage * reportsPerPage, (reportListPage + 1) * reportsPerPage).map((report) => {\n                const grossProfit = report.sales - report.purchase\n                const grossProfitMargin = report.sales > 0 ? (grossProfit / report.sales) * 100 : 0\n\n                return (\n                  <div key={report.id} className=\"flex flex-col p-3 sm:p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <button\n                          onClick={() => setSelectedDate(report.date)}\n                          className={`font-medium text-sm sm:text-base hover:text-blue-600 transition-colors ${selectedDate === report.date ? 'text-purple-600 underline' : ''}`}\n                        >\n                          {report.date}\n                        </button>\n                        <Badge variant=\"outline\" className=\"text-xs\">{report.storeName}</Badge>\n                        {report.staffName && <span className=\"text-xs sm:text-sm text-muted-foreground\">by {report.staffName}</span>}\n                      </div>\n                      <div className=\"flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-4 text-xs sm:text-sm\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-blue-600\">売上: {formatCurrency(report.sales)}</span>\n                          {dailyTargets[report.date] && (\n                            <Badge\n                              variant={report.sales >= dailyTargets[report.date] ? \"default\" : \"destructive\"}\n                              className={report.sales >= dailyTargets[report.date] ? \"bg-green-600\" : \"\"}\n                            >\n                              {report.sales >= dailyTargets[report.date] ? \"達成\" : \"未達成\"}\n                            </Badge>\n                          )}\n                        </div>\n                        <span className=\"text-red-600\">仕入: {formatCurrency(report.purchase)}</span>\n                        <span className={grossProfit >= 0 ? 'text-green-600' : 'text-red-600'}>\n                          粗利益: {formatCurrency(grossProfit)} ({formatPercent(grossProfitMargin)})\n                        </span>\n                      </div>\n                      {report.reportText && (\n                        <p className=\"text-xs sm:text-sm text-muted-foreground line-clamp-2\">{report.reportText}</p>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-2 mt-3 pt-3 border-t\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => navigate(`/report?id=${report.id}`)}\n                        className=\"flex-1\"\n                      >\n                        <Edit className=\"h-4 w-4 mr-1\" />\n                        編集\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(report.id, report.date)}\n                        disabled={deleting === report.id}\n                        className=\"flex-1\"\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        {deleting === report.id ? '削除中...' : '削除'}\n                      </Button>\n                    </div>\n                  </div>\n                )\n              })}\n              </div>\n\n              {/* Pagination */}\n              <div className=\"flex items-center justify-between pt-4 border-t\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {allReports.length} 件中{' '}\n                  {reportListPage * reportsPerPage + 1}-\n                  {Math.min((reportListPage + 1) * reportsPerPage, allReports.length)} 件を表示\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setReportListPage(prev => Math.max(0, prev - 1))}\n                    disabled={reportListPage === 0}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    前へ\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setReportListPage(prev => prev + 1)}\n                    disabled={(reportListPage + 1) * reportsPerPage >= allReports.length}\n                  >\n                    次へ\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}",
  "src/pages/DashboardMonthly.tsx": "import React, { useState, useMemo, useEffect, useCallback } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { TrendingUp, Wallet, PiggyBank, Percent, FileText } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge'\nimport { MetricCard } from '@/components/ui/MetricCard'\nimport { SalesChart } from '@/components/Charts/SalesChart'\nimport { ExpensePie } from '@/components/Charts/ExpensePie'\nimport { DataTable } from '@/components/data/DataTable'\nimport { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { KpiBullets } from '@/components/Charts/KpiBullets'\nimport { CalendarHeatmap } from '@/components/Charts/CalendarHeatmap'\nimport { ProfitWaterfall } from '@/components/Charts/ProfitWaterfall'\nimport { AlertsPanel } from '@/components/alerts/AlertsPanel'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { EmptyState } from '@/components/ui/empty-state'\nimport { ErrorState } from '@/components/ui/error-state'\nimport { useReports } from '@/hooks/useReports'\nimport { useKpis } from '@/hooks/useKpis'\nimport { useExpenseBaseline } from '@/hooks/useExpenseBaseline'\nimport { useTargets } from '@/hooks/useTargets'\nimport { formatCurrency, formatPercent } from '@/lib/format'\nimport { ProfitLossModal } from '@/components/analysis/ProfitLossModal'\nimport { useAuth } from '@/contexts/AuthContext'\n\nexport const DashboardMonthly: React.FC = () => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const sp = new URLSearchParams(location.search)\n  const storeId = sp.get('store') || 'all'\n  const { user, canAccessStore } = useAuth()\n\n  // 今月のデータ（KPI用）- 日付計算は一度だけ実行\n  const { now, thisMonthStart, today, currentYYYYMM, lastMonthStart, lastMonthEnd, currentYear, currentMonth } = useMemo(() => {\n    const currentDate = new Date()\n    const year = currentDate.getFullYear()\n    const month = currentDate.getMonth()\n    const monthStart = new Date(year, month, 1)\n    const todayStr = currentDate.toISOString().split('T')[0]\n    const yyyymm = `${year}-${String(month + 1).padStart(2, '0')}`\n    const prevMonthStart = new Date(year, month - 1, 1)\n    const prevMonthEnd = new Date(year, month, 0)\n\n    return {\n      now: currentDate,\n      thisMonthStart: monthStart,\n      today: todayStr,\n      currentYYYYMM: yyyymm,\n      lastMonthStart: prevMonthStart,\n      lastMonthEnd: prevMonthEnd,\n      currentYear: year,\n      currentMonth: month\n    }\n  }, [])\n\n  console.log('🗓️ DashboardMonthly: Date range', {\n    now: now.toISOString(),\n    thisMonthStart: thisMonthStart.toISOString().split('T')[0],\n    today,\n    month: now.getMonth() + 1,\n    year: now.getFullYear()\n  })\n  const { getTargetForStore, getAllStoresTarget } = useTargets(storeId, currentYYYYMM)\n  const { expenseBaseline, monthlyExpenseBaseline } = useExpenseBaseline(storeId, currentYYYYMM)\n\n  // 権限チェック\n  useEffect(() => {\n    if (!user) return\n\n    // 全店舗表示はadminのみ許可\n    if (storeId === 'all' && user.role !== 'admin') {\n      const accessibleStores = user.storeIds || []\n      if (accessibleStores.length > 0) {\n        navigate(`/dashboard/monthly?store=${accessibleStores[0]}`, { replace: true })\n      }\n      return\n    }\n\n    // 特定店舗選択時の権限チェック\n    if (storeId !== 'all' && !canAccessStore(storeId)) {\n      const accessibleStores = user.storeIds || []\n      if (accessibleStores.length > 0) {\n        navigate(`/dashboard/monthly?store=${accessibleStores[0]}`, { replace: true })\n      } else if (user.role !== 'admin') {\n        navigate('/dashboard/monthly', { replace: true })\n      }\n    }\n  }, [storeId, user?.id, user?.role, canAccessStore, navigate])\n\n  // 表示範囲：3/6/12ヶ月（デフォルト3ヶ月）\n  const [rangeMonths, setRangeMonths] = useState<3 | 6 | 12>(3)\n  const [selectedMonth, setSelectedMonth] = useState<string | null>(null)\n\n  // ✅ onPeriodClick をメモ化（DataTable の columns 再生成を防ぐ）\n  const handlePeriodClick = useCallback((period: string) => {\n    setSelectedMonth(period)\n  }, [])\n\n  // フィルターオブジェクトをメモ化して無限ループを防ぐ\n  const thisMonthFilters = useMemo(() => ({\n    storeId,\n    dateFrom: thisMonthStart.toISOString().split('T')[0],\n    dateTo: today\n  }), [storeId, thisMonthStart, today])\n\n  const lastMonthFilters = useMemo(() => ({\n    storeId,\n    dateFrom: lastMonthStart.toISOString().split('T')[0],\n    dateTo: lastMonthEnd.toISOString().split('T')[0]\n  }), [storeId, lastMonthStart, lastMonthEnd])\n\n  const { data: thisMonthReports, isLoading, isError, error, refetch } = useReports(thisMonthFilters)\n  const { data: lastMonthReports } = useReports(lastMonthFilters)\n\n  // 表示範囲分のデータ（グラフ/テーブル/円グラフ用）\n  const rangeStartDate = useMemo(() => {\n    // ✅ 日付文字列として計算（Dateオブジェクトを依存配列に入れない）\n    const year = currentYear\n    const month = currentMonth - (rangeMonths - 1)\n    return new Date(year, month, 1).toISOString().split('T')[0]\n  }, [currentYear, currentMonth, rangeMonths])\n\n  const rangeFilters = useMemo(() => ({\n    storeId,\n    dateFrom: rangeStartDate,\n    dateTo: today\n  }), [storeId, rangeStartDate, today])\n\n  const { data: rangeReports } = useReports(rangeFilters)\n\n  const thisMonthKpis = useKpis(thisMonthReports, lastMonthReports)\n  const yearKpis = useKpis(rangeReports)\n\n  // ✅ DataTable用: rangeReports全体のbaselineMapを作成\n  const baselineMap = useMemo(() => {\n    const map = new Map<string, import('@/services/supabase').ExpenseBaselineDb>()\n    // 必要な月×店舗の組み合わせを収集\n    const keysNeeded = new Set<string>()\n    rangeReports.forEach(r => {\n      const yyyymm = r.date.slice(0, 7)\n      keysNeeded.add(`${r.storeId}-${yyyymm}`)\n    })\n    // ※ 今は空のMapを返す（次のステップで実装）\n    return map\n  }, [rangeReports])\n\n  // 月次のその他経費を計算（参考経費を使用、人件費を除外）\n  const thisMonthOtherExpenses = useMemo(() => {\n    // 実際のその他経費を計算（人件費は含まない）\n    const actualOtherExpenses = thisMonthReports.reduce((sum, report) => {\n      return sum + report.utilities + report.promotion + report.cleaning +\n             report.misc + report.communication + report.others +\n             (report.rent || 0) + (report.consumables || 0)\n    }, 0)\n\n    // 実際の経費がある場合はそれを使用、なければ参考経費を使用\n    if (actualOtherExpenses > 0) {\n      return actualOtherExpenses\n    }\n\n    // 参考経費から日数分の経費を計算（人件費を除外）\n    if (expenseBaseline && expenseBaseline.sumOther > 0) {\n      // sumOtherには人件費が含まれていないことを確認\n      return expenseBaseline.sumOther * thisMonthReports.length\n    }\n\n    return 0\n  }, [thisMonthReports, expenseBaseline])\n\n  // 月次の人件費と営業利益を再計算\n  const adjustedThisMonthKpis = useMemo(() => {\n    // 参考経費から日数に応じた月の想定人件費を計算\n    const daysInMonth = thisMonthReports.length\n    const monthlyLaborCostFromBaseline = monthlyExpenseBaseline.laborCost > 0\n      ? (monthlyExpenseBaseline.laborCost / 30) * daysInMonth\n      : 0\n\n    // 実際の人件費（日報入力値）\n    const actualLaborCost = thisMonthKpis.laborTotal\n\n    // どちらか大きい方を使用（または参考経費がない場合は実際の値）\n    const adjustedLaborCost = monthlyLaborCostFromBaseline > 0\n      ? monthlyLaborCostFromBaseline\n      : actualLaborCost\n\n    // FLコストと率を再計算\n    const adjustedPrimeCost = thisMonthKpis.purchaseTotal + adjustedLaborCost\n    const adjustedLaborRate = thisMonthKpis.totalSales > 0 ? (adjustedLaborCost / thisMonthKpis.totalSales) * 100 : 0\n    const adjustedPrimeCostRate = thisMonthKpis.totalSales > 0 ? (adjustedPrimeCost / thisMonthKpis.totalSales) * 100 : 0\n\n    // 営業利益を再計算（粗利益 - 人件費 - その他経費）\n    const operatingProfit = thisMonthKpis.grossProfit - adjustedLaborCost - thisMonthOtherExpenses\n    const profitMargin = thisMonthKpis.totalSales > 0 ? (operatingProfit / thisMonthKpis.totalSales) * 100 : 0\n\n    return {\n      ...thisMonthKpis,\n      laborTotal: adjustedLaborCost,\n      laborRate: adjustedLaborRate,\n      primeCost: adjustedPrimeCost,\n      primeCostRate: adjustedPrimeCostRate,\n      operatingProfit,\n      profitMargin\n    }\n  }, [thisMonthKpis, thisMonthOtherExpenses, monthlyExpenseBaseline, thisMonthReports])\n\n  // 店舗またはall店舗の目標を取得\n  const currentTarget = useMemo(() => {\n    if (storeId === 'all') {\n      return getAllStoresTarget()\n    } else {\n      const target = getTargetForStore(storeId)\n      return target ? {\n        targetSales: target.targetSales,\n        targetProfit: target.targetProfit,\n        targetProfitMargin: target.targetProfitMargin,\n        targetCostRate: target.targetCostRate,\n        targetLaborRate: target.targetLaborRate\n      } : null\n    }\n  }, [storeId, getTargetForStore, getAllStoresTarget])\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Skeleton className=\"h-96\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    )\n  }\n\n  if (isError && error) {\n    return (\n      <ErrorState\n        title=\"データの読み込みに失敗しました\"\n        message={error}\n        onRetry={refetch}\n      />\n    )\n  }\n\n  if (rangeReports.length === 0) {\n    return (\n      <EmptyState\n        icon={FileText}\n        title=\"データがありません\"\n        description=\"日次報告を作成すると、ここに月次ダッシュボードが表示されます。\"\n        action={{\n          label: \"サンプルデータを生成\",\n          onClick: () => window.location.reload()\n        }}\n      />\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground mb-2\">\n          月次ダッシュボード\n          {storeId === 'all' && (\n            <Badge variant=\"default\" className=\"ml-2 bg-blue-600\">\n              全店舗集計\n            </Badge>\n          )}\n        </h1>\n        <p className=\"text-muted-foreground text-sm\">\n          分析期間: {thisMonthStart.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })} 〜 {now.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })}\n        </p>\n        <p className=\"text-muted-foreground text-sm\">\n          {storeId === 'all'\n            ? `全登録店舗の今月の業績と過去${rangeMonths}ヶ月のトレンド分析（合計値）`\n            : `今月の業績と過去${rangeMonths}ヶ月のトレンド分析`\n          }\n        </p>\n        {/* 表示範囲切替 */}\n        <div className=\"flex justify-end\">\n          <Tabs value={String(rangeMonths)} onValueChange={(v)=>setRangeMonths(Number(v) as 3|6|12)}>\n            <TabsList>\n              <TabsTrigger value=\"3\">直近3ヶ月</TabsTrigger>\n              <TabsTrigger value=\"6\">直近6ヶ月</TabsTrigger>\n              <TabsTrigger value=\"12\">直近12ヶ月</TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-7 gap-6\">\n        <MetricCard\n          label=\"今月の売上\"\n          value={formatCurrency(adjustedThisMonthKpis.totalSales)}\n          delta={adjustedThisMonthKpis.salesGrowth !== undefined ? {\n            value: adjustedThisMonthKpis.salesGrowth,\n            isPositive: adjustedThisMonthKpis.salesGrowth >= 0,\n            label: \"前月比\"\n          } : undefined}\n          icon={TrendingUp}\n          tone=\"info\"\n          hint={`${adjustedThisMonthKpis.reportCount}件の報告`}\n          details={adjustedThisMonthKpis.totalCustomers > 0 ? [\n            { label: '平均客単価', value: formatCurrency(adjustedThisMonthKpis.averageTicket) },\n            { label: '客数', value: `${adjustedThisMonthKpis.totalCustomers.toLocaleString()}人` }\n          ] : [\n            { label: '客数データ', value: '未入力' }\n          ]}\n        />\n\n        <MetricCard\n          label=\"FLコスト率\"\n          value={formatPercent(adjustedThisMonthKpis.primeCostRate)}\n          icon={Percent}\n          tone={adjustedThisMonthKpis.primeCostRate <= 58 ? 'success' : adjustedThisMonthKpis.primeCostRate <= 62 ? 'warning' : 'danger'}\n          hint={`原価率${formatPercent(adjustedThisMonthKpis.purchaseRate)}${currentTarget?.targetCostRate ? ` (目標${formatPercent(currentTarget.targetCostRate)})` : ''} / 人件費率${formatPercent(adjustedThisMonthKpis.laborRate)}${currentTarget?.targetLaborRate ? ` (目標${formatPercent(currentTarget.targetLaborRate)})` : ''}`}\n          details={[\n            { label: '仕入', value: formatCurrency(adjustedThisMonthKpis.purchaseTotal) },\n            { label: '人件費', value: formatCurrency(adjustedThisMonthKpis.laborTotal) },\n            { label: 'FLコスト', value: formatCurrency(adjustedThisMonthKpis.primeCost) }\n          ]}\n        />\n\n        <MetricCard\n          label=\"FL以外の経費\"\n          value={formatCurrency(thisMonthOtherExpenses)}\n          icon={Wallet}\n          tone=\"danger\"\n          hint=\"FL以外の経費（参考経費から算出）\"\n          details={expenseBaseline ? [\n            { label: '水道光熱費', value: formatCurrency(expenseBaseline.utilities * thisMonthReports.length) },\n            { label: '家賃', value: formatCurrency(expenseBaseline.rent * thisMonthReports.length) },\n            { label: '消耗品費', value: formatCurrency(expenseBaseline.consumables * thisMonthReports.length) },\n            { label: '販促費', value: formatCurrency(expenseBaseline.promotion * thisMonthReports.length) },\n            { label: '清掃費', value: formatCurrency(expenseBaseline.cleaning * thisMonthReports.length) },\n            { label: '通信費', value: formatCurrency(expenseBaseline.communication * thisMonthReports.length) },\n            { label: 'その他', value: formatCurrency((expenseBaseline.misc + expenseBaseline.others) * thisMonthReports.length) }\n          ] : []}\n        />\n\n        <MetricCard\n          label=\"今月の粗利益\"\n          value={formatCurrency(adjustedThisMonthKpis.grossProfit)}\n          icon={PiggyBank}\n          tone={adjustedThisMonthKpis.grossProfit >= 0 ? \"success\" : \"danger\"}\n          hint=\"売上 - 仕入\"\n          details={[\n            { label: '粗利率', value: formatPercent(100 - adjustedThisMonthKpis.purchaseRate) }\n          ]}\n        />\n\n        <MetricCard\n          label=\"営業利益率\"\n          value={formatPercent(adjustedThisMonthKpis.profitMargin)}\n          icon={Percent}\n          tone={adjustedThisMonthKpis.profitMargin >= 15 ? \"success\" : adjustedThisMonthKpis.profitMargin >= 10 ? \"warning\" : \"danger\"}\n          hint=\"営業利益 ÷ 売上高\"\n          details={[\n            { label: '営業利益', value: formatCurrency(adjustedThisMonthKpis.operatingProfit) }\n          ]}\n        />\n\n        <MetricCard\n          label=\"平均日商\"\n          value={formatCurrency(adjustedThisMonthKpis.averageDailySales)}\n          icon={FileText}\n          tone=\"neutral\"\n          hint=\"1日あたり平均\"\n        />\n\n        <MetricCard\n          label=\"客数\"\n          value={adjustedThisMonthKpis.totalCustomers > 0 ? `${adjustedThisMonthKpis.totalCustomers.toLocaleString('ja-JP')} 名` : '未入力'}\n          icon={FileText}\n          tone={adjustedThisMonthKpis.totalCustomers > 0 ? \"info\" : \"neutral\"}\n          hint={adjustedThisMonthKpis.totalCustomers > 0 ? `平均客単価: ${formatCurrency(adjustedThisMonthKpis.averageTicket)}` : \"日報で客数を入力してください\"}\n        />\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <SalesChart\n          reports={rangeReports}\n          period=\"monthly\"\n          maxPoints={rangeMonths}\n          targetSales={currentTarget?.targetSales}\n          onDataPointClick={(period) => setSelectedMonth(period)}\n          expenseBaseline={expenseBaseline}\n        />\n        <ExpensePie\n          reports={rangeReports}\n          period=\"monthly\"\n          expenseBaseline={expenseBaseline}\n        />\n      </div>\n\n      {/* 視覚で全体把握・要因把握 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <CalendarHeatmap reports={thisMonthReports} />\n        <ProfitWaterfall\n          reports={thisMonthReports}\n          expenseBaseline={expenseBaseline}\n          adjustedLaborCost={adjustedThisMonthKpis.laborTotal}\n        />\n      </div>\n\n      {/* アラート */}\n      <AlertsPanel\n        kpis={adjustedThisMonthKpis}\n        targetCostRate={currentTarget?.targetCostRate}\n        targetLaborRate={currentTarget?.targetLaborRate}\n      />\n\n      {/* Data Table */}\n      <DataTable\n        reports={rangeReports}\n        period=\"monthly\"\n        groupByStore={false}\n        onPeriodClick={handlePeriodClick}\n        baselineMap={baselineMap}\n      />\n\n      {/* P&L Modal */}\n      {selectedMonth && (\n        <ProfitLossModal\n          month={selectedMonth}\n          reports={rangeReports}\n          storeId={storeId}\n          onClose={() => setSelectedMonth(null)}\n        />\n      )}\n    </div>\n  )\n}",
  "src/pages/DashboardWeekly.tsx": "import React, { useMemo, useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { TrendingUp, Wallet, PiggyBank, Percent, FileText } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge'\nimport { MetricCard } from '@/components/ui/MetricCard'\nimport { SalesChart } from '@/components/Charts/SalesChart'\nimport { ExpensePie } from '@/components/Charts/ExpensePie'\nimport { DataTable } from '@/components/data/DataTable'\nimport { KpiBullets } from '@/components/Charts/KpiBullets'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { EmptyState } from '@/components/ui/empty-state'\nimport { ErrorState } from '@/components/ui/error-state'\nimport { useReports } from '@/hooks/useReports'\nimport { useKpis } from '@/hooks/useKpis'\nimport { useExpenseBaseline } from '@/hooks/useExpenseBaseline'\nimport { useTargets } from '@/hooks/useTargets'\nimport { formatCurrency, formatPercent } from '@/lib/format'\nimport { useAuth } from '@/contexts/AuthContext'\n\nexport const DashboardWeekly: React.FC = () => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const sp = new URLSearchParams(location.search)\n  const storeId = sp.get('store') || 'all'\n  const { user, canAccessStore } = useAuth()\n  const currentPeriod = new Date().toISOString().substring(0, 7)\n  const { expenseBaseline } = useExpenseBaseline(storeId, currentPeriod)\n  const { getTargetForStore, getAllStoresTarget } = useTargets(storeId, currentPeriod)\n\n  // 権限チェック\n  useEffect(() => {\n    if (!user) return\n\n    // 全店舗表示はadminのみ許可\n    if (storeId === 'all' && user.role !== 'admin') {\n      const accessibleStores = user.storeIds || []\n      if (accessibleStores.length > 0) {\n        navigate(`/dashboard/weekly?store=${accessibleStores[0]}`, { replace: true })\n      }\n      return\n    }\n\n    // 特定店舗選択時の権限チェック\n    if (storeId !== 'all' && !canAccessStore(storeId)) {\n      const accessibleStores = user.storeIds || []\n      if (accessibleStores.length > 0) {\n        navigate(`/dashboard/weekly?store=${accessibleStores[0]}`, { replace: true })\n      } else if (user.role !== 'admin') {\n        navigate('/dashboard/weekly', { replace: true })\n      }\n    }\n  }, [storeId, user?.id, user?.role, canAccessStore, navigate])\n\n  // Get this week's data - 日付計算は一度だけ実行\n  const { thisWeekStart, thisWeekEnd, lastWeekStart, lastWeekEnd, twoWeeksStart, now } = useMemo(() => {\n    const currentDate = new Date()\n    const weekStart = new Date(currentDate)\n    weekStart.setDate(currentDate.getDate() - currentDate.getDay())\n\n    const weekEnd = new Date(weekStart)\n    weekEnd.setDate(weekStart.getDate() + 6)\n\n    const prevWeekStart = new Date(weekStart)\n    prevWeekStart.setDate(weekStart.getDate() - 7)\n\n    const prevWeekEnd = new Date(weekStart)\n    prevWeekEnd.setDate(weekStart.getDate() - 1)\n\n    const twoWeeksAgo = new Date(currentDate)\n    twoWeeksAgo.setDate(currentDate.getDate() - 13)\n\n    return {\n      thisWeekStart: weekStart,\n      thisWeekEnd: weekEnd,\n      lastWeekStart: prevWeekStart,\n      lastWeekEnd: prevWeekEnd,\n      twoWeeksStart: twoWeeksAgo,\n      now: currentDate\n    }\n  }, [])\n\n  // フィルターオブジェクトをメモ化\n  const thisWeekFilters = useMemo(() => ({\n    storeId,\n    dateFrom: thisWeekStart.toISOString().split('T')[0],\n    dateTo: thisWeekEnd.toISOString().split('T')[0]\n  }), [storeId, thisWeekStart, thisWeekEnd])\n\n  const lastWeekFilters = useMemo(() => ({\n    storeId,\n    dateFrom: lastWeekStart.toISOString().split('T')[0],\n    dateTo: lastWeekEnd.toISOString().split('T')[0]\n  }), [storeId, lastWeekStart, lastWeekEnd])\n\n  const twoWeeksFilters = useMemo(() => ({\n    storeId,\n    dateFrom: twoWeeksStart.toISOString().split('T')[0],\n    dateTo: now.toISOString().split('T')[0]\n  }), [storeId, twoWeeksStart, now])\n\n  const monthFilters = useMemo(() => ({\n    storeId,\n    dateFrom: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    dateTo: new Date().toISOString().split('T')[0]\n  }), [storeId])\n\n  const { data: thisWeekReports, isLoading, isError, error, refetch } = useReports(thisWeekFilters)\n  const { data: lastWeekReports } = useReports(lastWeekFilters)\n  const { data: twoWeeksReports } = useReports(twoWeeksFilters)\n  const { data: monthReports } = useReports(monthFilters)\n\n  const thisWeekKpis = useKpis(thisWeekReports, lastWeekReports)\n  const monthKpis = useKpis(monthReports)\n\n  // 店舗またはall店舗の目標を取得\n  const currentTarget = useMemo(() => {\n    if (storeId === 'all') {\n      return getAllStoresTarget()\n    } else {\n      const target = getTargetForStore(storeId)\n      return target ? {\n        targetSales: target.targetSales,\n        targetProfit: target.targetProfit,\n        targetProfitMargin: target.targetProfitMargin,\n        targetCostRate: target.targetCostRate,\n        targetLaborRate: target.targetLaborRate\n      } : null\n    }\n  }, [storeId, getTargetForStore, getAllStoresTarget])\n\n  // その他経費を計算（人件費を除く）\n  const otherExpenses = useMemo(() => {\n    return thisWeekReports.reduce((sum, report) => {\n      return sum + report.utilities + report.promotion + report.cleaning +\n             report.misc + report.communication + report.others +\n             (report.rent || 0) + (report.consumables || 0)\n    }, 0)\n  }, [thisWeekReports])\n\n  // 今週の経費を計算（仕入+その他経費）\n  const weekExpenses = useMemo(() => {\n    return thisWeekKpis.purchaseTotal + otherExpenses\n  }, [thisWeekKpis.purchaseTotal, otherExpenses])\n\n  // 営業利益を計算（粗利益 - その他経費）\n  const operatingProfit = useMemo(() => {\n    return thisWeekKpis.grossProfit - otherExpenses\n  }, [thisWeekKpis.grossProfit, otherExpenses])\n\n  // FLコスト（仕入+人件費）を計算\n  const flCost = useMemo(() => {\n    return thisWeekKpis.purchaseTotal + thisWeekKpis.laborTotal\n  }, [thisWeekKpis.purchaseTotal, thisWeekKpis.laborTotal])\n\n  // 週次目標を計算（月次目標を週換算）\n  const weeklyTargets = useMemo(() => {\n    if (!currentTarget) return null\n    const weeksInMonth = 4.33\n    return {\n      targetSales: currentTarget.targetSales / weeksInMonth,\n      targetFLCost: (currentTarget.targetSales / weeksInMonth) * ((currentTarget.targetCostRate + currentTarget.targetLaborRate) / 100),\n      targetOperatingProfit: (currentTarget.targetSales / weeksInMonth) * (currentTarget.targetProfitMargin / 100)\n    }\n  }, [currentTarget])\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Skeleton className=\"h-96\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    )\n  }\n\n  if (isError && error) {\n    return (\n      <ErrorState\n        title=\"データの読み込みに失敗しました\"\n        message={error}\n        onRetry={refetch}\n      />\n    )\n  }\n\n  if (monthReports.length === 0) {\n    return (\n      <EmptyState\n        icon={FileText}\n        title=\"データがありません\"\n        description=\"日次報告を作成すると、ここに週次ダッシュボードが表示されます。\"\n        action={{\n          label: \"サンプルデータを生成\",\n          onClick: () => window.location.reload()\n        }}\n      />\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground mb-2\">\n          週次ダッシュボード\n          {storeId === 'all' && (\n            <Badge variant=\"default\" className=\"ml-2 bg-blue-600\">\n              全店舗集計\n            </Badge>\n          )}\n        </h1>\n        <p className=\"text-muted-foreground\">\n          分析期間: {thisWeekStart.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })} 〜 {thisWeekEnd.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })}\n        </p>\n        <p className=\"text-muted-foreground text-sm\">\n          {storeId === 'all'\n            ? '全登録店舗の今週の業績と過去30日間のトレンド分析（合計値）'\n            : '今週の業績と過去30日間のトレンド分析'\n          }\n        </p>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <MetricCard\n          label=\"今週の売上\"\n          value={formatCurrency(thisWeekKpis.totalSales)}\n          delta={thisWeekKpis.salesGrowth !== undefined ? {\n            value: thisWeekKpis.salesGrowth,\n            isPositive: thisWeekKpis.salesGrowth >= 0,\n            label: \"先週比\"\n          } : undefined}\n          icon={TrendingUp}\n          tone=\"info\"\n          hint={`${thisWeekKpis.reportCount}件の報告`}\n          details={thisWeekKpis.totalCustomers > 0 ? [\n            { label: '平均客単価', value: formatCurrency(thisWeekKpis.averageTicket) },\n            { label: '客数', value: `${thisWeekKpis.totalCustomers.toLocaleString()}人` }\n          ] : [\n            { label: '客数データ', value: '未入力' }\n          ]}\n        />\n\n        <MetricCard\n          label=\"今週の経費\"\n          value={formatCurrency(weekExpenses)}\n          icon={Wallet}\n          tone=\"danger\"\n          hint=\"仕入+その他経費\"\n          details={[\n            { label: '仕入', value: `${formatCurrency(thisWeekKpis.purchaseTotal)} (${formatPercent(thisWeekKpis.purchaseRate)})` },\n            { label: 'その他経費', value: formatCurrency(otherExpenses) }\n          ]}\n        />\n\n        <MetricCard\n          label=\"今週の粗利益\"\n          value={formatCurrency(thisWeekKpis.grossProfit)}\n          icon={PiggyBank}\n          tone={thisWeekKpis.grossProfit >= 0 ? \"success\" : \"danger\"}\n          hint=\"売上 - 仕入\"\n          details={[\n            { label: '原価率', value: formatPercent(thisWeekKpis.purchaseRate) },\n            { label: '粗利率', value: formatPercent(100 - thisWeekKpis.purchaseRate) }\n          ]}\n        />\n\n        <MetricCard\n          label=\"今週の営業利益\"\n          value={formatCurrency(operatingProfit)}\n          delta={thisWeekKpis.profitGrowth !== undefined ? {\n            value: thisWeekKpis.profitGrowth,\n            isPositive: thisWeekKpis.profitGrowth >= 0,\n            label: \"先週比\"\n          } : undefined}\n          icon={Percent}\n          tone={operatingProfit >= 0 ? \"success\" : \"danger\"}\n          hint={`利益率 ${formatPercent(thisWeekKpis.totalSales > 0 ? (operatingProfit / thisWeekKpis.totalSales) * 100 : 0)}`}\n          details={[\n            { label: '粗利益', value: formatCurrency(thisWeekKpis.grossProfit) },\n            { label: 'その他経費', value: formatCurrency(otherExpenses) }\n          ]}\n        />\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <SalesChart\n          reports={monthReports}\n          period=\"weekly\"\n          targetSales={thisWeekKpis.averageDailySales * 7 * 1.15} // 15% above weekly average\n          expenseBaseline={expenseBaseline}\n        />\n        <ExpensePie\n          reports={twoWeeksReports}\n          period=\"weekly\"\n          title=\"過去2週間の経費内訳\"\n          expenseBaseline={expenseBaseline}\n          daysCount={14}\n        />\n      </div>\n\n      {/* Data Table */}\n      <DataTable reports={monthReports} period=\"weekly\" groupByStore={false} baselineMap={new Map()} />\n    </div>\n  )\n}",
  "src/pages/InvitationAccept.tsx": "import React, { useState, useEffect } from 'react'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Building, CheckCircle, XCircle, AlertTriangle, Loader } from 'lucide-react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { getInvitationByToken, acceptInvitation } from '@/services/organizationService'\n\ninterface Invitation {\n  id: string\n  email: string\n  role: string\n  token: string\n  status: string\n  expires_at: string\n  organization: {\n    id: string\n    name: string\n    slug: string\n  }\n}\n\nexport const InvitationAccept: React.FC = () => {\n  const { token } = useParams<{ token: string }>()\n  const navigate = useNavigate()\n  const { user, isAuthenticated } = useAuth()\n  const [invitation, setInvitation] = useState<Invitation | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [accepting, setAccepting] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState(false)\n\n  useEffect(() => {\n    if (token) {\n      loadInvitation()\n    }\n  }, [token])\n\n  const loadInvitation = async () => {\n    if (!token) return\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const { data, error: fetchError } = await getInvitationByToken(token)\n\n      if (fetchError || !data) {\n        setError('招待が見つかりません。リンクが無効か、既に使用されている可能性があります。')\n        return\n      }\n\n      if (new Date(data.expires_at) < new Date()) {\n        setError('この招待は有効期限が切れています')\n        return\n      }\n\n      setInvitation(data as Invitation)\n    } catch (err) {\n      setError('招待情報の取得に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAccept = async () => {\n    if (!token || !user?.id || !invitation) return\n\n    try {\n      setAccepting(true)\n      setError(null)\n\n      const { data, error: acceptError } = await acceptInvitation(token, user.id)\n\n      if (acceptError) {\n        setError(acceptError.message || '招待の承認に失敗しました')\n        return\n      }\n\n      if (data) {\n        setSuccess(true)\n        setTimeout(() => {\n          navigate('/dashboard/daily')\n        }, 2000)\n      }\n    } catch (err) {\n      setError('招待の承認に失敗しました')\n    } finally {\n      setAccepting(false)\n    }\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-6\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <AlertTriangle className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-bold text-slate-900 mb-2\">ログインが必要です</h2>\n              <p className=\"text-slate-600 mb-6\">\n                招待を承認するには、まずログインしてください\n              </p>\n              <Button\n                onClick={() => navigate('/login')}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                ログインページへ\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-6\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <Loader className=\"w-12 h-12 text-blue-600 mx-auto mb-4 animate-spin\" />\n              <p className=\"text-slate-600\">招待情報を確認しています...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-6\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <XCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-bold text-slate-900 mb-2\">エラー</h2>\n              <p className=\"text-slate-600 mb-6\">{error}</p>\n              <Button\n                onClick={() => navigate('/dashboard/daily')}\n                className=\"w-full bg-slate-600 hover:bg-slate-700 text-white\"\n              >\n                ダッシュボードへ戻る\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-6\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"w-12 h-12 text-green-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-bold text-slate-900 mb-2\">招待を承認しました</h2>\n              <p className=\"text-slate-600 mb-2\">\n                {invitation?.organization.name} のメンバーになりました\n              </p>\n              <p className=\"text-sm text-slate-500\">\n                まもなくダッシュボードへ移動します...\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-6\">\n      <Card className=\"max-w-md w-full\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Building className=\"w-8 h-8 text-white\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-slate-900 mb-2\">組織への招待</h2>\n            <p className=\"text-slate-600\">\n              {invitation?.organization.name} に招待されています\n            </p>\n          </div>\n\n          <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4 mb-6\">\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-600\">組織名:</span>\n                <span className=\"font-medium text-slate-900\">{invitation?.organization.name}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-600\">役割:</span>\n                <span className=\"font-medium text-slate-900\">\n                  {invitation?.role === 'admin' ? '管理者' : 'メンバー'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-600\">招待先:</span>\n                <span className=\"font-medium text-slate-900\">{invitation?.email}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-600\">有効期限:</span>\n                <span className=\"font-medium text-slate-900\">\n                  {invitation?.expires_at &&\n                    new Date(invitation.expires_at).toLocaleDateString('ja-JP')}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Button\n              onClick={handleAccept}\n              disabled={accepting}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              {accepting ? (\n                <>\n                  <Loader className=\"w-4 h-4 mr-2 animate-spin\" />\n                  承認中...\n                </>\n              ) : (\n                '招待を承認する'\n              )}\n            </Button>\n\n            <Button\n              onClick={() => navigate('/dashboard/daily')}\n              disabled={accepting}\n              className=\"w-full bg-slate-200 hover:bg-slate-300 text-slate-700\"\n            >\n              キャンセル\n            </Button>\n          </div>\n\n          <p className=\"text-xs text-slate-500 text-center mt-6\">\n            招待を承認すると、この組織のメンバーとなり、組織のデータにアクセスできるようになります\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
  "src/pages/MonthlyExpenseForm.tsx": "import React, { useEffect, useMemo, useState } from 'react'\nimport { useNavigate, useSearchParams } from 'react-router-dom'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { cn } from '@/lib/utils'\nimport { formatCurrency } from '@/lib/format'\nimport { CircleCheck as CheckCircle, Save } from 'lucide-react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { useAdminData } from '@/contexts/AdminDataContext'\nimport { upsertMonthlyExpense, getMonthlyExpenses } from '@/services/supabase'\n\ntype MonthlyExpense = {\n  id: string\n  storeId: string\n  month: string // 'YYYY-MM'\n  laborCostEmployee: number\n  laborCostPartTime: number\n  utilities: number\n  rent: number\n  consumables: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  memo?: string\n  createdAt: string\n  updatedAt: string\n}\n\nconst numAttr = { inputMode: 'numeric' as const, pattern: '[0-9]*' }\nconst thisMonth = () => new Date().toISOString().slice(0, 7) // YYYY-MM\n\nexport const MonthlyExpenseForm: React.FC = () => {\n  const [params] = useSearchParams()\n  const navigate = useNavigate()\n  const { user, getAccessibleStores } = useAuth()\n  const { stores: adminStores } = useAdminData()\n\n  const getInitialStoreId = () => {\n    const paramStore = params.get('store')\n    if (paramStore && paramStore !== 'all') {\n      const accessibleStores = getAccessibleStores()\n      const storeExists = accessibleStores.find(s => s.id === paramStore)\n      if (storeExists) return paramStore\n    }\n    const accessibleStores = getAccessibleStores()\n    return accessibleStores.length > 0 ? accessibleStores[0].id : ''\n  }\n\n  const initialMonth = params.get('month') || thisMonth()\n\n  const [form, setForm] = useState<MonthlyExpense>({\n    id: '',\n    storeId: '',\n    month: initialMonth,\n    laborCostEmployee: 0,\n    laborCostPartTime: 0,\n    utilities: 0,\n    rent: 0,\n    consumables: 0,\n    promotion: 0,\n    cleaning: 0,\n    misc: 0,\n    communication: 0,\n    others: 0,\n    memo: '',\n    createdAt: '',\n    updatedAt: ''\n  })\n  const [saved, setSaved] = useState<null | 'ok'>(null)\n\n  useEffect(() => {\n    if (!form.storeId && user) {\n      const initialStoreId = getInitialStoreId()\n      setForm(f => ({ ...f, storeId: initialStoreId }))\n    }\n  }, [user])\n\n  // Supabaseから既存データをロード\n  useEffect(() => {\n    const fetchExistingData = async () => {\n      if (!user || !form.storeId || !form.month) return\n      \n      try {\n        const { data, error } = await getMonthlyExpenses({\n          storeId: form.storeId,\n          month: form.month,\n          userId: user.id\n        })\n        \n        if (!error && data && data.length > 0) {\n          const existing = data[0]\n          setForm({\n            id: existing.id,\n            storeId: existing.store_id,\n            month: existing.month,\n            laborCostEmployee: existing.labor_cost_employee,\n            laborCostPartTime: existing.labor_cost_part_time,\n            utilities: existing.utilities,\n            rent: existing.rent || 0,\n            consumables: existing.consumables || 0,\n            promotion: existing.promotion,\n            cleaning: existing.cleaning,\n            misc: existing.misc,\n            communication: existing.communication,\n            others: existing.others,\n            memo: existing.memo || '',\n            createdAt: existing.created_at || '',\n            updatedAt: existing.updated_at || ''\n          })\n        } else {\n          // 新規作成の場合はフォームをリセット\n          setForm(f => ({ \n            ...f, \n            id: '', \n            laborCostEmployee: 0,\n            laborCostPartTime: 0,\n            utilities: 0,\n            rent: 0,\n            consumables: 0,\n            promotion: 0,\n            cleaning: 0,\n            misc: 0,\n            communication: 0,\n            others: 0,\n            memo: '' \n          }))\n        }\n      } catch (err) {\n        console.error('❌ 月次経費データ取得エラー:', err)\n      }\n    }\n    \n    fetchExistingData()\n  }, [form.storeId, form.month, user])\n\n  const total = form.laborCostEmployee + form.laborCostPartTime + form.utilities + form.rent + form.consumables + form.promotion + form.cleaning + form.misc + form.communication + form.others\n\n  const setN = (key: keyof MonthlyExpense, val: number) =>\n    setForm(f => ({ ...f, [key]: Math.max(0, Math.round(val)) }))\n\n  const save = async () => {\n    if (!user) {\n      alert('ログインが必要です')\n      return\n    }\n\n    if (!form.storeId || form.storeId === 'all') {\n      alert('店舗を選択してください')\n      return\n    }\n    \n    try {\n      const expenseData = {\n        store_id: form.storeId,\n        user_id: user.id,\n        month: form.month,\n        labor_cost_employee: form.laborCostEmployee,\n        labor_cost_part_time: form.laborCostPartTime,\n        utilities: form.utilities,\n        rent: form.rent,\n        consumables: form.consumables,\n        promotion: form.promotion,\n        cleaning: form.cleaning,\n        misc: form.misc,\n        communication: form.communication,\n        others: form.others,\n        memo: form.memo\n      }\n      \n      const { data, error } = await upsertMonthlyExpense(expenseData)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      setSaved('ok')\n      setTimeout(() => setSaved(null), 2000)\n      \n    } catch (err) {\n      console.error('❌ 月次経費保存エラー:', err)\n      alert('保存に失敗しました: ' + (err instanceof Error ? err.message : '不明なエラー'))\n    }\n  }\n\n  const storeOptions = useMemo(() => {\n    let accessibleStores = getAccessibleStores()\n\n    // もし accessibleStores が空で、AdminDataContext に stores がある場合はそれを使う\n    if (accessibleStores.length === 0 && user?.role === 'admin' && adminStores.length > 0) {\n      accessibleStores = adminStores.map(s => ({ id: s.id, name: s.name }))\n    }\n\n    return accessibleStores.map(store => ({\n      id: store.id,\n      name: store.name,\n      disabled: false\n    }))\n  }, [getAccessibleStores, user?.role, adminStores])\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">月次経費入力</h1>\n        <Badge>Demo / Local</Badge>\n      </div>\n\n      <Card>\n        <CardHeader><CardTitle>対象</CardTitle></CardHeader>\n        <CardContent className=\"grid grid-cols-2 gap-3\">\n          <div>\n            <label className=\"block text-xs text-muted-foreground mb-1\">店舗</label>\n            <select\n              value={form.storeId}\n              onChange={(e)=>setForm(f=>({...f, storeId: e.target.value }))}\n              className=\"w-full px-3 py-2 rounded border border-input bg-background\">\n              {storeOptions.map(s=>(\n                <option key={s.id} value={s.id} disabled={(s as any).disabled}>\n                  {'name' in s ? (s as any).name : s}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-xs text-muted-foreground mb-1\">対象月</label>\n            <input\n              type=\"month\"\n              value={form.month}\n              onChange={(e)=>setForm(f=>({...f, month: e.target.value }))}\n              className=\"w-full px-3 py-2 rounded border border-input bg-background\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>金額入力（1ヶ月分・税込み想定）</CardTitle>\n          <div className=\"text-sm text-muted-foreground mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            💡 <strong>人件費について：</strong>日報で入力される人件費は想定値です。月末にこちらで正式な金額に修正してください。\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {[\n            ['laborCostEmployee','人件費（社員）'],\n            ['laborCostPartTime','人件費（アルバイト）'],\n            ['utilities','水道光熱費'],\n            ['rent','賃料'],\n            ['consumables','消耗品費'],\n            ['promotion','販促費'],\n            ['cleaning','清掃費'],\n            ['misc','雑費'],\n            ['communication','通信費'],\n            ['others','その他'], // 家賃など固定費\n          ].map(([key,label]) => (\n            <div key={key} className=\"flex items-center gap-2\">\n              <div className=\"w-24 text-sm text-muted-foreground\">{label}</div>\n              <div className=\"flex-1\">\n                <input {...numAttr}\n                  value={(form as any)[key] || ''}\n                  onChange={(e)=>setN(key as keyof MonthlyExpense, Number(e.target.value.replace(/[^0-9]/g,''))||0)}\n                  placeholder=\"0\"\n                  className=\"w-full px-3 py-2 rounded border border-input bg-background text-right\" />\n              </div>\n              <div className=\"text-sm w-28 text-right text-muted-foreground\">{formatCurrency((form as any)[key] || 0)}</div>\n            </div>\n          ))}\n          <div className=\"pt-3 border-t border-border flex justify-between text-sm\">\n            <span className=\"text-muted-foreground\">合計</span>\n            <span className=\"font-semibold\">{formatCurrency(total)}</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader><CardTitle>メモ（任意）</CardTitle></CardHeader>\n        <CardContent>\n          <textarea\n            value={form.memo || ''}\n            onChange={(e)=>setForm(f=>({...f, memo: e.target.value }))}\n            placeholder=\"例：家賃・ASP利用料を含む。\"\n            className=\"w-full px-3 py-2 rounded border border-input bg-background min-h-24\"\n          />\n        </CardContent>\n      </Card>\n\n      <div className=\"flex gap-3\">\n        <Button className=\"flex-1\" onClick={save} disabled={form.storeId==='all'}>\n          <Save className=\"h-4 w-4 mr-2\" />\n          保存\n        </Button>\n        <Button variant=\"outline\" className=\"w-36\" onClick={()=>navigate('/dashboard/monthly')}>\n          月次ダッシュボードへ\n        </Button>\n      </div>\n\n      {saved && (\n        <div className={cn('flex items-center gap-2 text-sm text-green-600')}>\n          <CheckCircle className=\"h-4 w-4\" />\n          保存しました。ダッシュボードに反映されます。\n        </div>\n      )}\n    </div>\n  )\n}",
  "src/pages/OrganizationSettings.tsx": "import React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Building, Users, CreditCard, Save, AlertCircle, CheckCircle } from 'lucide-react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport {\n  getOrganization,\n  updateOrganization,\n  getCurrentUserOrganizationId\n} from '@/services/organizationService'\nimport { OrganizationMembers } from '@/components/Organization/OrganizationMembers'\nimport { SubscriptionInfo } from '@/components/Organization/SubscriptionInfo'\nimport { UsageOverview } from '@/components/Usage/UsageOverview'\n\ninterface Organization {\n  id: string\n  name: string\n  slug: string\n  email: string\n  phone?: string\n  subscription_status: string\n  subscription_plan: string\n  trial_ends_at?: string\n  max_stores: number\n  max_users: number\n  max_ai_requests_per_month: number\n  created_at?: string\n  updated_at?: string\n}\n\nexport const OrganizationSettings: React.FC = () => {\n  const { user } = useAuth()\n  const [organization, setOrganization] = useState<Organization | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [activeTab, setActiveTab] = useState<'general' | 'members' | 'subscription'>('general')\n\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: ''\n  })\n\n  useEffect(() => {\n    if (user?.id) {\n      loadOrganization()\n    }\n  }, [user?.id])\n\n  const loadOrganization = async () => {\n    if (!user?.id) return\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const organizationId = await getCurrentUserOrganizationId(user.id)\n      if (!organizationId) {\n        setError('組織が見つかりません')\n        return\n      }\n\n      const { data, error: fetchError } = await getOrganization(organizationId)\n      if (fetchError) {\n        setError('組織情報の取得に失敗しました')\n        return\n      }\n\n      if (data) {\n        setOrganization(data)\n        setFormData({\n          name: data.name,\n          email: data.email,\n          phone: data.phone || ''\n        })\n      }\n    } catch (err) {\n      setError('組織情報の取得に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }))\n    setError(null)\n    setSuccess(null)\n  }\n\n  const handleSave = async () => {\n    if (!organization) return\n\n    try {\n      setSaving(true)\n      setError(null)\n      setSuccess(null)\n\n      const { data, error: updateError } = await updateOrganization(organization.id, {\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone\n      })\n\n      if (updateError) {\n        setError('組織情報の更新に失敗しました')\n        return\n      }\n\n      if (data) {\n        setOrganization(data)\n        setSuccess('組織情報を更新しました')\n      }\n    } catch (err) {\n      setError('組織情報の更新に失敗しました')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">読み込み中...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!organization) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 p-6 flex items-center justify-center\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <AlertCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n              <p className=\"text-slate-700\">組織情報が見つかりません</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-slate-900 mb-2\">組織設定</h1>\n          <p className=\"text-slate-600\">組織の情報やメンバーを管理します</p>\n        </div>\n\n        <div className=\"mb-6 border-b border-slate-200\">\n          <div className=\"flex gap-4\">\n            <button\n              onClick={() => setActiveTab('general')}\n              className={`px-4 py-3 font-medium transition-colors relative ${\n                activeTab === 'general'\n                  ? 'text-blue-600'\n                  : 'text-slate-600 hover:text-slate-900'\n              }`}\n            >\n              <Building className=\"w-4 h-4 inline mr-2\" />\n              基本情報\n              {activeTab === 'general' && (\n                <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-blue-600\"></div>\n              )}\n            </button>\n            <button\n              onClick={() => setActiveTab('members')}\n              className={`px-4 py-3 font-medium transition-colors relative ${\n                activeTab === 'members'\n                  ? 'text-blue-600'\n                  : 'text-slate-600 hover:text-slate-900'\n              }`}\n            >\n              <Users className=\"w-4 h-4 inline mr-2\" />\n              メンバー管理\n              {activeTab === 'members' && (\n                <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-blue-600\"></div>\n              )}\n            </button>\n            <button\n              onClick={() => setActiveTab('subscription')}\n              className={`px-4 py-3 font-medium transition-colors relative ${\n                activeTab === 'subscription'\n                  ? 'text-blue-600'\n                  : 'text-slate-600 hover:text-slate-900'\n              }`}\n            >\n              <CreditCard className=\"w-4 h-4 inline mr-2\" />\n              サブスクリプション\n              {activeTab === 'subscription' && (\n                <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-blue-600\"></div>\n              )}\n            </button>\n          </div>\n        </div>\n\n        {activeTab === 'general' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>基本情報</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {error && (\n                <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n                  <AlertCircle className=\"w-5 h-5 text-red-600 flex-shrink-0 mt-0.5\" />\n                  <p className=\"text-sm text-red-800\">{error}</p>\n                </div>\n              )}\n\n              {success && (\n                <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg flex items-start gap-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                  <p className=\"text-sm text-green-800\">{success}</p>\n                </div>\n              )}\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  組織名\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"株式会社〇〇\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  組織スラッグ\n                </label>\n                <input\n                  type=\"text\"\n                  value={organization.slug}\n                  disabled\n                  className=\"w-full px-4 py-2 border border-slate-200 rounded-lg bg-slate-50 text-slate-500\"\n                />\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  組織の一意な識別子です（変更不可）\n                </p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  メールアドレス\n                </label>\n                <input\n                  type=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"info@example.com\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  電話番号（任意）\n                </label>\n                <input\n                  type=\"tel\"\n                  name=\"phone\"\n                  value={formData.phone}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"03-1234-5678\"\n                />\n              </div>\n\n              <div className=\"pt-4\">\n                <Button\n                  onClick={handleSave}\n                  disabled={saving}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  {saving ? (\n                    <>\n                      <span className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></span>\n                      保存中...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      変更を保存\n                    </>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {activeTab === 'members' && (\n          <OrganizationMembers organizationId={organization.id} />\n        )}\n\n        {activeTab === 'subscription' && (\n          <div className=\"space-y-6\">\n            <UsageOverview />\n            <SubscriptionInfo organization={organization} onUpdate={loadOrganization} />\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
  "src/pages/PrivacyPolicy.tsx": "import React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { ArrowLeft, Shield } from 'lucide-react'\nimport { useNavigate } from 'react-router-dom'\n\nexport const PrivacyPolicy: React.FC = () => {\n  const navigate = useNavigate()\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <Button\n          onClick={() => navigate(-1)}\n          className=\"mb-6 bg-slate-600 hover:bg-slate-700 text-white\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          戻る\n        </Button>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3 text-2xl\">\n              <Shield className=\"w-6 h-6\" />\n              プライバシーポリシー\n            </CardTitle>\n            <p className=\"text-sm text-slate-600 mt-2\">最終更新日: 2025年10月11日</p>\n          </CardHeader>\n\n          <CardContent className=\"prose prose-slate max-w-none\">\n            <section className=\"mb-8\">\n              <p className=\"text-slate-700 leading-relaxed\">\n                当社は、当社が提供する「AI経営管理システム」（以下「本サービス」といいます）におけるユーザーの個人情報の取扱いについて、以下のとおりプライバシーポリシー（以下「本ポリシー」といいます）を定めます。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第1条（個人情報）</h2>\n              <p className=\"text-slate-700 leading-relaxed\">\n                「個人情報」とは、個人情報保護法にいう「個人情報」を指すものとし、生存する個人に関する情報であって、当該情報に含まれる氏名、生年月日、住所、電話番号、連絡先その他の記述等により特定の個人を識別できる情報及び容貌、指紋、声紋にかかるデータ、及び健康保険証の保険者番号などの当該情報単体から特定の個人を識別できる情報（個人識別情報）を指します。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第2条（個人情報の収集方法）</h2>\n              <p className=\"text-slate-700 leading-relaxed mb-3\">\n                当社は、ユーザーが利用登録をする際に、氏名、メールアドレス、電話番号、会社名などの個人情報をお尋ねすることがあります。また、ユーザーと提携先などとの間でなされたユーザーの個人情報を含む取引記録や決済に関する情報を、当社の提携先（情報提供元、広告主、広告配信先などを含みます。以下「提携先」といいます）などから収集することがあります。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第3条（個人情報を収集・利用する目的）</h2>\n              <p className=\"text-slate-700 mb-3\">当社が個人情報を収集・利用する目的は、以下のとおりです。</p>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>本サービスの提供・運営のため</li>\n                <li>ユーザーからのお問い合わせに回答するため（本人確認を行うことを含む）</li>\n                <li>ユーザーが利用中のサービスの新機能、更新情報、キャンペーン等及び当社が提供する他のサービスの案内のメールを送付するため</li>\n                <li>メンテナンス、重要なお知らせなど必要に応じたご連絡のため</li>\n                <li>利用規約に違反したユーザーや、不正・不当な目的でサービスを利用しようとするユーザーの特定をし、ご利用をお断りするため</li>\n                <li>ユーザーにご自身の登録情報の閲覧や変更、削除、ご利用状況の閲覧を行っていただくため</li>\n                <li>有料サービスにおいて、ユーザーに利用料金を請求するため</li>\n                <li>上記の利用目的に付随する目的</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第4条（利用目的の変更）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、利用目的が変更前と関連性を有すると合理的に認められる場合に限り、個人情報の利用目的を変更するものとします。</li>\n                <li>利用目的の変更を行った場合には、変更後の目的について、当社所定の方法により、ユーザーに通知し、または本ウェブサイト上に公表するものとします。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第5条（個人情報の第三者提供）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、次に掲げる場合を除いて、あらかじめユーザーの同意を得ることなく、第三者に個人情報を提供することはありません。ただし、個人情報保護法その他の法令で認められる場合を除きます。\n                  <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                    <li>人の生命、身体または財産の保護のために必要がある場合であって、本人の同意を得ることが困難であるとき</li>\n                    <li>公衆衛生の向上または児童の健全な育成の推進のために特に必要がある場合であって、本人の同意を得ることが困難であるとき</li>\n                    <li>国の機関もしくは地方公共団体またはその委託を受けた者が法令の定める事務を遂行することに対して協力する必要がある場合であって、本人の同意を得ることにより当該事務の遂行に支障を及ぼすおそれがあるとき</li>\n                  </ul>\n                </li>\n                <li>前項の定めにかかわらず、次に掲げる場合には、当該情報の提供先は第三者に該当しないものとします。\n                  <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                    <li>当社が利用目的の達成に必要な範囲内において個人情報の取扱いの全部または一部を委託する場合</li>\n                    <li>合併その他の事由による事業の承継に伴って個人情報が提供される場合</li>\n                  </ul>\n                </li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第6条（個人情報の開示）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、本人から個人情報の開示を求められたときは、本人に対し、遅滞なくこれを開示します。ただし、開示することにより次のいずれかに該当する場合は、その全部または一部を開示しないこともあり、開示しない決定をした場合には、その旨を遅滞なく通知します。\n                  <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                    <li>本人または第三者の生命、身体、財産その他の権利利益を害するおそれがある場合</li>\n                    <li>当社の業務の適正な実施に著しい支障を及ぼすおそれがある場合</li>\n                    <li>その他法令に違反することとなる場合</li>\n                  </ul>\n                </li>\n                <li>前項の定めにかかわらず、履歴情報および特性情報などの個人情報以外の情報については、原則として開示いたしません。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第7条（個人情報の訂正および削除）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>ユーザーは、当社の保有する自己の個人情報が誤った情報である場合には、当社が定める手続きにより、当社に対して個人情報の訂正、追加または削除（以下「訂正等」といいます）を請求することができます。</li>\n                <li>当社は、ユーザーから前項の請求を受けてその請求に応じる必要があると判断した場合には、遅滞なく、当該個人情報の訂正等を行うものとします。</li>\n                <li>当社は、前項の規定に基づき訂正等を行った場合、または訂正等を行わない旨の決定をしたときは遅滞なく、これをユーザーに通知します。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第8条（個人情報の利用停止等）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、本人から、個人情報が、利用目的の範囲を超えて取り扱われているという理由、または不正の手段により取得されたものであるという理由により、その利用の停止または消去（以下「利用停止等」といいます）を求められた場合には、遅滞なく必要な調査を行います。</li>\n                <li>前項の調査結果に基づき、その請求に応じる必要があると判断した場合には、遅滞なく、当該個人情報の利用停止等を行います。</li>\n                <li>当社は、前項の規定に基づき利用停止等を行った場合、または利用停止等を行わない旨の決定をしたときは、遅滞なく、これをユーザーに通知します。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第9条（Cookie（クッキー）その他の技術の利用）</h2>\n              <p className=\"text-slate-700 leading-relaxed mb-3\">\n                本サービスは、Cookieおよびこれに類する技術を利用することがあります。これらの技術は、当社による本サービスの利用状況等の把握に役立ち、サービス向上に資するものです。\n              </p>\n              <p className=\"text-slate-700 leading-relaxed\">\n                Cookieを無効化されたいユーザーは、ウェブブラウザの設定により、Cookieを無効化することができます。ただし、Cookieを無効化すると、本サービスの一部の機能をご利用いただけなくなる場合があります。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第10条（プライバシーポリシーの変更）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>本ポリシーの内容は、法令その他本ポリシーに別段の定めのある事項を除いて、ユーザーに通知することなく、変更することができるものとします。</li>\n                <li>当社が別途定める場合を除いて、変更後のプライバシーポリシーは、本ウェブサイトに掲載したときから効力を生じるものとします。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第11条（データの保管と削除）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、収集した個人情報を適切な安全対策のもと保管します。</li>\n                <li>ユーザーがアカウントを削除した場合、または利用契約が終了した場合、当社は合理的な期間内に個人情報を削除します。ただし、法令により保管が義務付けられている情報、または紛争解決のために必要な情報については、この限りではありません。</li>\n                <li>ユーザーは、本サービス内の設定画面から、いつでも自身のデータをエクスポートすることができます。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第12条（セキュリティ）</h2>\n              <p className=\"text-slate-700 leading-relaxed\">\n                当社は、個人情報への不正アクセス、個人情報の紛失、破壊、改ざん、漏洩等のリスクに対して、技術面及び組織面において合理的な安全対策を講じます。ただし、インターネット上での情報伝送に完全なセキュリティを保証することは不可能であることをご理解ください。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第13条（お問い合わせ窓口）</h2>\n              <p className=\"text-slate-700 leading-relaxed mb-3\">\n                本ポリシーに関するお問い合わせは、下記の窓口までお願いいたします。\n              </p>\n              <div className=\"bg-slate-100 border border-slate-200 rounded-lg p-4\">\n                <p className=\"text-slate-700 mb-2\"><strong>メールアドレス:</strong> privacy@izakaya-ikki.example.com</p>\n                <p className=\"text-slate-700\"><strong>受付時間:</strong> 平日 10:00-18:00（土日祝日を除く）</p>\n              </div>\n            </section>\n\n            <div className=\"mt-8 pt-6 border-t border-slate-200\">\n              <p className=\"text-sm text-slate-600\">以上</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n",
  "src/pages/ProjectDownload.tsx": "import React, { useState, useEffect } from 'react'\nimport { Download, FileArchive, AlertCircle, CheckCircle } from 'lucide-react'\nimport JSZip from 'jszip'\nimport { saveAs } from 'file-saver'\n\nexport function ProjectDownload() {\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState(false)\n  const [projectFiles, setProjectFiles] = useState<Record<string, string>>({})\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const loadProjectFiles = async () => {\n      try {\n        const imported = await import('../lib/projectFiles')\n        setProjectFiles(imported.projectFiles || {})\n        setIsLoading(false)\n      } catch (e) {\n        console.error('projectFiles.ts not found:', e)\n        setError('プロジェクトファイルが見つかりません。本番ビルドでのみ利用可能です。')\n        setIsLoading(false)\n      }\n    }\n    loadProjectFiles()\n  }, [])\n\n  const handleDownload = async () => {\n    if (Object.keys(projectFiles).length === 0) {\n      setError('ダウンロード可能なファイルがありません。')\n      return\n    }\n\n    setIsGenerating(true)\n    setError(null)\n    setSuccess(false)\n\n    try {\n      const zip = new JSZip()\n\n      for (const [filePath, content] of Object.entries(projectFiles)) {\n        const relativePath = filePath.replace(/^\\//, '')\n        zip.file(relativePath, content)\n      }\n\n      const blob = await zip.generateAsync({ type: 'blob' })\n      const fileName = `ai-management-system-${new Date().toISOString().split('T')[0]}.zip`\n      saveAs(blob, fileName)\n      setSuccess(true)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'ダウンロードに失敗しました')\n    } finally {\n      setIsGenerating(false)\n    }\n  }\n\n  // ページ読み込み時に自動的にダウンロードを開始\n  useEffect(() => {\n    if (!isLoading && Object.keys(projectFiles).length > 0) {\n      handleDownload()\n    }\n  }, [isLoading, projectFiles])\n\n  const fileCount = Object.keys(projectFiles).length\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center p-4\">\n      <div className=\"max-w-2xl w-full bg-white rounded-2xl shadow-xl p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 bg-blue-100 rounded-full mb-4\">\n            <FileArchive className=\"w-10 h-10 text-blue-600\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-slate-800 mb-2\">\n            プロジェクトダウンロード\n          </h1>\n          <p className=\"text-slate-600\">\n            現在のプロジェクトファイルをZIP形式でダウンロードします\n          </p>\n        </div>\n\n        <div className=\"bg-slate-50 rounded-lg p-6 mb-6\">\n          <h2 className=\"font-semibold text-slate-800 mb-3\">含まれるファイル：</h2>\n          <div className=\"mb-4\">\n            <div className=\"inline-block bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium\">\n              {fileCount} ファイル\n            </div>\n          </div>\n          <ul className=\"space-y-2 text-sm text-slate-600\">\n            <li className=\"flex items-start\">\n              <span className=\"inline-block w-2 h-2 bg-blue-600 rounded-full mt-1.5 mr-2\"></span>\n              <span>ソースコード（src/ディレクトリ）</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"inline-block w-2 h-2 bg-blue-600 rounded-full mt-1.5 mr-2\"></span>\n              <span>データベースマイグレーション（supabase/migrations/）</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"inline-block w-2 h-2 bg-blue-600 rounded-full mt-1.5 mr-2\"></span>\n              <span>Edge Functions（supabase/functions/）</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"inline-block w-2 h-2 bg-blue-600 rounded-full mt-1.5 mr-2\"></span>\n              <span>設定ファイル（package.json、vite.config.ts等）</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"inline-block w-2 h-2 bg-blue-600 rounded-full mt-1.5 mr-2\"></span>\n              <span>ドキュメント（README.md等）</span>\n            </li>\n          </ul>\n        </div>\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6 flex items-start\">\n            <AlertCircle className=\"w-5 h-5 text-red-600 mr-2 flex-shrink-0 mt-0.5\" />\n            <div className=\"text-sm text-red-800\">{error}</div>\n          </div>\n        )}\n\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6 flex items-start\">\n            <CheckCircle className=\"w-5 h-5 text-green-600 mr-2 flex-shrink-0 mt-0.5\" />\n            <div className=\"text-sm text-green-800\">\n              プロジェクトファイルのダウンロードが完了しました！\n            </div>\n          </div>\n        )}\n\n        <button\n          onClick={handleDownload}\n          disabled={isGenerating}\n          className=\"w-full bg-blue-600 hover:bg-blue-700 disabled:bg-slate-300 text-white font-semibold py-4 px-6 rounded-lg transition-colors flex items-center justify-center\"\n        >\n          {isGenerating ? (\n            <>\n              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n              ZIPファイルを生成中...\n            </>\n          ) : (\n            <>\n              <Download className=\"w-5 h-5 mr-2\" />\n              プロジェクトをダウンロード\n            </>\n          )}\n        </button>\n\n        <div className=\"mt-6 text-center text-sm text-slate-500\">\n          <p>\n            注意: .envファイルは含まれません。セキュリティのため、\n            環境変数は別途管理してください。\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
  "src/pages/ReportForm.tsx": "import React, { useMemo, useState, useEffect } from 'react'\nimport { useSearchParams, useNavigate } from 'react-router-dom'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { type DailyReportData } from '@/types'\nimport { formatCurrency, formatPercent } from '@/lib/format'\nimport { cn } from '@/lib/utils'\nimport { CircleCheck as CheckCircle, Save, CloudUpload as UploadCloud, Trophy } from 'lucide-react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { useAdminData } from '@/contexts/AdminDataContext'\nimport { createDailyReport, updateDailyReport, isSupabaseReady, getDailyReports, getDailyTarget } from '@/services/supabase'\nimport { useExpenseBaseline } from '@/hooks/useExpenseBaseline'\n\nconst numberAttrs = {\n  inputMode: 'numeric' as const,\n  pattern: '[0-9]*',\n}\n\ntype FormState = {\n  date: string\n  storeId: string\n  salesCash10: number\n  salesCash8: number\n  salesCredit10: number\n  salesCredit8: number\n  sales: number\n  // 業者別仕入（動的）\n  vendorPurchases: Record<string, number>\n  purchase: number\n  laborCost: number\n  utilities: number\n  rent: number\n  consumables: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  customers: number\n  reportText: string\n}\n\nconst todayISO = () => new Date().toISOString().split('T')[0]\n\nexport const ReportForm: React.FC = () => {\n  const [params] = useSearchParams()\n  const navigate = useNavigate()\n  const { user, getAccessibleStores } = useAuth()\n  const { getStoreVendors, vendors, storeVendorAssignments, stores: adminStores } = useAdminData()\n\n  // 編集モード：URLパラメータでidを受け取る\n  const editingReportId = params.get('id')\n  const isEditMode = !!editingReportId\n\n  // URLパラメータまたはアクセス可能な最初の店舗を初期値にする\n  const getInitialStoreId = () => {\n    const paramStore = params.get('store')\n    if (paramStore && paramStore !== 'all') {\n      const accessibleStores = getAccessibleStores()\n      const storeExists = accessibleStores.find(s => s.id === paramStore)\n      if (storeExists) return paramStore\n    }\n    // パラメータが無効な場合は、アクセス可能な最初の店舗を使う\n    const accessibleStores = getAccessibleStores()\n    return accessibleStores.length > 0 ? accessibleStores[0].id : 'all'\n  }\n\n  const [form, setForm] = useState<FormState>({\n    date: todayISO(),\n    storeId: '',\n    salesCash10: 0, salesCash8: 0, salesCredit10: 0, salesCredit8: 0,\n    sales: 0,\n    vendorPurchases: {},\n    purchase: 0, laborCost: 0, utilities: 0, rent: 0, consumables: 0,\n    promotion: 0, cleaning: 0, misc: 0, communication: 0, others: 0,\n    customers: 0,\n    reportText: ''\n  })\n  const [saving, setSaving] = useState(false)\n  const [saved, setSaved] = useState<null | 'local' | 'sent'>(null)\n  const [monthlyManaged, setMonthlyManaged] = useState(true)\n  const [loading, setLoading] = useState(false)\n  const [targetAchieved, setTargetAchieved] = useState(false)\n\n  useEffect(() => {\n    if (!form.storeId && user) {\n      const initialStoreId = getInitialStoreId()\n      setForm(f => ({ ...f, storeId: initialStoreId }))\n    }\n  }, [user])\n\n  // 店舗に割り当てられた業者をAdminDataContextから取得（useMemoで自動更新）\n  const storeVendors = useMemo(() => {\n    if (!form.storeId || form.storeId === 'all') {\n      console.log('📋 ReportForm: storeId が \"all\" または空のため業者リストは空です')\n      return []\n    }\n    const result = getStoreVendors(form.storeId)\n    console.log('📋 ReportForm: 店舗業者取得:', { storeId: form.storeId, count: result.length, result })\n    return result\n  }, [form.storeId, getStoreVendors])\n\n  // 編集モード：既存データを読み込む\n  useEffect(() => {\n    if (isEditMode && editingReportId) {\n      const loadReport = async () => {\n        setLoading(true)\n        let existingReport: DailyReportData | undefined\n\n        // ローカルIDの場合はローカルストレージから\n        if (editingReportId.startsWith('local-')) {\n          const localReports: DailyReportData[] = JSON.parse(localStorage.getItem('userReports') || '[]')\n          existingReport = localReports.find(r => r.id === editingReportId)\n        } else if (isSupabaseReady()) {\n          // Supabaseから取得\n          const { data } = await getDailyReports({ userId: user?.id })\n          if (data) {\n            existingReport = data.find(r => r.id === editingReportId)\n          }\n        }\n\n        if (existingReport) {\n          console.log('📝 編集モード：データ読み込み', existingReport)\n          // 売上を逆算（仮に全て現金10%として扱う）\n          const salesCash10 = existingReport.sales || 0\n          setForm({\n            date: existingReport.date,\n            storeId: existingReport.storeId,\n            salesCash10,\n            salesCash8: 0,\n            salesCredit10: 0,\n            salesCredit8: 0,\n            sales: existingReport.sales,\n            vendorPurchases: existingReport.vendorPurchases || {},\n            purchase: existingReport.purchase,\n            laborCost: existingReport.laborCost,\n            utilities: existingReport.utilities || 0,\n            rent: (existingReport as any).rent || 0,\n            consumables: (existingReport as any).consumables || 0,\n            promotion: existingReport.promotion || 0,\n            cleaning: existingReport.cleaning || 0,\n            misc: existingReport.misc || 0,\n            communication: existingReport.communication || 0,\n            others: existingReport.others || 0,\n            customers: existingReport.customers || 0,\n            reportText: existingReport.reportText || ''\n          })\n          // 月次管理フラグも判定\n          if (existingReport.utilities > 0 || existingReport.promotion > 0) {\n            setMonthlyManaged(false)\n          }\n        } else {\n          alert('指定された日報が見つかりませんでした')\n          navigate('/dashboard/daily')\n        }\n        setLoading(false)\n      }\n\n      loadReport()\n    }\n  }, [isEditMode, editingReportId, navigate, user])\n\n  // 前回入力の呼び出し（店舗単位で記憶） - 新規作成時のみ\n  useEffect(() => {\n    if (!isEditMode) {\n      const last = localStorage.getItem(`lastReport_${form.storeId}`)\n      if (last) {\n        const v = JSON.parse(last)\n        setForm((f) => ({ ...f, ...v, date: todayISO() }))\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [form.storeId, isEditMode])\n\n  // 業者別仕入の合計を自動計算\n  const purchase = Object.values(form.vendorPurchases).reduce((sum, val) => sum + (val || 0), 0)\n  \n  // purchaseをformに反映\n  React.useEffect(() => {\n    setForm(f => ({ ...f, purchase }))\n  }, [purchase])\n\n  // 売上合計を自動計算\n  const sales = (form.salesCash10 || 0) + (form.salesCash8 || 0) + (form.salesCredit10 || 0) + (form.salesCredit8 || 0)\n  // salesをformに反映\n  React.useEffect(() => {\n    setForm(f => ({ ...f, sales }))\n  }, [sales])\n\n  // 参考経費（月次平均の日割り）\n  const yyyymm = form.date.slice(0, 7)\n  const { expenseBaseline: refDaily } = useExpenseBaseline(form.storeId, yyyymm)\n\n  // 実績KPI（入力された値のみ）\n  const totalExpenses = form.purchase + form.laborCost + form.utilities + form.rent + form.consumables + form.promotion + form.cleaning + form.misc + form.communication + form.others\n  const grossProfit   = form.sales - form.purchase\n  const operatingProfit = form.sales - totalExpenses\n  const profitMargin  = form.sales > 0 ? (operatingProfit / form.sales) * 100 : 0\n\n  // 参考KPI（食材費+月次管理の場合は参考経費を合算）\n  const referenceExpenses = form.purchase + (monthlyManaged ? refDaily.totalExpense : form.laborCost + form.utilities + form.rent + form.consumables + form.promotion + form.cleaning + form.misc + form.communication + form.others)\n  const referenceOperatingProfit = form.sales - referenceExpenses\n  const referenceProfitMargin = form.sales > 0 ? (referenceOperatingProfit / form.sales) * 100 : 0\n\n  const purchaseRate  = form.sales > 0 ? (form.purchase / form.sales) * 100 : 0\n  const laborRate     = form.sales > 0 ? (form.laborCost / form.sales) * 100 : 0\n  const primeRate     = form.sales > 0 ? ((form.purchase + form.laborCost) / form.sales) * 100 : 0\n  const averageTicket = form.customers > 0 ? Math.round(form.sales / form.customers) : 0\n\n  const setN = (key: keyof FormState, val: number) => setForm((f) => ({ ...f, [key]: Math.max(0, Math.round(val)) }))\n  const setVendorPurchase = (vendorId: string, val: number) => setForm(f => ({\n    ...f,\n    vendorPurchases: { ...f.vendorPurchases, [vendorId]: Math.max(0, Math.round(val)) }\n  }))\n  const bump = (key: keyof FormState, step: number) => setN(key, Number((form as any)[key] || 0) + step)\n  const bumpVendor = (vendorId: string, step: number) => setVendorPurchase(vendorId, (form.vendorPurchases[vendorId] || 0) + step)\n\n\n  const submit = async () => {\n    if (!user) {\n      alert('ログインが必要です')\n      return\n    }\n\n    setSaving(true); setSaved(null)\n\n    const selectedStore = getAccessibleStores().find(s => s.id === form.storeId)\n    if (!selectedStore) {\n      alert('選択された店舗にアクセス権限がありません')\n      setSaving(false)\n      return\n    }\n\n    const reportData = {\n      date: form.date,\n      storeId: form.storeId,\n      storeName: selectedStore.name,\n      staffName: user.name,\n      sales: form.sales,\n      purchase: form.purchase,\n      laborCost: form.laborCost,\n      utilities: monthlyManaged ? 0 : form.utilities,\n      rent: monthlyManaged ? 0 : form.rent,\n      consumables: monthlyManaged ? 0 : form.consumables,\n      promotion: monthlyManaged ? 0 : form.promotion,\n      cleaning: monthlyManaged ? 0 : form.cleaning,\n      misc: monthlyManaged ? 0 : form.misc,\n      communication: monthlyManaged ? 0 : form.communication,\n      others: monthlyManaged ? 0 : form.others,\n      reportText: form.reportText,\n      customers: form.customers,\n      userId: user.id,\n      vendorPurchases: form.vendorPurchases\n    }\n\n    // ローカル保存関数（フォールバック用）\n    const saveToLocal = () => {\n      const key = 'userReports'\n      const current = JSON.parse(localStorage.getItem(key) || '[]')\n\n      if (isEditMode && editingReportId) {\n        // 編集モード：既存データを更新\n        const index = current.findIndex((r: any) => r.id === editingReportId)\n        if (index !== -1) {\n          current[index] = {\n            ...current[index],\n            ...reportData,\n            updated_at: new Date().toISOString()\n          }\n          localStorage.setItem(key, JSON.stringify(current))\n          setSaved('local')\n          console.log('📦 ローカルストレージで更新:', current[index])\n        }\n      } else {\n        // 新規作成\n        const localReport = {\n          id: `local-${Date.now()}`,\n          ...reportData,\n          createdAt: new Date().toISOString()\n        }\n        localStorage.setItem(key, JSON.stringify([localReport, ...current]))\n        setSaved('local')\n        console.log('📦 ローカルストレージに保存:', localReport)\n      }\n    }\n\n    try {\n      // Supabase未設定の場合は即ローカル保存\n      if (!isSupabaseReady()) {\n        console.log('🔧 Supabase未設定、ローカル保存します')\n        saveToLocal()\n\n        // 次回入力の補助データを保存（新規作成時のみ）\n        // 仕入れデータはリセットし、その他の経費のみ保持\n        if (!isEditMode) {\n          localStorage.setItem(`lastReport_${form.storeId}`, JSON.stringify({\n            storeId: form.storeId,\n            vendorPurchases: {}, // 仕入れはリセット\n            laborCost: form.laborCost,\n            utilities: form.utilities,\n            rent: form.rent,\n            consumables: form.consumables,\n            promotion: form.promotion,\n            cleaning: form.cleaning,\n            misc: form.misc,\n            communication: form.communication,\n            others: form.others\n          }))\n        }\n\n        setTimeout(() => {\n          navigate('/dashboard/daily')\n        }, 800)\n        return\n      }\n\n      // Supabaseに保存または更新\n      let data, error\n      if (isEditMode && editingReportId) {\n        // 編集モード：更新\n        const updates = {\n          date: reportData.date,\n          store_id: reportData.storeId,\n          user_id: reportData.userId,\n          sales: reportData.sales,\n          purchase: reportData.purchase,\n          labor_cost: reportData.laborCost,\n          utilities: reportData.utilities,\n          rent: reportData.rent,\n          consumables: reportData.consumables,\n          promotion: reportData.promotion,\n          cleaning: reportData.cleaning,\n          misc: reportData.misc,\n          communication: reportData.communication,\n          others: reportData.others,\n          customers: reportData.customers,\n          report_text: reportData.reportText\n        }\n        const result = await updateDailyReport(editingReportId, updates)\n        data = result.data\n        error = result.error\n      } else {\n        // 新規作成\n        const result = await createDailyReport(reportData)\n        data = result.data\n        error = result.error\n      }\n\n      if (error) {\n        // RLS等の失敗もローカル保存にフォールバック\n        console.warn('⚠️ 日報保存失敗、ローカル保存にフォールバック:', error)\n        saveToLocal()\n      } else {\n        console.log('✅ Supabaseに保存成功:', data)\n        setSaved('sent')\n\n        // 目標達成判定（新規作成時のみ）\n        if (!isEditMode) {\n          try {\n            const { data: targetData } = await getDailyTarget(form.storeId, form.date)\n            if (targetData && targetData.target_sales > 0) {\n              const achieved = form.sales >= targetData.target_sales\n              setTargetAchieved(achieved)\n              if (achieved) {\n                console.log('🎉 目標達成！', {\n                  target: targetData.target_sales,\n                  actual: form.sales\n                })\n              }\n            }\n          } catch (e) {\n            console.log('目標達成判定エラー:', e)\n          }\n        }\n      }\n\n      // 次回入力の補助データを保存（新規作成時のみ）\n      // 仕入れデータはリセットし、その他の経費のみ保持\n      if (!isEditMode) {\n        localStorage.setItem(`lastReport_${form.storeId}`, JSON.stringify({\n          storeId: form.storeId,\n          vendorPurchases: {}, // 仕入れはリセット\n          laborCost: form.laborCost,\n          utilities: form.utilities,\n          rent: form.rent,\n          consumables: form.consumables,\n          promotion: form.promotion,\n          cleaning: form.cleaning,\n          misc: form.misc,\n          communication: form.communication,\n          others: form.others\n        }))\n      }\n\n      // ダッシュボードに戻る（目標達成時は少し長めに表示）\n      setTimeout(() => {\n        navigate('/dashboard/daily')\n      }, targetAchieved ? 2000 : 800)\n\n    } catch (e) {\n      console.error('❌ 報告作成エラー:', e)\n      // 予期せぬ例外もローカルへ\n      saveToLocal()\n      alert('報告の保存に失敗しました（ローカルに退避しました）')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const storeOptions = useMemo(() => {\n    let accessibleStores = getAccessibleStores()\n\n    // もし accessibleStores が空で、AdminDataContext に stores がある場合はそれを使う\n    if (accessibleStores.length === 0 && user?.role === 'admin' && adminStores.length > 0) {\n      accessibleStores = adminStores.map(s => ({ id: s.id, name: s.name }))\n    }\n\n    return accessibleStores.map(store => ({\n      id: store.id,\n      name: store.name,\n      disabled: false\n    }))\n  }, [getAccessibleStores, user?.role, adminStores])\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-4 px-2 sm:px-4 lg:px-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-xl sm:text-2xl font-bold\">{isEditMode ? '日報編集' : '日報入力'}</h1>\n        <Badge>Mobile Friendly</Badge>\n      </div>\n\n      <Card>\n        <CardHeader><CardTitle>基本情報</CardTitle></CardHeader>\n        <CardContent className=\"space-y-3 sm:space-y-4\">\n          <div className=\"flex items-center gap-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <input id=\"monthlyManaged\" type=\"checkbox\" checked={monthlyManaged} onChange={e=>setMonthlyManaged(e.target.checked)} />\n            <label htmlFor=\"monthlyManaged\" className=\"text-sm\">\n              水道光熱費/賃料/消耗品費/販促費/清掃費/通信費/雑費/その他は<strong>月次入力で管理</strong>する\n            </label>\n          </div>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n            <div>\n              <label className=\"block text-xs text-muted-foreground mb-1\">日付</label>\n              <input type=\"date\" value={form.date} onChange={(e)=>setForm(f=>({...f, date: e.target.value}))}\n                className=\"w-full px-3 py-3 rounded border border-input bg-background text-base min-h-[44px]\" />\n            </div>\n            <div>\n              <label className=\"block text-xs text-muted-foreground mb-1\">店舗</label>\n              <select value={form.storeId} onChange={(e)=>setForm(f=>({...f, storeId: e.target.value}))}\n                className=\"w-full px-3 py-3 rounded border border-input bg-background text-base min-h-[44px]\">\n                {storeOptions.map(s=>(\n                  <option key={s.id} value={s.id} disabled={(s as any).disabled}>{'name' in s ? (s as any).name : s.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader><CardTitle>数値入力</CardTitle></CardHeader>\n        <CardContent className=\"space-y-3 sm:space-y-4\">\n        {/* 売上の内訳入力 */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-blue-800 mb-3 flex items-center gap-2\">\n            💰 売上内訳（決済方法・税率別）\n          </h3>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-xs text-muted-foreground mb-1\">💵 現金・10%飲食</label>\n              <input {...numberAttrs} inputMode=\"numeric\"\n                value={form.salesCash10 || ''} \n                onChange={(e)=>setN('salesCash10', Number(e.target.value.replace(/[^0-9]/g,''))||0)}\n                placeholder=\"0\"\n                className=\"w-full px-4 py-3 rounded border border-input bg-background text-right text-lg sm:text-base font-mono min-h-[44px]\" />\n            </div>\n            <div>\n              <label className=\"block text-xs text-muted-foreground mb-1\">💵 現金・8%軽減</label>\n              <input {...numberAttrs} inputMode=\"numeric\"\n                value={form.salesCash8 || ''} \n                onChange={(e)=>setN('salesCash8', Number(e.target.value.replace(/[^0-9]/g,''))||0)}\n                placeholder=\"0\"\n                className=\"w-full px-4 py-3 rounded border border-input bg-background text-right text-lg sm:text-base font-mono min-h-[44px]\" />\n            </div>\n            <div>\n              <label className=\"block text-xs text-muted-foreground mb-1\">💳 クレジット・10%飲食</label>\n              <input {...numberAttrs} inputMode=\"numeric\"\n                value={form.salesCredit10 || ''} \n                onChange={(e)=>setN('salesCredit10', Number(e.target.value.replace(/[^0-9]/g,''))||0)}\n                placeholder=\"0\"\n                className=\"w-full px-4 py-3 rounded border border-input bg-background text-right text-lg sm:text-base font-mono min-h-[44px]\" />\n            </div>\n            <div>\n              <label className=\"block text-xs text-muted-foreground mb-1\">💳 クレジット・8%軽減</label>\n              <input {...numberAttrs} inputMode=\"numeric\"\n                value={form.salesCredit8 || ''} \n                onChange={(e)=>setN('salesCredit8', Number(e.target.value.replace(/[^0-9]/g,''))||0)}\n                placeholder=\"0\"\n                className=\"w-full px-4 py-3 rounded border border-input bg-background text-right text-lg sm:text-base font-mono min-h-[44px]\" />\n            </div>\n          </div>\n          <div className=\"mt-3 p-3 bg-white rounded border border-blue-200\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">現金計：</span>\n                <span className=\"font-mono\">{formatCurrency((form.salesCash10 || 0) + (form.salesCash8 || 0))}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">クレジット計：</span>\n                <span className=\"font-mono\">{formatCurrency((form.salesCredit10 || 0) + (form.salesCredit8 || 0))}</span>\n              </div>\n            </div>\n            <div className=\"mt-2 pt-2 border-t border-blue-200 flex justify-between text-base font-medium\">\n              <span className=\"text-blue-800\">売上合計：</span>\n              <span className=\"font-mono text-blue-900\">{formatCurrency(form.sales)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* 業者別仕入入力 */}\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-red-800 mb-3 flex items-center gap-2\">\n            🛒 仕入内訳（店舗登録業者別）\n          </h3>\n          {(!form.storeId || form.storeId === 'all') ? (\n            <div className=\"text-center py-6 text-muted-foreground\">\n              <p className=\"text-sm\">\n                仕入内訳を入力するには、先に店舗を選択してください。\n              </p>\n            </div>\n          ) : storeVendors.length === 0 ? (\n            <div className=\"text-center py-6 text-muted-foreground\">\n              <p className=\"text-sm\">\n                この店舗に業者が割り当てられていません。\n              </p>\n              <p className=\"text-xs mt-1\">設定画面で業者を追加してください。</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n              {storeVendors.map(vendor => (\n                <div key={vendor.id} className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3\">\n                  <div className=\"w-full sm:w-32 text-xs text-muted-foreground\">\n                    {vendor.name}\n                  </div>\n                  <div className=\"flex-1 w-full\">\n                    <input {...numberAttrs} inputMode=\"numeric\"\n                      value={form.vendorPurchases[vendor.id] || ''} \n                      onChange={(e)=>setVendorPurchase(vendor.id, Number(e.target.value.replace(/[^0-9]/g,''))||0)}\n                      placeholder=\"0\"\n                      className=\"w-full px-3 py-2 rounded border border-input bg-background text-right text-sm font-mono min-h-[36px]\" />\n                  </div>\n                  <div className=\"flex gap-1 w-full sm:w-auto\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={()=>bumpVendor(vendor.id, -1000)}\n                      className=\"flex-1 sm:flex-none min-h-[36px] sm:h-7 text-xs\">-1k</Button>\n                    <Button variant=\"outline\" size=\"sm\" onClick={()=>bumpVendor(vendor.id, +1000)}\n                      className=\"flex-1 sm:flex-none min-h-[36px] sm:h-7 text-xs\">+1k</Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n          <div className=\"mt-3 p-3 bg-white rounded border border-red-200\">\n            <div className=\"flex justify-between text-base font-medium\">\n              <span className=\"text-red-800\">仕入合計：</span>\n              <span className=\"font-mono text-red-900\">{formatCurrency(form.purchase)}</span>\n            </div>\n          </div>\n        </div>\n\n          {[\n            ['laborCost','人件費'],\n            ['utilities','水道光熱費', 'monthly'],\n            ['rent','賃料', 'monthly'],\n            ['consumables','消耗品費', 'monthly'],\n            ['promotion','販促費', 'monthly'],\n            ['cleaning','清掃費', 'monthly'],\n            ['misc','雑費', 'monthly'],\n            ['communication','通信費', 'monthly'],\n            ['others','その他', 'monthly'],\n          ].map(([key,label, category]) => (\n            <div key={key} className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3\">\n              <div className=\"w-full sm:w-20 text-sm font-medium text-foreground sm:text-muted-foreground\">\n                {label}\n                {category === 'monthly' && monthlyManaged && <span className=\"text-xs text-blue-600 ml-1\">(月次)</span>}\n              </div>\n              <div className=\"flex-1 w-full\">\n                <input {...numberAttrs} inputMode=\"numeric\"\n                  value={(form as any)[key] || ''} \n                  onChange={(e)=>setN(key as keyof FormState, Number(e.target.value.replace(/[^0-9]/g,''))||0)}\n                  disabled={category === 'monthly' && monthlyManaged}\n                  placeholder=\"0\"\n                  className=\"w-full px-4 py-3 rounded border border-input bg-background text-right text-lg sm:text-base font-mono min-h-[44px] disabled:bg-muted disabled:text-muted-foreground\" />\n              </div>\n              <div className=\"flex gap-1 sm:gap-2 w-full sm:w-auto\">\n                <Button variant=\"outline\" size=\"sm\" onClick={()=>bump(key as keyof FormState, -1000)} \n                  disabled={category === 'monthly' && monthlyManaged}\n                  className=\"flex-1 sm:flex-none min-h-[44px] sm:h-8 text-xs sm:text-sm\">-1,000</Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={()=>bump(key as keyof FormState, +1000)}\n                  disabled={category === 'monthly' && monthlyManaged}\n                  className=\"flex-1 sm:flex-none min-h-[44px] sm:h-8 text-xs sm:text-sm\">+1,000</Button>\n              </div>\n            </div>\n          ))}\n\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3\">\n            <div className=\"w-full sm:w-20 text-sm font-medium text-foreground sm:text-muted-foreground\">客数</div>\n            <div className=\"flex-1 w-full\">\n              <input {...numberAttrs}\n                value={form.customers || ''} onChange={(e)=>setN('customers', Number(e.target.value.replace(/[^0-9]/g,''))||0)}\n                placeholder=\"0\"\n                className=\"w-full px-4 py-3 rounded border border-input bg-background text-right text-lg sm:text-base font-mono min-h-[44px]\" />\n            </div>\n            <div className=\"flex gap-1 sm:gap-2 w-full sm:w-auto\">\n              <Button variant=\"outline\" size=\"sm\" onClick={()=>bump('customers', -1)}\n                className=\"flex-1 sm:flex-none min-h-[44px] sm:h-8 text-xs sm:text-sm\">-1</Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={()=>bump('customers', +1)}\n                className=\"flex-1 sm:flex-none min-h-[44px] sm:h-8 text-xs sm:text-sm\">+1</Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader><CardTitle>自動計算（実績）</CardTitle></CardHeader>\n        <CardContent className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3 text-sm\">\n          <Stat label=\"経費合計\" value={formatCurrency(totalExpenses)} />\n          <Stat label=\"粗利益\" value={formatCurrency(grossProfit)} pos={grossProfit>=0} />\n          <Stat label=\"営業利益\" value={formatCurrency(operatingProfit)} pos={operatingProfit>=0} />\n          <Stat label=\"利益率\" value={formatPercent(profitMargin)} pos={profitMargin>=0} />\n          <Stat label=\"原価率\" value={formatPercent(purchaseRate)} pos={purchaseRate<=32} />\n          <Stat label=\"人件費率\" value={formatPercent(laborRate)} pos={laborRate<=27} />\n          <Stat label=\"プライムコスト率\" value={formatPercent(primeRate)} pos={primeRate<=58} />\n          <Stat label=\"客単価\" value={averageTicket ? formatCurrency(averageTicket) : '-'} />\n        </CardContent>\n      </Card>\n\n      {monthlyManaged && refDaily.totalExpense > 0 && (\n        <Card className=\"border-amber-200 bg-amber-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-amber-900\">\n              <span>📊</span>\n              参考KPI（月次平均経費を使用）\n            </CardTitle>\n            <p className=\"text-xs text-amber-700 mt-1\">\n              食材費以外の経費を月次平均の日割り値で計算した参考値です。翌月に確定値を入力してください。\n            </p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3 text-sm\">\n              <Stat label=\"参考 営業利益\" value={formatCurrency(referenceOperatingProfit)} pos={referenceOperatingProfit>=0} />\n              <Stat label=\"参考 利益率\" value={formatPercent(referenceProfitMargin)} pos={referenceProfitMargin>=0} />\n            </div>\n\n            <div className=\"rounded-lg border border-amber-300 bg-white p-3\">\n              <div className=\"text-xs font-medium text-amber-900 mb-2\">参考経費の内訳（1日あたり）</div>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 text-xs text-amber-800\">\n                {refDaily.laborCost > 0 && <div>人件費：{formatCurrency(refDaily.laborCost)}</div>}\n                {refDaily.utilities > 0 && <div>水道光熱費：{formatCurrency(refDaily.utilities)}</div>}\n                {refDaily.rent > 0 && <div>賃料：{formatCurrency(refDaily.rent)}</div>}\n                {refDaily.consumables > 0 && <div>消耗品費：{formatCurrency(refDaily.consumables)}</div>}\n                {refDaily.promotion > 0 && <div>販促費：{formatCurrency(refDaily.promotion)}</div>}\n                {refDaily.cleaning > 0 && <div>清掃費：{formatCurrency(refDaily.cleaning)}</div>}\n                {refDaily.communication > 0 && <div>通信費：{formatCurrency(refDaily.communication)}</div>}\n                {refDaily.misc > 0 && <div>雑費：{formatCurrency(refDaily.misc)}</div>}\n                {refDaily.others > 0 && <div>その他：{formatCurrency(refDaily.others)}</div>}\n              </div>\n              <div className=\"mt-2 pt-2 border-t border-amber-200 text-sm font-medium text-amber-900 flex justify-between\">\n                <span>合計</span>\n                <span>{formatCurrency(refDaily.totalExpense)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader><CardTitle>メモ</CardTitle></CardHeader>\n        <CardContent>\n          <textarea\n            value={form.reportText}\n            onChange={(e)=>setForm(f=>({...f, reportText: e.target.value}))}\n            placeholder=\"例：雨で来客減。テイクアウト強化で客単価維持。\"\n            className=\"w-full px-4 py-3 rounded border border-input bg-background min-h-24 text-base resize-none min-h-[44px]\"\n          />\n          <p className=\"text-xs text-muted-foreground mt-2\">💬 音声入力も可（スマホのマイク機能）</p>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex flex-col sm:flex-row gap-3 sticky bottom-4 bg-background p-4 -mx-2 sm:mx-0 sm:p-0 sm:bg-transparent rounded-lg sm:rounded-none border sm:border-none\">\n        <Button className=\"flex-1 min-h-[44px] sm:h-10 text-base sm:text-sm\" onClick={submit} disabled={saving || form.storeId==='all' || loading}>\n          {saving ? <UploadCloud className=\"h-4 w-4 mr-2 animate-pulse\" /> : <Save className=\"h-4 w-4 mr-2\" />}\n          {isEditMode ? '更新' : '保存'}\n        </Button>\n        <Button variant=\"outline\" className=\"w-full sm:w-36 min-h-[44px] sm:h-10 text-base sm:text-sm\" onClick={()=>navigate('/dashboard/daily')}>\n          ダッシュボードへ\n        </Button>\n      </div>\n\n      {saved && (\n        <div className={cn('flex items-center gap-2 text-sm p-3 rounded-lg border',\n          saved==='local' ? 'text-blue-700 bg-blue-50 border-blue-200' : 'text-green-700 bg-green-50 border-green-200')}>\n          <CheckCircle className=\"h-4 w-4\" />\n          {saved==='sent' ? (\n            <div>\n              保存が完了しました。\n              {monthlyManaged && <div className=\"text-xs mt-1\">💡 月次経費は別途「月次経費入力」画面で管理してください</div>}\n            </div>\n          ) : '保存しました'}\n        </div>\n      )}\n\n      {targetAchieved && (\n        <div className=\"flex items-center gap-3 text-lg p-4 rounded-lg border bg-green-50 border-green-200 animate-pulse\">\n          <Trophy className=\"h-6 w-6 text-green-600\" />\n          <div className=\"font-bold text-green-700\">\n            本日の売上目標を達成しました！おめでとうございます！\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst Stat: React.FC<{label:string; value:string; pos?: boolean}> = ({label, value, pos}) => (\n  <div className=\"p-3 sm:p-4 rounded border border-border\">\n    <div className=\"text-xs text-muted-foreground\">{label}</div>\n    <div className={cn('text-sm sm:text-base font-semibold leading-tight', pos==null ? '' : pos ? 'text-green-600' : 'text-red-600')}>\n      {value}\n    </div>\n  </div>\n)",
  "src/pages/SharedReport.tsx": "import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { supabase } from '../lib/supabase';\nimport { FileText, TrendingUp, TrendingDown, Calendar, Store } from 'lucide-react';\n\ninterface Report {\n  id: string;\n  title: string;\n  summary: string;\n  report_type: string;\n  period_start: string;\n  period_end: string;\n  key_insights: string[];\n  recommendations: string[];\n  metrics: {\n    totalSales?: number;\n    totalExpenses?: number;\n    grossProfit?: number;\n    operatingProfit?: number;\n    profitMargin?: number;\n    costRate?: number;\n    laborRate?: number;\n  };\n  generated_at: string;\n  store_id?: string;\n  store_name?: string;\n}\n\nexport default function SharedReport() {\n  const { shareToken } = useParams<{ shareToken: string }>();\n  const [report, setReport] = useState<Report | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function loadReport() {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const { data, error: fetchError } = await supabase\n          .from('ai_generated_reports')\n          .select(`\n            *,\n            stores!ai_generated_reports_store_id_fkey(name)\n          `)\n          .eq('share_token', shareToken)\n          .eq('is_public', true)\n          .maybeSingle();\n\n        if (fetchError) throw fetchError;\n\n        if (!data) {\n          setError('このレポートは見つからないか、共有が無効になっています。');\n          return;\n        }\n\n        setReport({\n          ...data,\n          store_name: data.stores?.name,\n        });\n      } catch (err) {\n        console.error('Error loading shared report:', err);\n        setError('レポートの読み込みに失敗しました。');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    if (shareToken) {\n      loadReport();\n    }\n  }, [shareToken]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">レポートを読み込んでいます...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !report) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center max-w-md\">\n          <FileText className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">レポートが見つかりません</h2>\n          <p className=\"text-gray-600\">{error || 'このレポートは存在しないか、アクセスできません。'}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const metrics = report.metrics || {};\n  const formatCurrency = (value: number) => `¥${value.toLocaleString('ja-JP')}`;\n  const formatPercent = (value: number) => `${value.toFixed(1)}%`;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg shadow-lg p-8 text-white mb-6\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-3\">{report.title}</h1>\n              <div className=\"flex flex-wrap gap-4 text-blue-100\">\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>{report.period_start} 〜 {report.period_end}</span>\n                </div>\n                {report.store_name && (\n                  <div className=\"flex items-center gap-2\">\n                    <Store className=\"h-4 w-4\" />\n                    <span>{report.store_name}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"bg-white/20 backdrop-blur-sm px-4 py-2 rounded-lg\">\n              <div className=\"text-sm text-blue-100\">レポート種類</div>\n              <div className=\"font-semibold\">\n                {report.report_type === 'weekly' ? '週次' : '月次'}レポート\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Summary */}\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n            <FileText className=\"h-5 w-5 text-blue-600\" />\n            エグゼクティブサマリー\n          </h2>\n          <p className=\"text-gray-700 leading-relaxed\">{report.summary}</p>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">主要指標</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {metrics.totalSales !== undefined && (\n              <div className=\"bg-blue-50 rounded-lg p-4\">\n                <div className=\"text-sm text-gray-600 mb-1\">総売上</div>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {formatCurrency(metrics.totalSales)}\n                </div>\n              </div>\n            )}\n            {metrics.totalExpenses !== undefined && (\n              <div className=\"bg-red-50 rounded-lg p-4\">\n                <div className=\"text-sm text-gray-600 mb-1\">総経費</div>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {formatCurrency(metrics.totalExpenses)}\n                </div>\n              </div>\n            )}\n            {metrics.grossProfit !== undefined && (\n              <div className=\"bg-green-50 rounded-lg p-4\">\n                <div className=\"text-sm text-gray-600 mb-1\">粗利益</div>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {formatCurrency(metrics.grossProfit)}\n                </div>\n              </div>\n            )}\n            {metrics.operatingProfit !== undefined && (\n              <div className={`${metrics.operatingProfit >= 0 ? 'bg-emerald-50' : 'bg-orange-50'} rounded-lg p-4`}>\n                <div className=\"text-sm text-gray-600 mb-1\">営業利益</div>\n                <div className={`text-2xl font-bold flex items-center gap-1 ${metrics.operatingProfit >= 0 ? 'text-emerald-600' : 'text-orange-600'}`}>\n                  {metrics.operatingProfit >= 0 ? (\n                    <TrendingUp className=\"h-5 w-5\" />\n                  ) : (\n                    <TrendingDown className=\"h-5 w-5\" />\n                  )}\n                  {formatCurrency(metrics.operatingProfit)}\n                </div>\n              </div>\n            )}\n            {metrics.profitMargin !== undefined && (\n              <div className=\"bg-purple-50 rounded-lg p-4\">\n                <div className=\"text-sm text-gray-600 mb-1\">利益率</div>\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {formatPercent(metrics.profitMargin)}\n                </div>\n              </div>\n            )}\n            {metrics.costRate !== undefined && (\n              <div className=\"bg-amber-50 rounded-lg p-4\">\n                <div className=\"text-sm text-gray-600 mb-1\">原価率</div>\n                <div className=\"text-2xl font-bold text-amber-600\">\n                  {formatPercent(metrics.costRate)}\n                </div>\n              </div>\n            )}\n            {metrics.laborRate !== undefined && (\n              <div className=\"bg-cyan-50 rounded-lg p-4\">\n                <div className=\"text-sm text-gray-600 mb-1\">人件費率</div>\n                <div className=\"text-2xl font-bold text-cyan-600\">\n                  {formatPercent(metrics.laborRate)}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Key Insights */}\n        {report.key_insights && report.key_insights.length > 0 && (\n          <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">重要な発見</h2>\n            <div className=\"space-y-3\">\n              {report.key_insights.map((insight, index) => (\n                <div key={index} className=\"bg-blue-50 border-l-4 border-blue-500 p-4 rounded\">\n                  <p className=\"text-gray-700\">{insight}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Recommendations */}\n        {report.recommendations && report.recommendations.length > 0 && (\n          <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">改善提案</h2>\n            <div className=\"space-y-3\">\n              {report.recommendations.map((rec, index) => (\n                <div key={index} className=\"bg-green-50 border-l-4 border-green-500 p-4 rounded\">\n                  <p className=\"text-gray-700\">{rec}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500 py-6\">\n          <p>このレポートは AI によって自動生成されました</p>\n          <p className=\"mt-1\">生成日時: {new Date(report.generated_at).toLocaleString('ja-JP')}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/pages/StaffManagement.tsx": "import React, { useState, useEffect } from 'react'\nimport { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { PermissionGuard } from '@/components/Auth/PermissionGuard'\nimport { supabase } from '@/lib/supabase'\nimport { Users, Mail, Shield, Store, ChevronDown, ChevronUp } from 'lucide-react'\n\ntype UserRole = 'staff' | 'manager' | 'admin'\n\ninterface UserProfile {\n  id: string\n  email: string\n  name: string\n  role: UserRole\n  created_at: string\n}\n\ninterface StoreAssignment {\n  store_id: string\n  store_name: string\n}\n\nexport const StaffManagement: React.FC = () => {\n  const [users, setUsers] = useState<UserProfile[]>([])\n  const [stores, setStores] = useState<Array<{ id: string; name: string }>>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string>('')\n  const [expandedUserId, setExpandedUserId] = useState<string | null>(null)\n  const [storeAssignments, setStoreAssignments] = useState<Record<string, StoreAssignment[]>>({})\n\n  useEffect(() => {\n    loadData()\n  }, [])\n\n  const loadData = async () => {\n    setLoading(true)\n    setError('')\n\n    try {\n      if (!supabase) {\n        setError('Supabaseクライアントが利用できません')\n        setLoading(false)\n        return\n      }\n\n      const [usersResult, storesResult] = await Promise.all([\n        supabase.from('profiles').select('id, email, name, role, created_at').order('created_at', { ascending: false }),\n        supabase.from('stores').select('id, name').eq('is_active', true).order('name')\n      ])\n\n      if (usersResult.error) throw usersResult.error\n      if (storesResult.error) throw storesResult.error\n\n      setUsers(usersResult.data || [])\n      setStores(storesResult.data || [])\n\n      const assignmentsMap: Record<string, StoreAssignment[]> = {}\n      for (const user of usersResult.data || []) {\n        const { data: assignments } = await supabase\n          .from('store_assignments')\n          .select(`\n            store_id,\n            stores:store_id (\n              name\n            )\n          `)\n          .eq('user_id', user.id)\n\n        assignmentsMap[user.id] = (assignments || []).map((a: any) => ({\n          store_id: a.store_id,\n          store_name: a.stores?.name || '不明な店舗'\n        }))\n      }\n\n      setStoreAssignments(assignmentsMap)\n    } catch (err) {\n      console.error('データ読み込みエラー:', err)\n      setError(err instanceof Error ? err.message : 'データの読み込みに失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateUserRole = async (userId: string, newRole: UserRole) => {\n    if (!supabase) return\n\n    try {\n      const { error } = await supabase\n        .from('profiles')\n        .update({ role: newRole })\n        .eq('id', userId)\n\n      if (error) throw error\n\n      setUsers(users.map(u => u.id === userId ? { ...u, role: newRole } : u))\n      alert('権限を更新しました')\n    } catch (err) {\n      console.error('権限更新エラー:', err)\n      alert('権限の更新に失敗しました: ' + (err instanceof Error ? err.message : '不明なエラー'))\n    }\n  }\n\n  const assignStoreToUser = async (userId: string, storeId: string) => {\n    if (!supabase) return\n\n    try {\n      const { error } = await supabase\n        .from('store_assignments')\n        .insert({\n          user_id: userId,\n          store_id: storeId\n        })\n\n      if (error) throw error\n\n      await loadData()\n      alert('店舗を割り当てました')\n    } catch (err) {\n      console.error('店舗割り当てエラー:', err)\n      alert('店舗の割り当てに失敗しました: ' + (err instanceof Error ? err.message : '不明なエラー'))\n    }\n  }\n\n  const unassignStoreFromUser = async (userId: string, storeId: string) => {\n    if (!supabase) return\n\n    try {\n      const { error } = await supabase\n        .from('store_assignments')\n        .delete()\n        .eq('user_id', userId)\n        .eq('store_id', storeId)\n\n      if (error) throw error\n\n      await loadData()\n      alert('店舗の割り当てを解除しました')\n    } catch (err) {\n      console.error('店舗割り当て解除エラー:', err)\n      alert('店舗の割り当て解除に失敗しました: ' + (err instanceof Error ? err.message : '不明なエラー'))\n    }\n  }\n\n  const getRoleBadgeVariant = (role: UserRole) => {\n    switch (role) {\n      case 'admin': return 'default'\n      case 'manager': return 'secondary'\n      case 'staff': return 'outline'\n      default: return 'outline'\n    }\n  }\n\n  const getRoleLabel = (role: UserRole) => {\n    switch (role) {\n      case 'admin': return '管理者'\n      case 'manager': return '店長'\n      case 'staff': return 'スタッフ'\n      default: return role\n    }\n  }\n\n  if (loading) {\n    return (\n      <PermissionGuard requiredRole=\"manager\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-muted-foreground\">読み込み中...</div>\n        </div>\n      </PermissionGuard>\n    )\n  }\n\n  return (\n    <PermissionGuard requiredRole=\"manager\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground flex items-center gap-2\">\n            <Users className=\"w-6 h-6\" />\n            スタッフ権限管理\n          </h1>\n          <p className=\"text-sm text-muted-foreground\">登録スタッフの権限と店舗割り当てを管理します。</p>\n        </div>\n\n        {error && (\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg text-red-700\">\n            {error}\n          </div>\n        )}\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>登録済みスタッフ（{users.length}名）</span>\n              <Button variant=\"outline\" size=\"sm\" onClick={loadData}>\n                更新\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {users.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Users className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                  <p>登録済みスタッフがいません</p>\n                </div>\n              ) : (\n                users.map(user => {\n                  const isExpanded = expandedUserId === user.id\n                  const userStores = storeAssignments[user.id] || []\n                  const unassignedStores = stores.filter(\n                    s => !userStores.some(us => us.store_id === s.id)\n                  )\n\n                  return (\n                    <div key={user.id} className=\"border border-border rounded-lg\">\n                      <div className=\"p-3 sm:p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3\">\n                            <div className=\"flex items-center gap-2 min-w-0\">\n                              <Mail className=\"w-4 h-4 text-muted-foreground flex-shrink-0\" />\n                              <span className=\"font-medium text-sm sm:text-base truncate\">{user.email}</span>\n                            </div>\n                            <Badge variant={getRoleBadgeVariant(user.role)} className=\"self-start\">\n                              <Shield className=\"w-3 h-3 mr-1\" />\n                              {getRoleLabel(user.role)}\n                            </Badge>\n                          </div>\n                          <div className=\"text-xs sm:text-sm text-muted-foreground mt-2\">\n                            名前: {user.name} | 登録日: {new Date(user.created_at).toLocaleDateString('ja-JP')}\n                          </div>\n                          {userStores.length > 0 && (\n                            <div className=\"flex items-center gap-2 mt-2\">\n                              <Store className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"text-xs sm:text-sm text-muted-foreground\">\n                                割り当て店舗: {userStores.length}店舗\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setExpandedUserId(isExpanded ? null : user.id)}\n                            className=\"w-full sm:w-auto\"\n                          >\n                            {isExpanded ? <ChevronUp className=\"w-4 h-4 mr-1\" /> : <ChevronDown className=\"w-4 h-4 mr-1\" />}\n                            {isExpanded ? '閉じる' : '管理'}\n                          </Button>\n                        </div>\n                      </div>\n\n                      {isExpanded && (\n                        <div className=\"border-t border-border p-4 bg-muted/30 space-y-4\">\n                          <div>\n                            <h4 className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                              <Shield className=\"w-4 h-4\" />\n                              権限変更\n                            </h4>\n                            <div className=\"flex gap-2 flex-wrap\">\n                              {(['staff', 'manager', 'admin'] as UserRole[]).map(role => (\n                                <Button\n                                  key={role}\n                                  size=\"sm\"\n                                  variant={user.role === role ? 'default' : 'outline'}\n                                  onClick={() => {\n                                    if (user.role !== role) {\n                                      if (confirm(`${user.email}の権限を「${getRoleLabel(role)}」に変更しますか？`)) {\n                                        updateUserRole(user.id, role)\n                                      }\n                                    }\n                                  }}\n                                  disabled={user.role === role}\n                                >\n                                  {getRoleLabel(role)}\n                                </Button>\n                              ))}\n                            </div>\n                          </div>\n\n                          <div>\n                            <h4 className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                              <Store className=\"w-4 h-4\" />\n                              店舗割り当て\n                            </h4>\n\n                            {userStores.length > 0 && (\n                              <div className=\"mb-3\">\n                                <div className=\"text-xs text-muted-foreground mb-2\">割り当て済み店舗</div>\n                                <div className=\"flex flex-wrap gap-2\">\n                                  {userStores.map(store => (\n                                    <Badge key={store.store_id} variant=\"secondary\" className=\"flex items-center gap-1\">\n                                      {store.store_name}\n                                      <button\n                                        onClick={() => {\n                                          if (confirm(`${store.store_name}の割り当てを解除しますか？`)) {\n                                            unassignStoreFromUser(user.id, store.store_id)\n                                          }\n                                        }}\n                                        className=\"ml-1 hover:text-destructive\"\n                                      >\n                                        ×\n                                      </button>\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {unassignedStores.length > 0 ? (\n                              <div>\n                                <div className=\"text-xs text-muted-foreground mb-2\">追加可能な店舗</div>\n                                <div className=\"flex flex-wrap gap-2\">\n                                  {unassignedStores.map(store => (\n                                    <Button\n                                      key={store.id}\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      onClick={() => {\n                                        if (confirm(`${store.name}を割り当てますか？`)) {\n                                          assignStoreToUser(user.id, store.id)\n                                        }\n                                      }}\n                                    >\n                                      + {store.name}\n                                    </Button>\n                                  ))}\n                                </div>\n                              </div>\n                            ) : (\n                              <div className=\"text-sm text-muted-foreground text-center py-2\">\n                                すべての店舗が割り当て済みです\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )\n                })\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>権限レベルの説明</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-start gap-3\">\n                <Badge variant=\"default\" className=\"mt-0.5\">\n                  <Shield className=\"w-3 h-3 mr-1\" />\n                  管理者\n                </Badge>\n                <div>\n                  <p className=\"font-medium\">すべての機能にアクセス可能</p>\n                  <p className=\"text-muted-foreground\">全店舗の管理、スタッフの権限変更、システム設定など</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Badge variant=\"secondary\" className=\"mt-0.5\">\n                  <Shield className=\"w-3 h-3 mr-1\" />\n                  店長\n                </Badge>\n                <div>\n                  <p className=\"font-medium\">割り当て店舗の管理が可能</p>\n                  <p className=\"text-muted-foreground\">日報の確認・編集、月次経費入力、目標設定など</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Badge variant=\"outline\" className=\"mt-0.5\">\n                  <Shield className=\"w-3 h-3 mr-1\" />\n                  スタッフ\n                </Badge>\n                <div>\n                  <p className=\"font-medium\">基本的な日報入力のみ</p>\n                  <p className=\"text-muted-foreground\">割り当て店舗の日報入力のみが可能</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </PermissionGuard>\n  )\n}\n",
  "src/pages/Targets.tsx": "import React from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { Target, TrendingUp, Users, Calendar, AlertCircle, CheckCircle, Percent } from 'lucide-react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { MetricCard } from '@/components/ui/MetricCard'\nimport { SalesChart } from '@/components/Charts/SalesChart'\nimport { useReports } from '@/hooks/useReports'\nimport { useTargets } from '@/hooks/useTargets'\nimport { useKpis } from '@/hooks/useKpis'\nimport { useExpenseBaseline } from '@/hooks/useExpenseBaseline'\nimport { formatCurrency, formatPercent, formatNumber } from '@/lib/format'\n\nexport const Targets: React.FC = () => {\n  const location = useLocation()\n  const sp = new URLSearchParams(location.search)\n  const storeId = sp.get('store') || 'all'\n  const currentPeriod = new Date().toISOString().substring(0, 7) // YYYY-MM\n  const { expenseBaseline, monthlyExpenseBaseline } = useExpenseBaseline(storeId, currentPeriod)\n  \n  const { data: monthReports, isLoading } = useReports({\n    storeId,\n    dateFrom: new Date().toISOString().substring(0, 8) + '01', // First day of month\n    dateTo: new Date().toISOString().split('T')[0] // Today\n  })\n\n  const { getAllStoresTarget, calculateTargetMetrics } = useTargets(storeId, currentPeriod)\n  const baseKpis = useKpis(monthReports)\n\n  // 月次経費を日報データ分だけ日割りで加算して正しい営業利益を計算\n  const monthKpis = React.useMemo(() => {\n    if (storeId === 'all' || !monthlyExpenseBaseline || monthReports.length === 0) {\n      return baseKpis\n    }\n\n    // 日報データがある日数分の月次経費を日割り計算\n    const daysWithReports = monthReports.length\n    const monthlyTotal = monthlyExpenseBaseline.totalExpense\n    const openDays = expenseBaseline.monthly?.open_days || 31\n    const proRatedMonthlyExpense = Math.round((monthlyTotal / openDays) * daysWithReports)\n\n    // 営業利益 = 売上 - （仕入経費 + その他経費）\n    // その他経費 = 日報のその他経費 + 月次経費の日割り分\n    const totalExpenses = baseKpis.totalExpenses + proRatedMonthlyExpense\n    const operatingProfit = baseKpis.totalSales - totalExpenses\n    const profitMargin = baseKpis.totalSales > 0 ? (operatingProfit / baseKpis.totalSales) * 100 : 0\n\n    return {\n      ...baseKpis,\n      totalExpenses,\n      operatingProfit,\n      profitMargin\n    }\n  }, [baseKpis, monthlyExpenseBaseline, expenseBaseline, monthReports.length, storeId])\n  \n  const allStoresTarget = getAllStoresTarget()\n  const targetMetrics = calculateTargetMetrics(\n    monthKpis.totalSales,\n    monthKpis.operatingProfit,\n    allStoresTarget.targetSales,\n    allStoresTarget.targetProfit\n  )\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-32 bg-muted rounded-lg\"></div>\n            </div>\n          ))}\n        </div>\n        <div className=\"h-96 bg-muted rounded-lg animate-pulse\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground mb-2\">\n          目標達成度\n        </h1>\n        <p className=\"text-muted-foreground\">\n          {new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' })}の目標進捗\n        </p>\n      </div>\n\n      {/* Achievement Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <MetricCard\n          label=\"売上達成率\"\n          value={`${targetMetrics.salesAchievement.toFixed(1)}%`}\n          icon={TrendingUp}\n          tone={\n            targetMetrics.salesAchievement >= 90 ? \"success\" : \n            targetMetrics.salesAchievement >= 70 ? \"warning\" : \"danger\"\n          }\n          hint={`目標: ${formatCurrency(allStoresTarget.targetSales)}`}\n        />\n        \n        <MetricCard\n          label=\"営業利益達成率\"\n          value={`${targetMetrics.profitAchievement.toFixed(1)}%`}\n          icon={Target}\n          tone={\n            targetMetrics.profitAchievement >= 90 ? \"success\" : \n            targetMetrics.profitAchievement >= 70 ? \"warning\" : \"danger\"\n          }\n          hint={`目標: ${formatCurrency(allStoresTarget.targetProfit)}`}\n        />\n        \n        <MetricCard\n          label=\"必要売上残\"\n          value={formatCurrency(targetMetrics.remainingSales)}\n          icon={Calendar}\n          tone=\"info\"\n          hint={`残り${targetMetrics.daysRemaining}日`}\n        />\n        \n        <MetricCard\n          label=\"必要日商\"\n          value={formatCurrency(targetMetrics.requiredDailySales)}\n          icon={Users}\n          tone=\"neutral\"\n          hint={`必要客数: ${formatNumber(targetMetrics.requiredCustomers)}名`}\n        />\n      </div>\n\n      {/* Cost and Labor Rate Targets */}\n      {(allStoresTarget.targetCostRate > 0 || allStoresTarget.targetLaborRate > 0) && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {allStoresTarget.targetCostRate > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Percent className=\"h-5 w-5 text-orange-600\" />\n                  原価率\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">実績</span>\n                    <span className={`text-2xl font-bold ${\n                      monthKpis.purchaseRate <= allStoresTarget.targetCostRate ? 'text-green-600' :\n                      monthKpis.purchaseRate <= allStoresTarget.targetCostRate + 5 ? 'text-yellow-600' : 'text-red-600'\n                    }`}>\n                      {formatPercent(monthKpis.purchaseRate)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-muted-foreground\">目標</span>\n                    <span className=\"font-medium\">{formatPercent(allStoresTarget.targetCostRate)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm pt-2 border-t\">\n                    <span className=\"text-muted-foreground\">差異</span>\n                    <span className={`font-medium ${\n                      monthKpis.purchaseRate <= allStoresTarget.targetCostRate ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {monthKpis.purchaseRate <= allStoresTarget.targetCostRate ? '✓ 達成' : `+${formatPercent(monthKpis.purchaseRate - allStoresTarget.targetCostRate)}`}\n                    </span>\n                  </div>\n                  {monthKpis.purchaseRate > allStoresTarget.targetCostRate && (\n                    <div className=\"flex items-center gap-2 p-2 mt-2 bg-red-50 dark:bg-red-950 rounded-lg border border-red-200 dark:border-red-900\">\n                      <AlertCircle className=\"h-4 w-4 text-red-700 dark:text-red-400 flex-shrink-0\" />\n                      <p className=\"text-xs text-red-700 dark:text-red-300\">\n                        原価率が目標を上回っています。仕入管理の見直しが必要です。\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {allStoresTarget.targetLaborRate > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5 text-cyan-600\" />\n                  人件費率\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">実績</span>\n                    <span className={`text-2xl font-bold ${\n                      monthKpis.laborRate <= allStoresTarget.targetLaborRate ? 'text-green-600' :\n                      monthKpis.laborRate <= allStoresTarget.targetLaborRate + 5 ? 'text-yellow-600' : 'text-red-600'\n                    }`}>\n                      {formatPercent(monthKpis.laborRate)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-muted-foreground\">目標</span>\n                    <span className=\"font-medium\">{formatPercent(allStoresTarget.targetLaborRate)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm pt-2 border-t\">\n                    <span className=\"text-muted-foreground\">差異</span>\n                    <span className={`font-medium ${\n                      monthKpis.laborRate <= allStoresTarget.targetLaborRate ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {monthKpis.laborRate <= allStoresTarget.targetLaborRate ? '✓ 達成' : `+${formatPercent(monthKpis.laborRate - allStoresTarget.targetLaborRate)}`}\n                    </span>\n                  </div>\n                  {monthKpis.laborRate > allStoresTarget.targetLaborRate && (\n                    <div className=\"flex items-center gap-2 p-2 mt-2 bg-red-50 dark:bg-red-950 rounded-lg border border-red-200 dark:border-red-900\">\n                      <AlertCircle className=\"h-4 w-4 text-red-700 dark:text-red-400 flex-shrink-0\" />\n                      <p className=\"text-xs text-red-700 dark:text-red-300\">\n                        人件費率が目標を上回っています。シフト調整の検討が必要です。\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {/* Progress Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5 text-primary\" />\n              売上目標進捗\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>現在の売上</span>\n                <span className=\"font-medium\">{formatCurrency(monthKpis.totalSales)}</span>\n              </div>\n              <Progress \n                value={targetMetrics.salesAchievement} \n                className=\"h-3\"\n              />\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\n                <span>0円</span>\n                <span>{formatCurrency(allStoresTarget.targetSales)}</span>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-border\">\n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground mb-1\">達成率</p>\n                <p className={`text-lg font-bold ${\n                  targetMetrics.salesAchievement >= 90 ? 'text-green-600' : \n                  targetMetrics.salesAchievement >= 70 ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {targetMetrics.salesAchievement.toFixed(1)}%\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground mb-1\">必要残額</p>\n                <p className=\"text-lg font-bold text-foreground\">\n                  {formatCurrency(targetMetrics.remainingSales)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              利益目標進捗\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>現在の営業利益</span>\n                <span className=\"font-medium\">{formatCurrency(monthKpis.operatingProfit)}</span>\n              </div>\n              <Progress \n                value={targetMetrics.profitAchievement} \n                className=\"h-3\"\n              />\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\n                <span>0円</span>\n                <span>{formatCurrency(allStoresTarget.targetProfit)}</span>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-border\">\n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground mb-1\">利益率</p>\n                <p className={`text-lg font-bold ${\n                  monthKpis.profitMargin >= 20 ? 'text-green-600' : \n                  monthKpis.profitMargin >= 15 ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {formatPercent(monthKpis.profitMargin)}\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground mb-1\">目標営業利益率</p>\n                <p className=\"text-lg font-bold text-foreground\">\n                  {formatPercent(allStoresTarget.targetProfitMargin)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Action Items */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-5 w-5 text-yellow-600\" />\n            アクション項目\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {targetMetrics.salesAchievement < 90 && (\n              <div className=\"flex items-center gap-3 p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg\">\n                <AlertCircle className=\"h-4 w-4 text-yellow-700 dark:text-yellow-400\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-yellow-900 dark:text-yellow-100\">売上目標達成のため日商向上が必要</p>\n                  <p className=\"text-xs text-yellow-700 dark:text-yellow-300\">\n                    残り{targetMetrics.daysRemaining}日で{formatCurrency(targetMetrics.requiredDailySales)}/日の売上が必要\n                  </p>\n                </div>\n                <Badge variant=\"outline\">高優先度</Badge>\n              </div>\n            )}\n            \n            {monthKpis.profitMargin < 15 && (\n              <div className=\"flex items-center gap-3 p-3 bg-red-50 dark:bg-red-950 rounded-lg\">\n                <AlertCircle className=\"h-4 w-4 text-red-700 dark:text-red-400\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-red-900 dark:text-red-100\">利益率改善が必要</p>\n                  <p className=\"text-xs text-red-700 dark:text-red-300\">\n                    現在{formatPercent(monthKpis.profitMargin)}、目標{formatPercent(allStoresTarget.targetProfitMargin)}\n                  </p>\n                </div>\n                <Badge variant=\"destructive\">重要</Badge>\n              </div>\n            )}\n            \n            {targetMetrics.salesAchievement >= 100 && targetMetrics.profitAchievement >= 100 && (\n              <div className=\"flex items-center gap-3 p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n                <CheckCircle className=\"h-4 w-4 text-green-700 dark:text-green-400\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-green-900 dark:text-green-100\">目標達成おめでとうございます！</p>\n                  <p className=\"text-xs text-green-700 dark:text-green-300\">\n                    売上・利益ともに目標を上回っています\n                  </p>\n                </div>\n                <Badge>達成</Badge>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sales Chart with Target Line */}\n      <SalesChart\n        reports={monthReports}\n        period=\"daily\"\n        targetSales={allStoresTarget.targetSales / 30} // Daily target\n        expenseBaseline={expenseBaseline}\n      />\n    </div>\n  )\n}",
  "src/pages/TermsOfService.tsx": "import React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { ArrowLeft, FileText } from 'lucide-react'\nimport { useNavigate } from 'react-router-dom'\n\nexport const TermsOfService: React.FC = () => {\n  const navigate = useNavigate()\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <Button\n          onClick={() => navigate(-1)}\n          className=\"mb-6 bg-slate-600 hover:bg-slate-700 text-white\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          戻る\n        </Button>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3 text-2xl\">\n              <FileText className=\"w-6 h-6\" />\n              利用規約\n            </CardTitle>\n            <p className=\"text-sm text-slate-600 mt-2\">最終更新日: 2025年10月11日</p>\n          </CardHeader>\n\n          <CardContent className=\"prose prose-slate max-w-none\">\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第1条（適用）</h2>\n              <p className=\"text-slate-700 leading-relaxed mb-3\">\n                本利用規約（以下「本規約」といいます）は、当社が提供する「AI経営管理システム」（以下「本サービス」といいます）の利用条件を定めるものです。\n              </p>\n              <p className=\"text-slate-700 leading-relaxed\">\n                ユーザーの皆様（以下「ユーザー」といいます）には、本規約に従って本サービスをご利用いただきます。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第2条（利用登録）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>本サービスの利用を希望する方は、本規約に同意の上、当社の定める方法によって利用登録を申請し、当社がこれを承認することによって、利用登録が完了するものとします。</li>\n                <li>当社は、利用登録の申請者に以下の事由があると判断した場合、利用登録の申請を承認しないことがあり、その理由については一切の開示義務を負わないものとします。\n                  <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                    <li>利用登録の申請に際して虚偽の事項を届け出た場合</li>\n                    <li>本規約に違反したことがある者からの申請である場合</li>\n                    <li>その他、当社が利用登録を相当でないと判断した場合</li>\n                  </ul>\n                </li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第3条（ユーザーIDおよびパスワードの管理）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>ユーザーは、自己の責任において、本サービスのユーザーIDおよびパスワードを適切に管理するものとします。</li>\n                <li>ユーザーは、いかなる場合にも、ユーザーIDおよびパスワードを第三者に譲渡または貸与し、もしくは第三者と共用することはできません。</li>\n                <li>当社は、ユーザーIDとパスワードの組み合わせが登録情報と一致してログインされた場合には、そのユーザーIDを登録しているユーザー自身による利用とみなします。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第4条（料金および支払方法）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>ユーザーは、本サービス利用の対価として、当社が別途定め、本ウェブサイトに表示する利用料金を、当社が指定する方法により支払うものとします。</li>\n                <li>ユーザーが利用料金の支払を遅滞した場合には、ユーザーは年14.6％の割合による遅延損害金を支払うものとします。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第5条（禁止事項）</h2>\n              <p className=\"text-slate-700 mb-3\">ユーザーは、本サービスの利用にあたり、以下の行為をしてはなりません。</p>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>法令または公序良俗に違反する行為</li>\n                <li>犯罪行為に関連する行為</li>\n                <li>当社、本サービスの他のユーザー、または第三者のサーバーまたはネットワークの機能を破壊したり、妨害したりする行為</li>\n                <li>当社のサービスの運営を妨害するおそれのある行為</li>\n                <li>他のユーザーに関する個人情報等を収集または蓄積する行為</li>\n                <li>不正アクセスをし、またはこれを試みる行為</li>\n                <li>他のユーザーに成りすます行為</li>\n                <li>当社が許諾しない本サービス上での宣伝、広告、勧誘、または営業行為</li>\n                <li>本サービスの他のユーザーまたは第三者に不利益、損害、不快感を与える行為</li>\n                <li>当社、本サービスの他のユーザーまたは第三者の知的財産権、肖像権、プライバシー、名誉その他の権利または利益を侵害する行為</li>\n                <li>反社会的勢力に対する利益供与その他の協力行為</li>\n                <li>その他、当社が不適切と判断する行為</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第6条（本サービスの提供の停止等）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、以下のいずれかの事由があると判断した場合、ユーザーに事前に通知することなく本サービスの全部または一部の提供を停止または中断することができるものとします。\n                  <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                    <li>本サービスにかかるコンピュータシステムの保守点検または更新を行う場合</li>\n                    <li>地震、落雷、火災、停電または天災などの不可抗力により、本サービスの提供が困難となった場合</li>\n                    <li>コンピュータまたは通信回線等が事故により停止した場合</li>\n                    <li>その他、当社が本サービスの提供が困難と判断した場合</li>\n                  </ul>\n                </li>\n                <li>当社は、本サービスの提供の停止または中断により、ユーザーまたは第三者が被ったいかなる不利益または損害についても、一切の責任を負わないものとします。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第7条（利用制限および登録抹消）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、ユーザーが以下のいずれかに該当する場合には、事前の通知なく、ユーザーに対して、本サービスの全部もしくは一部の利用を制限し、またはユーザーとしての登録を抹消することができるものとします。\n                  <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                    <li>本規約のいずれかの条項に違反した場合</li>\n                    <li>登録事項に虚偽の事実があることが判明した場合</li>\n                    <li>料金等の支払債務の不履行があった場合</li>\n                    <li>当社からの連絡に対し、一定期間返答がない場合</li>\n                    <li>本サービスについて、最終の利用から一定期間利用がない場合</li>\n                    <li>その他、当社が本サービスの利用を適当でないと判断した場合</li>\n                  </ul>\n                </li>\n                <li>当社は、本条に基づき当社が行った行為によりユーザーに生じた損害について、一切の責任を負いません。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第8条（保証の否認および免責事項）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、本サービスに事実上または法律上の瑕疵（安全性、信頼性、正確性、完全性、有効性、特定の目的への適合性、セキュリティなどに関する欠陥、エラーやバグ、権利侵害などを含みます）がないことを明示的にも黙示的にも保証しておりません。</li>\n                <li>当社は、本サービスに起因してユーザーに生じたあらゆる損害について一切の責任を負いません。ただし、本サービスに関する当社とユーザーとの間の契約が消費者契約法に定める消費者契約となる場合、この免責規定は適用されません。</li>\n                <li>前項ただし書に定める場合であっても、当社は、当社の過失（重過失を除きます）による債務不履行または不法行為によりユーザーに生じた損害のうち特別な事情から生じた損害（当社またはユーザーが損害発生につき予見し、または予見し得た場合を含みます）について一切の責任を負いません。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第9条（サービス内容の変更等）</h2>\n              <p className=\"text-slate-700\">\n                当社は、ユーザーに通知することなく、本サービスの内容を変更しまたは本サービスの提供を中止することができるものとし、これによってユーザーに生じた損害について一切の責任を負いません。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第10条（利用規約の変更）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>当社は、必要と判断した場合には、ユーザーに通知することなくいつでも本規約を変更することができるものとします。</li>\n                <li>変更後の本規約は、本サービス上に掲示された時点より効力を生じるものとします。</li>\n              </ol>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第11条（個人情報の取扱い）</h2>\n              <p className=\"text-slate-700\">\n                当社は、本サービスの利用によって取得する個人情報については、当社「プライバシーポリシー」に従い適切に取り扱うものとします。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第12条（通知または連絡）</h2>\n              <p className=\"text-slate-700\">\n                ユーザーと当社との間の通知または連絡は、当社の定める方法によって行うものとします。当社は、ユーザーから、当社が別途定める方式に従った変更届け出がない限り、現在登録されている連絡先が有効なものとみなして当該連絡先へ通知または連絡を行い、これらは、発信時にユーザーへ到達したものとみなします。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第13条（権利義務の譲渡の禁止）</h2>\n              <p className=\"text-slate-700\">\n                ユーザーは、当社の書面による事前の承諾なく、利用契約上の地位または本規約に基づく権利もしくは義務を第三者に譲渡し、または担保に供することはできません。\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-slate-900 mb-4\">第14条（準拠法・裁判管轄）</h2>\n              <ol className=\"list-decimal list-inside space-y-2 text-slate-700\">\n                <li>本規約の解釈にあたっては、日本法を準拠法とします。</li>\n                <li>本サービスに関して紛争が生じた場合には、当社の本店所在地を管轄する裁判所を専属的合意管轄とします。</li>\n              </ol>\n            </section>\n\n            <div className=\"mt-8 pt-6 border-t border-slate-200\">\n              <p className=\"text-sm text-slate-600\">以上</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n",
  "src/services/api.ts": "// Python API クライアント\nimport { DailyReport, SummaryData } from '../types';\n\nconst API_BASE_URL = import.meta.env.DEV ? 'http://localhost:8000/api' : '/api';\n\n// API クライアント基底クラス\nclass ApiClient {\n  private async request(endpoint: string, options: RequestInit = {}): Promise<any> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n        ...options,\n      });\n\n      if (!response.ok && response.status !== 404) {\n        // 404の場合はPython APIが利用できないのでフォールバックする\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      if (response.status === 404) {\n        // Python APIが利用できない場合はnullを返す\n        return null;\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.warn('API request failed, falling back to mock data:', error);\n      return null;\n    }\n  }\n\n  // ヘルスチェック\n  async healthCheck() {\n    return this.request('/health');\n  }\n\n  // 日次報告関連\n  async getReports(startDate?: string, endDate?: string) {\n    const params = new URLSearchParams();\n    if (startDate) params.append('start_date', startDate);\n    if (endDate) params.append('end_date', endDate);\n    \n    const query = params.toString();\n    return this.request(`/reports${query ? `?${query}` : ''}`);\n  }\n\n  async createReport(reportData: Omit<DailyReport, 'id' | 'createdAt'>) {\n    return this.request('/reports', {\n      method: 'POST',\n      body: JSON.stringify({\n        date: reportData.date,\n        store_name: reportData.storeName,\n        staff_name: reportData.staffName,\n        sales: reportData.sales,\n        purchase: reportData.purchase,\n        labor_cost: reportData.laborCost,\n        utilities: reportData.utilities,\n        promotion: reportData.promotion,\n        cleaning: reportData.cleaning,\n        misc: reportData.misc,\n        communication: reportData.communication,\n        others: reportData.others,\n        report_text: reportData.reportText,\n        line_user_id: reportData.lineUserId,\n      }),\n    });\n  }\n\n  // 集計データ\n  async getSummary(periodType: 'daily' | 'weekly' | 'monthly', startDate?: string, endDate?: string) {\n    const params = new URLSearchParams({ period_type: periodType });\n    if (startDate) params.append('start_date', startDate);\n    if (endDate) params.append('end_date', endDate);\n    \n    return this.request(`/summary?${params.toString()}`);\n  }\n}\n\n// エクスポート用インスタンス\nexport const apiClient = new ApiClient();\n\n// 従来のSupabase関数をAPIクライアント経由に変更\nexport const getDailyReports = (startDate?: string, endDate?: string) => {\n  return apiClient.getReports(startDate, endDate);\n};\n\nexport const createDailyReport = (reportData: Omit<DailyReport, 'id' | 'createdAt'>) => {\n  return apiClient.createReport(reportData);\n};\n\nexport const getSummaryData = (periodType: 'daily' | 'weekly' | 'monthly', startDate?: string, endDate?: string) => {\n  return apiClient.getSummary(periodType, startDate, endDate);\n};\n\nexport const getDashboardStats = async () => {\n  const today = new Date().toISOString().split('T')[0];\n  return apiClient.getSummary('daily', today, today);\n};\n\n// ヘルスチェック\nexport const checkApiHealth = () => {\n  return apiClient.healthCheck();\n};\n\n// Legacy functions for compatibility with useAuth hook\nexport const getUserProfile = async (userId: string) => {\n  // For now, return mock data to maintain compatibility\n  // This will be replaced when auth system is fully updated\n  return { data: null, error: { message: 'Function not implemented' } };\n};\n\nexport const createUserProfile = async (profile: any) => {\n  // For now, return mock data to maintain compatibility  \n  // This will be replaced when auth system is fully updated\n  return { data: null, error: { message: 'Function not implemented' } };\n};",
  "src/services/auditLog.ts": "import { supabase } from '@/lib/supabase'\nimport { getCurrentUserOrganizationId } from './organizationService'\n\nexport type AuditAction =\n  | 'user.created'\n  | 'user.updated'\n  | 'user.deleted'\n  | 'user.invited'\n  | 'user.role_changed'\n  | 'store.created'\n  | 'store.updated'\n  | 'store.deleted'\n  | 'report.created'\n  | 'report.updated'\n  | 'report.deleted'\n  | 'report.shared'\n  | 'organization.updated'\n  | 'organization.settings_changed'\n  | 'subscription.upgraded'\n  | 'subscription.downgraded'\n  | 'subscription.cancelled'\n  | 'auth.login'\n  | 'auth.logout'\n  | 'auth.failed_login'\n\nexport type ResourceType = 'user' | 'store' | 'report' | 'organization' | 'subscription' | 'auth'\n\nexport interface AuditLogEntry {\n  id: string\n  organization_id: string\n  user_id: string | null\n  action: AuditAction\n  resource_type: ResourceType\n  resource_id?: string\n  details: Record<string, any>\n  ip_address?: string\n  user_agent?: string\n  status: 'success' | 'failure'\n  error_message?: string\n  created_at: string\n}\n\nexport interface AuditLogFilters {\n  userId?: string\n  action?: AuditAction\n  resourceType?: ResourceType\n  resourceId?: string\n  status?: 'success' | 'failure'\n  startDate?: Date\n  endDate?: Date\n  limit?: number\n  offset?: number\n}\n\n/**\n * 監査ログを作成\n */\nexport async function createAuditLog(\n  userId: string,\n  action: AuditAction,\n  resourceType: ResourceType,\n  options?: {\n    resourceId?: string\n    details?: Record<string, any>\n    status?: 'success' | 'failure'\n    errorMessage?: string\n  }\n): Promise<{ success: boolean; error?: any }> {\n  try {\n    const organizationId = await getCurrentUserOrganizationId(userId)\n\n    if (!organizationId) {\n      console.error('Cannot create audit log: organization not found')\n      return { success: false, error: 'Organization not found' }\n    }\n\n    const { error } = await supabase.from('audit_logs').insert({\n      organization_id: organizationId,\n      user_id: userId,\n      action,\n      resource_type: resourceType,\n      resource_id: options?.resourceId,\n      details: options?.details || {},\n      status: options?.status || 'success',\n      error_message: options?.errorMessage\n    })\n\n    if (error) {\n      console.error('Failed to create audit log:', error)\n      return { success: false, error }\n    }\n\n    return { success: true }\n  } catch (error) {\n    console.error('Error creating audit log:', error)\n    return { success: false, error }\n  }\n}\n\n/**\n * 監査ログを取得（フィルタリング可能）\n */\nexport async function getAuditLogs(\n  organizationId: string,\n  filters?: AuditLogFilters\n): Promise<{ data: AuditLogEntry[] | null; error: any }> {\n  try {\n    let query = supabase\n      .from('audit_logs')\n      .select('*')\n      .eq('organization_id', organizationId)\n      .order('created_at', { ascending: false })\n\n    if (filters?.userId) {\n      query = query.eq('user_id', filters.userId)\n    }\n\n    if (filters?.action) {\n      query = query.eq('action', filters.action)\n    }\n\n    if (filters?.resourceType) {\n      query = query.eq('resource_type', filters.resourceType)\n    }\n\n    if (filters?.resourceId) {\n      query = query.eq('resource_id', filters.resourceId)\n    }\n\n    if (filters?.status) {\n      query = query.eq('status', filters.status)\n    }\n\n    if (filters?.startDate) {\n      query = query.gte('created_at', filters.startDate.toISOString())\n    }\n\n    if (filters?.endDate) {\n      query = query.lte('created_at', filters.endDate.toISOString())\n    }\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit)\n    }\n\n    if (filters?.offset) {\n      query = query.range(filters.offset, filters.offset + (filters.limit || 50) - 1)\n    }\n\n    const { data, error } = await query\n\n    return { data, error }\n  } catch (error) {\n    console.error('Error fetching audit logs:', error)\n    return { data: null, error }\n  }\n}\n\n/**\n * 特定リソースの監査ログを取得\n */\nexport async function getResourceAuditLogs(\n  organizationId: string,\n  resourceType: ResourceType,\n  resourceId: string\n): Promise<{ data: AuditLogEntry[] | null; error: any }> {\n  return getAuditLogs(organizationId, {\n    resourceType,\n    resourceId,\n    limit: 100\n  })\n}\n\n/**\n * ユーザーアクティビティを取得\n */\nexport async function getUserActivity(\n  organizationId: string,\n  userId: string,\n  limit: number = 50\n): Promise<{ data: AuditLogEntry[] | null; error: any }> {\n  return getAuditLogs(organizationId, {\n    userId,\n    limit\n  })\n}\n\n/**\n * 監査ログの統計を取得\n */\nexport async function getAuditLogStats(\n  organizationId: string,\n  startDate?: Date,\n  endDate?: Date\n): Promise<{\n  totalLogs: number\n  successCount: number\n  failureCount: number\n  actionCounts: Record<string, number>\n  userCounts: Record<string, number>\n}> {\n  const filters: AuditLogFilters = { startDate, endDate }\n  const { data: logs } = await getAuditLogs(organizationId, filters)\n\n  if (!logs) {\n    return {\n      totalLogs: 0,\n      successCount: 0,\n      failureCount: 0,\n      actionCounts: {},\n      userCounts: {}\n    }\n  }\n\n  const actionCounts: Record<string, number> = {}\n  const userCounts: Record<string, number> = {}\n  let successCount = 0\n  let failureCount = 0\n\n  logs.forEach((log) => {\n    if (log.status === 'success') successCount++\n    else failureCount++\n\n    actionCounts[log.action] = (actionCounts[log.action] || 0) + 1\n\n    if (log.user_id) {\n      userCounts[log.user_id] = (userCounts[log.user_id] || 0) + 1\n    }\n  })\n\n  return {\n    totalLogs: logs.length,\n    successCount,\n    failureCount,\n    actionCounts,\n    userCounts\n  }\n}\n\n/**\n * アクション名を日本語に変換\n */\nexport function getActionLabel(action: AuditAction): string {\n  const labels: Record<AuditAction, string> = {\n    'user.created': 'ユーザー作成',\n    'user.updated': 'ユーザー更新',\n    'user.deleted': 'ユーザー削除',\n    'user.invited': 'ユーザー招待',\n    'user.role_changed': '権限変更',\n    'store.created': '店舗作成',\n    'store.updated': '店舗更新',\n    'store.deleted': '店舗削除',\n    'report.created': 'レポート作成',\n    'report.updated': 'レポート更新',\n    'report.deleted': 'レポート削除',\n    'report.shared': 'レポート共有',\n    'organization.updated': '組織情報更新',\n    'organization.settings_changed': '組織設定変更',\n    'subscription.upgraded': 'プランアップグレード',\n    'subscription.downgraded': 'プランダウングレード',\n    'subscription.cancelled': 'サブスクリプション解約',\n    'auth.login': 'ログイン',\n    'auth.logout': 'ログアウト',\n    'auth.failed_login': 'ログイン失敗'\n  }\n\n  return labels[action] || action\n}\n\n/**\n * リソースタイプ名を日本語に変換\n */\nexport function getResourceTypeLabel(resourceType: ResourceType): string {\n  const labels: Record<ResourceType, string> = {\n    user: 'ユーザー',\n    store: '店舗',\n    report: 'レポート',\n    organization: '組織',\n    subscription: 'サブスクリプション',\n    auth: '認証'\n  }\n\n  return labels[resourceType] || resourceType\n}\n",
  "src/services/chatArchive.ts": "import { supabase, isSupabaseReady } from '../lib/supabase'\n\nexport type ChatRole = 'system' | 'user' | 'assistant'\n\nexport interface Conversation {\n  id: string\n  user_id: string\n  store_id?: string | null\n  title?: string | null\n  archived: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport interface Message {\n  id: string\n  conversation_id: string\n  role: ChatRole\n  content: string\n  tokens?: number | null\n  meta?: any\n  created_at: string\n}\n\nconst LS_CONV = 'ai_conversations'\nconst LS_MSG = 'ai_messages'\nconst useMock = () => !isSupabaseReady()\n\nconst readLS = <T>(k: string, def: T): T => {\n  try {\n    return JSON.parse(localStorage.getItem(k) || 'null') ?? def\n  } catch {\n    return def\n  }\n}\n\nconst writeLS = (k: string, v: any) => localStorage.setItem(k, JSON.stringify(v))\n\nexport async function createConversation(userId: string, storeId?: string, title?: string) {\n  if (useMock()) {\n    const now = new Date().toISOString()\n    const id = crypto.randomUUID()\n    const conv: Conversation = {\n      id,\n      user_id: userId,\n      store_id: storeId ?? 'all',\n      title: title ?? '新しいチャット',\n      archived: false,\n      created_at: now,\n      updated_at: now\n    }\n    const list = readLS<Conversation[]>(LS_CONV, [])\n    list.unshift(conv)\n    writeLS(LS_CONV, list)\n    return { data: conv, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('ai_conversations')\n    .insert({ user_id: userId, store_id: storeId ?? 'all', title })\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport async function listConversations({ archived = false }: { archived?: boolean } = {}) {\n  if (useMock()) {\n    const all = readLS<Conversation[]>(LS_CONV, [])\n    return {\n      data: all\n        .filter(c => c.archived === archived)\n        .sort((a, b) => b.updated_at.localeCompare(a.updated_at)),\n      error: null\n    }\n  }\n\n  const { data, error } = await supabase!\n    .from('ai_conversations')\n    .select('*')\n    .eq('archived', archived)\n    .order('updated_at', { ascending: false })\n\n  return { data, error }\n}\n\nexport async function updateConversation(\n  id: string,\n  patch: Partial<Pick<Conversation, 'title' | 'archived'>>\n) {\n  if (useMock()) {\n    const all = readLS<Conversation[]>(LS_CONV, [])\n    const idx = all.findIndex(c => c.id === id)\n    if (idx >= 0) {\n      all[idx] = { ...all[idx], ...patch, updated_at: new Date().toISOString() }\n      writeLS(LS_CONV, all)\n      return { data: all[idx], error: null }\n    }\n    return { data: null, error: { message: 'not found' } as any }\n  }\n\n  const { data, error } = await supabase!\n    .from('ai_conversations')\n    .update({ ...patch, updated_at: new Date().toISOString() })\n    .eq('id', id)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport async function fetchMessages(conversationId: string) {\n  if (useMock()) {\n    const all = readLS<Message[]>(LS_MSG, [])\n    return {\n      data: all\n        .filter(m => m.conversation_id === conversationId)\n        .sort((a, b) => a.created_at.localeCompare(b.created_at)),\n      error: null\n    }\n  }\n\n  const { data, error } = await supabase!\n    .from('ai_messages')\n    .select('*')\n    .eq('conversation_id', conversationId)\n    .order('created_at', { ascending: true })\n\n  return { data, error }\n}\n\nexport async function addMessage(\n  conversationId: string,\n  role: ChatRole,\n  content: string,\n  meta?: any\n) {\n  if (useMock()) {\n    const now = new Date().toISOString()\n    const msg: Message = {\n      id: crypto.randomUUID(),\n      conversation_id: conversationId,\n      role,\n      content,\n      meta,\n      created_at: now\n    }\n    const msgs = readLS<Message[]>(LS_MSG, [])\n    msgs.push(msg)\n    writeLS(LS_MSG, msgs)\n\n    const convs = readLS<Conversation[]>(LS_CONV, [])\n    const i = convs.findIndex(c => c.id === conversationId)\n    if (i >= 0) {\n      convs[i].updated_at = now\n      writeLS(LS_CONV, convs)\n    }\n    return { data: msg, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('ai_messages')\n    .insert({ conversation_id: conversationId, role, content, meta })\n    .select()\n    .single()\n\n  if (!error) {\n    await supabase!\n      .from('ai_conversations')\n      .update({ updated_at: new Date().toISOString() })\n      .eq('id', conversationId)\n  }\n\n  return { data, error }\n}\n\nexport async function searchConversations(q: string) {\n  if (useMock()) {\n    const msgs = readLS<Message[]>(LS_MSG, [])\n    const convs = readLS<Conversation[]>(LS_CONV, [])\n    const hits = msgs\n      .filter(m => m.content.toLowerCase().includes(q.toLowerCase()))\n      .map(m => ({\n        conversation_id: m.conversation_id,\n        snippet: m.content.slice(0, 160),\n        created_at: m.created_at\n      }))\n\n    return {\n      data: hits.map(h => ({\n        ...h,\n        title: convs.find(c => c.id === h.conversation_id)?.title ?? '（無題）'\n      })),\n      error: null\n    }\n  }\n\n  const { data, error } = await supabase!.rpc('ai_search_messages', { q })\n\n  if (error) {\n    return { data: [], error }\n  }\n\n  const convIds = [...new Set(data?.map((d: any) => d.conversation_id) ?? [])]\n  const { data: convs } = await supabase!\n    .from('ai_conversations')\n    .select('id, title')\n    .in('id', convIds)\n\n  const results = data?.map((d: any) => ({\n    ...d,\n    title: convs?.find((c: any) => c.id === d.conversation_id)?.title ?? '（無題）'\n  }))\n\n  return { data: results, error: null }\n}\n\nexport async function deleteConversation(id: string) {\n  if (useMock()) {\n    const all = readLS<Conversation[]>(LS_CONV, [])\n    const filtered = all.filter(c => c.id !== id)\n    writeLS(LS_CONV, filtered)\n\n    const msgs = readLS<Message[]>(LS_MSG, [])\n    const filteredMsgs = msgs.filter(m => m.conversation_id !== id)\n    writeLS(LS_MSG, filteredMsgs)\n\n    return { error: null }\n  }\n\n  const { error } = await supabase!\n    .from('ai_conversations')\n    .delete()\n    .eq('id', id)\n\n  return { error }\n}\n",
  "src/services/googleSheets.ts": "import { supabase } from '../lib/supabase';\n\ninterface GoogleSheetsResponse {\n  success: boolean;\n  message?: string;\n  error?: string;\n  updatedRange?: string;\n}\n\nexport const createGoogleSheetsTemplate = async (): Promise<{ success: boolean; message?: string; error?: string }> => {\n  try {\n    // ヘッダー行を作成するための関数\n    const headerRow = [\n      '日付', '店舗名', 'スタッフ名', '売上', '仕入', '人件費', \n      '光熱費', '販促費', '清掃費', '雑費', '通信費', 'その他', \n      '報告内容', '作成日時', '経費合計', '粗利益', '営業利益'\n    ];\n\n    const { data, error } = await supabase.functions.invoke('sync-to-sheets', {\n      body: { \n        reportData: {\n          date: headerRow[0],\n          store_name: headerRow[1],\n          staff_name: headerRow[2],\n          sales: headerRow[3],\n          purchase: headerRow[4],\n          labor_cost: headerRow[5],\n          utilities: headerRow[6],\n          promotion: headerRow[7],\n          cleaning: headerRow[8],\n          misc: headerRow[9],\n          communication: headerRow[10],\n          others: headerRow[11],\n          report_text: headerRow[12],\n          created_at: headerRow[13]\n        },\n        isTemplate: true \n      }\n    });\n\n    if (error) {\n      return {\n        success: false,\n        error: 'テンプレート作成でエラーが発生しました'\n      };\n    }\n\n    return {\n      success: true,\n      message: 'Google Sheetsテンプレートを作成しました'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: 'テンプレート作成サービスでエラーが発生しました'\n    };\n  }\n};\n\nexport const getGoogleSheetsUrl = (sheetId: string): string => {\n  return `https://docs.google.com/spreadsheets/d/${sheetId}/edit`;\n};\n\nexport const readFromSheets = async (): Promise<{ success: boolean; data?: any[]; error?: string }> => {\n  try {\n    const SHEET_ID = '1GWp6bW4WnSc9EFobaYNqhUz6wtMuL6gG74Tg2Osvtco';\n    const API_KEY = import.meta.env.VITE_GOOGLE_SHEETS_API_KEY;\n    \n    if (!API_KEY) {\n      return { success: false, error: 'APIキーが設定されていません' };\n    }\n\n    // API key format validation\n    if (!API_KEY.startsWith('AIza') || API_KEY.length < 35) {\n      return { \n        success: false, \n        error: 'APIキーの形式が正しくありません。Google Cloud ConsoleでAPIキーを確認してください。' \n      };\n    }\n\n    const range = 'daily_reports!A:O'; // A列からO列まで\n    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${range}?key=${API_KEY}`;\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n      \n      try {\n        const errorData = await response.json();\n        if (errorData.error) {\n          switch (response.status) {\n            case 400:\n              if (errorData.error.message.includes('API key')) {\n                errorMessage = 'APIキーが無効です。Google Cloud ConsoleでAPIキーを確認し、Google Sheets APIが有効になっていることを確認してください。';\n              } else if (errorData.error.message.includes('Unable to parse range')) {\n                errorMessage = 'シートの範囲指定が無効です。シート名「daily_reports」が存在することを確認してください。';\n              } else {\n                errorMessage = `API設定エラー: ${errorData.error.message}`;\n              }\n              break;\n            case 403:\n              errorMessage = 'APIキーにGoogle Sheets APIへのアクセス権限がありません。Google Cloud ConsoleでAPIキーの制限設定を確認してください。';\n              break;\n            case 404:\n              errorMessage = '指定されたGoogle Sheetsが見つかりません。シートIDが正しいか、シートが削除されていないか確認してください。';\n              break;\n            default:\n              errorMessage = errorData.error.message || errorMessage;\n          }\n        }\n      } catch (parseError) {\n        console.error('Error parsing API response:', parseError);\n      }\n      \n      return { success: false, error: errorMessage };\n    }\n    \n    const result = await response.json();\n    const rows = result.values || [];\n    \n    if (rows.length <= 1) {\n      return { success: true, data: [] };\n    }\n    \n    // Skip header row and convert to objects\n    const data = rows.slice(1).map((row: string[]) => ({\n      date: row[0],\n      storeName: row[1],\n      staffName: row[2],\n      sales: parseFloat(row[3]) || 0,\n      purchase: parseFloat(row[4]) || 0,\n      laborCost: parseFloat(row[5]) || 0,\n      utilities: parseFloat(row[6]) || 0,\n      promotion: parseFloat(row[7]) || 0,\n      cleaning: parseFloat(row[8]) || 0,\n      misc: parseFloat(row[9]) || 0,\n      communication: parseFloat(row[10]) || 0,\n      others: parseFloat(row[11]) || 0,\n      reportText: row[12] || '',\n      createdAt: row[13] || ''\n    }));\n    \n    return { success: true, data };\n  } catch (error) {\n    console.error('Read from sheets error:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'データ読み込みエラー'\n    };\n  }\n};\n",
  "src/services/organizationService.ts": "import { supabase } from '@/lib/supabase'\r\nimport { createAuditLog } from './auditLog'\r\n\r\n/**\r\n * 組織サービス\r\n * データ作成時に organization_id を自動的に設定するヘルパー関数\r\n */\r\n\r\n/**\r\n * 現在のユーザーの organization_id を取得\r\n */\r\nexport async function getCurrentUserOrganizationId(userId: string): Promise<string | null> {\r\n  if (!userId) return null\r\n\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('organization_members')\r\n      .select('organization_id')\r\n      .eq('user_id', userId)\r\n      .maybeSingle()\r\n\r\n    if (error) {\r\n      console.error('Failed to get organization ID:', error)\r\n      return null\r\n    }\r\n\r\n    return data?.organization_id || null\r\n  } catch (error) {\r\n    console.error('Error getting organization ID:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * プロファイルから organization_id を取得\r\n */\r\nexport async function getOrganizationIdFromProfile(userId: string): Promise<string | null> {\r\n  if (!userId) return null\r\n\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('organization_id')\r\n      .eq('id', userId)\r\n      .maybeSingle()\r\n\r\n    if (error) {\r\n      console.error('Failed to get organization ID from profile:', error)\r\n      return null\r\n    }\r\n\r\n    return data?.organization_id || null\r\n  } catch (error) {\r\n    console.error('Error getting organization ID from profile:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * データ作成時に organization_id を自動設定\r\n * RLSポリシーで自動的にフィルタリングされるため、SELECTには不要\r\n */\r\nexport async function withOrganizationId<T extends Record<string, any>>(\r\n  userId: string,\r\n  data: T\r\n): Promise<T & { organization_id: string }> {\r\n  const organizationId = await getCurrentUserOrganizationId(userId)\r\n\r\n  if (!organizationId) {\r\n    throw new Error('ユーザーが組織に所属していません')\r\n  }\r\n\r\n  return {\r\n    ...data,\r\n    organization_id: organizationId\r\n  }\r\n}\r\n\r\n/**\r\n * 複数のデータに organization_id を一括設定\r\n */\r\nexport async function withOrganizationIdBatch<T extends Record<string, any>>(\r\n  userId: string,\r\n  dataArray: T[]\r\n): Promise<Array<T & { organization_id: string }>> {\r\n  const organizationId = await getCurrentUserOrganizationId(userId)\r\n\r\n  if (!organizationId) {\r\n    throw new Error('ユーザーが組織に所属していません')\r\n  }\r\n\r\n  return dataArray.map(data => ({\r\n    ...data,\r\n    organization_id: organizationId\r\n  }))\r\n}\r\n\r\n/**\r\n * 組織情報を取得\r\n */\r\nexport async function getOrganization(organizationId: string) {\r\n  const { data, error } = await supabase\r\n    .from('organizations')\r\n    .select('*')\r\n    .eq('id', organizationId)\r\n    .single()\r\n\r\n  return { data, error }\r\n}\r\n\r\n/**\r\n * 組織を更新\r\n */\r\nexport async function updateOrganization(organizationId: string, updates: any, userId?: string) {\r\n  const { data, error } = await supabase\r\n    .from('organizations')\r\n    .update({\r\n      ...updates,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('id', organizationId)\r\n    .select()\r\n    .single()\r\n\r\n  if (!error && userId) {\r\n    await createAuditLog(userId, 'organization.updated', 'organization', {\r\n      resourceId: organizationId,\r\n      details: { updates }\r\n    })\r\n  }\r\n\r\n  return { data, error }\r\n}\r\n\r\n/**\r\n * 組織メンバー一覧を取得\r\n */\r\nexport async function getOrganizationMembers(organizationId: string) {\r\n  const { data, error } = await supabase\r\n    .from('organization_members')\r\n    .select(`\r\n      *,\r\n      profiles!inner(id, name, email, role)\r\n    `)\r\n    .eq('organization_id', organizationId)\r\n    .order('joined_at', { ascending: false })\r\n\r\n  return { data, error }\r\n}\r\n\r\n/**\r\n * 組織にメンバーを追加\r\n */\r\nexport async function addOrganizationMember(\r\n  organizationId: string,\r\n  userId: string,\r\n  role: 'owner' | 'admin' | 'member' = 'member'\r\n) {\r\n  const { data, error } = await supabase\r\n    .from('organization_members')\r\n    .insert({\r\n      organization_id: organizationId,\r\n      user_id: userId,\r\n      role,\r\n      joined_at: new Date().toISOString()\r\n    })\r\n    .select()\r\n    .single()\r\n\r\n  return { data, error }\r\n}\r\n\r\n/**\r\n * 組織メンバーを削除\r\n */\r\nexport async function removeOrganizationMember(organizationId: string, userId: string, actorUserId?: string) {\r\n  const { error } = await supabase\r\n    .from('organization_members')\r\n    .delete()\r\n    .eq('organization_id', organizationId)\r\n    .eq('user_id', userId)\r\n\r\n  if (!error && actorUserId) {\r\n    await createAuditLog(actorUserId, 'user.deleted', 'user', {\r\n      resourceId: userId,\r\n      details: { organizationId, removedUserId: userId }\r\n    })\r\n  }\r\n\r\n  return { error }\r\n}\r\n\r\n/**\r\n * 組織メンバーの役割を更新\r\n */\r\nexport async function updateOrganizationMemberRole(\r\n  organizationId: string,\r\n  userId: string,\r\n  role: 'owner' | 'admin' | 'member',\r\n  actorUserId?: string\r\n) {\r\n  const { data: oldRole } = await supabase\r\n    .from('organization_members')\r\n    .select('role')\r\n    .eq('organization_id', organizationId)\r\n    .eq('user_id', userId)\r\n    .single()\r\n\r\n  const { data, error } = await supabase\r\n    .from('organization_members')\r\n    .update({ role })\r\n    .eq('organization_id', organizationId)\r\n    .eq('user_id', userId)\r\n    .select()\r\n    .single()\r\n\r\n  if (!error && actorUserId) {\r\n    await createAuditLog(actorUserId, 'user.role_changed', 'user', {\r\n      resourceId: userId,\r\n      details: {\r\n        organizationId,\r\n        targetUserId: userId,\r\n        oldRole: oldRole?.role,\r\n        newRole: role\r\n      }\r\n    })\r\n  }\r\n\r\n  return { data, error }\r\n}\r\n\r\n/**\r\n * 招待トークンを生成\r\n */\r\nfunction generateInvitationToken(): string {\r\n  const array = new Uint8Array(32)\r\n  crypto.getRandomValues(array)\r\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\r\n}\r\n\r\n/**\r\n * 組織への招待を作成\r\n */\r\nexport async function createInvitation(\r\n  organizationId: string,\r\n  email: string,\r\n  role: 'member' | 'admin',\r\n  invitedBy: string\r\n) {\r\n  const token = generateInvitationToken()\r\n\r\n  const { data, error } = await supabase\r\n    .from('organization_invitations')\r\n    .insert({\r\n      organization_id: organizationId,\r\n      email: email.toLowerCase(),\r\n      role,\r\n      token,\r\n      invited_by: invitedBy,\r\n      status: 'pending',\r\n      expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()\r\n    })\r\n    .select()\r\n    .single()\r\n\r\n  if (!error && data) {\r\n    await createAuditLog(invitedBy, 'user.invited', 'user', {\r\n      resourceId: data.id,\r\n      details: { email, role, organizationId }\r\n    })\r\n  }\r\n\r\n  return { data, error }\r\n}\r\n\r\n/**\r\n * 組織の招待一覧を取得\r\n */\r\nexport async function getOrganizationInvitations(organizationId: string) {\r\n  const { data, error } = await supabase\r\n    .from('organization_invitations')\r\n    .select('*')\r\n    .eq('organization_id', organizationId)\r\n    .order('created_at', { ascending: false })\r\n\r\n  return { data, error }\r\n}\r\n\r\n/**\r\n * トークンから招待情報を取得\r\n */\r\nexport async function getInvitationByToken(token: string) {\r\n  const { data, error } = await supabase\r\n    .from('organization_invitations')\r\n    .select(`\r\n      *,\r\n      organization:organizations(id, name, slug)\r\n    `)\r\n    .eq('token', token)\r\n    .eq('status', 'pending')\r\n    .maybeSingle()\r\n\r\n  return { data, error }\r\n}\r\n\r\n/**\r\n * 招待を承認してメンバーに追加\r\n */\r\nexport async function acceptInvitation(token: string, userId: string) {\r\n  const { data: invitation, error: inviteError } = await getInvitationByToken(token)\r\n\r\n  if (inviteError || !invitation) {\r\n    return { data: null, error: inviteError || { message: '招待が見つかりません' } }\r\n  }\r\n\r\n  if (new Date(invitation.expires_at) < new Date()) {\r\n    return { data: null, error: { message: '招待の有効期限が切れています' } }\r\n  }\r\n\r\n  const { data: existingMember } = await supabase\r\n    .from('organization_members')\r\n    .select('id')\r\n    .eq('organization_id', invitation.organization_id)\r\n    .eq('user_id', userId)\r\n    .maybeSingle()\r\n\r\n  if (existingMember) {\r\n    return { data: null, error: { message: '既にこの組織のメンバーです' } }\r\n  }\r\n\r\n  const { data: member, error: memberError } = await supabase\r\n    .from('organization_members')\r\n    .insert({\r\n      organization_id: invitation.organization_id,\r\n      user_id: userId,\r\n      role: invitation.role,\r\n      joined_at: new Date().toISOString()\r\n    })\r\n    .select()\r\n    .single()\r\n\r\n  if (memberError) {\r\n    return { data: null, error: memberError }\r\n  }\r\n\r\n  const { error: updateError } = await supabase\r\n    .from('organization_invitations')\r\n    .update({\r\n      status: 'accepted',\r\n      accepted_at: new Date().toISOString()\r\n    })\r\n    .eq('id', invitation.id)\r\n\r\n  if (updateError) {\r\n    console.error('Failed to update invitation status:', updateError)\r\n  }\r\n\r\n  await supabase\r\n    .from('profiles')\r\n    .update({ organization_id: invitation.organization_id })\r\n    .eq('id', userId)\r\n\r\n  return { data: member, error: null }\r\n}\r\n\r\n/**\r\n * 招待をキャンセル\r\n */\r\nexport async function cancelInvitation(invitationId: string) {\r\n  const { error } = await supabase\r\n    .from('organization_invitations')\r\n    .update({ status: 'cancelled' })\r\n    .eq('id', invitationId)\r\n\r\n  return { error }\r\n}\r\n\r\n/**\r\n * 招待を削除\r\n */\r\nexport async function deleteInvitation(invitationId: string) {\r\n  const { error } = await supabase\r\n    .from('organization_invitations')\r\n    .delete()\r\n    .eq('id', invitationId)\r\n\r\n  return { error }\r\n}\r\n\r\n/**\r\n * 招待リンクを生成\r\n */\r\nexport function generateInvitationLink(token: string): string {\r\n  const baseUrl = window.location.origin\r\n  return `${baseUrl}/invite/${token}`\r\n}\r\n",
  "src/services/sampleData.ts": "import {\n  createStore,\n  createVendor,\n  assignVendorToStore,\n  upsertTarget\n} from './supabase'\n\nexport interface SampleDataResult {\n  success: boolean\n  message: string\n  stores?: { id: string; name: string }[]\n  vendors?: { id: string; name: string }[]\n}\n\n/**\n * サンプルデータを投入する（初期セットアップ用）\n */\nexport const insertSampleData = async (): Promise<SampleDataResult> => {\n  try {\n    const stores: { id: string; name: string }[] = []\n    const vendors: { id: string; name: string }[] = []\n\n    // 1. 店舗を作成\n    const storeData = [\n      { name: '豊洲店', address: '東京都江東区豊洲4-1-1' },\n      { name: '有明店', address: '東京都江東区有明4-3-2' },\n      { name: '本店', address: '東京都江東区古石場2-14-1' }\n    ]\n\n    for (const store of storeData) {\n      const { data, error } = await createStore(store)\n      if (error) {\n        console.error('店舗作成エラー:', error)\n        continue\n      }\n      if (data) {\n        stores.push({ id: data.id, name: data.name })\n      }\n    }\n\n    if (stores.length === 0) {\n      return {\n        success: false,\n        message: '店舗の作成に失敗しました。管理者権限でログインしていることを確認してください。'\n      }\n    }\n\n    // 2. 業者を作成\n    const vendorData = [\n      { name: '豊洲市場青果卸', category: 'vegetable_meat' as const, contact_info: '03-1234-5678', is_active: true },\n      { name: '築地海産物', category: 'seafood' as const, contact_info: '03-2345-6789', is_active: true },\n      { name: '酒類販売フジワラ', category: 'alcohol' as const, contact_info: '03-3456-7890', is_active: true },\n      { name: '米問屋田中', category: 'rice' as const, contact_info: '03-4567-8901', is_active: true },\n      { name: '調味料専門店', category: 'seasoning' as const, contact_info: '03-5678-9012', is_active: true },\n      { name: '冷凍食品マルヨシ', category: 'frozen' as const, contact_info: '03-6789-0123', is_active: true }\n    ]\n\n    for (const vendor of vendorData) {\n      const { data, error } = await createVendor(vendor)\n      if (error) {\n        console.error('業者作成エラー:', error)\n        continue\n      }\n      if (data) {\n        vendors.push({ id: data.id, name: data.name })\n      }\n    }\n\n    // 3. 各店舗に全業者を割り当て\n    for (const store of stores) {\n      for (let i = 0; i < vendors.length; i++) {\n        const vendor = vendors[i]\n        await assignVendorToStore(store.id, vendor.id, i)\n      }\n    }\n\n    // 4. 各店舗に目標値を設定（当月）\n    const currentMonth = new Date().toISOString().slice(0, 7) // YYYY-MM\n    const targetData = [\n      { store_id: stores[0].id, period: currentMonth, target_sales: 5000000, target_profit: 1000000, target_profit_margin: 20.0 },\n      { store_id: stores[1].id, period: currentMonth, target_sales: 4500000, target_profit: 900000, target_profit_margin: 20.0 },\n      { store_id: stores[2].id, period: currentMonth, target_sales: 6000000, target_profit: 1200000, target_profit_margin: 20.0 }\n    ]\n\n    for (const target of targetData) {\n      if (target.store_id) {\n        await upsertTarget(target)\n      }\n    }\n\n    return {\n      success: true,\n      message: `サンプルデータの投入が完了しました。\\n店舗: ${stores.length}件、業者: ${vendors.length}件`,\n      stores,\n      vendors\n    }\n  } catch (error) {\n    console.error('サンプルデータ投入エラー:', error)\n    return {\n      success: false,\n      message: 'サンプルデータの投入中にエラーが発生しました。'\n    }\n  }\n}\n",
  "src/services/supabase.ts": "import { supabase, isSupabaseReady as isSupabaseConfigured } from '../lib/supabase'\n\n// Re-export for convenience\nexport { isSupabaseConfigured as isSupabaseReady }\nimport { DailyReportData } from '@/types'\nimport { isUUID } from '../lib/utils'\nimport { getCurrentUserOrganizationId, withOrganizationId } from './organizationService'\n\n// Types based on database schema\nexport interface ProfileDb {\n  id: string\n  name: string\n  email: string\n  role: 'staff' | 'manager' | 'admin'\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface StoreDb {\n  id: string\n  name: string\n  address: string\n  manager_id?: string\n  is_active?: boolean\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface DailyReportDb {\n  id: string\n  date: string\n  store_id: string\n  user_id: string\n  sales: number\n  purchase: number\n  labor_cost: number\n  utilities: number\n  rent: number\n  consumables: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  customers?: number\n  report_text?: string\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface VendorDb {\n  id: string\n  name: string\n  category: 'vegetable_meat' | 'seafood' | 'alcohol' | 'rice' | 'seasoning' | 'frozen' | 'dessert' | 'others'\n  contact_info?: string\n  is_active: boolean\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface StoreVendorAssignmentDb {\n  id: string\n  store_id: string\n  vendor_id: string\n  display_order: number\n  created_at?: string\n}\n\nexport interface MonthlyExpenseDb {\n  id: string\n  store_id: string\n  user_id: string\n  month: string // YYYY-MM\n  labor_cost_employee: number\n  labor_cost_part_time: number\n  utilities: number\n  rent: number\n  consumables: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  memo?: string\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface TargetDb {\n  id: string\n  store_id: string\n  period: string // YYYY-MM\n  target_sales: number\n  target_profit: number\n  target_profit_margin: number\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface ExpenseBaselineDb {\n  id: string\n  store_id: string\n  month: string // YYYY-MM\n  labor_cost_employee: number\n  labor_cost_part_time: number\n  utilities: number\n  rent: number\n  consumables: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  open_days: number\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface DailyTargetDb {\n  id: string\n  store_id: string\n  date: string // YYYY-MM-DD\n  target_sales: number\n  created_at?: string\n  updated_at?: string\n}\n\n// Authentication\nexport const signInWithEmailPassword = async (email: string, password: string) => {\n  if (!isSupabaseConfigured()) {\n    return { data: null, error: { message: 'Supabaseが設定されていません。環境変数を確認してください。' } }\n  }\n  const { data, error } = await supabase!.auth.signInWithPassword({\n    email,\n    password\n  })\n  return { data, error }\n}\n\nexport const signUpWithEmailPassword = async (email: string, password: string, name: string, role: 'staff' | 'manager' | 'admin' = 'staff') => {\n  if (!isSupabaseConfigured()) {\n    return { data: null, error: { message: 'Supabaseが設定されていません。環境変数を確認してください。' } }\n  }\n  const { data, error } = await supabase!.auth.signUp({\n    email,\n    password,\n    options: {\n      data: {\n        name,\n        role\n      }\n    }\n  })\n\n  if (error) {\n    if (error.message.includes('User already registered') || error.message.includes('user_already_exists')) {\n      return { data: null, error: { message: 'このメールアドレスは既に登録されています。ログインしてください。' } }\n    }\n    return { data: null, error }\n  }\n\n  if (data.user && !error) {\n    const { error: profileError } = await supabase!\n      .from('profiles')\n      .insert({\n        id: data.user.id,\n        name,\n        email,\n        role\n      })\n\n    if (profileError) {\n      if (profileError.message.includes('row-level security policy') || profileError.code === '42501') {\n        return { data: null, error: { message: 'プロフィール作成権限がありません。データベースの設定を確認してください。' } }\n      }\n      return { data, error: profileError }\n    }\n\n    return { data, error: null }\n  }\n\n  return { data, error }\n}\n\nexport const signOut = async () => {\n  if (!isSupabaseConfigured()) {\n    return { error: null }\n  }\n  const { error } = await supabase!.auth.signOut()\n  return { error }\n}\n\nexport const getCurrentUser = async () => {\n  if (!isSupabaseConfigured()) {\n    return { user: null, error: null }\n  }\n  const { data: { user }, error } = await supabase!.auth.getUser()\n  return { user, error }\n}\n\n// Profiles\nexport const getUserProfile = async (userId: string) => {\n  if (!isSupabaseConfigured()) {\n    return { data: null, error: null }\n  }\n  const { data, error } = await supabase!\n    .from('profiles')\n    .select('*')\n    .eq('id', userId)\n\n  if (error) {\n    return { data: null, error }\n  }\n\n  const profile = Array.isArray(data) && data.length > 0 ? data[0] : null\n  return { data: profile, error: null }\n}\n\nexport const updateUserProfile = async (userId: string, updates: Partial<ProfileDb>) => {\n  const { data, error } = await supabase!\n    .from('profiles')\n    .update({ ...updates, updated_at: new Date().toISOString() })\n    .eq('id', userId)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\n// Mock data storage keys\nconst MOCK_STORES_KEY = 'mock_stores'\nconst MOCK_VENDORS_KEY = 'mock_vendors'\nconst MOCK_STORE_VENDOR_ASSIGNMENTS_KEY = 'mock_store_vendor_assignments'\nconst MOCK_TARGETS_KEY = 'mock_targets'\nconst MOCK_DAILY_TARGETS_KEY = 'mock_daily_targets'\n\nconst readMockStores = () => {\n  try {\n    return JSON.parse(localStorage.getItem(MOCK_STORES_KEY) || '[]')\n  } catch {\n    return []\n  }\n}\n\nconst writeMockStores = (stores: any[]) => {\n  localStorage.setItem(MOCK_STORES_KEY, JSON.stringify(stores))\n}\n\nconst readMockVendors = () => {\n  try {\n    return JSON.parse(localStorage.getItem(MOCK_VENDORS_KEY) || '[]')\n  } catch {\n    return []\n  }\n}\n\nconst writeMockVendors = (vendors: any[]) => {\n  localStorage.setItem(MOCK_VENDORS_KEY, JSON.stringify(vendors))\n}\n\nconst readMockStoreVendorAssignments = () => {\n  try {\n    return JSON.parse(localStorage.getItem(MOCK_STORE_VENDOR_ASSIGNMENTS_KEY) || '[]')\n  } catch {\n    return []\n  }\n}\n\nconst writeMockStoreVendorAssignments = (assignments: any[]) => {\n  localStorage.setItem(MOCK_STORE_VENDOR_ASSIGNMENTS_KEY, JSON.stringify(assignments))\n}\n\nconst readMockTargets = (): TargetDb[] => {\n  try {\n    return JSON.parse(localStorage.getItem(MOCK_TARGETS_KEY) || '[]')\n  } catch {\n    return []\n  }\n}\n\nconst writeMockTargets = (targets: TargetDb[]) => {\n  localStorage.setItem(MOCK_TARGETS_KEY, JSON.stringify(targets))\n}\n\nconst MOCK_EXPENSE_BASELINES_KEY = 'mock_expense_baselines'\n\nconst readMockExpenseBaselines = (): ExpenseBaselineDb[] => {\n  try {\n    return JSON.parse(localStorage.getItem(MOCK_EXPENSE_BASELINES_KEY) || '[]')\n  } catch {\n    return []\n  }\n}\n\nconst writeMockExpenseBaselines = (baselines: ExpenseBaselineDb[]) => {\n  localStorage.setItem(MOCK_EXPENSE_BASELINES_KEY, JSON.stringify(baselines))\n}\n\nconst readMockDailyTargets = (): DailyTargetDb[] => {\n  try {\n    return JSON.parse(localStorage.getItem(MOCK_DAILY_TARGETS_KEY) || '[]')\n  } catch {\n    return []\n  }\n}\n\nconst writeMockDailyTargets = (targets: DailyTargetDb[]) => {\n  localStorage.setItem(MOCK_DAILY_TARGETS_KEY, JSON.stringify(targets))\n}\n\nconst genId = () => {\n  if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n    return crypto.randomUUID()\n  }\n  return `mock-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n}\n\n// Stores\nexport const getStores = async () => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 getStores: Supabase未設定、モックデータから読み込み')\n    const stores = readMockStores()\n    return { data: stores.filter((s: any) => s.is_active !== false), error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('stores')\n    .select('*')\n    .eq('is_active', true)\n    .order('name')\n\n  return { data, error }\n}\n\nexport const getUserStores = async (userId: string) => {\n  if (!isSupabaseConfigured()) {\n    return { data: [], error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('store_assignments')\n    .select(`\n      store_id,\n      stores!inner(*)\n    `)\n    .eq('user_id', userId)\n    .eq('stores.is_active', true)\n\n  const stores = data?.map(assignment => assignment.stores).filter(Boolean) || []\n  return { data: stores, error }\n}\n\nexport const createStore = async (storeData: {\n  name: string\n  address: string\n  manager_id?: string\n  is_active?: boolean\n  user_id?: string\n}) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 createStore: Supabase未設定、モックデータとして保存')\n    const stores = readMockStores()\n    const newStore = {\n      id: genId(),\n      name: storeData.name,\n      address: storeData.address,\n      manager_id: storeData.manager_id ?? null,\n      is_active: storeData.is_active ?? true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    }\n    writeMockStores([...stores, newStore])\n    return { data: newStore, error: null }\n  }\n\n  try {\n    let insertData: any = {\n      ...storeData,\n      is_active: storeData.is_active ?? true\n    }\n\n    if (storeData.user_id) {\n      const organizationId = await getCurrentUserOrganizationId(storeData.user_id)\n      if (organizationId) {\n        insertData.organization_id = organizationId\n      }\n    }\n\n    const { data, error } = await supabase!\n      .from('stores')\n      .insert(insertData)\n      .select()\n      .single()\n\n    if (error) {\n      if (error.message?.includes('row-level security') || error.code === '42501') {\n        return {\n          data: null,\n          error: {\n            message: 'この操作には「管理者（admin）」権限が必要です。'\n          }\n        }\n      }\n      return { data: null, error }\n    }\n\n    return { data, error: null }\n  } catch (error: any) {\n    return { data: null, error: { message: error.message || '店舗の作成に失敗しました' } }\n  }\n}\n\nexport const updateStore = async (storeId: string, updates: Partial<StoreDb>) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 updateStore: Supabase未設定、モックデータを更新')\n    const stores = readMockStores()\n    const updatedStores = stores.map((s: any) =>\n      s.id === storeId\n        ? { ...s, ...updates, updated_at: new Date().toISOString() }\n        : s\n    )\n    writeMockStores(updatedStores)\n    const updatedStore = updatedStores.find((s: any) => s.id === storeId)\n    return { data: updatedStore, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('stores')\n    .update({ ...updates, updated_at: new Date().toISOString() })\n    .eq('id', storeId)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const deleteStore = async (storeId: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 deleteStore: Supabase未設定、モックデータを削除')\n    const stores = readMockStores()\n    const updatedStores = stores.map((s: any) =>\n      s.id === storeId\n        ? { ...s, is_active: false, updated_at: new Date().toISOString() }\n        : s\n    )\n    writeMockStores(updatedStores)\n    const deletedStore = updatedStores.find((s: any) => s.id === storeId)\n    return { data: deletedStore, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('stores')\n    .update({ is_active: false, updated_at: new Date().toISOString() })\n    .eq('id', storeId)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\n// Store assignments\nexport const assignUserToStore = async (userId: string, storeId: string) => {\n  const { data, error } = await supabase!\n    .from('store_assignments')\n    .insert({\n      user_id: userId,\n      store_id: storeId\n    })\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const removeUserFromStore = async (userId: string, storeId: string) => {\n  const { error } = await supabase!\n    .from('store_assignments')\n    .delete()\n    .eq('user_id', userId)\n    .eq('store_id', storeId)\n\n  return { error }\n}\n\n// Daily Reports\nexport const getDailyReports = async (filters: {\n  storeId?: string\n  dateFrom?: string\n  dateTo?: string\n  userId?: string\n} = {}) => {\n  // ✨ 未設定ならローカルストレージから取得\n  if (!isSupabaseConfigured()) {\n    const local: any[] = JSON.parse(localStorage.getItem('userReports') || '[]')\n    // 簡易フィルタ\n    const filtered = local.filter(r => {\n      if (filters.storeId && filters.storeId !== 'all' && r.storeId !== filters.storeId) return false\n      if (filters.dateFrom && r.date < filters.dateFrom) return false\n      if (filters.dateTo && r.date > filters.dateTo) return false\n      return true\n    })\n    return { data: filtered, error: null }\n  }\n\n  if (filters.storeId && filters.storeId !== 'all' && !isUUID(filters.storeId)) {\n    console.warn('Invalid store UUID provided:', filters.storeId)\n    return { data: [], error: null }\n  }\n\n  let query = supabase!\n    .from('daily_reports')\n    .select(`\n      *,\n      stores!inner(name),\n      profiles!inner(name)\n    `)\n    .order('date', { ascending: false })\n\n  if (filters.storeId && filters.storeId !== 'all') {\n    query = query.eq('store_id', filters.storeId)\n  }\n\n  if (filters.dateFrom) {\n    query = query.gte('date', filters.dateFrom)\n  }\n\n  if (filters.dateTo) {\n    query = query.lte('date', filters.dateTo)\n  }\n\n  if (filters.userId && isUUID(filters.userId)) {\n    query = query.eq('user_id', filters.userId)\n  }\n\n  const { data, error } = await query\n\n  const transformedData = data?.map(report => ({\n    id: report.id,\n    date: report.date,\n    storeId: report.store_id,\n    storeName: report.stores.name,\n    staffName: report.profiles.name,\n    sales: report.sales,\n    purchase: report.purchase,\n    laborCost: report.labor_cost,\n    utilities: report.utilities,\n    rent: report.rent || 0,\n    consumables: report.consumables || 0,\n    promotion: report.promotion,\n    cleaning: report.cleaning,\n    misc: report.misc,\n    communication: report.communication,\n    others: report.others,\n    reportText: report.report_text || '',\n    customers: report.customers || 0,\n    vendorPurchases: {},  // 別途daily_report_vendor_purchasesテーブルから取得\n    createdAt: report.created_at || ''\n  }))\n\n  return { data: transformedData, error }\n}\n\nexport const createDailyReport = async (reportData: Omit<DailyReportData, 'id' | 'createdAt'> & { userId: string; vendorPurchases?: Record<string, number> }) => {\n  // ✨ 未設定ならローカル保存\n  if (!isSupabaseConfigured()) {\n    const key = 'userReports'\n    const list = JSON.parse(localStorage.getItem(key) || '[]')\n    const rec = {\n      ...reportData,\n      id: crypto.randomUUID(),\n      createdAt: new Date().toISOString(),\n    }\n    localStorage.setItem(key, JSON.stringify([rec, ...list]))\n    console.log('📦 ローカルストレージに保存:', rec)\n    return { data: rec, error: null }\n  }\n\n  try {\n    const organizationId = await getCurrentUserOrganizationId(reportData.userId)\n\n    // 日報本体を保存\n    const insertData: any = {\n      date: reportData.date,\n      store_id: reportData.storeId,\n      user_id: reportData.userId,\n      sales: reportData.sales,\n      purchase: reportData.purchase,\n      labor_cost: reportData.laborCost,\n      utilities: reportData.utilities,\n      promotion: reportData.promotion,\n      cleaning: reportData.cleaning,\n      misc: reportData.misc,\n      communication: reportData.communication,\n      others: reportData.others,\n      customers: reportData.customers,\n      report_text: reportData.reportText\n    }\n\n    if (organizationId) {\n      insertData.organization_id = organizationId\n    }\n\n    const { data, error } = await supabase!\n      .from('daily_reports')\n      .insert(insertData)\n      .select()\n      .single()\n\n    if (error || !data) {\n      return { data, error }\n    }\n\n    // 業者別仕入データを保存\n    if (reportData.vendorPurchases && Object.keys(reportData.vendorPurchases).length > 0) {\n      const vendorPurchaseRecords = Object.entries(reportData.vendorPurchases)\n        .filter(([_, amount]) => amount > 0)\n        .map(([vendorId, amount]) => ({\n          daily_report_id: data.id,\n          vendor_id: vendorId,\n          amount: amount,\n          organization_id: organizationId\n        }))\n\n      if (vendorPurchaseRecords.length > 0) {\n        const { error: vendorError } = await supabase!\n          .from('daily_report_vendor_purchases')\n          .insert(vendorPurchaseRecords)\n\n        if (vendorError) {\n          console.error('業者別仕入データの保存に失敗:', vendorError)\n        }\n      }\n    }\n\n    return { data, error: null }\n  } catch (error: any) {\n    return { data: null, error: { message: error.message || '日報の作成に失敗しました' } }\n  }\n}\n\nexport const updateDailyReport = async (reportId: string, updates: Partial<DailyReportDb>) => {\n  // ✨ ローカルストレージIDの場合\n  if (reportId.startsWith('local-') || !isSupabaseConfigured()) {\n    const key = 'userReports'\n    const list: any[] = JSON.parse(localStorage.getItem(key) || '[]')\n    const index = list.findIndex(r => r.id === reportId)\n\n    if (index === -1) {\n      return { data: null, error: { message: '日報が見つかりません' } }\n    }\n\n    // 更新\n    const updated = {\n      ...list[index],\n      ...updates,\n      updated_at: new Date().toISOString()\n    }\n    list[index] = updated\n    localStorage.setItem(key, JSON.stringify(list))\n    console.log('📦 ローカルストレージで更新:', updated)\n    return { data: updated, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('daily_reports')\n    .update({ ...updates, updated_at: new Date().toISOString() })\n    .eq('id', reportId)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const deleteDailyReport = async (reportId: string) => {\n  // ✨ ローカルストレージIDの場合\n  if (reportId.startsWith('local-') || !isSupabaseConfigured()) {\n    const key = 'userReports'\n    const list: any[] = JSON.parse(localStorage.getItem(key) || '[]')\n    const filtered = list.filter(r => r.id !== reportId)\n    localStorage.setItem(key, JSON.stringify(filtered))\n    console.log('📦 ローカルストレージから削除:', reportId)\n    return { error: null }\n  }\n\n  const { error } = await supabase!\n    .from('daily_reports')\n    .delete()\n    .eq('id', reportId)\n\n  return { error }\n}\n\n// Vendors\nexport const getVendors = async () => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 getVendors: Supabase未設定、モックデータから読み込み')\n    const vendors = readMockVendors()\n    return { data: vendors.filter((v: any) => v.is_active !== false), error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('vendors')\n    .select('*')\n    .eq('is_active', true)\n    .order('name')\n\n  return { data, error }\n}\n\nexport const createVendor = async (vendorData: Omit<VendorDb, 'id' | 'created_at' | 'updated_at'> & { user_id?: string }) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 createVendor: Supabase未設定、モックデータとして保存')\n    const vendors = readMockVendors()\n    const newVendor = {\n      id: genId(),\n      ...vendorData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    }\n    writeMockVendors([...vendors, newVendor])\n    return { data: newVendor, error: null }\n  }\n\n  try {\n    let insertData: any = { ...vendorData }\n\n    if (vendorData.user_id) {\n      console.log('🔍 createVendor: user_idを使用して組織IDを取得:', vendorData.user_id)\n      const organizationId = await getCurrentUserOrganizationId(vendorData.user_id)\n      console.log('🔍 createVendor: 取得した組織ID:', organizationId)\n\n      if (!organizationId) {\n        console.error('❌ createVendor: 組織IDが取得できませんでした')\n        return {\n          data: null,\n          error: {\n            message: 'ユーザーの組織が見つかりません。組織に所属していることを確認してください。'\n          }\n        }\n      }\n\n      insertData.organization_id = organizationId\n      delete insertData.user_id\n    } else {\n      console.warn('⚠️ createVendor: user_idが渡されていません。organization_idが設定されない可能性があります')\n    }\n\n    console.log('🔍 createVendor: 挿入するデータ:', insertData)\n\n    const { data, error } = await supabase!\n      .from('vendors')\n      .insert(insertData)\n      .select()\n      .single()\n\n    if (error) {\n      console.error('❌ createVendor: Supabaseエラー:', error)\n      if (error.message?.includes('row-level security') || error.code === '42501') {\n        return {\n          data: null,\n          error: {\n            message: 'この操作には「管理者（admin）」権限が必要です。RLSポリシーで拒否されました。'\n          }\n        }\n      }\n      return { data: null, error }\n    }\n\n    console.log('✅ createVendor: 業者作成成功:', data)\n    return { data, error: null }\n  } catch (error: any) {\n    console.error('❌ createVendor: 予期しないエラー:', error)\n    return { data: null, error: { message: error.message || '仕入先の作成に失敗しました' } }\n  }\n}\n\nexport const updateVendor = async (vendorId: string, updates: Partial<VendorDb>) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 updateVendor: Supabase未設定、モックデータを更新')\n    const vendors = readMockVendors()\n    const updatedVendors = vendors.map((v: any) =>\n      v.id === vendorId\n        ? { ...v, ...updates, updated_at: new Date().toISOString() }\n        : v\n    )\n    writeMockVendors(updatedVendors)\n    const updatedVendor = updatedVendors.find((v: any) => v.id === vendorId)\n    return { data: updatedVendor, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('vendors')\n    .update({ ...updates, updated_at: new Date().toISOString() })\n    .eq('id', vendorId)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const deleteVendor = async (vendorId: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 deleteVendor: Supabase未設定、モックデータを削除')\n    const vendors = readMockVendors()\n    const updatedVendors = vendors.map((v: any) =>\n      v.id === vendorId\n        ? { ...v, is_active: false, updated_at: new Date().toISOString() }\n        : v\n    )\n    writeMockVendors(updatedVendors)\n    const deletedVendor = updatedVendors.find((v: any) => v.id === vendorId)\n    return { data: deletedVendor, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('vendors')\n    .update({ is_active: false, updated_at: new Date().toISOString() })\n    .eq('id', vendorId)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\n// Store Vendor Assignments\nexport const getAllStoreVendorAssignments = async () => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 getAllStoreVendorAssignments: Supabase未設定、モックデータから読み込み')\n    const assignments = readMockStoreVendorAssignments()\n    return { data: assignments, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('store_vendor_assignments')\n    .select('*')\n    .order('display_order')\n\n  return { data, error }\n}\n\nexport const getStoreVendors = async (storeId: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 getStoreVendors: Supabase未設定、モックデータから読み込み')\n    const assignments = readMockStoreVendorAssignments()\n    const vendors = readMockVendors()\n\n    const storeAssignments = assignments\n      .filter((a: any) => a.store_id === storeId)\n      .sort((a: any, b: any) => (a.display_order || 0) - (b.display_order || 0))\n\n    const storeVendors = storeAssignments\n      .map((a: any) => vendors.find((v: any) => v.id === a.vendor_id && v.is_active !== false))\n      .filter(Boolean)\n\n    return { data: storeVendors, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('store_vendor_assignments')\n    .select(`\n      display_order,\n      vendors!inner(*)\n    `)\n    .eq('store_id', storeId)\n    .eq('vendors.is_active', true)\n    .order('display_order')\n\n  const vendors = data?.map(assignment => assignment.vendors).filter(Boolean) || []\n  return { data: vendors, error }\n}\n\nexport const assignVendorToStore = async (storeId: string, vendorId: string, displayOrder?: number) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 assignVendorToStore: Supabase未設定、モックデータとして保存')\n    const assignments = readMockStoreVendorAssignments()\n\n    // 既に割り当て済みかチェック\n    const exists = assignments.find((a: any) =>\n      a.store_id === storeId && a.vendor_id === vendorId\n    )\n\n    if (exists) {\n      console.log('⚠️ assignVendorToStore: 既に割り当て済み')\n      return { data: exists, error: null }\n    }\n\n    const newAssignment = {\n      store_id: storeId,\n      vendor_id: vendorId,\n      display_order: displayOrder || 0,\n      created_at: new Date().toISOString()\n    }\n\n    writeMockStoreVendorAssignments([...assignments, newAssignment])\n    return { data: newAssignment, error: null }\n  }\n\n  try {\n    // Get the current user's session\n    const { data: { user } } = await supabase!.auth.getUser()\n\n    if (!user) {\n      return {\n        data: null,\n        error: { message: 'ユーザーがログインしていません' }\n      }\n    }\n\n    // Get organization_id from the user\n    const organizationId = await getCurrentUserOrganizationId(user.id)\n\n    if (!organizationId) {\n      return {\n        data: null,\n        error: { message: 'ユーザーの組織が見つかりません' }\n      }\n    }\n\n    const { data, error } = await supabase!\n      .from('store_vendor_assignments')\n      .insert({\n        store_id: storeId,\n        vendor_id: vendorId,\n        display_order: displayOrder || 0,\n        organization_id: organizationId\n      })\n      .select()\n      .single()\n\n    return { data, error }\n  } catch (err: any) {\n    return { data: null, error: { message: err.message || '業者の割り当てに失敗しました' } }\n  }\n}\n\nexport const removeVendorFromStore = async (storeId: string, vendorId: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 removeVendorFromStore: Supabase未設定、モックデータから削除')\n    const assignments = readMockStoreVendorAssignments()\n    const filteredAssignments = assignments.filter((a: any) =>\n      !(a.store_id === storeId && a.vendor_id === vendorId)\n    )\n    writeMockStoreVendorAssignments(filteredAssignments)\n    return { error: null }\n  }\n\n  const { error } = await supabase!\n    .from('store_vendor_assignments')\n    .delete()\n    .eq('store_id', storeId)\n    .eq('vendor_id', vendorId)\n\n  return { error }\n}\n\n// Monthly Expenses\nexport const getMonthlyExpenses = async (filters: {\n  storeId?: string\n  month?: string\n  userId?: string\n} = {}) => {\n  if (!isSupabaseConfigured()) {\n    return { data: [], error: null }\n  }\n\n  if (filters.storeId && filters.storeId !== 'all' && !isUUID(filters.storeId)) {\n    console.warn('Invalid store UUID provided:', filters.storeId)\n    return { data: [], error: null }\n  }\n\n  let query = supabase!\n    .from('monthly_expenses')\n    .select(`\n      *,\n      stores!inner(name)\n    `)\n    .order('month', { ascending: false })\n\n  if (filters.storeId && filters.storeId !== 'all') {\n    query = query.eq('store_id', filters.storeId)\n  }\n\n  if (filters.month) {\n    query = query.eq('month', filters.month)\n  }\n\n  if (filters.userId && isUUID(filters.userId)) {\n    query = query.eq('user_id', filters.userId)\n  }\n\n  const { data, error } = await query\n  return { data, error }\n}\n\nexport const createMonthlyExpense = async (expenseData: Omit<MonthlyExpenseDb, 'id' | 'created_at' | 'updated_at'>) => {\n  const { data, error } = await supabase!\n    .from('monthly_expenses')\n    .insert(expenseData)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const updateMonthlyExpense = async (expenseId: string, updates: Partial<MonthlyExpenseDb>) => {\n  const { data, error } = await supabase!\n    .from('monthly_expenses')\n    .update({ ...updates, updated_at: new Date().toISOString() })\n    .eq('id', expenseId)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const upsertMonthlyExpense = async (expenseData: Omit<MonthlyExpenseDb, 'id' | 'created_at' | 'updated_at'>) => {\n  const { data, error } = await supabase!\n    .from('monthly_expenses')\n    .upsert(\n      { ...expenseData, updated_at: new Date().toISOString() },\n      { onConflict: 'store_id,month' }\n    )\n    .select()\n    .single()\n\n  return { data, error }\n}\n\n// Targets\nexport const getTargets = async (filters: {\n  storeId?: string\n  period?: string\n} = {}) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 getTargets: Supabase未設定、LocalStorageから読み込み')\n    let targets = readMockTargets()\n\n    if (filters.storeId && filters.storeId !== 'all') {\n      targets = targets.filter(t => t.store_id === filters.storeId)\n    }\n\n    if (filters.period) {\n      targets = targets.filter(t => t.period === filters.period)\n    }\n\n    targets.sort((a, b) => b.period.localeCompare(a.period))\n    return { data: targets, error: null }\n  }\n\n  let query = supabase!\n    .from('targets')\n    .select('*')\n    .order('period', { ascending: false })\n\n  if (filters.storeId && filters.storeId !== 'all') {\n    query = query.eq('store_id', filters.storeId)\n  }\n\n  if (filters.period) {\n    query = query.eq('period', filters.period)\n  }\n\n  const { data, error } = await query\n  return { data, error }\n}\n\nexport const createTarget = async (targetData: Omit<TargetDb, 'id' | 'created_at' | 'updated_at'>) => {\n  const { data, error } = await supabase!\n    .from('targets')\n    .insert(targetData)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const updateTarget = async (targetId: string, updates: Partial<TargetDb>) => {\n  const { data, error } = await supabase!\n    .from('targets')\n    .update({ ...updates, updated_at: new Date().toISOString() })\n    .eq('id', targetId)\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const upsertTarget = async (targetData: Omit<TargetDb, 'id' | 'created_at' | 'updated_at'>) => {\n  console.log('🔵 supabase.ts: upsertTarget呼び出し', targetData)\n\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 upsertTarget: Supabase未設定、LocalStorageに保存')\n    const targets = readMockTargets()\n    const now = new Date().toISOString()\n    const existingIndex = targets.findIndex(\n      t => t.store_id === targetData.store_id && t.period === targetData.period\n    )\n\n    let savedTarget: TargetDb\n    if (existingIndex >= 0) {\n      savedTarget = {\n        ...targets[existingIndex],\n        ...targetData,\n        updated_at: now\n      }\n      targets[existingIndex] = savedTarget\n    } else {\n      savedTarget = {\n        id: genId(),\n        ...targetData,\n        created_at: now,\n        updated_at: now\n      }\n      targets.push(savedTarget)\n    }\n\n    writeMockTargets(targets)\n    console.log('🔧 upsertTarget: LocalStorageに保存完了', savedTarget)\n    return { data: savedTarget, error: null }\n  }\n\n  const dataToUpsert = { ...targetData, updated_at: new Date().toISOString() }\n  console.log('🔵 supabase.ts: upsertするデータ', dataToUpsert)\n\n  const { data, error } = await supabase!\n    .from('targets')\n    .upsert(\n      dataToUpsert,\n      { onConflict: 'store_id,period' }\n    )\n    .select()\n    .single()\n\n  console.log('🔵 supabase.ts: upsert結果', { data, error })\n\n  return { data, error }\n}\n\nexport const deleteTarget = async (storeId: string, period: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 deleteTarget: Supabase未設定、LocalStorageから削除')\n    const targets = readMockTargets()\n    const filtered = targets.filter(t => !(t.store_id === storeId && t.period === period))\n    writeMockTargets(filtered)\n    return { error: null }\n  }\n\n  const { error } = await supabase!\n    .from('targets')\n    .delete()\n    .eq('store_id', storeId)\n    .eq('period', period)\n\n  return { error }\n}\n\n// Expense Baselines (参考経費)\nexport const getExpenseBaseline = async (storeId: string, month: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 getExpenseBaseline: Supabase未設定、LocalStorageから読み込み')\n    const baselines = readMockExpenseBaselines()\n    const baseline = baselines.find(b => b.store_id === storeId && b.month === month) || null\n    return { data: baseline, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('expense_baselines')\n    .select('*')\n    .eq('store_id', storeId)\n    .eq('month', month)\n    .maybeSingle()\n\n  return { data, error }\n}\n\nexport const upsertExpenseBaseline = async (\n  storeId: string,\n  month: string,\n  payload: Partial<ExpenseBaselineDb>\n) => {\n  const baselineData = {\n    store_id: storeId,\n    month,\n    open_days: payload.open_days ?? 30,\n    labor_cost_employee: payload.labor_cost_employee ?? 0,\n    labor_cost_part_time: payload.labor_cost_part_time ?? 0,\n    utilities: payload.utilities ?? 0,\n    promotion: payload.promotion ?? 0,\n    cleaning: payload.cleaning ?? 0,\n    misc: payload.misc ?? 0,\n    communication: payload.communication ?? 0,\n    others: payload.others ?? 0,\n    updated_at: new Date().toISOString()\n  }\n\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 upsertExpenseBaseline: Supabase未設定、LocalStorageに保存')\n    const baselines = readMockExpenseBaselines()\n    const index = baselines.findIndex(b => b.store_id === storeId && b.month === month)\n\n    if (index >= 0) {\n      baselines[index] = { ...baselines[index], ...baselineData }\n    } else {\n      baselines.push({\n        id: genId(),\n        ...baselineData,\n        created_at: new Date().toISOString()\n      } as ExpenseBaselineDb)\n    }\n\n    writeMockExpenseBaselines(baselines)\n    return { data: baselineData, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('expense_baselines')\n    .upsert(baselineData, { onConflict: 'store_id,month' })\n    .select()\n    .single()\n\n  return { data, error }\n}\n\nexport const deleteExpenseBaseline = async (storeId: string, month: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 deleteExpenseBaseline: Supabase未設定、LocalStorageから削除')\n    const baselines = readMockExpenseBaselines()\n    const filtered = baselines.filter(b => !(b.store_id === storeId && b.month === month))\n    writeMockExpenseBaselines(filtered)\n    return { error: null }\n  }\n\n  const { error } = await supabase!\n    .from('expense_baselines')\n    .delete()\n    .eq('store_id', storeId)\n    .eq('month', month)\n\n  return { error }\n}\n\n// Summary data\nexport const getSummaryData = async (filters: {\n  periodType?: 'daily' | 'weekly' | 'monthly'\n  periodStart?: string\n  periodEnd?: string\n  storeId?: string\n} = {}) => {\n  if (!isSupabaseConfigured()) {\n    return { data: [], error: null }\n  }\n\n  let query = supabase!\n    .from('summary_data')\n    .select('*')\n    .order('period_start', { ascending: false })\n\n  if (filters.periodType) {\n    query = query.eq('period_type', filters.periodType)\n  }\n\n  if (filters.periodStart) {\n    query = query.gte('period_start', filters.periodStart)\n  }\n\n  if (filters.periodEnd) {\n    query = query.lte('period_end', filters.periodEnd)\n  }\n\n  if (filters.storeId && filters.storeId !== 'all') {\n    query = query.eq('store_id', filters.storeId)\n  }\n\n  const { data, error } = await query\n  return { data, error }\n}\n\n// Daily Targets\nexport const getDailyTarget = async (storeId: string, date: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 getDailyTarget: Supabase未設定、LocalStorageから読み込み')\n    const targets = readMockDailyTargets()\n    const target = targets.find(t => t.store_id === storeId && t.date === date) || null\n    return { data: target, error: null }\n  }\n\n  const { data, error } = await supabase!\n    .from('daily_targets')\n    .select('*')\n    .eq('store_id', storeId)\n    .eq('date', date)\n    .maybeSingle()\n\n  return { data, error }\n}\n\nexport const getDailyTargets = async (filters: {\n  storeId?: string\n  dateFrom?: string\n  dateTo?: string\n} = {}) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 getDailyTargets: Supabase未設定、LocalStorageから読み込み')\n    let targets = readMockDailyTargets()\n\n    if (filters.storeId && filters.storeId !== 'all') {\n      targets = targets.filter(t => t.store_id === filters.storeId)\n    }\n\n    if (filters.dateFrom) {\n      targets = targets.filter(t => t.date >= filters.dateFrom!)\n    }\n\n    if (filters.dateTo) {\n      targets = targets.filter(t => t.date <= filters.dateTo!)\n    }\n\n    targets.sort((a, b) => b.date.localeCompare(a.date))\n    return { data: targets, error: null }\n  }\n\n  let query = supabase!\n    .from('daily_targets')\n    .select('*')\n    .order('date', { ascending: false })\n\n  if (filters.storeId && filters.storeId !== 'all') {\n    query = query.eq('store_id', filters.storeId)\n  }\n\n  if (filters.dateFrom) {\n    query = query.gte('date', filters.dateFrom)\n  }\n\n  if (filters.dateTo) {\n    query = query.lte('date', filters.dateTo)\n  }\n\n  const { data, error } = await query\n  return { data, error }\n}\n\nexport const upsertDailyTarget = async (targetData: {\n  storeId: string\n  date: string\n  targetSales: number\n}) => {\n  console.log('🔵 supabase.ts: upsertDailyTarget呼び出し', targetData)\n\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 upsertDailyTarget: Supabase未設定、LocalStorageに保存')\n    const targets = readMockDailyTargets()\n    const now = new Date().toISOString()\n    const existingIndex = targets.findIndex(\n      t => t.store_id === targetData.storeId && t.date === targetData.date\n    )\n\n    let savedTarget: DailyTargetDb\n    if (existingIndex >= 0) {\n      savedTarget = {\n        ...targets[existingIndex],\n        target_sales: targetData.targetSales,\n        updated_at: now\n      }\n      targets[existingIndex] = savedTarget\n    } else {\n      savedTarget = {\n        id: genId(),\n        store_id: targetData.storeId,\n        date: targetData.date,\n        target_sales: targetData.targetSales,\n        created_at: now,\n        updated_at: now\n      }\n      targets.push(savedTarget)\n    }\n\n    writeMockDailyTargets(targets)\n    console.log('🔧 upsertDailyTarget: LocalStorageに保存完了', savedTarget)\n    return { data: savedTarget, error: null }\n  }\n\n  const dataToUpsert = {\n    store_id: targetData.storeId,\n    date: targetData.date,\n    target_sales: targetData.targetSales,\n    updated_at: new Date().toISOString()\n  }\n  console.log('🔵 supabase.ts: upsertするデータ', dataToUpsert)\n\n  const { data, error } = await supabase!\n    .from('daily_targets')\n    .upsert(\n      dataToUpsert,\n      { onConflict: 'store_id,date' }\n    )\n    .select()\n    .single()\n\n  console.log('🔵 supabase.ts: upsert結果', { data, error })\n\n  return { data, error }\n}\n\nexport const deleteDailyTarget = async (storeId: string, date: string) => {\n  if (!isSupabaseConfigured()) {\n    console.log('🔧 deleteDailyTarget: Supabase未設定、LocalStorageから削除')\n    const targets = readMockDailyTargets()\n    const filtered = targets.filter(t => !(t.store_id === storeId && t.date === date))\n    writeMockDailyTargets(filtered)\n    return { error: null }\n  }\n\n  const { error } = await supabase!\n    .from('daily_targets')\n    .delete()\n    .eq('store_id', storeId)\n    .eq('date', date)\n\n  return { error }\n}\n\n// Health check\nexport const checkSupabaseConnection = async () => {\n  try {\n    const { data, error } = await supabase!\n      .from('profiles')\n      .select('count')\n      .limit(1)\n\n    return { connected: !error, error }\n  } catch (error) {\n    return { connected: false, error }\n  }\n}\n",
  "src/services/usageLimits.ts": "import { supabase } from '@/lib/supabase'\nimport { getCurrentUserOrganizationId } from './organizationService'\n\nexport interface UsageLimits {\n  maxStores: number\n  maxUsers: number\n  maxAIRequestsPerMonth: number\n}\n\nexport interface CurrentUsage {\n  storeCount: number\n  userCount: number\n  aiRequestCount: number\n}\n\nexport interface UsageStatus {\n  limits: UsageLimits\n  current: CurrentUsage\n  canAddStore: boolean\n  canAddUser: boolean\n  canUseAI: boolean\n  storesRemaining: number\n  usersRemaining: number\n  aiRequestsRemaining: number\n}\n\n/**\n * 組織の使用制限を取得\n */\nexport async function getOrganizationLimits(organizationId: string): Promise<UsageLimits> {\n  const { data, error } = await supabase\n    .from('organizations')\n    .select('max_stores, max_users, max_ai_requests_per_month')\n    .eq('id', organizationId)\n    .single()\n\n  if (error) {\n    console.error('Failed to get organization limits:', error)\n    return {\n      maxStores: 1,\n      maxUsers: 3,\n      maxAIRequestsPerMonth: 50\n    }\n  }\n\n  return {\n    maxStores: data.max_stores,\n    maxUsers: data.max_users,\n    maxAIRequestsPerMonth: data.max_ai_requests_per_month\n  }\n}\n\n/**\n * 現在の店舗数を取得\n */\nexport async function getCurrentStoreCount(organizationId: string): Promise<number> {\n  const { count, error } = await supabase\n    .from('stores')\n    .select('id', { count: 'exact', head: true })\n    .eq('organization_id', organizationId)\n\n  if (error) {\n    console.error('Failed to get store count:', error)\n    return 0\n  }\n\n  return count || 0\n}\n\n/**\n * 現在のユーザー数を取得\n */\nexport async function getCurrentUserCount(organizationId: string): Promise<number> {\n  const { count, error } = await supabase\n    .from('organization_members')\n    .select('user_id', { count: 'exact', head: true })\n    .eq('organization_id', organizationId)\n\n  if (error) {\n    console.error('Failed to get user count:', error)\n    return 0\n  }\n\n  return count || 0\n}\n\n/**\n * 今月のAI使用回数を取得\n */\nexport async function getCurrentAIUsageCount(organizationId: string): Promise<number> {\n  const startOfMonth = new Date()\n  startOfMonth.setDate(1)\n  startOfMonth.setHours(0, 0, 0, 0)\n\n  const { count, error } = await supabase\n    .from('ai_chat_archive')\n    .select('id', { count: 'exact', head: true })\n    .eq('organization_id', organizationId)\n    .gte('created_at', startOfMonth.toISOString())\n\n  if (error) {\n    console.error('Failed to get AI usage count:', error)\n    return 0\n  }\n\n  return count || 0\n}\n\n/**\n * 使用状況を取得\n */\nexport async function getUsageStatus(userId: string): Promise<UsageStatus | null> {\n  const organizationId = await getCurrentUserOrganizationId(userId)\n\n  if (!organizationId) {\n    return null\n  }\n\n  const [limits, storeCount, userCount, aiRequestCount] = await Promise.all([\n    getOrganizationLimits(organizationId),\n    getCurrentStoreCount(organizationId),\n    getCurrentUserCount(organizationId),\n    getCurrentAIUsageCount(organizationId)\n  ])\n\n  const canAddStore = limits.maxStores === 0 || storeCount < limits.maxStores\n  const canAddUser = limits.maxUsers === 0 || userCount < limits.maxUsers\n  const canUseAI = limits.maxAIRequestsPerMonth === 0 || aiRequestCount < limits.maxAIRequestsPerMonth\n\n  return {\n    limits,\n    current: {\n      storeCount,\n      userCount,\n      aiRequestCount\n    },\n    canAddStore,\n    canAddUser,\n    canUseAI,\n    storesRemaining: limits.maxStores === 0 ? Infinity : Math.max(0, limits.maxStores - storeCount),\n    usersRemaining: limits.maxUsers === 0 ? Infinity : Math.max(0, limits.maxUsers - userCount),\n    aiRequestsRemaining: limits.maxAIRequestsPerMonth === 0 ? Infinity : Math.max(0, limits.maxAIRequestsPerMonth - aiRequestCount)\n  }\n}\n\n/**\n * 店舗追加が可能かチェック\n */\nexport async function canAddStore(userId: string): Promise<{ allowed: boolean; message?: string }> {\n  const status = await getUsageStatus(userId)\n\n  if (!status) {\n    return { allowed: false, message: '組織情報が見つかりません' }\n  }\n\n  if (!status.canAddStore) {\n    return {\n      allowed: false,\n      message: `店舗数の上限（${status.limits.maxStores}店舗）に達しています。プランをアップグレードしてください。`\n    }\n  }\n\n  return { allowed: true }\n}\n\n/**\n * ユーザー招待が可能かチェック\n */\nexport async function canInviteUser(userId: string): Promise<{ allowed: boolean; message?: string }> {\n  const status = await getUsageStatus(userId)\n\n  if (!status) {\n    return { allowed: false, message: '組織情報が見つかりません' }\n  }\n\n  if (!status.canAddUser) {\n    return {\n      allowed: false,\n      message: `ユーザー数の上限（${status.limits.maxUsers}名）に達しています。プランをアップグレードしてください。`\n    }\n  }\n\n  return { allowed: true }\n}\n\n/**\n * AI使用が可能かチェック\n */\nexport async function canUseAI(userId: string): Promise<{ allowed: boolean; message?: string }> {\n  const status = await getUsageStatus(userId)\n\n  if (!status) {\n    return { allowed: false, message: '組織情報が見つかりません' }\n  }\n\n  if (!status.canUseAI) {\n    return {\n      allowed: false,\n      message: `今月のAI使用回数の上限（${status.limits.maxAIRequestsPerMonth}回）に達しています。来月まで待つか、プランをアップグレードしてください。`\n    }\n  }\n\n  return { allowed: true }\n}\n\n/**\n * 使用量の割合を計算\n */\nexport function getUsagePercentage(current: number, max: number): number {\n  if (max === 0) return 0\n  return Math.min(Math.round((current / max) * 100), 100)\n}\n\n/**\n * 使用量の状態を取得\n */\nexport function getUsageState(current: number, max: number): 'safe' | 'warning' | 'critical' | 'exceeded' {\n  if (max === 0) return 'safe'\n\n  const percentage = (current / max) * 100\n\n  if (current >= max) return 'exceeded'\n  if (percentage >= 90) return 'critical'\n  if (percentage >= 75) return 'warning'\n  return 'safe'\n}\n",
  "src/types/index.ts": "// 業務報告システム - 型定義\n\nexport interface DailyReport {\n  id: string;\n  date: string;\n  storeId: string;\n  storeName: string;\n  staffName: string;\n  // 売上詳細（税率・決済方法別）\n  salesCash10: number;     // 現金・10%飲食\n  salesCash8: number;      // 現金・8%飲食\n  salesCredit10: number;   // クレジット・10%飲食\n  salesCredit8: number;    // クレジット・8%飲食\n  sales: number;           // 合計売上（自動計算）\n  purchase: number;        // 仕入れ\n  laborCost: number;      // 人件費\n  utilities: number;      // 水道光熱費\n  rent: number;          // 賃料\n  consumables: number;   // 消耗品費\n  promotion: number;      // 販促費\n  cleaning: number;       // 清掃費\n  misc: number;          // 雑費\n  communication: number; // 通信費\n  others: number;        // その他\n  reportText: string;    // 報告内容\n  createdAt: string;\n  lineUserId?: string;   // LINE送信者ID\n}\n\nexport interface SummaryData {\n  period: string;\n  periodType: 'daily' | 'weekly' | 'monthly';\n  totalSales: number;\n  totalExpenses: number;\n  grossProfit: number;    // 粗利益（売上 - 仕入れ）\n  operatingProfit: number; // 営業利益（売上 - 全経費）\n  profitMargin: number;   // 利益率\n  storeCount?: number;\n}\n\nexport interface ChartData {\n  labels: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    backgroundColor: string | string[];\n    borderColor?: string;\n    borderWidth?: number;\n  }>;\n}\n\nexport interface Store {\n  id: string;\n  name: string;\n  address: string;\n  manager_id?: string;\n  is_active?: boolean;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'staff' | 'manager' | 'admin';\n  storeIds?: string[];\n  lineUserId?: string;\n  organizationId?: string;\n}\n\nexport interface Organization {\n  id: string;\n  name: string;\n  slug: string;\n  email: string;\n  phone?: string;\n  subscriptionStatus: 'trial' | 'active' | 'suspended' | 'cancelled';\n  subscriptionPlan: 'free' | 'starter' | 'business' | 'enterprise';\n  trialEndsAt?: string;\n  maxStores: number;\n  maxUsers: number;\n  maxAiRequestsPerMonth: number;\n  settings?: Record<string, any>;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface OrganizationMember {\n  organizationId: string;\n  userId: string;\n  role: 'owner' | 'admin' | 'member';\n  joinedAt: string;\n}\n\nexport interface Vendor {\n  id: string;\n  name: string;\n  category: 'vegetable_meat' | 'seafood' | 'alcohol' | 'rice' | 'seasoning' | 'frozen' | 'dessert' | 'others';\n  contactInfo?: string;\n  isActive: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface StoreVendorAssignment {\n  storeId: string;\n  vendorId: string;\n  displayOrder: number;\n}\n\nexport type PeriodType = 'daily' | 'weekly' | 'monthly';\n\n// Google Sheets API用の型\nexport interface SheetsData {\n  range: string;\n  majorDimension: 'ROWS' | 'COLUMNS';\n  values: string[][];\n}\n\n// LINE Webhook用の型\nexport interface LineMessage {\n  type: 'text';\n  text: string;\n}\n\nexport interface LineWebhookEvent {\n  type: 'message';\n  message: LineMessage;\n  source: {\n    userId: string;\n    type: 'user';\n  };\n  timestamp: number;\n  replyToken: string;\n}\n\n// 日報データ型（フロントエンド用）\nexport interface DailyReportData {\n  id: string\n  date: string\n  storeId: string\n  storeName: string\n  staffName: string\n  sales: number\n  purchase: number\n  laborCost: number\n  utilities: number\n  rent: number\n  consumables: number\n  promotion: number\n  cleaning: number\n  misc: number\n  communication: number\n  others: number\n  customers?: number\n  reportText: string\n  vendorPurchases?: Record<string, number>\n  createdAt: string\n}\n\n// 目標データ型\nexport interface TargetData {\n  id: string\n  storeId: string\n  storeName?: string\n  period: string\n  periodType: 'daily' | 'weekly' | 'monthly'\n  targetSales: number\n  targetProfit: number\n  targetProfitMargin: number\n  targetCostRate: number      // 目標原価率 (%)\n  targetLaborRate: number     // 目標人件費率 (%)\n  createdAt?: string\n  updatedAt?: string\n}\n\n// 日別売上目標データ型\nexport interface DailyTargetData {\n  id: string\n  storeId: string\n  date: string // YYYY-MM-DD\n  targetSales: number\n  createdAt?: string\n  updatedAt?: string\n}\n\n// 目標達成状況型\nexport interface TargetAchievement {\n  targetSales: number\n  actualSales: number\n  achievementRate: number // 達成率 (%)\n  isAchieved: boolean\n  difference: number // 目標との差額\n}",
  "src/utils/calculations.ts": "import { DailyReport, SummaryData } from '../types';\n\n// 経費の合計を計算\nexport const calculateTotalExpenses = (report: DailyReport): number => {\n  return report.purchase + report.laborCost + report.utilities +\n         report.rent + report.consumables + report.promotion +\n         report.cleaning + report.misc + report.communication + report.others;\n};\n\n// 粗利益を計算\nexport const calculateGrossProfit = (sales: number, purchase: number): number => {\n  return Math.round(sales - purchase);\n};\n\n// 営業利益を計算\nexport const calculateOperatingProfit = (sales: number, totalExpenses: number): number => {\n  return Math.round(sales - totalExpenses);\n};\n\n// 利益率を計算\nexport const calculateProfitMargin = (operatingProfit: number, sales: number): number => {\n  return sales > 0 ? (operatingProfit / sales) * 100 : 0;\n};\n\n// 日次データから集計データを生成\nexport const generateSummaryFromReports = (reports: DailyReport[]): SummaryData[] => {\n  const summaryMap = new Map<string, {\n    totalSales: number;\n    totalExpenses: number;\n    purchase: number;\n  }>();\n\n  reports.forEach(report => {\n    const key = report.date;\n    const existing = summaryMap.get(key) || { totalSales: 0, totalExpenses: 0, purchase: 0 };\n    \n    const expenses = calculateTotalExpenses(report);\n    summaryMap.set(key, {\n      totalSales: existing.totalSales + report.sales,\n      totalExpenses: existing.totalExpenses + expenses,\n      purchase: existing.purchase + report.purchase\n    });\n  });\n\n  return Array.from(summaryMap.entries()).map(([period, data]) => ({\n    period,\n    totalSales: data.totalSales,\n    totalExpenses: data.totalExpenses,\n    grossProfit: calculateGrossProfit(data.totalSales, data.purchase),\n    operatingProfit: calculateOperatingProfit(data.totalSales, data.totalExpenses),\n    profitMargin: calculateProfitMargin(\n      calculateOperatingProfit(data.totalSales, data.totalExpenses), \n      data.totalSales\n    )\n  }));\n};\n\n// 日付フォーマット\nexport const formatDate = (dateString: string): string => {\n  return new Date(dateString).toLocaleDateString('ja-JP', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\n\n// 通貨フォーマット\nexport const formatCurrency = (amount: number): string => {\n  return new Intl.NumberFormat('ja-JP', {\n    style: 'currency',\n    currency: 'JPY'\n  }).format(amount);\n};\n\n// パーセンテージフォーマット\nexport const formatPercent = (value: number): string => {\n  return `${value.toFixed(1)}%`;\n};",
  "src/vite-env.d.ts": "/// <reference types=\"vite/client\" />\n",
  "supabase/functions/chat-gpt/index.ts": "import { createClient } from 'npm:@supabase/supabase-js@2.39.3';\n\ninterface ChatMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\ninterface OpenAIRequest {\n  model: string;\n  messages: ChatMessage[];\n  max_tokens?: number;\n  temperature?: number;\n  stream?: boolean;\n}\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nDeno.serve(async (req: Request) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, {\n      status: 200,\n      headers: corsHeaders,\n    });\n  }\n\n  try {\n    // JWT認証チェック\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;\n    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\n    const supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: '認証が必要です。ログインしてください。'\n        }),\n        {\n          status: 401,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error: userError } = await supabase.auth.getUser(token);\n\n    if (userError || !user) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: '認証に失敗しました。再度ログインしてください。'\n        }),\n        {\n          status: 401,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    // AI使用回数チェック\n    const { data: usageCheck, error: usageError } = await supabase.rpc('check_and_increment_usage', {\n      p_user_id: user.id\n    });\n\n    console.log('Usage check result:', usageCheck);\n\n    if (usageError) {\n      console.error('Usage check error:', usageError);\n    }\n\n    if (usageCheck && !usageCheck.allowed) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: `本日の利用上限（${usageCheck.daily_limit}回）に達しました。`,\n          message: `${usageCheck.message}\\n\\n明日午前0時（日本時間）にリセットされます。\\nそれまでは基本的なデータ分析機能をご利用いただけます。`,\n          usageInfo: {\n            currentCount: usageCheck.current_count,\n            dailyLimit: usageCheck.daily_limit,\n            remaining: usageCheck.remaining\n          }\n        }),\n        {\n          status: 429,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    const { messages, businessData } = await req.json() as {\n      messages: ChatMessage[];\n      businessData?: {\n        totalSales: number;\n        totalExpenses: number;\n        profitMargin: number;\n        reportCount: number;\n        stores: string[];\n        recentEvents?: string[];\n      };\n    };\n\n    const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');\n    \n    if (!OPENAI_API_KEY) {\n      return new Response(\n        JSON.stringify({ \n          success: false, \n          error: 'OpenAI API キーが設定されていません。管理者に連絡してください。' \n        }),\n        {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    const systemPrompt = `あなたは居酒屋いっきチェーンの専門AIアナリストです。以下のデータを基に、経営に役立つ具体的で実用的な回答を日本語で提供してください。\n\n現在の業績データ:\n${businessData ? `\n- 総売上: ${(businessData.totalSales || 0).toLocaleString('ja-JP')}円\n- 総経費: ${(businessData.totalExpenses || 0).toLocaleString('ja-JP')}円\n- 利益率: ${(businessData.profitMargin || 0).toFixed(1)}%\n- 報告件数: ${businessData.reportCount || 0}件\n- 店舗数: ${businessData.stores?.length || 0}店舗\n- 店舗名: ${businessData.stores?.join('、') || '未設定'}\n${businessData.recentEvents?.length ? '- 特別実績: ' + businessData.recentEvents.join('、') : ''}\n` : '業績データを取得中...'}\n\n回答の指針:\n1. 具体的な数値を使った分析\n2. 実行可能な改善提案\n3. 飲食業界の一般的な指標との比較\n4. 季節要因や市場環境の考慮\n5. 各店舗の特徴を活かした戦略提案\n\n特に以下の点を重視してください:\n- 原価率: 30-35%が目安\n- 人件費率: 25-30%が目安  \n- 営業利益率: 15-25%が目安\n- 豊洲店の立地特性（豊洲市場、観光エリア）\n- 有明店のオフィス街立地\n- 本店の地域密着型営業\n\n回答は簡潔で分かりやすく、必要に応じて絵文字を使用してください。`;\n\n    const openAIMessages: ChatMessage[] = [\n      { role: 'system', content: systemPrompt },\n      ...messages.slice(-10)\n    ];\n\n    const openAIRequest: OpenAIRequest = {\n      model: 'gpt-4o-mini',\n      messages: openAIMessages,\n      max_tokens: 1000,\n      temperature: 0.7\n    };\n\n    console.log('OpenAI API Request:', {\n      messageCount: openAIMessages.length,\n      hasBusinessData: !!businessData,\n      lastUserMessage: messages[messages.length - 1]?.content?.substring(0, 100)\n    });\n\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(openAIRequest)\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      console.error('OpenAI API Error:', {\n        status: response.status,\n        statusText: response.statusText,\n        error: errorData\n      });\n      \n      let errorMessage = 'ChatGPT APIでエラーが発生しました。';\n      \n      if (response.status === 401) {\n        errorMessage = 'OpenAI APIキーが無効です。設定を確認してください。';\n      } else if (response.status === 429) {\n        errorMessage = 'API利用制限に達しました。しばらく待ってから再試行してください。';\n      } else if (response.status === 500) {\n        errorMessage = 'OpenAI APIサーバーでエラーが発生しました。';\n      }\n      \n      return new Response(\n        JSON.stringify({ \n          success: false, \n          error: errorMessage,\n          fallbackResponse: '申し訳ございません。一時的にAI機能が利用できません。基本的な分析は引き続きご利用いただけます。'\n        }),\n        {\n          status: response.status,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    const result = await response.json();\n    const aiResponse = result.choices?.[0]?.message?.content;\n\n    if (!aiResponse) {\n      return new Response(\n        JSON.stringify({ \n          success: false, \n          error: 'ChatGPTからの応答を取得できませんでした。',\n          fallbackResponse: 'AI機能が一時的に利用できません。手動分析機能をご利用ください。'\n        }),\n        {\n          status: 500,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        response: aiResponse,\n        usage: result.usage,\n        usageInfo: usageCheck ? {\n          currentCount: usageCheck.current_count,\n          dailyLimit: usageCheck.daily_limit,\n          remaining: usageCheck.remaining\n        } : null\n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n\n  } catch (error) {\n    console.error('Edge Function Error:', error);\n    return new Response(\n      JSON.stringify({ \n        success: false, \n        error: 'サーバーエラーが発生しました。',\n        fallbackResponse: 'システムエラーのため、基本的な分析機能のみご利用いただけます。'\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n  }\n});",
  "supabase/functions/generate-ai-report/index.ts": "import { createClient } from 'npm:@supabase/supabase-js@2.39.3';\n\ninterface ReportRequest {\n  reportType: 'weekly' | 'monthly';\n  storeId?: string;\n  periodStart?: string;\n  periodEnd?: string;\n}\n\ninterface DailyReportData {\n  id: string;\n  date: string;\n  store_id: string;\n  sales: number;\n  purchase: number;\n  labor_cost: number;\n  utilities: number;\n  rent: number;\n  consumables: number;\n  promotion: number;\n  cleaning: number;\n  misc: number;\n  communication: number;\n  others: number;\n}\n\ninterface StoreData {\n  id: string;\n  name: string;\n}\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Client-Info, Apikey',\n};\n\nDeno.serve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, {\n      status: 200,\n      headers: corsHeaders,\n    });\n  }\n\n  try {\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;\n    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\n    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');\n\n    if (!openaiApiKey) {\n      return new Response(\n        JSON.stringify({ success: false, error: 'OpenAI API key not configured' }),\n        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n    const { reportType, storeId, periodStart, periodEnd }: ReportRequest = await req.json();\n\n    const logId = crypto.randomUUID();\n    await supabase.from('report_generation_logs').insert({\n      id: logId,\n      report_type: reportType,\n      store_id: storeId || null,\n      status: 'in_progress',\n      started_at: new Date().toISOString(),\n    });\n\n    let startDate: string;\n    let endDate: string;\n\n    if (periodStart && periodEnd) {\n      startDate = periodStart;\n      endDate = periodEnd;\n    } else {\n      const now = new Date();\n      if (reportType === 'weekly') {\n        const weekAgo = new Date(now);\n        weekAgo.setDate(weekAgo.getDate() - 7);\n        startDate = weekAgo.toISOString().split('T')[0];\n        endDate = now.toISOString().split('T')[0];\n      } else {\n        const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n        const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n        startDate = lastMonth.toISOString().split('T')[0];\n        endDate = lastMonthEnd.toISOString().split('T')[0];\n      }\n    }\n\n    let query = supabase\n      .from('daily_reports')\n      .select('*')\n      .gte('date', startDate)\n      .lte('date', endDate)\n      .order('date', { ascending: true });\n\n    if (storeId) {\n      query = query.eq('store_id', storeId);\n    }\n\n    const { data: reports, error: reportsError } = await query;\n\n    if (reportsError) {\n      throw new Error(`Failed to fetch reports: ${reportsError.message}`);\n    }\n\n    if (!reports || reports.length === 0) {\n      await supabase\n        .from('report_generation_logs')\n        .update({\n          status: 'failed',\n          completed_at: new Date().toISOString(),\n          error_message: 'No data available for the specified period',\n        })\n        .eq('id', logId);\n\n      return new Response(\n        JSON.stringify({ success: false, error: 'No data available for the specified period' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const storeIds = [...new Set(reports.map((r: DailyReportData) => r.store_id))];\n    const { data: stores } = await supabase\n      .from('stores')\n      .select('id, name')\n      .in('id', storeIds);\n\n    const storeMap = new Map((stores || []).map((s: StoreData) => [s.id, s.name]));\n\n    const reportPeriodStart = new Date(startDate);\n    const reportPeriodEnd = new Date(endDate);\n    const daysInPeriod = Math.ceil((reportPeriodEnd.getTime() - reportPeriodStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n\n    const monthsInPeriod = new Set<string>();\n    for (let d = new Date(reportPeriodStart); d <= reportPeriodEnd; d.setDate(d.getDate() + 1)) {\n      const monthKey = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;\n      monthsInPeriod.add(monthKey);\n    }\n\n    const { data: expenseBaselines } = await supabase\n      .from('expense_baselines')\n      .select('*')\n      .in('store_id', storeIds)\n      .in('month', Array.from(monthsInPeriod));\n\n    const expenseBaselineMap = new Map();\n    (expenseBaselines || []).forEach((baseline: any) => {\n      const key = `${baseline.store_id}-${baseline.month}`;\n      expenseBaselineMap.set(key, baseline);\n    });\n\n    const calculateProrationForStore = (storeId: string) => {\n      const storeReports = reports.filter((r: DailyReportData) => r.store_id === storeId);\n      const actualDaysWithReports = storeReports.length;\n\n      if (actualDaysWithReports === 0) return 0;\n\n      let totalProrated = 0;\n      for (const monthKey of Array.from(monthsInPeriod)) {\n        const baselineKey = `${storeId}-${monthKey}`;\n        const baseline = expenseBaselineMap.get(baselineKey);\n        if (!baseline) continue;\n\n        const openDays = baseline.open_days || 30;\n\n        const monthlyTotal =\n          Number(baseline.labor_cost_employee || 0) +\n          Number(baseline.labor_cost_part_time || 0) +\n          Number(baseline.utilities || 0) +\n          Number(baseline.rent || 0) +\n          Number(baseline.consumables || 0) +\n          Number(baseline.promotion || 0) +\n          Number(baseline.cleaning || 0) +\n          Number(baseline.misc || 0) +\n          Number(baseline.communication || 0) +\n          Number(baseline.others || 0);\n\n        totalProrated += (monthlyTotal / openDays) * actualDaysWithReports;\n      }\n      return totalProrated;\n    };\n\n    const totalSales = reports.reduce((sum: number, r: DailyReportData) => sum + (r.sales || 0), 0);\n    const totalPurchase = reports.reduce((sum: number, r: DailyReportData) => sum + (r.purchase || 0), 0);\n    const totalLaborCost = reports.reduce((sum: number, r: DailyReportData) => sum + (r.labor_cost || 0), 0);\n    const totalUtilities = reports.reduce((sum: number, r: DailyReportData) => sum + (r.utilities || 0), 0);\n    const totalRent = reports.reduce((sum: number, r: DailyReportData) => sum + (r.rent || 0), 0);\n    const totalConsumables = reports.reduce((sum: number, r: DailyReportData) => sum + (r.consumables || 0), 0);\n    const totalPromotion = reports.reduce((sum: number, r: DailyReportData) => sum + (r.promotion || 0), 0);\n    const totalCleaning = reports.reduce((sum: number, r: DailyReportData) => sum + (r.cleaning || 0), 0);\n    const totalMisc = reports.reduce((sum: number, r: DailyReportData) => sum + (r.misc || 0), 0);\n    const totalCommunication = reports.reduce((sum: number, r: DailyReportData) => sum + (r.communication || 0), 0);\n    const totalOthers = reports.reduce((sum: number, r: DailyReportData) => sum + (r.others || 0), 0);\n\n    let totalMonthlyExpenses = 0;\n    for (const storeId of storeIds) {\n      totalMonthlyExpenses += calculateProrationForStore(storeId);\n    }\n\n    const totalExpenses =\n      totalPurchase +\n      totalLaborCost +\n      totalUtilities +\n      totalRent +\n      totalConsumables +\n      totalPromotion +\n      totalCleaning +\n      totalMisc +\n      totalCommunication +\n      totalOthers +\n      totalMonthlyExpenses;\n\n    const grossProfit = totalSales - totalPurchase;\n    const operatingProfit = totalSales - totalExpenses;\n    const profitMargin = totalSales > 0 ? (operatingProfit / totalSales) * 100 : 0;\n    const costRate = totalSales > 0 ? (totalPurchase / totalSales) * 100 : 0;\n    const laborRate = totalSales > 0 ? ((totalLaborCost + totalMonthlyExpenses) / totalSales) * 100 : 0;\n\n    const storeBreakdown = storeIds.map((storeId) => {\n      const storeReports = reports.filter((r: DailyReportData) => r.store_id === storeId);\n      const storeSales = storeReports.reduce((sum: number, r: DailyReportData) => sum + (r.sales || 0), 0);\n      const storePurchase = storeReports.reduce((sum: number, r: DailyReportData) => sum + (r.purchase || 0), 0);\n      const storeLaborCost = storeReports.reduce((sum: number, r: DailyReportData) => sum + (r.labor_cost || 0), 0);\n\n      const storeDailyExpenses = storeReports.reduce(\n        (sum: number, r: DailyReportData) =>\n          sum +\n          (r.purchase || 0) +\n          (r.labor_cost || 0) +\n          (r.utilities || 0) +\n          (r.rent || 0) +\n          (r.consumables || 0) +\n          (r.promotion || 0) +\n          (r.cleaning || 0) +\n          (r.misc || 0) +\n          (r.communication || 0) +\n          (r.others || 0),\n        0\n      );\n\n      const storeMonthlyExpenses = calculateProrationForStore(storeId);\n      const storeExpenses = storeDailyExpenses + storeMonthlyExpenses;\n\n      return {\n        storeId,\n        storeName: storeMap.get(storeId) || 'Unknown',\n        sales: storeSales,\n        purchase: storePurchase,\n        laborCost: storeLaborCost,\n        expenses: storeExpenses,\n        profit: storeSales - storeExpenses,\n        profitMargin: storeSales > 0 ? ((storeSales - storeExpenses) / storeSales) * 100 : 0,\n        costRate: storeSales > 0 ? (storePurchase / storeSales) * 100 : 0,\n        laborRate: storeSales > 0 ? ((storeLaborCost + storeMonthlyExpenses) / storeSales) * 100 : 0,\n      };\n    });\n\n    const prompt = `あなたは飲食チェーンの経営コンサルタントです。以下のデータを分析し、${reportType === 'weekly' ? '週次' : '月次'}レポートを作成してください。\n\n期間: ${startDate} から ${endDate}\n対象店舗: ${storeId ? storeMap.get(storeId) : '全店舗'}\n\n【総合指標】\n- 総売上: ${totalSales.toLocaleString('ja-JP')}円\n- 総経費: ${totalExpenses.toLocaleString('ja-JP')}円\n- 粗利益: ${grossProfit.toLocaleString('ja-JP')}円\n- 営業利益: ${operatingProfit.toLocaleString('ja-JP')}円\n- 利益率: ${profitMargin.toFixed(1)}%\n- 原価率: ${costRate.toFixed(1)}%\n- 人件費率: ${laborRate.toFixed(1)}%\n\n【店舗別内訳】\n${storeBreakdown.map(s => `\n${s.storeName}:\n  売上: ${s.sales.toLocaleString('ja-JP')}円\n  経費: ${s.expenses.toLocaleString('ja-JP')}円\n  利益: ${s.profit.toLocaleString('ja-JP')}円\n  利益率: ${s.profitMargin.toFixed(1)}%\n  原価率: ${s.costRate.toFixed(1)}%\n  人件費率: ${s.laborRate.toFixed(1)}%`).join('')}\n\n以下の形式でJSONレスポンスを返してください:\n{\n  \"title\": \"レポートのタイトル\",\n  \"summary\": \"経営者向けのエグゼクティブサマリー（200-300文字）\",\n  \"keyInsights\": [\"重要な発見1\", \"重要な発見2\", \"重要な発見3\"],\n  \"recommendations\": [\"具体的な改善提案1\", \"具体的な改善提案2\", \"具体的な改善提案3\"],\n  \"analysis\": {\n    \"salesTrend\": \"売上トレンドの分析\",\n    \"profitability\": \"収益性の分析\",\n    \"costStructure\": \"コスト構造の分析\",\n    \"storeComparison\": \"店舗間比較の分析\"\n  }\n}\n\n業界標準: 原価率30-35%, 人件費率25-30%, 営業利益率15-25%を参考に、具体的で実行可能な提案をしてください。`;\n\n    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${openaiApiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o-mini',\n        messages: [\n          { role: 'system', content: 'あなたは飲食チェーン経営の専門家です。データ分析と改善提案を行います。' },\n          { role: 'user', content: prompt },\n        ],\n        response_format: { type: 'json_object' },\n        temperature: 0.7,\n      }),\n    });\n\n    if (!openaiResponse.ok) {\n      throw new Error(`OpenAI API error: ${openaiResponse.statusText}`);\n    }\n\n    const aiResult = await openaiResponse.json();\n    const aiContent = JSON.parse(aiResult.choices[0].message.content);\n\n    const reportData = {\n      store_id: storeId || null,\n      report_type: reportType,\n      period_start: startDate,\n      period_end: endDate,\n      title: aiContent.title || `${reportType === 'weekly' ? '週次' : '月次'}業績レポート`,\n      summary: aiContent.summary || '',\n      analysis_content: aiContent.analysis || {},\n      key_insights: aiContent.keyInsights || [],\n      recommendations: aiContent.recommendations || [],\n      metrics: {\n        totalSales,\n        totalExpenses,\n        grossProfit,\n        operatingProfit,\n        profitMargin,\n        costRate,\n        laborRate,\n        storeBreakdown,\n      },\n      generated_by: 'gpt-4o-mini',\n      generated_at: new Date().toISOString(),\n    };\n\n    const { data: report, error: insertError } = await supabase\n      .from('ai_generated_reports')\n      .insert(reportData)\n      .select()\n      .single();\n\n    if (insertError) {\n      throw new Error(`Failed to insert report: ${insertError.message}`);\n    }\n\n    await supabase\n      .from('report_generation_logs')\n      .update({\n        status: 'success',\n        report_id: report.id,\n        completed_at: new Date().toISOString(),\n        data_summary: { reportCount: reports.length, storeCount: storeIds.length },\n      })\n      .eq('id', logId);\n\n    return new Response(\n      JSON.stringify({ success: true, report }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  } catch (error) {\n    console.error('Report generation error:', error);\n    return new Response(\n      JSON.stringify({ success: false, error: error.message }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n});\n",
  "supabase/functions/scheduled-report-generator/index.ts": "import { createClient } from 'npm:@supabase/supabase-js@2.39.3';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Client-Info, Apikey',\n};\n\nDeno.serve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, {\n      status: 200,\n      headers: corsHeaders,\n    });\n  }\n\n  try {\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;\n    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\n\n    const supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n    const now = new Date();\n\n    const { data: schedules, error: schedulesError } = await supabase\n      .from('report_schedules')\n      .select('*')\n      .eq('is_enabled', true)\n      .or(`next_run_at.is.null,next_run_at.lte.${now.toISOString()}`);\n\n    if (schedulesError) {\n      throw new Error(`Failed to fetch schedules: ${schedulesError.message}`);\n    }\n\n    if (!schedules || schedules.length === 0) {\n      return new Response(\n        JSON.stringify({ success: true, message: 'No schedules to process', processedCount: 0 }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const results = [];\n\n    for (const schedule of schedules) {\n      try {\n        let periodStart: string;\n        let periodEnd: string;\n\n        if (schedule.report_type === 'weekly') {\n          const weekStart = new Date(now);\n          weekStart.setDate(weekStart.getDate() - 7);\n          periodStart = weekStart.toISOString().split('T')[0];\n          periodEnd = now.toISOString().split('T')[0];\n        } else {\n          const monthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n          const monthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n          periodStart = monthStart.toISOString().split('T')[0];\n          periodEnd = monthEnd.toISOString().split('T')[0];\n        }\n\n        const generateReportUrl = `${supabaseUrl}/functions/v1/generate-ai-report`;\n        const generateResponse = await fetch(generateReportUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${supabaseServiceKey}`,\n          },\n          body: JSON.stringify({\n            reportType: schedule.report_type,\n            storeId: schedule.store_id,\n            periodStart,\n            periodEnd,\n          }),\n        });\n\n        if (!generateResponse.ok) {\n          const errorText = await generateResponse.text();\n          throw new Error(`Report generation failed: ${errorText}`);\n        }\n\n        const reportResult = await generateResponse.json();\n\n        let nextRunAt: Date;\n        if (schedule.report_type === 'weekly') {\n          nextRunAt = new Date(now);\n          nextRunAt.setDate(nextRunAt.getDate() + 7);\n          nextRunAt.setHours(6, 0, 0, 0);\n        } else {\n          nextRunAt = new Date(now.getFullYear(), now.getMonth() + 1, 1);\n          nextRunAt.setHours(6, 0, 0, 0);\n        }\n\n        await supabase\n          .from('report_schedules')\n          .update({\n            last_run_at: now.toISOString(),\n            next_run_at: nextRunAt.toISOString(),\n            updated_at: now.toISOString(),\n          })\n          .eq('id', schedule.id);\n\n        results.push({\n          scheduleId: schedule.id,\n          reportType: schedule.report_type,\n          storeId: schedule.store_id,\n          success: true,\n          reportId: reportResult.report?.id,\n        });\n      } catch (error) {\n        console.error(`Failed to process schedule ${schedule.id}:`, error);\n        results.push({\n          scheduleId: schedule.id,\n          reportType: schedule.report_type,\n          storeId: schedule.store_id,\n          success: false,\n          error: error.message,\n        });\n      }\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        processedCount: schedules.length,\n        results,\n      }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  } catch (error) {\n    console.error('Scheduled report generation error:', error);\n    return new Response(\n      JSON.stringify({ success: false, error: error.message }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n});\n",
  "supabase/functions/send-report-email/index.ts": "import { createClient } from 'npm:@supabase/supabase-js@2.39.3';\n\ninterface EmailRequest {\n  reportId: string;\n  recipientEmail: string;\n}\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Client-Info, Apikey',\n};\n\nDeno.serve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, {\n      status: 200,\n      headers: corsHeaders,\n    });\n  }\n\n  try {\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;\n    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\n    const resendApiKey = Deno.env.get('RESEND_API_KEY');\n    const isDemoMode = !resendApiKey;\n\n    const supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      return new Response(\n        JSON.stringify({ success: false, error: '認証が必要です' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error: userError } = await supabase.auth.getUser(token);\n\n    if (userError || !user) {\n      return new Response(\n        JSON.stringify({ success: false, error: '認証に失敗しました' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    if (!profile || (profile.role !== 'manager' && profile.role !== 'admin')) {\n      return new Response(\n        JSON.stringify({ success: false, error: '権限がありません。マネージャー以上のみレポートを送信できます' }),\n        { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const { reportId, recipientEmail }: EmailRequest = await req.json();\n\n    const { data: report, error: reportError } = await supabase\n      .from('ai_generated_reports')\n      .select('*')\n      .eq('id', reportId)\n      .single();\n\n    if (reportError || !report) {\n      return new Response(\n        JSON.stringify({ success: false, error: 'レポートが見つかりません' }),\n        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const { data: store } = report.store_id\n      ? await supabase.from('stores').select('name').eq('id', report.store_id).single()\n      : null;\n\n    const storeName = store?.name || '全店舗';\n    const metrics = report.metrics || {};\n\n    const emailHtml = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <style>\n    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; }\n    .header h1 { margin: 0; font-size: 24px; }\n    .content { background: #f9fafb; padding: 30px; border-radius: 0 0 8px 8px; }\n    .section { background: white; padding: 20px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }\n    .metric { display: flex; justify-content: space-between; padding: 12px 0; border-bottom: 1px solid #e5e7eb; }\n    .metric:last-child { border-bottom: none; }\n    .metric-label { color: #6b7280; font-weight: 500; }\n    .metric-value { font-weight: 600; color: #111827; }\n    .positive { color: #059669; }\n    .negative { color: #dc2626; }\n    .insight { background: #eff6ff; border-left: 4px solid #3b82f6; padding: 12px 16px; margin: 8px 0; border-radius: 4px; }\n    .recommendation { background: #f0fdf4; border-left: 4px solid #10b981; padding: 12px 16px; margin: 8px 0; border-radius: 4px; }\n    .footer { text-align: center; padding: 20px; color: #6b7280; font-size: 14px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>📊 ${report.title}</h1>\n      <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">\n        期間: ${report.period_start} 〜 ${report.period_end}<br>\n        対象: ${storeName}\n      </p>\n    </div>\n\n    <div class=\"content\">\n      <div class=\"section\">\n        <h2 style=\"margin-top: 0; color: #111827; font-size: 18px;\">📝 エグゼクティブサマリー</h2>\n        <p style=\"color: #4b5563;\">${report.summary || 'サマリーなし'}</p>\n      </div>\n\n      <div class=\"section\">\n        <h2 style=\"margin-top: 0; color: #111827; font-size: 18px;\">📈 主要指標</h2>\n        <div class=\"metric\">\n          <span class=\"metric-label\">総売上</span>\n          <span class=\"metric-value\">¥${(metrics.totalSales || 0).toLocaleString('ja-JP')}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">総経費</span>\n          <span class=\"metric-value\">¥${(metrics.totalExpenses || 0).toLocaleString('ja-JP')}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">粗利益</span>\n          <span class=\"metric-value\">¥${(metrics.grossProfit || 0).toLocaleString('ja-JP')}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">営業利益</span>\n          <span class=\"metric-value ${(metrics.operatingProfit || 0) >= 0 ? 'positive' : 'negative'}\">\n            ¥${(metrics.operatingProfit || 0).toLocaleString('ja-JP')}\n          </span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">利益率</span>\n          <span class=\"metric-value ${(metrics.profitMargin || 0) >= 0 ? 'positive' : 'negative'}\">\n            ${(metrics.profitMargin || 0).toFixed(1)}%\n          </span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">原価率</span>\n          <span class=\"metric-value\">${(metrics.costRate || 0).toFixed(1)}%</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">人件費率</span>\n          <span class=\"metric-value\">${(metrics.laborRate || 0).toFixed(1)}%</span>\n        </div>\n      </div>\n\n      ${report.key_insights && report.key_insights.length > 0 ? `\n      <div class=\"section\">\n        <h2 style=\"margin-top: 0; color: #111827; font-size: 18px;\">💡 重要な発見</h2>\n        ${report.key_insights.map((insight: string) => `<div class=\"insight\">${insight}</div>`).join('')}\n      </div>\n      ` : ''}\n\n      ${report.recommendations && report.recommendations.length > 0 ? `\n      <div class=\"section\">\n        <h2 style=\"margin-top: 0; color: #111827; font-size: 18px;\">✅ 改善提案</h2>\n        ${report.recommendations.map((rec: string) => `<div class=\"recommendation\">${rec}</div>`).join('')}\n      </div>\n      ` : ''}\n\n      <div class=\"footer\">\n        <p>このレポートは AI によって自動生成されました。<br>\n        詳細は管理システムでご確認ください。</p>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n    `;\n\n    if (isDemoMode) {\n      console.log(`[DEMO MODE] メール送信をシミュレート`);\n      console.log(`To: ${recipientEmail}`);\n      console.log(`Subject: ${report.title} - ${storeName}`);\n      console.log(`Report ID: ${reportId}`);\n\n      return new Response(\n        JSON.stringify({\n          success: true,\n          messageId: `demo-${Date.now()}`,\n          isDemoMode: true,\n          message: 'デモモード: メールは送信されませんでしたが、レポートの準備が完了しました'\n        }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const resendResponse = await fetch('https://api.resend.com/emails', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${resendApiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        from: 'レポート配信 <reports@updates.yourdomain.com>',\n        to: [recipientEmail],\n        subject: `${report.title} - ${storeName}`,\n        html: emailHtml,\n      }),\n    });\n\n    if (!resendResponse.ok) {\n      const errorData = await resendResponse.json();\n      console.error('Resend API error:', errorData);\n      throw new Error('メール送信に失敗しました');\n    }\n\n    const result = await resendResponse.json();\n\n    return new Response(\n      JSON.stringify({ success: true, messageId: result.id, isDemoMode: false }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  } catch (error) {\n    console.error('Email sending error:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'メール送信中にエラーが発生しました'\n      }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n});",
  "supabase/functions/sync-to-sheets/index.ts": "interface DailyReportData {\n  date: string;\n  store_name: string;\n  staff_name: string;\n  sales: number;\n  purchase: number;\n  labor_cost: number;\n  utilities: number;\n  promotion: number;\n  cleaning: number;\n  misc: number;\n  communication: number;\n  others: number;\n  report_text: string;\n  created_at: string;\n}\n\n// CORS設定: 本番では環境変数で許可ドメインを指定\nconst ALLOWED_ORIGIN = Deno.env.get('ALLOWED_ORIGIN') ?? 'http://localhost:5173';\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": ALLOWED_ORIGIN,\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nDeno.serve(async (req: Request) => {\n  // Handle CORS preflight requests\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, {\n      status: 200,\n      headers: corsHeaders,\n    });\n  }\n\n  try {\n    const { reportData } = await req.json() as { reportData: DailyReportData };\n    \n    // Google Sheets API configuration\n    const GOOGLE_SHEETS_API_KEY = Deno.env.get('GOOGLE_SHEETS_API_KEY');\n    const GOOGLE_SHEET_ID = Deno.env.get('GOOGLE_SHEET_ID');\n    \n    // Explicitly check for non-empty strings\n    if (!GOOGLE_SHEETS_API_KEY || !GOOGLE_SHEET_ID || \n        GOOGLE_SHEETS_API_KEY.trim() === '' || GOOGLE_SHEET_ID.trim() === '') {\n      console.error('Environment variables check failed:', {\n        hasApiKey: !!GOOGLE_SHEETS_API_KEY,\n        hasSheetId: !!GOOGLE_SHEET_ID,\n        apiKeyLength: GOOGLE_SHEETS_API_KEY?.length || 0,\n        sheetIdLength: GOOGLE_SHEET_ID?.length || 0\n      });\n      return new Response(\n        JSON.stringify({ \n          success: false, \n          error: 'Google Sheets API設定が不完全です。環境変数が設定されていないか空です。',\n          details: {\n            hasApiKey: !!GOOGLE_SHEETS_API_KEY && GOOGLE_SHEETS_API_KEY.trim() !== '',\n            hasSheetId: !!GOOGLE_SHEET_ID && GOOGLE_SHEET_ID.trim() !== ''\n          }\n        }),\n        {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    // Prepare data for Google Sheets (in the order of columns)\n    const rowData = [\n      reportData.date,\n      reportData.store_name,\n      reportData.staff_name,\n      reportData.sales.toString(),\n      reportData.purchase.toString(),\n      reportData.labor_cost.toString(),\n      reportData.utilities.toString(),\n      reportData.promotion.toString(),\n      reportData.cleaning.toString(),\n      reportData.misc.toString(),\n      reportData.communication.toString(),\n      reportData.others.toString(),\n      reportData.report_text || '',\n      reportData.created_at,\n      // Calculate totals\n      (reportData.purchase + reportData.labor_cost + reportData.utilities + \n       reportData.promotion + reportData.cleaning + reportData.misc + \n       reportData.communication + reportData.others).toString(), // 経費合計\n      (reportData.sales - reportData.purchase).toString(), // 粗利益\n      (reportData.sales - (reportData.purchase + reportData.labor_cost + reportData.utilities + \n       reportData.promotion + reportData.cleaning + reportData.misc + \n       reportData.communication + reportData.others)).toString() // 営業利益\n    ];\n\n    // Google Sheets API URL for appending data\n    const sheetsUrl = `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEET_ID}/values/daily_reports:append`;\n    \n    // Log the request details for debugging\n    console.log('Google Sheets API Request:', {\n      url: sheetsUrl,\n      method: 'POST',\n      sheetId: GOOGLE_SHEET_ID,\n      hasApiKey: !!GOOGLE_SHEETS_API_KEY\n    });\n    \n    const response = await fetch(`${sheetsUrl}?key=${GOOGLE_SHEETS_API_KEY}&valueInputOption=USER_ENTERED`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        values: [rowData]\n      })\n    });\n\n    if (!response || !response.ok) {\n      const errorText = await response.text();\n      console.error('Google Sheets API Error:', {\n        status: response?.status,\n        statusText: response?.statusText,\n        errorText,\n        url: sheetsUrl\n      });\n      return new Response(\n        JSON.stringify({ \n          success: false, \n          error: 'Google Sheetsへの書き込みに失敗しました',\n          details: {\n            status: response?.status,\n            statusText: response?.statusText,\n            message: errorText\n          }\n        }),\n        {\n          status: 500,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    const result = await response.json();\n    \n    return new Response(\n      JSON.stringify({ \n        success: true, \n        message: 'Google Sheetsに正常に保存されました',\n        updatedRange: result.updates?.updatedRange \n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n\n  } catch (error) {\n    console.error('Edge Function Error:', {\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n      cause: error.cause\n    });\n    return new Response(\n      JSON.stringify({ \n        success: false, \n        error: 'サーバーエラーが発生しました',\n        details: {\n          name: error.name,\n          message: error.message,\n          type: typeof error\n        }\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n  }\n});",
  "supabase/migrations/20250929190518_proud_sunset.sql": "/*\n  # Create vendors table\n\n  1. New Tables\n    - `vendors`\n      - `id` (uuid, primary key)\n      - `name` (text, vendor name)\n      - `category` (text, vendor category)\n      - `contact_info` (text, optional contact information)\n      - `is_active` (boolean, default true)\n      - `created_at` (timestamp)\n      - `updated_at` (timestamp)\n  \n  2. Security\n    - Enable RLS on `vendors` table\n    - Add policy for authenticated users to read vendor data\n    - Add policy for managers/admin to manage vendors\n*/\n\nCREATE TABLE IF NOT EXISTS vendors (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  name text NOT NULL,\n  category text NOT NULL CHECK (category = ANY (ARRAY[\n    'vegetable_meat',\n    'seafood', \n    'alcohol',\n    'rice',\n    'seasoning',\n    'frozen',\n    'dessert',\n    'others'\n  ])),\n  contact_info text,\n  is_active boolean DEFAULT true,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\nALTER TABLE vendors ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read vendors\"\n  ON vendors\n  FOR SELECT\n  TO authenticated\n  USING (true);\n\nCREATE POLICY \"Managers can manage vendors\"\n  ON vendors\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('manager', 'admin')\n    )\n  );\n\n-- Index for better performance\nCREATE INDEX IF NOT EXISTS vendors_category_idx ON vendors (category);\nCREATE INDEX IF NOT EXISTS vendors_active_idx ON vendors (is_active);",
  "supabase/migrations/20250929190524_nameless_summit.sql": "/*\n  # Create store vendor assignments table\n\n  1. New Tables\n    - `store_vendor_assignments`\n      - `id` (uuid, primary key)\n      - `store_id` (uuid, foreign key to stores)\n      - `vendor_id` (uuid, foreign key to vendors)\n      - `display_order` (integer, for sorting)\n      - `created_at` (timestamp)\n  \n  2. Security\n    - Enable RLS on `store_vendor_assignments` table\n    - Add policy for authenticated users to read assignments for their stores\n    - Add policy for managers/admin to manage assignments\n*/\n\nCREATE TABLE IF NOT EXISTS store_vendor_assignments (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  store_id uuid NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  vendor_id uuid NOT NULL REFERENCES vendors(id) ON DELETE CASCADE,\n  display_order integer DEFAULT 0,\n  created_at timestamptz DEFAULT now(),\n  UNIQUE(store_id, vendor_id)\n);\n\nALTER TABLE store_vendor_assignments ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read assignments for accessible stores\"\n  ON store_vendor_assignments\n  FOR SELECT\n  TO authenticated\n  USING (\n    store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Managers can manage vendor assignments\"\n  ON store_vendor_assignments\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('manager', 'admin')\n    )\n    AND store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\n-- Indexes for better performance\nCREATE INDEX IF NOT EXISTS store_vendor_assignments_store_id_idx ON store_vendor_assignments (store_id);\nCREATE INDEX IF NOT EXISTS store_vendor_assignments_vendor_id_idx ON store_vendor_assignments (vendor_id);",
  "supabase/migrations/20250929190531_heavy_manor.sql": "/*\n  # Create monthly expenses table\n\n  1. New Tables\n    - `monthly_expenses`\n      - `id` (uuid, primary key)\n      - `store_id` (uuid, foreign key to stores)\n      - `user_id` (uuid, foreign key to profiles)\n      - `month` (text, format YYYY-MM)\n      - `labor_cost_employee` (integer, employee labor cost)\n      - `labor_cost_part_time` (integer, part-time labor cost)\n      - `utilities` (integer, utility costs)\n      - `promotion` (integer, promotion costs)\n      - `cleaning` (integer, cleaning costs)\n      - `misc` (integer, miscellaneous costs)\n      - `communication` (integer, communication costs)\n      - `others` (integer, other costs)\n      - `memo` (text, optional memo)\n      - `created_at` (timestamp)\n      - `updated_at` (timestamp)\n  \n  2. Security\n    - Enable RLS on `monthly_expenses` table\n    - Add policy for users to manage expenses for assigned stores\n*/\n\nCREATE TABLE IF NOT EXISTS monthly_expenses (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  store_id uuid NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,\n  month text NOT NULL, -- Format: YYYY-MM\n  labor_cost_employee integer DEFAULT 0,\n  labor_cost_part_time integer DEFAULT 0,\n  utilities integer DEFAULT 0,\n  promotion integer DEFAULT 0,\n  cleaning integer DEFAULT 0,\n  misc integer DEFAULT 0,\n  communication integer DEFAULT 0,\n  others integer DEFAULT 0,\n  memo text DEFAULT '',\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now(),\n  UNIQUE(store_id, month)\n);\n\nALTER TABLE monthly_expenses ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read monthly expenses for assigned stores\"\n  ON monthly_expenses\n  FOR SELECT\n  TO authenticated\n  USING (\n    store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can manage monthly expenses for assigned stores\"\n  ON monthly_expenses\n  FOR ALL\n  TO authenticated\n  USING (\n    user_id = auth.uid()\n    AND store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\n-- Indexes for better performance\nCREATE INDEX IF NOT EXISTS monthly_expenses_store_month_idx ON monthly_expenses (store_id, month);\nCREATE INDEX IF NOT EXISTS monthly_expenses_user_id_idx ON monthly_expenses (user_id);",
  "supabase/migrations/20250929190539_emerald_torch.sql": "/*\n  # Create targets table\n\n  1. New Tables\n    - `targets`\n      - `id` (uuid, primary key)\n      - `store_id` (uuid, foreign key to stores)\n      - `period` (text, format YYYY-MM)\n      - `target_sales` (integer, target sales amount)\n      - `target_profit` (integer, target profit amount)\n      - `target_profit_margin` (numeric, target profit margin percentage)\n      - `created_at` (timestamp)\n      - `updated_at` (timestamp)\n  \n  2. Security\n    - Enable RLS on `targets` table\n    - Add policy for users to read targets for assigned stores\n    - Add policy for managers/admin to manage targets\n*/\n\nCREATE TABLE IF NOT EXISTS targets (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  store_id uuid NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  period text NOT NULL, -- Format: YYYY-MM\n  target_sales integer DEFAULT 0,\n  target_profit integer DEFAULT 0,\n  target_profit_margin numeric(5,2) DEFAULT 0,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now(),\n  UNIQUE(store_id, period)\n);\n\nALTER TABLE targets ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read targets for assigned stores\"\n  ON targets\n  FOR SELECT\n  TO authenticated\n  USING (\n    store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Managers can manage targets\"\n  ON targets\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('manager', 'admin')\n    )\n    AND store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\n-- Indexes for better performance\nCREATE INDEX IF NOT EXISTS targets_store_period_idx ON targets (store_id, period);\nCREATE INDEX IF NOT EXISTS targets_period_idx ON targets (period);",
  "supabase/migrations/20250929211836_amber_wildflower.sql": "/*\n  # Reset Production Database to Clean State\n\n  This migration resets all data in the production database while preserving the schema structure.\n  Current demo data (stores, reports, etc.) will only be shown in demo mode.\n\n  1. Data Reset\n     - Clear all tables while preserving structure\n     - Reset sequences and indexes\n     \n  2. Clean State\n     - Production starts with empty database\n     - Demo mode shows existing mock data\n     \n  3. Security\n     - Maintain all RLS policies\n     - Preserve user management structure\n*/\n\n-- Clear all data while preserving table structure\nTRUNCATE TABLE public.store_vendor_assignments CASCADE;\nTRUNCATE TABLE public.monthly_expenses CASCADE;\nTRUNCATE TABLE public.daily_reports CASCADE;\nTRUNCATE TABLE public.summary_data CASCADE;\nTRUNCATE TABLE public.targets CASCADE;\nTRUNCATE TABLE public.store_assignments CASCADE;\nTRUNCATE TABLE public.stores CASCADE;\nTRUNCATE TABLE public.vendors CASCADE;\nTRUNCATE TABLE public.profiles CASCADE;\n\n-- Reset any sequences if they exist\n-- Note: UUID primary keys don't use sequences, but if there are any serial columns\nDO $$\nBEGIN\n    -- Reset any auto-increment sequences if they exist\n    PERFORM setval(pg_get_serial_sequence('public.stores', 'id'), 1, false)\n    WHERE pg_get_serial_sequence('public.stores', 'id') IS NOT NULL;\nEXCEPTION\n    WHEN OTHERS THEN\n        -- Ignore if no serial sequences exist\n        NULL;\nEND $$;\n\n-- Verify tables are empty\nDO $$\nDECLARE\n    rec RECORD;\n    table_count INTEGER;\nBEGIN\n    FOR rec IN \n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_type = 'BASE TABLE'\n        AND table_name NOT LIKE '%_backup'\n    LOOP\n        EXECUTE format('SELECT COUNT(*) FROM public.%I', rec.table_name) INTO table_count;\n        RAISE NOTICE 'Table % has % rows after reset', rec.table_name, table_count;\n    END LOOP;\nEND $$;",
  "supabase/migrations/20251003040424_add_store_insert_policies.sql": "/*\n  # Add INSERT/UPDATE/DELETE policies for stores table\n\n  1. Changes\n    - Add INSERT policy for managers/admin to create stores\n    - Add UPDATE policy for managers/admin to update stores\n    - Add DELETE policy for managers/admin to delete stores (soft delete)\n\n  2. Security\n    - Only managers and admins can create/update/delete stores\n    - Staff can only read stores they are assigned to\n*/\n\n-- INSERT policy for managers/admin\nCREATE POLICY \"Managers can create stores\"\n  ON stores\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('manager', 'admin')\n    )\n  );\n\n-- UPDATE policy for managers/admin\nCREATE POLICY \"Managers can update stores\"\n  ON stores\n  FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('manager', 'admin')\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('manager', 'admin')\n    )\n  );\n\n-- DELETE policy for managers/admin (though we use soft delete with is_active)\nCREATE POLICY \"Managers can delete stores\"\n  ON stores\n  FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('manager', 'admin')\n    )\n  );\n",
  "supabase/migrations/20251003040825_fix_profiles_insert_policy.sql": "/*\n  # Fix profiles table INSERT policy\n\n  1. Changes\n    - Add INSERT policy to allow users to create their own profile during signup\n    - This fixes the issue where new users cannot complete registration\n\n  2. Security\n    - Users can only create a profile with their own auth.uid()\n    - Users cannot create profiles for other users\n*/\n\n-- INSERT policy for profiles - allows users to create their own profile\nCREATE POLICY \"Users can create own profile\"\n  ON profiles\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = id);\n",
  "supabase/migrations/20251003040841_create_missing_profiles.sql": "/*\n  # Create missing profiles for existing users\n\n  1. Changes\n    - Create profile records for all existing auth users who don't have profiles\n    - Set default role as 'admin' for the first user, 'staff' for others\n    - Use email as name if no name is available\n\n  2. Security\n    - Profiles are created with proper user IDs from auth.users\n*/\n\n-- Create profiles for existing auth users who don't have profiles\nINSERT INTO profiles (id, name, email, role)\nSELECT \n  u.id,\n  COALESCE(u.raw_user_meta_data->>'name', split_part(u.email, '@', 1)) as name,\n  u.email,\n  CASE \n    WHEN u.created_at = (SELECT MIN(created_at) FROM auth.users) THEN 'admin'::text\n    ELSE 'staff'::text\n  END as role\nFROM auth.users u\nWHERE NOT EXISTS (\n  SELECT 1 FROM profiles p WHERE p.id = u.id\n)\nON CONFLICT (id) DO NOTHING;\n",
  "supabase/migrations/20251003064153_create_daily_report_vendor_purchases.sql": "/*\n  # Create daily_report_vendor_purchases table\n\n  1. New Tables\n    - `daily_report_vendor_purchases`\n      - `id` (uuid, primary key)\n      - `daily_report_id` (uuid, foreign key to daily_reports)\n      - `vendor_id` (uuid, foreign key to vendors)\n      - `amount` (integer, purchase amount from this vendor)\n      - `created_at` (timestamp)\n  \n  2. Security\n    - Enable RLS on `daily_report_vendor_purchases` table\n    - Add policy for users to read vendor purchases for their accessible stores\n    - Add policy for users to insert/update vendor purchases for their accessible stores\n  \n  3. Notes\n    - This table stores the breakdown of purchases by vendor for each daily report\n    - The total of all vendor purchases should match the `purchase` field in daily_reports\n*/\n\nCREATE TABLE IF NOT EXISTS daily_report_vendor_purchases (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  daily_report_id uuid NOT NULL REFERENCES daily_reports(id) ON DELETE CASCADE,\n  vendor_id uuid NOT NULL REFERENCES vendors(id) ON DELETE CASCADE,\n  amount integer DEFAULT 0,\n  created_at timestamptz DEFAULT now(),\n  UNIQUE(daily_report_id, vendor_id)\n);\n\nALTER TABLE daily_report_vendor_purchases ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read vendor purchases for accessible stores\"\n  ON daily_report_vendor_purchases\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM daily_reports\n      JOIN store_assignments ON daily_reports.store_id = store_assignments.store_id\n      WHERE daily_reports.id = daily_report_vendor_purchases.daily_report_id\n      AND store_assignments.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can insert vendor purchases for accessible stores\"\n  ON daily_report_vendor_purchases\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM daily_reports\n      JOIN store_assignments ON daily_reports.store_id = store_assignments.store_id\n      WHERE daily_reports.id = daily_report_vendor_purchases.daily_report_id\n      AND store_assignments.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can update vendor purchases for accessible stores\"\n  ON daily_report_vendor_purchases\n  FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM daily_reports\n      JOIN store_assignments ON daily_reports.store_id = store_assignments.store_id\n      WHERE daily_reports.id = daily_report_vendor_purchases.daily_report_id\n      AND store_assignments.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can delete vendor purchases for accessible stores\"\n  ON daily_report_vendor_purchases\n  FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM daily_reports\n      JOIN store_assignments ON daily_reports.store_id = store_assignments.store_id\n      WHERE daily_reports.id = daily_report_vendor_purchases.daily_report_id\n      AND store_assignments.user_id = auth.uid()\n    )\n  );\n\n-- Indexes for better performance\nCREATE INDEX IF NOT EXISTS daily_report_vendor_purchases_report_id_idx ON daily_report_vendor_purchases (daily_report_id);\nCREATE INDEX IF NOT EXISTS daily_report_vendor_purchases_vendor_id_idx ON daily_report_vendor_purchases (vendor_id);",
  "supabase/migrations/20251003161608_create_base_schema.sql": "/*\n  # Create base schema for restaurant reporting system\n\n  1. New Tables\n    - `profiles`\n      - `id` (uuid, primary key, references auth.users)\n      - `name` (text, user name)\n      - `email` (text, user email)\n      - `role` (text, user role: staff/manager/admin)\n      - `created_at` (timestamp)\n      - `updated_at` (timestamp)\n    \n    - `stores`\n      - `id` (uuid, primary key)\n      - `name` (text, store name)\n      - `address` (text, store address)\n      - `manager_id` (uuid, optional, foreign key to profiles)\n      - `is_active` (boolean, default true)\n      - `created_at` (timestamp)\n      - `updated_at` (timestamp)\n    \n    - `store_assignments`\n      - `id` (uuid, primary key)\n      - `user_id` (uuid, foreign key to profiles)\n      - `store_id` (uuid, foreign key to stores)\n      - `created_at` (timestamp)\n    \n    - `daily_reports`\n      - `id` (uuid, primary key)\n      - `date` (date, report date)\n      - `store_id` (uuid, foreign key to stores)\n      - `user_id` (uuid, foreign key to profiles)\n      - `sales` (integer, daily sales)\n      - `purchase` (integer, purchase costs)\n      - `labor_cost` (integer, labor costs)\n      - `utilities` (integer, utility costs)\n      - `promotion` (integer, promotion costs)\n      - `cleaning` (integer, cleaning costs)\n      - `misc` (integer, miscellaneous costs)\n      - `communication` (integer, communication costs)\n      - `others` (integer, other costs)\n      - `customers` (integer, number of customers)\n      - `report_text` (text, optional report notes)\n      - `created_at` (timestamp)\n      - `updated_at` (timestamp)\n    \n    - `summary_data`\n      - `id` (uuid, primary key)\n      - `period_type` (text, 'daily', 'weekly', 'monthly')\n      - `period_start` (date)\n      - `period_end` (date)\n      - `store_id` (uuid, optional, null for all stores)\n      - `total_sales` (integer)\n      - `total_expenses` (integer)\n      - `gross_profit` (integer)\n      - `operating_profit` (integer)\n      - `profit_margin` (numeric)\n      - `created_at` (timestamp)\n      - `updated_at` (timestamp)\n\n  2. Security\n    - Enable RLS on all tables\n    - Add policies for authenticated users\n    - Staff can view/create reports for assigned stores\n    - Managers can view/manage reports for assigned stores\n    - Admins can view/manage all data\n*/\n\n-- Profiles table\nCREATE TABLE IF NOT EXISTS profiles (\n  id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,\n  name text NOT NULL,\n  email text NOT NULL UNIQUE,\n  role text NOT NULL CHECK (role IN ('staff', 'manager', 'admin')),\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read own profile\"\n  ON profiles FOR SELECT\n  TO authenticated\n  USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update own profile\"\n  ON profiles FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = id)\n  WITH CHECK (auth.uid() = id);\n\n-- Stores table\nCREATE TABLE IF NOT EXISTS stores (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  name text NOT NULL,\n  address text NOT NULL,\n  manager_id uuid REFERENCES profiles(id),\n  is_active boolean DEFAULT true,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\nALTER TABLE stores ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read active stores\"\n  ON stores FOR SELECT\n  TO authenticated\n  USING (is_active = true);\n\nCREATE POLICY \"Admins can manage stores\"\n  ON stores FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n  );\n\n-- Store assignments table\nCREATE TABLE IF NOT EXISTS store_assignments (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,\n  store_id uuid NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  created_at timestamptz DEFAULT now(),\n  UNIQUE(user_id, store_id)\n);\n\nALTER TABLE store_assignments ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read own store assignments\"\n  ON store_assignments FOR SELECT\n  TO authenticated\n  USING (user_id = auth.uid());\n\nCREATE POLICY \"Admins can manage store assignments\"\n  ON store_assignments FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n  );\n\n-- Daily reports table\nCREATE TABLE IF NOT EXISTS daily_reports (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  date date NOT NULL,\n  store_id uuid NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,\n  sales integer DEFAULT 0,\n  purchase integer DEFAULT 0,\n  labor_cost integer DEFAULT 0,\n  utilities integer DEFAULT 0,\n  promotion integer DEFAULT 0,\n  cleaning integer DEFAULT 0,\n  misc integer DEFAULT 0,\n  communication integer DEFAULT 0,\n  others integer DEFAULT 0,\n  customers integer DEFAULT 0,\n  report_text text DEFAULT '',\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now(),\n  UNIQUE(date, store_id)\n);\n\nALTER TABLE daily_reports ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read reports for assigned stores\"\n  ON daily_reports FOR SELECT\n  TO authenticated\n  USING (\n    store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can insert reports for assigned stores\"\n  ON daily_reports FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    user_id = auth.uid()\n    AND store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can update own reports for assigned stores\"\n  ON daily_reports FOR UPDATE\n  TO authenticated\n  USING (\n    user_id = auth.uid()\n    AND store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\n-- Summary data table\nCREATE TABLE IF NOT EXISTS summary_data (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  period_type text NOT NULL CHECK (period_type IN ('daily', 'weekly', 'monthly')),\n  period_start date NOT NULL,\n  period_end date NOT NULL,\n  store_id uuid REFERENCES stores(id) ON DELETE CASCADE,\n  total_sales integer DEFAULT 0,\n  total_expenses integer DEFAULT 0,\n  gross_profit integer DEFAULT 0,\n  operating_profit integer DEFAULT 0,\n  profit_margin numeric(5,2) DEFAULT 0,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\nALTER TABLE summary_data ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can read summary data for assigned stores\"\n  ON summary_data FOR SELECT\n  TO authenticated\n  USING (\n    store_id IS NULL\n    OR store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS profiles_email_idx ON profiles (email);\nCREATE INDEX IF NOT EXISTS profiles_role_idx ON profiles (role);\nCREATE INDEX IF NOT EXISTS stores_active_idx ON stores (is_active);\nCREATE INDEX IF NOT EXISTS store_assignments_user_idx ON store_assignments (user_id);\nCREATE INDEX IF NOT EXISTS store_assignments_store_idx ON store_assignments (store_id);\nCREATE INDEX IF NOT EXISTS daily_reports_date_idx ON daily_reports (date);\nCREATE INDEX IF NOT EXISTS daily_reports_store_idx ON daily_reports (store_id);\nCREATE INDEX IF NOT EXISTS daily_reports_user_idx ON daily_reports (user_id);\nCREATE INDEX IF NOT EXISTS summary_data_period_idx ON summary_data (period_type, period_start, period_end);\nCREATE INDEX IF NOT EXISTS summary_data_store_idx ON summary_data (store_id);\n",
  "supabase/migrations/20251004034606_fix_targets_rls_policies.sql": "/*\n  # Fix targets table RLS policies\n\n  1. Changes\n    - Drop existing restrictive policies\n    - Add separate policies for SELECT, INSERT, UPDATE, DELETE\n    - Allow admins to manage all targets\n    - Allow managers to manage targets for assigned stores only\n\n  2. Security\n    - Admins have full access to all targets\n    - Managers can only manage targets for stores they are assigned to\n    - Staff can only view targets for assigned stores\n*/\n\n-- Drop existing policies\nDROP POLICY IF EXISTS \"Users can read targets for assigned stores\" ON targets;\nDROP POLICY IF EXISTS \"Managers can manage targets\" ON targets;\n\n-- SELECT: Users can read targets for stores they have access to\nCREATE POLICY \"Users can view targets for accessible stores\"\n  ON targets\n  FOR SELECT\n  TO authenticated\n  USING (\n    -- Admins can see all targets\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n    OR\n    -- Others can see targets for assigned stores\n    store_id IN (\n      SELECT store_assignments.store_id\n      FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n    )\n  );\n\n-- INSERT: Managers and admins can create targets\nCREATE POLICY \"Managers can create targets\"\n  ON targets\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    -- Admins can create targets for any store\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n    OR\n    -- Managers can create targets for assigned stores\n    (\n      EXISTS (\n        SELECT 1 FROM profiles\n        WHERE profiles.id = auth.uid()\n        AND profiles.role = 'manager'\n      )\n      AND store_id IN (\n        SELECT store_assignments.store_id\n        FROM store_assignments\n        WHERE store_assignments.user_id = auth.uid()\n      )\n    )\n  );\n\n-- UPDATE: Managers and admins can update targets\nCREATE POLICY \"Managers can update targets\"\n  ON targets\n  FOR UPDATE\n  TO authenticated\n  USING (\n    -- Admins can update all targets\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n    OR\n    -- Managers can update targets for assigned stores\n    (\n      EXISTS (\n        SELECT 1 FROM profiles\n        WHERE profiles.id = auth.uid()\n        AND profiles.role = 'manager'\n      )\n      AND store_id IN (\n        SELECT store_assignments.store_id\n        FROM store_assignments\n        WHERE store_assignments.user_id = auth.uid()\n      )\n    )\n  )\n  WITH CHECK (\n    -- Admins can update to any store\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n    OR\n    -- Managers can update to assigned stores\n    (\n      EXISTS (\n        SELECT 1 FROM profiles\n        WHERE profiles.id = auth.uid()\n        AND profiles.role = 'manager'\n      )\n      AND store_id IN (\n        SELECT store_assignments.store_id\n        FROM store_assignments\n        WHERE store_assignments.user_id = auth.uid()\n      )\n    )\n  );\n\n-- DELETE: Managers and admins can delete targets\nCREATE POLICY \"Managers can delete targets\"\n  ON targets\n  FOR DELETE\n  TO authenticated\n  USING (\n    -- Admins can delete all targets\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n    OR\n    -- Managers can delete targets for assigned stores\n    (\n      EXISTS (\n        SELECT 1 FROM profiles\n        WHERE profiles.id = auth.uid()\n        AND profiles.role = 'manager'\n      )\n      AND store_id IN (\n        SELECT store_assignments.store_id\n        FROM store_assignments\n        WHERE store_assignments.user_id = auth.uid()\n      )\n    )\n  );\n",
  "supabase/migrations/20251004171555_create_expense_baselines.sql": "/*\n  # 参考経費（月次平均）テーブルの作成\n\n  1. 新規テーブル\n    - `expense_baselines`\n      - 店舗×月ごとに参考となる月次経費の基準値を保存\n      - 人件費、光熱費、販促費、清掃費、雑費、通信費、その他\n      - 稼働日数（日割り計算用）\n      - 日報入力時に参考KPIとして表示し、翌月の確定値入力まで利用\n\n  2. セキュリティ\n    - RLSを有効化\n    - 閲覧：担当店舗のスタッフまたは管理者\n    - 登録・更新：管理者またはマネージャー\n\n  3. 用途\n    - 日報入力時：食材費以外の経費を日割りで参考表示\n    - ダッシュボード：実績KPIと参考KPIを切り替え表示\n    - 翌月確定：monthly_expensesに確定値を入力して最終PLを作成\n*/\n\n-- 参考経費（月次平均）テーブル\nCREATE TABLE IF NOT EXISTS expense_baselines (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  store_id uuid NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  month text NOT NULL, -- YYYY-MM形式\n\n  -- 人件費\n  labor_cost_employee numeric DEFAULT 0,\n  labor_cost_part_time numeric DEFAULT 0,\n\n  -- その他経費\n  utilities numeric DEFAULT 0,\n  promotion numeric DEFAULT 0,\n  cleaning numeric DEFAULT 0,\n  misc numeric DEFAULT 0,\n  communication numeric DEFAULT 0,\n  others numeric DEFAULT 0,\n\n  -- 稼働日数（日割り計算用）\n  open_days int DEFAULT 30,\n\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now(),\n\n  -- 店舗×月で一意\n  UNIQUE(store_id, month)\n);\n\n-- RLSを有効化\nALTER TABLE expense_baselines ENABLE ROW LEVEL SECURITY;\n\n-- 閲覧ポリシー：担当店舗または管理者\nCREATE POLICY \"Users can view expense baselines for their stores\"\n  ON expense_baselines FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n    OR EXISTS (\n      SELECT 1 FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n      AND store_assignments.store_id = expense_baselines.store_id\n    )\n  );\n\n-- 登録ポリシー：管理者またはマネージャー\nCREATE POLICY \"Admins and managers can insert expense baselines\"\n  ON expense_baselines FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('admin', 'manager')\n    )\n  );\n\n-- 更新ポリシー：管理者またはマネージャー\nCREATE POLICY \"Admins and managers can update expense baselines\"\n  ON expense_baselines FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('admin', 'manager')\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('admin', 'manager')\n    )\n  );\n\n-- 削除ポリシー：管理者またはマネージャー\nCREATE POLICY \"Admins and managers can delete expense baselines\"\n  ON expense_baselines FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role IN ('admin', 'manager')\n    )\n  );\n",
  "supabase/migrations/20251004173303_add_rent_and_consumables_to_expenses.sql": "/*\n  # 経費項目の追加\n\n  1. 変更内容\n    - 賃料(rent)カラムを追加\n    - 消耗品費(consumables)カラムを追加\n    - 光熱費は水道光熱費として扱う（カラム名utilitiesはそのまま）\n\n  2. テーブル変更\n    - `daily_reports`テーブルに2つの新カラムを追加\n    - `monthly_expenses`テーブルに2つの新カラムを追加\n\n  3. セキュリティ\n    - 既存のRLSポリシーが新カラムにも適用されます\n*/\n\n-- daily_reportsテーブルに賃料と消耗品費を追加\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'daily_reports' AND column_name = 'rent'\n  ) THEN\n    ALTER TABLE daily_reports ADD COLUMN rent integer DEFAULT 0;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'daily_reports' AND column_name = 'consumables'\n  ) THEN\n    ALTER TABLE daily_reports ADD COLUMN consumables integer DEFAULT 0;\n  END IF;\nEND $$;\n\n-- monthly_expensesテーブルに賃料と消耗品費を追加\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'monthly_expenses' AND column_name = 'rent'\n  ) THEN\n    ALTER TABLE monthly_expenses ADD COLUMN rent integer DEFAULT 0;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'monthly_expenses' AND column_name = 'consumables'\n  ) THEN\n    ALTER TABLE monthly_expenses ADD COLUMN consumables integer DEFAULT 0;\n  END IF;\nEND $$;\n",
  "supabase/migrations/20251005051705_add_performance_indexes.sql": "/*\n  # データベースパフォーマンス最適化\n\n  ## 概要\n  頻繁にクエリされるカラムに対して複合インデックスを追加し、\n  クエリパフォーマンスを大幅に向上させます。\n\n  ## 追加インデックス一覧\n\n  ### daily_reports テーブル\n  1. `idx_daily_reports_store_date` - 店舗別・日付範囲クエリ用（最重要）\n  2. `idx_daily_reports_user_date` - ユーザー別レポート検索用\n  3. `idx_daily_reports_date_store` - 日付ソート + 店舗フィルタ用\n\n  ### monthly_expenses テーブル\n  4. `idx_monthly_expenses_store_month` - 店舗別・月次検索用\n  5. `idx_monthly_expenses_user_month` - ユーザー別・月次検索用\n\n  ### targets テーブル\n  6. `idx_targets_store_period` - 店舗別・期間検索用（ユニーク制約付き）\n\n  ### store_assignments テーブル\n  7. `idx_store_assignments_user` - ユーザー権限チェック高速化\n  8. `idx_store_assignments_store` - 店舗別スタッフ一覧用\n\n  ### daily_report_vendor_purchases テーブル\n  9. `idx_vendor_purchases_report` - 日報別仕入明細取得用\n  10. `idx_vendor_purchases_vendor` - 仕入先別集計用\n\n  ### store_vendor_assignments テーブル\n  11. `idx_store_vendor_store` - 店舗別仕入先一覧用\n\n  ## パフォーマンス改善見込み\n  - 日次報告検索: 50-80%高速化\n  - ダッシュボード読み込み: 60-90%高速化\n  - 店舗別集計: 70-95%高速化\n  - 権限チェック: 80-95%高速化\n\n  ## 注意事項\n  - インデックスはディスク容量を消費します（約10-15% of table size）\n  - 書き込み操作が若干遅くなります（2-5%程度）\n  - 読み取り重視のシステムのため、トレードオフは許容範囲内\n*/\n\n-- ============================================\n-- daily_reports テーブル（最重要）\n-- ============================================\n\n-- 店舗別・日付範囲クエリ用（WHERE store_id = ? AND date BETWEEN ? AND ?）\nCREATE INDEX IF NOT EXISTS idx_daily_reports_store_date \nON daily_reports(store_id, date DESC);\n\n-- ユーザー別レポート検索用（WHERE user_id = ? ORDER BY date DESC）\nCREATE INDEX IF NOT EXISTS idx_daily_reports_user_date \nON daily_reports(user_id, date DESC);\n\n-- 日付ソート + 店舗フィルタ用（ORDER BY date DESC WHERE store_id = ?）\nCREATE INDEX IF NOT EXISTS idx_daily_reports_date_store \nON daily_reports(date DESC, store_id);\n\n-- 作成日時インデックス（最近の報告を取得）\nCREATE INDEX IF NOT EXISTS idx_daily_reports_created \nON daily_reports(created_at DESC);\n\n-- ============================================\n-- monthly_expenses テーブル\n-- ============================================\n\n-- 店舗別・月次検索用（WHERE store_id = ? AND month = ?）\nCREATE INDEX IF NOT EXISTS idx_monthly_expenses_store_month \nON monthly_expenses(store_id, month);\n\n-- ユーザー別・月次検索用（WHERE user_id = ? AND month = ?）\nCREATE INDEX IF NOT EXISTS idx_monthly_expenses_user_month \nON monthly_expenses(user_id, month);\n\n-- ============================================\n-- targets テーブル\n-- ============================================\n\n-- 店舗別・期間検索用（WHERE store_id = ? AND period = ?）\n-- ユニーク制約も付与（同じ店舗・期間の目標は1つのみ）\nCREATE UNIQUE INDEX IF NOT EXISTS idx_targets_store_period \nON targets(store_id, period);\n\n-- ============================================\n-- store_assignments テーブル（権限チェック高速化）\n-- ============================================\n\n-- ユーザー権限チェック用（WHERE user_id = ?）\nCREATE INDEX IF NOT EXISTS idx_store_assignments_user \nON store_assignments(user_id);\n\n-- 店舗別スタッフ一覧用（WHERE store_id = ?）\nCREATE INDEX IF NOT EXISTS idx_store_assignments_store \nON store_assignments(store_id);\n\n-- ユーザー・店舗複合ユニーク（重複割当防止）\nCREATE UNIQUE INDEX IF NOT EXISTS idx_store_assignments_user_store \nON store_assignments(user_id, store_id);\n\n-- ============================================\n-- daily_report_vendor_purchases テーブル\n-- ============================================\n\n-- 日報別仕入明細取得用（WHERE daily_report_id = ?）\nCREATE INDEX IF NOT EXISTS idx_vendor_purchases_report \nON daily_report_vendor_purchases(daily_report_id);\n\n-- 仕入先別集計用（WHERE vendor_id = ?）\nCREATE INDEX IF NOT EXISTS idx_vendor_purchases_vendor \nON daily_report_vendor_purchases(vendor_id);\n\n-- ============================================\n-- store_vendor_assignments テーブル\n-- ============================================\n\n-- 店舗別仕入先一覧用（WHERE store_id = ? ORDER BY display_order）\nCREATE INDEX IF NOT EXISTS idx_store_vendor_store \nON store_vendor_assignments(store_id, display_order);\n\n-- 仕入先別店舗一覧用（WHERE vendor_id = ?）\nCREATE INDEX IF NOT EXISTS idx_store_vendor_vendor \nON store_vendor_assignments(vendor_id);\n\n-- 店舗・仕入先複合ユニーク（重複割当防止）\nCREATE UNIQUE INDEX IF NOT EXISTS idx_store_vendor_unique \nON store_vendor_assignments(store_id, vendor_id);\n\n-- ============================================\n-- vendors テーブル\n-- ============================================\n\n-- アクティブな仕入先検索用（WHERE is_active = true）\nCREATE INDEX IF NOT EXISTS idx_vendors_active \nON vendors(is_active, name);\n\n-- カテゴリ別検索用（WHERE category = ?）\nCREATE INDEX IF NOT EXISTS idx_vendors_category \nON vendors(category, name);\n\n-- ============================================\n-- stores テーブル\n-- ============================================\n\n-- アクティブな店舗検索用（WHERE is_active = true）\nCREATE INDEX IF NOT EXISTS idx_stores_active \nON stores(is_active, name);\n\n-- マネージャー別店舗検索用（WHERE manager_id = ?）\nCREATE INDEX IF NOT EXISTS idx_stores_manager \nON stores(manager_id);\n\n-- ============================================\n-- profiles テーブル\n-- ============================================\n\n-- メールアドレス検索用（ログイン時）\nCREATE INDEX IF NOT EXISTS idx_profiles_email \nON profiles(email);\n\n-- ロール別検索用（WHERE role = ?）\nCREATE INDEX IF NOT EXISTS idx_profiles_role \nON profiles(role);\n\n-- ============================================\n-- summary_data テーブル\n-- ============================================\n\n-- 期間タイプ・店舗・期間検索用（最も頻繁なクエリパターン）\nCREATE INDEX IF NOT EXISTS idx_summary_period_store_dates \nON summary_data(period_type, store_id, period_start, period_end);\n\n-- 期間範囲検索用（WHERE period_start >= ? AND period_end <= ?）\nCREATE INDEX IF NOT EXISTS idx_summary_date_range \nON summary_data(period_start, period_end);\n",
  "supabase/migrations/20251005052656_create_ai_chat_archive_schema.sql": "/*\n  # AIチャット履歴アーカイブ機能\n\n  ## 概要\n  AIチャットの会話履歴を保存・検索・アーカイブできる機能を追加します。\n  ページリロードしても会話が復元され、過去のやり取りを検索できます。\n\n  ## 新規テーブル\n\n  ### ai_conversations（会話テーブル）\n  - `id` (uuid, primary key) - 会話ID\n  - `user_id` (uuid) - ユーザーID\n  - `store_id` (text) - 店舗ID（'all' または 'store-xxx'）\n  - `title` (text) - 会話タイトル（初回メッセージから自動生成）\n  - `archived` (boolean) - アーカイブ済みフラグ\n  - `created_at` (timestamptz) - 作成日時\n  - `updated_at` (timestamptz) - 更新日時\n\n  ### ai_messages（メッセージテーブル）\n  - `id` (uuid, primary key) - メッセージID\n  - `conversation_id` (uuid) - 会話ID（外部キー）\n  - `role` (text) - 役割（system/user/assistant）\n  - `content` (text) - メッセージ内容\n  - `tokens` (int) - トークン数（コスト管理用）\n  - `meta` (jsonb) - メタデータ（usage情報など）\n  - `created_at` (timestamptz) - 作成日時\n\n  ## セキュリティ\n  - RLS有効化\n  - ユーザーは自分の会話とメッセージのみアクセス可能\n\n  ## パフォーマンス最適化\n  - pg_trgm拡張による全文検索インデックス\n  - 会話一覧用の複合インデックス\n  - メッセージ取得用のインデックス\n*/\n\n-- ============================================\n-- 1. 拡張機能の有効化\n-- ============================================\n\n-- 文字列検索の精度向上（日本語もtrigramでOK）\nCREATE EXTENSION IF NOT EXISTS pg_trgm;\n\n-- ============================================\n-- 2. ai_conversations テーブル\n-- ============================================\n\nCREATE TABLE IF NOT EXISTS ai_conversations (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  store_id text,\n  title text,\n  archived boolean NOT NULL DEFAULT false,\n  created_at timestamptz NOT NULL DEFAULT now(),\n  updated_at timestamptz NOT NULL DEFAULT now()\n);\n\n-- ============================================\n-- 3. ai_messages テーブル\n-- ============================================\n\nCREATE TABLE IF NOT EXISTS ai_messages (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  conversation_id uuid NOT NULL REFERENCES ai_conversations(id) ON DELETE CASCADE,\n  role text NOT NULL CHECK (role IN ('system','user','assistant')),\n  content text NOT NULL,\n  tokens int,\n  meta jsonb,\n  created_at timestamptz NOT NULL DEFAULT now()\n);\n\n-- ============================================\n-- 4. インデックス\n-- ============================================\n\n-- 会話一覧用（ユーザー別・アーカイブ別・更新日時降順）\nCREATE INDEX IF NOT EXISTS idx_ai_conversations_user \nON ai_conversations(user_id, archived, updated_at DESC);\n\n-- 会話別メッセージ取得用（会話ID・作成日時昇順）\nCREATE INDEX IF NOT EXISTS idx_ai_messages_conv \nON ai_messages(conversation_id, created_at);\n\n-- 全文検索用（trigram GINインデックス）\nCREATE INDEX IF NOT EXISTS idx_ai_messages_trgm \nON ai_messages USING gin (content gin_trgm_ops);\n\n-- ユーザー別メッセージ検索用（結合最適化）\nCREATE INDEX IF NOT EXISTS idx_ai_messages_user \nON ai_messages(conversation_id);\n\n-- ============================================\n-- 5. Row Level Security（RLS）\n-- ============================================\n\n-- ai_conversations のRLS有効化\nALTER TABLE ai_conversations ENABLE ROW LEVEL SECURITY;\n\n-- ai_messages のRLS有効化\nALTER TABLE ai_messages ENABLE ROW LEVEL SECURITY;\n\n-- ai_conversations: SELECT ポリシー\nDROP POLICY IF EXISTS \"Users can view own conversations\" ON ai_conversations;\nCREATE POLICY \"Users can view own conversations\" \nON ai_conversations\nFOR SELECT \nTO authenticated\nUSING (auth.uid() = user_id);\n\n-- ai_conversations: INSERT ポリシー\nDROP POLICY IF EXISTS \"Users can create own conversations\" ON ai_conversations;\nCREATE POLICY \"Users can create own conversations\" \nON ai_conversations\nFOR INSERT \nTO authenticated\nWITH CHECK (auth.uid() = user_id);\n\n-- ai_conversations: UPDATE ポリシー\nDROP POLICY IF EXISTS \"Users can update own conversations\" ON ai_conversations;\nCREATE POLICY \"Users can update own conversations\" \nON ai_conversations\nFOR UPDATE \nTO authenticated\nUSING (auth.uid() = user_id)\nWITH CHECK (auth.uid() = user_id);\n\n-- ai_conversations: DELETE ポリシー\nDROP POLICY IF EXISTS \"Users can delete own conversations\" ON ai_conversations;\nCREATE POLICY \"Users can delete own conversations\" \nON ai_conversations\nFOR DELETE \nTO authenticated\nUSING (auth.uid() = user_id);\n\n-- ai_messages: SELECT ポリシー\nDROP POLICY IF EXISTS \"Users can view messages in own conversations\" ON ai_messages;\nCREATE POLICY \"Users can view messages in own conversations\" \nON ai_messages\nFOR SELECT \nTO authenticated\nUSING (\n  conversation_id IN (\n    SELECT id FROM ai_conversations WHERE user_id = auth.uid()\n  )\n);\n\n-- ai_messages: INSERT ポリシー\nDROP POLICY IF EXISTS \"Users can create messages in own conversations\" ON ai_messages;\nCREATE POLICY \"Users can create messages in own conversations\" \nON ai_messages\nFOR INSERT \nTO authenticated\nWITH CHECK (\n  conversation_id IN (\n    SELECT id FROM ai_conversations WHERE user_id = auth.uid()\n  )\n);\n\n-- ============================================\n-- 6. 検索用RPC関数\n-- ============================================\n\n-- メッセージ全文検索関数\nCREATE OR REPLACE FUNCTION ai_search_messages(q text)\nRETURNS TABLE(\n  conversation_id uuid,\n  snippet text,\n  created_at timestamptz\n) \nLANGUAGE sql \nSTABLE \nSECURITY DEFINER\nSET search_path = public\nAS $$\n  SELECT \n    m.conversation_id,\n    LEFT(m.content, 160) AS snippet,\n    m.created_at\n  FROM ai_messages m\n  JOIN ai_conversations c ON c.id = m.conversation_id\n  WHERE c.user_id = auth.uid()\n    AND m.content ILIKE '%' || q || '%'\n  ORDER BY m.created_at DESC\n  LIMIT 200;\n$$;\n\n-- ============================================\n-- 7. トリガー関数（updated_at自動更新）\n-- ============================================\n\n-- updated_at自動更新トリガー関数\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- ai_conversations用トリガー\nDROP TRIGGER IF EXISTS trigger_ai_conversations_updated_at ON ai_conversations;\nCREATE TRIGGER trigger_ai_conversations_updated_at\n  BEFORE UPDATE ON ai_conversations\n  FOR EACH ROW\n  EXECUTE FUNCTION update_updated_at_column();\n\n-- ============================================\n-- 8. テーブルコメント\n-- ============================================\n\nCOMMENT ON TABLE ai_conversations IS \n'AIチャットの会話スレッド。ユーザーごとに複数の会話を保持できます。';\n\nCOMMENT ON TABLE ai_messages IS \n'AIチャットのメッセージ履歴。会話ごとにメッセージを保存します。';\n\nCOMMENT ON FUNCTION ai_search_messages IS \n'メッセージ内容を全文検索する関数。ユーザー自身の会話のみ検索対象。\n使用例: SELECT * FROM ai_search_messages(''売上分析'');';\n\n-- ============================================\n-- 9. サンプルデータ（開発用・任意）\n-- ============================================\n\n-- 開発環境用のサンプルデータ挿入は任意\n-- 本番環境では不要なので、コメントアウトしておきます\n\n/*\n-- サンプル会話を作成（テスト用）\nINSERT INTO ai_conversations (user_id, store_id, title, archived)\nSELECT \n  id, \n  'all', \n  'サンプル会話：システム概要',\n  false\nFROM auth.users \nLIMIT 1\nON CONFLICT DO NOTHING;\n*/\n",
  "supabase/migrations/20251006042332_enforce_complete_rls_policies_v2.sql": "/*\n  # 本番環境用 RLS ポリシー完全強化 v2\n\n  ## 概要\n  全テーブルでRow Level Security（RLS）を強制し、\n  本番運用に必要な厳格なアクセス制御を実装します。\n\n  ## 修正内容\n  - summary_dataのstore_id型エラーを修正\n  - 全テーブルのRLS強化\n*/\n\n-- ============================================\n-- 1. targets テーブルのRLS強化\n-- ============================================\n\nDROP POLICY IF EXISTS \"Users can view targets for assigned stores\" ON targets;\nDROP POLICY IF EXISTS \"Managers and admins can create targets\" ON targets;\nDROP POLICY IF EXISTS \"Managers and admins can update targets\" ON targets;\nDROP POLICY IF EXISTS \"Admins can delete targets\" ON targets;\n\nCREATE POLICY \"Users can view targets for assigned stores\"\nON targets FOR SELECT\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM store_assignments sa\n    WHERE sa.user_id = auth.uid()\n      AND sa.store_id = targets.store_id\n  )\n  OR EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid() AND p.role = 'admin'\n  )\n);\n\nCREATE POLICY \"Managers and admins can create targets\"\nON targets FOR INSERT\nTO authenticated\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = targets.store_id\n    )\n    OR EXISTS (\n      SELECT 1 FROM profiles p\n      WHERE p.id = auth.uid() AND p.role = 'admin'\n    )\n  )\n);\n\nCREATE POLICY \"Managers and admins can update targets\"\nON targets FOR UPDATE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = targets.store_id\n    )\n    OR EXISTS (\n      SELECT 1 FROM profiles p\n      WHERE p.id = auth.uid() AND p.role = 'admin'\n    )\n  )\n)\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n);\n\nCREATE POLICY \"Admins can delete targets\"\nON targets FOR DELETE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid() AND p.role = 'admin'\n  )\n);\n\n-- ============================================\n-- 2. summary_data テーブルのRLS強化\n-- ============================================\n\nALTER TABLE summary_data ENABLE ROW LEVEL SECURITY;\n\nDROP POLICY IF EXISTS \"Users can view summary for assigned stores\" ON summary_data;\n\nCREATE POLICY \"Users can view summary for assigned stores\"\nON summary_data FOR SELECT\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM store_assignments sa\n    WHERE sa.user_id = auth.uid()\n      AND (sa.store_id = summary_data.store_id OR summary_data.store_id IS NULL)\n  )\n  OR EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid() AND p.role = 'admin'\n  )\n);\n\n-- ============================================\n-- 3. daily_report_vendor_purchases の強化\n-- ============================================\n\nALTER TABLE daily_report_vendor_purchases ENABLE ROW LEVEL SECURITY;\n\nDROP POLICY IF EXISTS \"Users can view vendor purchases for accessible reports\" ON daily_report_vendor_purchases;\nDROP POLICY IF EXISTS \"Users can insert vendor purchases for own reports\" ON daily_report_vendor_purchases;\nDROP POLICY IF EXISTS \"Users can update own vendor purchases\" ON daily_report_vendor_purchases;\nDROP POLICY IF EXISTS \"Users can delete own vendor purchases\" ON daily_report_vendor_purchases;\n\nCREATE POLICY \"Users can view vendor purchases for accessible reports\"\nON daily_report_vendor_purchases FOR SELECT\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM daily_reports dr\n    JOIN store_assignments sa ON sa.store_id = dr.store_id\n    WHERE dr.id = daily_report_vendor_purchases.daily_report_id\n      AND sa.user_id = auth.uid()\n  )\n  OR EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid() AND p.role = 'admin'\n  )\n);\n\nCREATE POLICY \"Users can insert vendor purchases for own reports\"\nON daily_report_vendor_purchases FOR INSERT\nTO authenticated\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM daily_reports dr\n    WHERE dr.id = daily_report_vendor_purchases.daily_report_id\n      AND dr.user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"Users can update own vendor purchases\"\nON daily_report_vendor_purchases FOR UPDATE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM daily_reports dr\n    WHERE dr.id = daily_report_vendor_purchases.daily_report_id\n      AND dr.user_id = auth.uid()\n  )\n)\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM daily_reports dr\n    WHERE dr.id = daily_report_vendor_purchases.daily_report_id\n      AND dr.user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"Users can delete own vendor purchases\"\nON daily_report_vendor_purchases FOR DELETE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM daily_reports dr\n    WHERE dr.id = daily_report_vendor_purchases.daily_report_id\n      AND dr.user_id = auth.uid()\n  )\n  OR EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid() AND p.role = 'admin'\n  )\n);\n\n-- ============================================\n-- 4. RLS 状態確認ビュー\n-- ============================================\n\nCREATE OR REPLACE VIEW rls_status AS\nSELECT\n  schemaname,\n  tablename,\n  rowsecurity AS rls_enabled,\n  CASE WHEN rowsecurity THEN '✅ Enabled' ELSE '⚠️ DISABLED' END AS status\nFROM pg_tables\nWHERE schemaname = 'public'\nORDER BY tablename;\n\nCREATE OR REPLACE VIEW rls_policies AS\nSELECT\n  schemaname,\n  tablename,\n  policyname,\n  permissive,\n  roles,\n  cmd\nFROM pg_policies\nWHERE schemaname = 'public'\nORDER BY tablename, policyname;\n\nCOMMENT ON VIEW rls_status IS\n'全テーブルのRLS有効化状態を確認するビュー。\n使用例: SELECT * FROM rls_status WHERE rls_enabled = false;';\n\nCOMMENT ON VIEW rls_policies IS\n'全テーブルのRLSポリシー一覧。\n使用例: SELECT * FROM rls_policies WHERE tablename = ''daily_reports'';';\n\n-- ============================================\n-- 5. 本番環境チェックリスト\n-- ============================================\n\nDO $$\nDECLARE\n  disabled_tables TEXT;\nBEGIN\n  SELECT string_agg(tablename, ', ')\n  INTO disabled_tables\n  FROM pg_tables\n  WHERE schemaname = 'public'\n    AND rowsecurity = false;\n\n  IF disabled_tables IS NOT NULL THEN\n    RAISE WARNING '⚠️ 以下のテーブルでRLSが無効です: %', disabled_tables;\n  ELSE\n    RAISE NOTICE '✅ 全テーブルでRLSが有効化されています';\n  END IF;\nEND $$;\n",
  "supabase/migrations/20251006054119_create_is_admin_and_complete_rls.sql": "/*\n  # is_admin()関数 + 完全なRLSポリシー + パフォーマンスインデックス\n\n  ## 概要\n  1. is_admin()ヘルパー関数を作成\n  2. UPDATE/INSERTのWITH CHECKを追加\n  3. パフォーマンス用インデックスを作成\n\n  ## 重要\n  データ整合性とパフォーマンスを同時に改善します\n*/\n\n-- ============================================\n-- 1. is_admin() ヘルパー関数\n-- ============================================\n\nCREATE OR REPLACE FUNCTION public.is_admin()\nRETURNS boolean\nLANGUAGE sql\nSTABLE\nSECURITY DEFINER\nAS $$\n  SELECT EXISTS (\n    SELECT 1 FROM public.profiles\n    WHERE id = auth.uid() AND role = 'admin'\n  );\n$$;\n\nCOMMENT ON FUNCTION public.is_admin() IS\n'現在のユーザーが管理者かどうかを判定する関数。\nRLSポリシー内で使用します。';\n\n-- ============================================\n-- 2. daily_reports のポリシー修正\n-- ============================================\n\nDROP POLICY IF EXISTS \"dr_update\" ON daily_reports;\nCREATE POLICY \"dr_update\" ON daily_reports\nFOR UPDATE\nTO authenticated\nUSING (\n  is_admin() OR daily_reports.user_id = auth.uid()\n)\nWITH CHECK (\n  is_admin() OR EXISTS (\n    SELECT 1 FROM store_assignments sa\n    WHERE sa.store_id = daily_reports.store_id\n      AND sa.user_id = auth.uid()\n  )\n);\n\nDROP POLICY IF EXISTS \"dr_insert\" ON daily_reports;\nCREATE POLICY \"dr_insert\" ON daily_reports\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  is_admin() OR EXISTS (\n    SELECT 1 FROM store_assignments sa\n    WHERE sa.store_id = daily_reports.store_id\n      AND sa.user_id = auth.uid()\n  )\n);\n\n-- ============================================\n-- 3. targets のポリシー修正\n-- ============================================\n\nDROP POLICY IF EXISTS \"Managers and admins can create targets\" ON targets;\nCREATE POLICY \"Managers and admins can create targets\"\nON targets FOR INSERT\nTO authenticated\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = targets.store_id\n    )\n    OR is_admin()\n  )\n);\n\nDROP POLICY IF EXISTS \"Managers and admins can update targets\" ON targets;\nCREATE POLICY \"Managers and admins can update targets\"\nON targets FOR UPDATE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = targets.store_id\n    )\n    OR is_admin()\n  )\n)\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = targets.store_id\n    )\n    OR is_admin()\n  )\n);\n\n-- ============================================\n-- 4. monthly_expenses のポリシー修正\n-- ============================================\n\nDROP POLICY IF EXISTS \"me_select\" ON monthly_expenses;\nDROP POLICY IF EXISTS \"me_modify\" ON monthly_expenses;\n\nCREATE POLICY \"me_select\" ON monthly_expenses\nFOR SELECT\nTO authenticated\nUSING (\n  is_admin() OR EXISTS (\n    SELECT 1 FROM store_assignments sa\n    WHERE sa.store_id = monthly_expenses.store_id\n      AND sa.user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"me_insert\" ON monthly_expenses\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = monthly_expenses.store_id\n    )\n    OR is_admin()\n  )\n);\n\nCREATE POLICY \"me_update\" ON monthly_expenses\nFOR UPDATE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = monthly_expenses.store_id\n    )\n    OR is_admin()\n  )\n)\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = monthly_expenses.store_id\n    )\n    OR is_admin()\n  )\n);\n\nCREATE POLICY \"me_delete\" ON monthly_expenses\nFOR DELETE\nTO authenticated\nUSING (is_admin());\n\n-- ============================================\n-- 5. パフォーマンス用インデックス\n-- ============================================\n\nCREATE INDEX IF NOT EXISTS idx_daily_reports_store_date\n  ON daily_reports (store_id, date DESC);\n\nCREATE INDEX IF NOT EXISTS idx_daily_reports_user_date\n  ON daily_reports (user_id, date DESC);\n\nCREATE INDEX IF NOT EXISTS idx_monthly_expenses_store_month\n  ON monthly_expenses (store_id, month);\n\nCREATE INDEX IF NOT EXISTS idx_targets_store_period\n  ON targets (store_id, period);\n\nCREATE INDEX IF NOT EXISTS idx_store_assignments_user\n  ON store_assignments (user_id);\n\nCREATE INDEX IF NOT EXISTS idx_store_assignments_store\n  ON store_assignments (store_id);\n\nCREATE INDEX IF NOT EXISTS idx_drv_purchases_report\n  ON daily_report_vendor_purchases (daily_report_id);\n\n-- ============================================\n-- 6. ユニーク制約インデックス\n-- ============================================\n\nCREATE UNIQUE INDEX IF NOT EXISTS uniq_store_assignment\n  ON store_assignments (user_id, store_id);\n\nCREATE UNIQUE INDEX IF NOT EXISTS uniq_store_vendor\n  ON store_vendor_assignments (store_id, vendor_id);\n\nCREATE UNIQUE INDEX IF NOT EXISTS uniq_profiles_email\n  ON profiles (email);\n\n-- ============================================\n-- 7. 確認メッセージ\n-- ============================================\n\nDO $$\nDECLARE\n  index_count INTEGER;\n  policy_count INTEGER;\nBEGIN\n  SELECT COUNT(*) INTO index_count\n  FROM pg_indexes\n  WHERE schemaname = 'public'\n    AND indexname LIKE 'idx_%';\n\n  SELECT COUNT(*) INTO policy_count\n  FROM pg_policies\n  WHERE schemaname = 'public';\n\n  RAISE NOTICE '✅ is_admin()関数作成完了';\n  RAISE NOTICE '✅ RLSポリシー（WITH CHECK）追加完了';\n  RAISE NOTICE '✅ パフォーマンス用インデックス作成完了: % 個', index_count;\n  RAISE NOTICE '✅ RLSポリシー総数: % 個', policy_count;\nEND $$;\n",
  "supabase/migrations/20251006061737_add_profiles_insert_policy.sql": "/*\n  # プロファイルINSERTポリシー追加\n\n  ## 概要\n  新規ユーザーが自分のプロファイルを作成できるようにINSERTポリシーを追加\n\n  ## 変更内容\n  1. 認証済みユーザーが自分のIDでプロファイルを作成可能\n  2. 既存ユーザーのプロファイルを補完\n*/\n\n-- ============================================\n-- 1. INSERTポリシー追加\n-- ============================================\n\nDROP POLICY IF EXISTS \"Users can insert own profile\" ON profiles;\n\nCREATE POLICY \"Users can insert own profile\"\nON profiles FOR INSERT\nTO authenticated\nWITH CHECK (auth.uid() = id);\n\n-- ============================================\n-- 2. 既存ユーザーのプロファイル補完\n-- ============================================\n\nINSERT INTO public.profiles (id, name, email, role)\nSELECT \n  au.id,\n  COALESCE(au.raw_user_meta_data->>'name', split_part(au.email, '@', 1)),\n  au.email,\n  COALESCE((au.raw_user_meta_data->>'role')::text, 'staff')\nFROM auth.users au\nWHERE NOT EXISTS (\n  SELECT 1 FROM public.profiles p WHERE p.id = au.id\n);\n\n-- ============================================\n-- 3. 確認\n-- ============================================\n\nDO $$\nDECLARE\n  profile_count INTEGER;\n  auth_count INTEGER;\nBEGIN\n  SELECT COUNT(*) INTO profile_count FROM profiles;\n  SELECT COUNT(*) INTO auth_count FROM auth.users;\n  \n  RAISE NOTICE '✅ プロファイルINSERTポリシー作成完了';\n  RAISE NOTICE '📊 auth.users: % 人', auth_count;\n  RAISE NOTICE '📊 profiles: % 人', profile_count;\nEND $$;\n",
  "supabase/migrations/20251006081854_create_expense_baselines_table.sql": "/*\n  # Create expense_baselines table\n\n  1. New Tables\n    - `expense_baselines`\n      - `id` (uuid, primary key)\n      - `store_id` (uuid, foreign key to stores)\n      - `month` (text, format: YYYY-MM)\n      - Monthly expense baseline fields:\n        - `labor_cost_employee` (numeric)\n        - `labor_cost_part_time` (numeric)\n        - `utilities` (numeric)\n        - `promotion` (numeric)\n        - `cleaning` (numeric)\n        - `misc` (numeric)\n        - `communication` (numeric)\n        - `others` (numeric)\n      - `created_at` (timestamptz)\n      - `updated_at` (timestamptz)\n\n  2. Security\n    - Enable RLS on `expense_baselines` table\n    - Add SELECT policy for authenticated users (admin or assigned store)\n    - Add INSERT/UPDATE/DELETE policies for admin only\n\n  3. Indexes\n    - Add index on (store_id, month) for performance\n*/\n\n-- Create expense_baselines table\nCREATE TABLE IF NOT EXISTS public.expense_baselines (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  store_id uuid NOT NULL REFERENCES public.stores(id) ON DELETE CASCADE,\n  month text NOT NULL,\n  labor_cost_employee numeric NOT NULL DEFAULT 0,\n  labor_cost_part_time numeric NOT NULL DEFAULT 0,\n  utilities numeric NOT NULL DEFAULT 0,\n  promotion numeric NOT NULL DEFAULT 0,\n  cleaning numeric NOT NULL DEFAULT 0,\n  misc numeric NOT NULL DEFAULT 0,\n  communication numeric NOT NULL DEFAULT 0,\n  others numeric NOT NULL DEFAULT 0,\n  created_at timestamptz NOT NULL DEFAULT now(),\n  updated_at timestamptz NOT NULL DEFAULT now(),\n  CONSTRAINT uq_expense_baselines_store_month UNIQUE (store_id, month),\n  CONSTRAINT ck_expense_baselines_month_format CHECK (month ~ '^[0-9]{4}-[0-9]{2}$')\n);\n\n-- Create updated_at trigger function if not exists\nCREATE OR REPLACE FUNCTION public.set_updated_at()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create trigger for updated_at\nDROP TRIGGER IF EXISTS trg_expense_baselines_updated_at ON public.expense_baselines;\nCREATE TRIGGER trg_expense_baselines_updated_at\n  BEFORE UPDATE ON public.expense_baselines\n  FOR EACH ROW\n  EXECUTE FUNCTION public.set_updated_at();\n\n-- Create index for performance\nCREATE INDEX IF NOT EXISTS idx_expense_baselines_store_month\n  ON public.expense_baselines(store_id, month);\n\n-- Enable RLS\nALTER TABLE public.expense_baselines ENABLE ROW LEVEL SECURITY;\n\n-- SELECT policy: admin or assigned store users\nDROP POLICY IF EXISTS \"expense_baselines_select\" ON public.expense_baselines;\nCREATE POLICY \"expense_baselines_select\"\n  ON public.expense_baselines\n  FOR SELECT\n  TO authenticated\n  USING (\n    public.is_admin() OR\n    EXISTS (\n      SELECT 1\n      FROM public.store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = expense_baselines.store_id\n    )\n  );\n\n-- INSERT policy: admin only\nDROP POLICY IF EXISTS \"expense_baselines_ins\" ON public.expense_baselines;\nCREATE POLICY \"expense_baselines_ins\"\n  ON public.expense_baselines\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (public.is_admin());\n\n-- UPDATE policy: admin only\nDROP POLICY IF EXISTS \"expense_baselines_upd\" ON public.expense_baselines;\nCREATE POLICY \"expense_baselines_upd\"\n  ON public.expense_baselines\n  FOR UPDATE\n  TO authenticated\n  USING (public.is_admin())\n  WITH CHECK (public.is_admin());\n\n-- DELETE policy: admin only\nDROP POLICY IF EXISTS \"expense_baselines_del\" ON public.expense_baselines;\nCREATE POLICY \"expense_baselines_del\"\n  ON public.expense_baselines\n  FOR DELETE\n  TO authenticated\n  USING (public.is_admin());",
  "supabase/migrations/20251006114143_create_auto_profile_trigger.sql": "/*\n  # Auto-create Profile on User Registration\n\n  1. Changes\n    - Creates trigger function to automatically create profile when user signs up\n    - Creates trigger on auth.users table\n    - Backfills any missing profiles for existing users\n\n  2. Security\n    - Function uses SECURITY DEFINER to bypass RLS\n    - Only creates profile if it doesn't exist (ON CONFLICT DO NOTHING)\n    - Sets default role to 'staff'\n*/\n\n-- Create function to handle new user creation\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nBEGIN\n  INSERT INTO public.profiles (id, email, name, role)\n  VALUES (\n    NEW.id,\n    NEW.email,\n    COALESCE(NEW.raw_user_meta_data->>'name', SPLIT_PART(NEW.email, '@', 1)),\n    COALESCE(NEW.raw_user_meta_data->>'role', 'staff')\n  )\n  ON CONFLICT (id) DO NOTHING;\n  RETURN NEW;\nEND;\n$$;\n\n-- Drop existing trigger if it exists\nDROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;\n\n-- Create trigger to run after user insert\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW\n  EXECUTE FUNCTION public.handle_new_user();\n\n-- Backfill missing profiles for existing users\nINSERT INTO public.profiles (id, email, name, role)\nSELECT \n  u.id,\n  u.email,\n  COALESCE(u.raw_user_meta_data->>'name', SPLIT_PART(u.email, '@', 1)),\n  COALESCE(u.raw_user_meta_data->>'role', 'staff')\nFROM auth.users u\nLEFT JOIN public.profiles p ON p.id = u.id\nWHERE p.id IS NULL\nON CONFLICT (id) DO NOTHING;\n",
  "supabase/migrations/20251007025748_add_missing_columns_to_expense_baselines.sql": "/*\n  # expense_baselines テーブルに不足カラムを追加\n\n  1. 変更内容\n    - `open_days` カラムを追加（稼働日数、デフォルト30日）\n    - `rent` カラムを追加（賃料）\n    - `consumables` カラムを追加（消耗品費）\n\n  2. 理由\n    - open_days: 日割り計算に必要\n    - rent, consumables: 他のテーブルと整合性を保つため\n\n  3. セキュリティ\n    - 既存のRLSポリシーが新カラムにも適用されます\n*/\n\n-- open_days カラムを追加\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'expense_baselines' AND column_name = 'open_days'\n  ) THEN\n    ALTER TABLE expense_baselines ADD COLUMN open_days integer DEFAULT 30;\n  END IF;\nEND $$;\n\n-- rent カラムを追加\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'expense_baselines' AND column_name = 'rent'\n  ) THEN\n    ALTER TABLE expense_baselines ADD COLUMN rent numeric DEFAULT 0;\n  END IF;\nEND $$;\n\n-- consumables カラムを追加\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'expense_baselines' AND column_name = 'consumables'\n  ) THEN\n    ALTER TABLE expense_baselines ADD COLUMN consumables numeric DEFAULT 0;\n  END IF;\nEND $$;\n",
  "supabase/migrations/20251007062248_fix_store_vendor_assignments_rls.sql": "/*\n  # store_vendor_assignments RLSポリシーの修正\n\n  1. 問題点\n    - 現在のポリシーでは、管理者が店舗に割り当てられていない場合、業者割り当てができない\n    - 管理者は全店舗に対して業者割り当てができるべき\n\n  2. 修正内容\n    - INSERT/UPDATE/DELETE ポリシーで is_admin() の場合は店舗割り当てチェックをスキップ\n    - SELECT ポリシーで is_admin() の場合は全データを閲覧可能\n\n  3. セキュリティ\n    - 管理者: 全店舗の業者割り当てを管理可能\n    - マネージャー: 割り当てられた店舗のみ管理可能\n    - スタッフ: 割り当てられた店舗のみ閲覧可能\n*/\n\n-- 既存ポリシーを削除\nDROP POLICY IF EXISTS \"Users can read assignments for accessible stores\" ON store_vendor_assignments;\nDROP POLICY IF EXISTS \"Managers can manage vendor assignments\" ON store_vendor_assignments;\n\n-- SELECT: 管理者は全店舗、その他は割り当てられた店舗のみ\nCREATE POLICY \"sva_select\" ON store_vendor_assignments\nFOR SELECT\nTO authenticated\nUSING (\n  is_admin() OR EXISTS (\n    SELECT 1 FROM store_assignments sa\n    WHERE sa.store_id = store_vendor_assignments.store_id\n      AND sa.user_id = auth.uid()\n  )\n);\n\n-- INSERT: 管理者は全店舗、マネージャーは割り当てられた店舗のみ\nCREATE POLICY \"sva_insert\" ON store_vendor_assignments\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    is_admin() OR EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = store_vendor_assignments.store_id\n    )\n  )\n);\n\n-- UPDATE: 管理者は全店舗、マネージャーは割り当てられた店舗のみ\nCREATE POLICY \"sva_update\" ON store_vendor_assignments\nFOR UPDATE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    is_admin() OR EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = store_vendor_assignments.store_id\n    )\n  )\n)\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    is_admin() OR EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = store_vendor_assignments.store_id\n    )\n  )\n);\n\n-- DELETE: 管理者は全店舗、マネージャーは割り当てられた店舗のみ\nCREATE POLICY \"sva_delete\" ON store_vendor_assignments\nFOR DELETE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM profiles p\n    WHERE p.id = auth.uid()\n      AND p.role IN ('manager', 'admin')\n  )\n  AND (\n    is_admin() OR EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.user_id = auth.uid()\n        AND sa.store_id = store_vendor_assignments.store_id\n    )\n  )\n);\n",
  "supabase/migrations/20251008121020_add_cost_rate_targets_to_targets.sql": "/*\n  # Add Cost Rate Targets to Targets Table\n\n  1. Changes\n    - Add `target_cost_rate` column to `targets` table (目標原価率)\n    - Add `target_labor_rate` column to `targets` table (目標人件費率)\n    - Both columns are optional decimals with default value of 0\n    - Values are stored as percentages (e.g., 30.5 for 30.5%)\n\n  2. Notes\n    - Existing records will have default values of 0\n    - These targets will be used in KPI analysis and dashboard displays\n    - No RLS policy changes needed as policies are already in place\n*/\n\n-- Add target cost rate column (目標原価率)\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'targets' AND column_name = 'target_cost_rate'\n  ) THEN\n    ALTER TABLE targets ADD COLUMN target_cost_rate decimal DEFAULT 0;\n  END IF;\nEND $$;\n\n-- Add target labor rate column (目標人件費率)\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'targets' AND column_name = 'target_labor_rate'\n  ) THEN\n    ALTER TABLE targets ADD COLUMN target_labor_rate decimal DEFAULT 0;\n  END IF;\nEND $$;\n\n-- Add comments for clarity\nCOMMENT ON COLUMN targets.target_cost_rate IS 'Target cost of goods sold rate as percentage (e.g., 30.5 for 30.5%)';\nCOMMENT ON COLUMN targets.target_labor_rate IS 'Target labor cost rate as percentage (e.g., 25.0 for 25.0%)';",
  "supabase/migrations/20251009033828_add_daily_targets_table.sql": "/*\n  # 日別売上目標テーブルの作成\n\n  1. 新規テーブル\n    - `daily_targets`\n      - `id` (uuid, primary key) - レコードID\n      - `store_id` (uuid, foreign key) - 店舗ID\n      - `date` (date) - 対象日\n      - `target_sales` (numeric) - 売上目標金額\n      - `created_at` (timestamptz) - 作成日時\n      - `updated_at` (timestamptz) - 更新日時\n\n  2. セキュリティ\n    - RLSを有効化\n    - 管理者（admin）：全店舗の日別目標の作成・読み取り・更新・削除が可能\n    - 店長（manager）：担当店舗の日別目標の作成・読み取り・更新・削除が可能\n    - スタッフ（staff）：担当店舗の日別目標の読み取りのみ可能\n\n  3. 制約\n    - store_idとdateの複合ユニーク制約（同じ店舗・同じ日付で重複登録を防止）\n    - 外部キー制約でstoresテーブルと関連付け\n\n  4. インデックス\n    - store_idとdateの複合インデックスでクエリパフォーマンスを最適化\n*/\n\n-- テーブル作成\nCREATE TABLE IF NOT EXISTS daily_targets (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  store_id uuid NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  date date NOT NULL,\n  target_sales numeric NOT NULL DEFAULT 0,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now(),\n  CONSTRAINT daily_targets_store_date_unique UNIQUE (store_id, date)\n);\n\n-- RLSを有効化\nALTER TABLE daily_targets ENABLE ROW LEVEL SECURITY;\n\n-- インデックス作成\nCREATE INDEX IF NOT EXISTS idx_daily_targets_store_date ON daily_targets(store_id, date);\nCREATE INDEX IF NOT EXISTS idx_daily_targets_date ON daily_targets(date);\n\n-- RLSポリシー: 管理者は全ての日別目標を読み取り可能\nCREATE POLICY \"Admins can view all daily targets\"\n  ON daily_targets FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n  );\n\n-- RLSポリシー: 店長とスタッフは担当店舗の日別目標を読み取り可能\nCREATE POLICY \"Managers and staff can view their store daily targets\"\n  ON daily_targets FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM store_assignments\n      WHERE store_assignments.user_id = auth.uid()\n      AND store_assignments.store_id = daily_targets.store_id\n    )\n  );\n\n-- RLSポリシー: 管理者は全ての日別目標を作成可能\nCREATE POLICY \"Admins can create daily targets\"\n  ON daily_targets FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n  );\n\n-- RLSポリシー: 店長は担当店舗の日別目標を作成可能\nCREATE POLICY \"Managers can create their store daily targets\"\n  ON daily_targets FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      JOIN profiles p ON p.id = sa.user_id\n      WHERE sa.user_id = auth.uid()\n      AND sa.store_id = daily_targets.store_id\n      AND p.role = 'manager'\n    )\n  );\n\n-- RLSポリシー: 管理者は全ての日別目標を更新可能\nCREATE POLICY \"Admins can update daily targets\"\n  ON daily_targets FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n  );\n\n-- RLSポリシー: 店長は担当店舗の日別目標を更新可能\nCREATE POLICY \"Managers can update their store daily targets\"\n  ON daily_targets FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      JOIN profiles p ON p.id = sa.user_id\n      WHERE sa.user_id = auth.uid()\n      AND sa.store_id = daily_targets.store_id\n      AND p.role = 'manager'\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      JOIN profiles p ON p.id = sa.user_id\n      WHERE sa.user_id = auth.uid()\n      AND sa.store_id = daily_targets.store_id\n      AND p.role = 'manager'\n    )\n  );\n\n-- RLSポリシー: 管理者は全ての日別目標を削除可能\nCREATE POLICY \"Admins can delete daily targets\"\n  ON daily_targets FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n  );\n\n-- RLSポリシー: 店長は担当店舗の日別目標を削除可能\nCREATE POLICY \"Managers can delete their store daily targets\"\n  ON daily_targets FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      JOIN profiles p ON p.id = sa.user_id\n      WHERE sa.user_id = auth.uid()\n      AND sa.store_id = daily_targets.store_id\n      AND p.role = 'manager'\n    )\n  );\n",
  "supabase/migrations/20251009044215_create_ai_report_system_tables.sql": "/*\n  # AI Automated Report Generation System\n\n  ## Overview\n  This migration creates the infrastructure for AI-powered automated weekly and monthly report generation.\n  The system will automatically analyze business data and generate comprehensive reports with insights.\n\n  ## New Tables\n  \n  ### 1. `ai_generated_reports`\n  Stores AI-generated analysis reports\n  - `id` (uuid, primary key) - Unique report identifier\n  - `store_id` (uuid, nullable) - Store ID if report is store-specific, null for all-store reports\n  - `report_type` (text) - Type: 'weekly' or 'monthly'\n  - `period_start` (date) - Start date of reporting period\n  - `period_end` (date) - End date of reporting period\n  - `title` (text) - Report title\n  - `summary` (text) - Executive summary section\n  - `analysis_content` (jsonb) - Detailed analysis sections in structured format\n  - `key_insights` (text[]) - Array of key insights/findings\n  - `recommendations` (text[]) - Array of actionable recommendations\n  - `metrics` (jsonb) - Calculated metrics (sales, profit, growth rates, etc.)\n  - `generated_by` (text) - AI model used for generation\n  - `generated_at` (timestamptz) - When the report was generated\n  - `created_at` (timestamptz) - Record creation timestamp\n\n  ### 2. `report_schedules`\n  Manages automatic report generation schedules\n  - `id` (uuid, primary key) - Schedule identifier\n  - `report_type` (text) - 'weekly' or 'monthly'\n  - `store_id` (uuid, nullable) - Store ID for store-specific reports, null for all stores\n  - `is_enabled` (boolean) - Whether the schedule is active\n  - `cron_expression` (text) - Cron expression for scheduling\n  - `last_run_at` (timestamptz, nullable) - Last successful generation time\n  - `next_run_at` (timestamptz, nullable) - Scheduled next run time\n  - `notification_emails` (text[]) - Email addresses to notify on completion\n  - `created_at` (timestamptz) - Record creation timestamp\n  - `updated_at` (timestamptz) - Last update timestamp\n\n  ### 3. `report_generation_logs`\n  Tracks report generation history and status\n  - `id` (uuid, primary key) - Log entry identifier\n  - `schedule_id` (uuid, nullable) - Related schedule if auto-generated\n  - `report_id` (uuid, nullable) - Generated report ID if successful\n  - `report_type` (text) - Type of report attempted\n  - `store_id` (uuid, nullable) - Store ID if applicable\n  - `status` (text) - 'success', 'failed', or 'in_progress'\n  - `started_at` (timestamptz) - Generation start time\n  - `completed_at` (timestamptz, nullable) - Generation completion time\n  - `error_message` (text, nullable) - Error details if failed\n  - `data_summary` (jsonb) - Summary of data analyzed\n  - `created_at` (timestamptz) - Record creation timestamp\n\n  ## Security\n  - Enable RLS on all tables\n  - Admin users can view all reports and manage schedules\n  - Store managers can view reports for their assigned stores\n  - Staff can view reports for their store\n\n  ## Indexes\n  - Performance indexes on frequently queried columns\n  - Composite indexes for date range queries\n\n  ## Notes\n  - Reports are generated automatically based on schedules\n  - Manual generation is also supported\n  - All reports are versioned by generation timestamp\n  - Historical reports are preserved for trend analysis\n*/\n\n-- Create ai_generated_reports table\nCREATE TABLE IF NOT EXISTS ai_generated_reports (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  store_id uuid REFERENCES stores(id) ON DELETE CASCADE,\n  report_type text NOT NULL CHECK (report_type IN ('weekly', 'monthly')),\n  period_start date NOT NULL,\n  period_end date NOT NULL,\n  title text NOT NULL,\n  summary text NOT NULL,\n  analysis_content jsonb NOT NULL DEFAULT '{}',\n  key_insights text[] NOT NULL DEFAULT '{}',\n  recommendations text[] NOT NULL DEFAULT '{}',\n  metrics jsonb NOT NULL DEFAULT '{}',\n  generated_by text NOT NULL DEFAULT 'gpt-4o-mini',\n  generated_at timestamptz NOT NULL DEFAULT now(),\n  created_at timestamptz NOT NULL DEFAULT now()\n);\n\n-- Create report_schedules table\nCREATE TABLE IF NOT EXISTS report_schedules (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  report_type text NOT NULL CHECK (report_type IN ('weekly', 'monthly')),\n  store_id uuid REFERENCES stores(id) ON DELETE CASCADE,\n  is_enabled boolean NOT NULL DEFAULT true,\n  cron_expression text NOT NULL,\n  last_run_at timestamptz,\n  next_run_at timestamptz,\n  notification_emails text[] NOT NULL DEFAULT '{}',\n  created_at timestamptz NOT NULL DEFAULT now(),\n  updated_at timestamptz NOT NULL DEFAULT now()\n);\n\n-- Create report_generation_logs table\nCREATE TABLE IF NOT EXISTS report_generation_logs (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  schedule_id uuid REFERENCES report_schedules(id) ON DELETE SET NULL,\n  report_id uuid REFERENCES ai_generated_reports(id) ON DELETE SET NULL,\n  report_type text NOT NULL CHECK (report_type IN ('weekly', 'monthly')),\n  store_id uuid REFERENCES stores(id) ON DELETE CASCADE,\n  status text NOT NULL CHECK (status IN ('success', 'failed', 'in_progress')) DEFAULT 'in_progress',\n  started_at timestamptz NOT NULL DEFAULT now(),\n  completed_at timestamptz,\n  error_message text,\n  data_summary jsonb DEFAULT '{}',\n  created_at timestamptz NOT NULL DEFAULT now()\n);\n\n-- Create indexes for performance\nCREATE INDEX IF NOT EXISTS idx_ai_reports_store_type_period ON ai_generated_reports(store_id, report_type, period_start DESC);\nCREATE INDEX IF NOT EXISTS idx_ai_reports_generated_at ON ai_generated_reports(generated_at DESC);\nCREATE INDEX IF NOT EXISTS idx_report_schedules_enabled ON report_schedules(is_enabled, next_run_at) WHERE is_enabled = true;\nCREATE INDEX IF NOT EXISTS idx_report_logs_status_started ON report_generation_logs(status, started_at DESC);\n\n-- Enable Row Level Security\nALTER TABLE ai_generated_reports ENABLE ROW LEVEL SECURITY;\nALTER TABLE report_schedules ENABLE ROW LEVEL SECURITY;\nALTER TABLE report_generation_logs ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies for ai_generated_reports\n\n-- Admins can view all reports\nCREATE POLICY \"Admins can view all AI reports\"\n  ON ai_generated_reports FOR SELECT\n  TO authenticated\n  USING (public.is_admin());\n\n-- Managers can view reports for their stores\nCREATE POLICY \"Managers can view reports for their stores\"\n  ON ai_generated_reports FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'manager'\n      AND (\n        ai_generated_reports.store_id IS NULL\n        OR ai_generated_reports.store_id IN (\n          SELECT id FROM stores WHERE manager_id = auth.uid()\n        )\n      )\n    )\n  );\n\n-- Staff can view reports for their store\nCREATE POLICY \"Staff can view reports for their store\"\n  ON ai_generated_reports FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM daily_reports\n      WHERE daily_reports.user_id = auth.uid()\n      AND daily_reports.store_id = ai_generated_reports.store_id\n    )\n  );\n\n-- Admins can insert reports\nCREATE POLICY \"Admins can insert AI reports\"\n  ON ai_generated_reports FOR INSERT\n  TO authenticated\n  WITH CHECK (public.is_admin());\n\n-- RLS Policies for report_schedules\n\n-- Admins can manage all schedules\nCREATE POLICY \"Admins can view all schedules\"\n  ON report_schedules FOR SELECT\n  TO authenticated\n  USING (public.is_admin());\n\nCREATE POLICY \"Admins can insert schedules\"\n  ON report_schedules FOR INSERT\n  TO authenticated\n  WITH CHECK (public.is_admin());\n\nCREATE POLICY \"Admins can update schedules\"\n  ON report_schedules FOR UPDATE\n  TO authenticated\n  USING (public.is_admin())\n  WITH CHECK (public.is_admin());\n\nCREATE POLICY \"Admins can delete schedules\"\n  ON report_schedules FOR DELETE\n  TO authenticated\n  USING (public.is_admin());\n\n-- RLS Policies for report_generation_logs\n\n-- Admins can view all logs\nCREATE POLICY \"Admins can view all generation logs\"\n  ON report_generation_logs FOR SELECT\n  TO authenticated\n  USING (public.is_admin());\n\n-- Admins can insert logs\nCREATE POLICY \"Admins can insert generation logs\"\n  ON report_generation_logs FOR INSERT\n  TO authenticated\n  WITH CHECK (public.is_admin());\n\n-- Admins can update logs\nCREATE POLICY \"Admins can update generation logs\"\n  ON report_generation_logs FOR UPDATE\n  TO authenticated\n  USING (public.is_admin())\n  WITH CHECK (public.is_admin());\n",
  "supabase/migrations/20251009050405_add_ai_reports_delete_policy.sql": "/*\n  # Add DELETE policy for AI Generated Reports\n\n  ## Changes\n  This migration adds a DELETE policy to the ai_generated_reports table.\n\n  ## Security\n  - Only admins can delete AI generated reports\n  - This prevents accidental or unauthorized deletion of reports\n\n  ## Policy Details\n  - Policy Name: \"Admins can delete AI reports\"\n  - Operation: DELETE\n  - Role: authenticated\n  - Condition: User must be an admin (verified via is_admin() function)\n*/\n\n-- Add DELETE policy for ai_generated_reports\nCREATE POLICY \"Admins can delete AI reports\"\n  ON ai_generated_reports FOR DELETE\n  TO authenticated\n  USING (public.is_admin());",
  "supabase/migrations/20251009115151_add_shareable_link_to_reports.sql": "/*\n  # Add Shareable Link Support to AI Reports\n\n  ## Changes\n  1. Add `share_token` column to ai_generated_reports table\n    - Unique token for public access\n    - Used to generate shareable links\n  \n  2. Add `is_public` flag\n    - Controls whether report can be accessed via share link\n  \n  3. Create public access policy\n    - Allows unauthenticated access via valid share_token\n\n  ## Security\n  - Share tokens are randomly generated UUIDs\n  - Reports are only accessible with valid token and is_public = true\n  - Tokens can be regenerated to revoke access\n*/\n\n-- Add share_token and is_public columns\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns \n    WHERE table_name = 'ai_generated_reports' AND column_name = 'share_token'\n  ) THEN\n    ALTER TABLE ai_generated_reports \n    ADD COLUMN share_token uuid DEFAULT gen_random_uuid() UNIQUE;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns \n    WHERE table_name = 'ai_generated_reports' AND column_name = 'is_public'\n  ) THEN\n    ALTER TABLE ai_generated_reports \n    ADD COLUMN is_public boolean DEFAULT false;\n  END IF;\nEND $$;\n\n-- Create index for share_token lookups\nCREATE INDEX IF NOT EXISTS idx_ai_reports_share_token \n  ON ai_generated_reports(share_token) \n  WHERE is_public = true;\n\n-- Add policy for public access via share token\nCREATE POLICY \"Public can view reports with valid share token\"\n  ON ai_generated_reports FOR SELECT\n  TO anon\n  USING (\n    is_public = true \n    AND share_token IS NOT NULL\n  );\n",
  "supabase/migrations/20251009115807_add_ai_reports_update_policies.sql": "/*\n  # Add UPDATE policies for AI Reports\n\n  ## Changes\n  1. Add UPDATE policy for admins to update all AI reports\n  2. Add UPDATE policy for managers to update reports for their stores\n\n  ## Security\n  - Admins can update all reports\n  - Managers can update reports for stores they manage\n  - Staff cannot update reports (read-only access)\n*/\n\n-- Admins can update all AI reports\nCREATE POLICY \"Admins can update AI reports\"\n  ON ai_generated_reports FOR UPDATE\n  TO authenticated\n  USING (public.is_admin())\n  WITH CHECK (public.is_admin());\n\n-- Managers can update reports for their stores\nCREATE POLICY \"Managers can update reports for their stores\"\n  ON ai_generated_reports FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'manager'\n      AND (\n        ai_generated_reports.store_id IS NULL\n        OR ai_generated_reports.store_id IN (\n          SELECT id FROM stores WHERE manager_id = auth.uid()\n        )\n      )\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'manager'\n      AND (\n        ai_generated_reports.store_id IS NULL\n        OR ai_generated_reports.store_id IN (\n          SELECT id FROM stores WHERE manager_id = auth.uid()\n        )\n      )\n    )\n  );\n",
  "supabase/migrations/20251009120056_fix_ai_reports_policies_conflict.sql": "/*\n  # Fix AI Reports Policy Conflicts\n\n  ## Changes\n  1. Drop existing UPDATE policies to avoid conflicts\n  2. Recreate simplified UPDATE policies\n  3. Ensure proper policy evaluation order\n\n  ## Security\n  - Maintains same security levels\n  - Admins and managers can update reports\n  - No change to SELECT, INSERT, DELETE policies\n*/\n\n-- Drop existing UPDATE policies if they exist\nDO $$ \nBEGIN\n  DROP POLICY IF EXISTS \"Admins can update AI reports\" ON ai_generated_reports;\n  DROP POLICY IF EXISTS \"Managers can update reports for their stores\" ON ai_generated_reports;\nEXCEPTION\n  WHEN undefined_object THEN NULL;\nEND $$;\n\n-- Create single UPDATE policy for admins and managers\nCREATE POLICY \"Authenticated users can update their accessible reports\"\n  ON ai_generated_reports FOR UPDATE\n  TO authenticated\n  USING (\n    -- Admins can update all reports\n    public.is_admin()\n    OR\n    -- Managers can update reports for their stores\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'manager'\n      AND (\n        ai_generated_reports.store_id IS NULL\n        OR ai_generated_reports.store_id IN (\n          SELECT id FROM stores WHERE manager_id = auth.uid()\n        )\n      )\n    )\n  )\n  WITH CHECK (\n    -- Admins can update all reports\n    public.is_admin()\n    OR\n    -- Managers can update reports for their stores\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'manager'\n      AND (\n        ai_generated_reports.store_id IS NULL\n        OR ai_generated_reports.store_id IN (\n          SELECT id FROM stores WHERE manager_id = auth.uid()\n        )\n      )\n    )\n  );\n",
  "supabase/migrations/20251009130000_create_ai_usage_limits.sql": "/*\n  # AI使用制限システム\n\n  ## 概要\n  AIチャット機能の1日あたりの使用回数を制限するシステムを実装します。\n  ロール別に異なる上限を設定し、コスト管理と適切な利用を促進します。\n\n  ## 新規テーブル\n\n  ### ai_usage_tracking（使用回数追跡テーブル）\n  - `id` (uuid, primary key) - レコードID\n  - `user_id` (uuid, 外部キー) - ユーザーID\n  - `usage_date` (date) - 使用日（日本時間）\n  - `request_count` (integer) - リクエスト回数\n  - `created_at` (timestamptz) - 作成日時\n  - `updated_at` (timestamptz) - 更新日時\n  - ユニーク制約: (user_id, usage_date)\n\n  ### ai_usage_settings（使用制限設定テーブル）\n  - `id` (uuid, primary key) - レコードID\n  - `role` (text) - ロール（admin/manager/staff）\n  - `daily_limit` (integer) - 1日の上限（-1は無制限）\n  - `enabled` (boolean) - 制限の有効/無効\n  - `created_at` (timestamptz) - 作成日時\n  - `updated_at` (timestamptz) - 更新日時\n  - ユニーク制約: role\n\n  ## RPC関数\n\n  ### check_and_increment_usage\n  ユーザーの使用回数をチェックし、制限内であればカウントを増加させます。\n\n  ### get_user_usage_status\n  ユーザーの現在の使用状況（使用回数、上限、残り）を取得します。\n\n  ### reset_user_daily_usage\n  特定ユーザーの当日の使用回数をリセットします（管理者専用）。\n\n  ## セキュリティ\n  - RLS有効化\n  - ユーザーは自分の使用状況のみ参照可能\n  - 設定は全員が参照可能、更新は管理者のみ\n  - RPC関数はSECURITY DEFINERで実装\n\n  ## パフォーマンス最適化\n  - 複合インデックス: (user_id, usage_date)\n  - ロールインデックス\n  - 自動クリーンアップ（8日以上前のデータ削除）\n*/\n\n-- ============================================\n-- 1. ai_usage_tracking テーブル\n-- ============================================\n\nCREATE TABLE IF NOT EXISTS ai_usage_tracking (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  usage_date date NOT NULL DEFAULT (now() AT TIME ZONE 'Asia/Tokyo')::date,\n  request_count integer NOT NULL DEFAULT 0,\n  created_at timestamptz NOT NULL DEFAULT now(),\n  updated_at timestamptz NOT NULL DEFAULT now(),\n  CONSTRAINT unique_user_date UNIQUE (user_id, usage_date)\n);\n\n-- ============================================\n-- 2. ai_usage_settings テーブル\n-- ============================================\n\nCREATE TABLE IF NOT EXISTS ai_usage_settings (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  role text NOT NULL CHECK (role IN ('admin', 'manager', 'staff')),\n  daily_limit integer NOT NULL DEFAULT 20,\n  enabled boolean NOT NULL DEFAULT true,\n  created_at timestamptz NOT NULL DEFAULT now(),\n  updated_at timestamptz NOT NULL DEFAULT now(),\n  CONSTRAINT unique_role UNIQUE (role)\n);\n\n-- ============================================\n-- 3. 初期設定データの投入\n-- ============================================\n\nINSERT INTO ai_usage_settings (role, daily_limit, enabled)\nVALUES\n  ('admin', -1, true),      -- 無制限\n  ('manager', 20, true),    -- 20回/日\n  ('staff', 5, true)        -- 5回/日\nON CONFLICT (role) DO NOTHING;\n\n-- ============================================\n-- 4. インデックス\n-- ============================================\n\n-- 使用回数取得用の複合インデックス\nCREATE INDEX IF NOT EXISTS idx_usage_tracking_user_date\nON ai_usage_tracking(user_id, usage_date);\n\n-- ロール別設定取得用のインデックス\nCREATE INDEX IF NOT EXISTS idx_usage_settings_role\nON ai_usage_settings(role);\n\n-- ============================================\n-- 5. Row Level Security（RLS）\n-- ============================================\n\n-- ai_usage_tracking のRLS有効化\nALTER TABLE ai_usage_tracking ENABLE ROW LEVEL SECURITY;\n\n-- ai_usage_settings のRLS有効化\nALTER TABLE ai_usage_settings ENABLE ROW LEVEL SECURITY;\n\n-- ai_usage_tracking: SELECT ポリシー（自分のデータのみ参照可能）\nDROP POLICY IF EXISTS \"Users can view own usage tracking\" ON ai_usage_tracking;\nCREATE POLICY \"Users can view own usage tracking\"\nON ai_usage_tracking\nFOR SELECT\nTO authenticated\nUSING (auth.uid() = user_id);\n\n-- ai_usage_tracking: INSERT ポリシー（自分のデータのみ作成可能）\nDROP POLICY IF EXISTS \"Users can create own usage tracking\" ON ai_usage_tracking;\nCREATE POLICY \"Users can create own usage tracking\"\nON ai_usage_tracking\nFOR INSERT\nTO authenticated\nWITH CHECK (auth.uid() = user_id);\n\n-- ai_usage_tracking: UPDATE ポリシー（自分のデータのみ更新可能）\nDROP POLICY IF EXISTS \"Users can update own usage tracking\" ON ai_usage_tracking;\nCREATE POLICY \"Users can update own usage tracking\"\nON ai_usage_tracking\nFOR UPDATE\nTO authenticated\nUSING (auth.uid() = user_id)\nWITH CHECK (auth.uid() = user_id);\n\n-- ai_usage_settings: SELECT ポリシー（全員が参照可能）\nDROP POLICY IF EXISTS \"Anyone can view usage settings\" ON ai_usage_settings;\nCREATE POLICY \"Anyone can view usage settings\"\nON ai_usage_settings\nFOR SELECT\nTO authenticated\nUSING (true);\n\n-- ai_usage_settings: UPDATE ポリシー（管理者のみ更新可能）\nDROP POLICY IF EXISTS \"Admins can update usage settings\" ON ai_usage_settings;\nCREATE POLICY \"Admins can update usage settings\"\nON ai_usage_settings\nFOR UPDATE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM profiles\n    WHERE profiles.id = auth.uid() AND profiles.role = 'admin'\n  )\n)\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles\n    WHERE profiles.id = auth.uid() AND profiles.role = 'admin'\n  )\n);\n\n-- ============================================\n-- 6. RPC関数: check_and_increment_usage\n-- ============================================\n\nCREATE OR REPLACE FUNCTION check_and_increment_usage(p_user_id uuid)\nRETURNS jsonb\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  v_current_date date;\n  v_current_count integer;\n  v_user_role text;\n  v_daily_limit integer;\n  v_enabled boolean;\n  v_remaining integer;\n  v_is_allowed boolean;\nBEGIN\n  -- 日本時間の現在日付を取得\n  v_current_date := (now() AT TIME ZONE 'Asia/Tokyo')::date;\n\n  -- ユーザーのロールを取得\n  SELECT role INTO v_user_role\n  FROM profiles\n  WHERE id = p_user_id;\n\n  IF v_user_role IS NULL THEN\n    v_user_role := 'staff'; -- デフォルト\n  END IF;\n\n  -- ロール別の上限設定を取得\n  SELECT daily_limit, enabled INTO v_daily_limit, v_enabled\n  FROM ai_usage_settings\n  WHERE role = v_user_role;\n\n  IF v_daily_limit IS NULL THEN\n    v_daily_limit := 5; -- デフォルト\n  END IF;\n\n  IF v_enabled IS NULL THEN\n    v_enabled := true;\n  END IF;\n\n  -- 制限が無効の場合は常に許可\n  IF NOT v_enabled THEN\n    RETURN jsonb_build_object(\n      'allowed', true,\n      'current_count', 0,\n      'daily_limit', -1,\n      'remaining', -1,\n      'message', '制限は無効化されています'\n    );\n  END IF;\n\n  -- 管理者（無制限）の場合\n  IF v_daily_limit = -1 THEN\n    RETURN jsonb_build_object(\n      'allowed', true,\n      'current_count', 0,\n      'daily_limit', -1,\n      'remaining', -1,\n      'message', '無制限'\n    );\n  END IF;\n\n  -- 現在の使用回数を取得または初期化\n  SELECT request_count INTO v_current_count\n  FROM ai_usage_tracking\n  WHERE user_id = p_user_id AND usage_date = v_current_date;\n\n  IF v_current_count IS NULL THEN\n    v_current_count := 0;\n  END IF;\n\n  -- 制限チェック\n  v_is_allowed := v_current_count < v_daily_limit;\n\n  -- 許可されている場合はカウントを増加\n  IF v_is_allowed THEN\n    INSERT INTO ai_usage_tracking (user_id, usage_date, request_count)\n    VALUES (p_user_id, v_current_date, 1)\n    ON CONFLICT (user_id, usage_date)\n    DO UPDATE SET\n      request_count = ai_usage_tracking.request_count + 1,\n      updated_at = now();\n\n    v_current_count := v_current_count + 1;\n  END IF;\n\n  v_remaining := GREATEST(0, v_daily_limit - v_current_count);\n\n  RETURN jsonb_build_object(\n    'allowed', v_is_allowed,\n    'current_count', v_current_count,\n    'daily_limit', v_daily_limit,\n    'remaining', v_remaining,\n    'message', CASE\n      WHEN v_is_allowed THEN '利用可能'\n      ELSE '本日の利用上限に達しました'\n    END\n  );\nEND;\n$$;\n\n-- ============================================\n-- 7. RPC関数: get_user_usage_status\n-- ============================================\n\nCREATE OR REPLACE FUNCTION get_user_usage_status(p_user_id uuid)\nRETURNS jsonb\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  v_current_date date;\n  v_current_count integer;\n  v_user_role text;\n  v_daily_limit integer;\n  v_enabled boolean;\n  v_remaining integer;\n  v_reset_at timestamptz;\nBEGIN\n  -- 日本時間の現在日付を取得\n  v_current_date := (now() AT TIME ZONE 'Asia/Tokyo')::date;\n\n  -- 次のリセット時刻（翌日の午前0時 JST）\n  v_reset_at := (v_current_date + interval '1 day') AT TIME ZONE 'Asia/Tokyo';\n\n  -- ユーザーのロールを取得\n  SELECT role INTO v_user_role\n  FROM profiles\n  WHERE id = p_user_id;\n\n  IF v_user_role IS NULL THEN\n    v_user_role := 'staff';\n  END IF;\n\n  -- ロール別の上限設定を取得\n  SELECT daily_limit, enabled INTO v_daily_limit, v_enabled\n  FROM ai_usage_settings\n  WHERE role = v_user_role;\n\n  IF v_daily_limit IS NULL THEN\n    v_daily_limit := 5;\n  END IF;\n\n  IF v_enabled IS NULL THEN\n    v_enabled := true;\n  END IF;\n\n  -- 制限が無効の場合\n  IF NOT v_enabled THEN\n    RETURN jsonb_build_object(\n      'current_count', 0,\n      'daily_limit', -1,\n      'remaining', -1,\n      'reset_at', v_reset_at,\n      'is_limited', false\n    );\n  END IF;\n\n  -- 管理者（無制限）の場合\n  IF v_daily_limit = -1 THEN\n    RETURN jsonb_build_object(\n      'current_count', 0,\n      'daily_limit', -1,\n      'remaining', -1,\n      'reset_at', v_reset_at,\n      'is_limited', false\n    );\n  END IF;\n\n  -- 現在の使用回数を取得\n  SELECT request_count INTO v_current_count\n  FROM ai_usage_tracking\n  WHERE user_id = p_user_id AND usage_date = v_current_date;\n\n  IF v_current_count IS NULL THEN\n    v_current_count := 0;\n  END IF;\n\n  v_remaining := GREATEST(0, v_daily_limit - v_current_count);\n\n  RETURN jsonb_build_object(\n    'current_count', v_current_count,\n    'daily_limit', v_daily_limit,\n    'remaining', v_remaining,\n    'reset_at', v_reset_at,\n    'is_limited', v_current_count >= v_daily_limit\n  );\nEND;\n$$;\n\n-- ============================================\n-- 8. RPC関数: reset_user_daily_usage（管理者専用）\n-- ============================================\n\nCREATE OR REPLACE FUNCTION reset_user_daily_usage(p_user_id uuid)\nRETURNS jsonb\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  v_current_date date;\n  v_is_admin boolean;\nBEGIN\n  -- 実行者が管理者かチェック\n  SELECT EXISTS (\n    SELECT 1 FROM profiles\n    WHERE id = auth.uid() AND role = 'admin'\n  ) INTO v_is_admin;\n\n  IF NOT v_is_admin THEN\n    RETURN jsonb_build_object(\n      'success', false,\n      'message', '管理者権限が必要です'\n    );\n  END IF;\n\n  -- 日本時間の現在日付を取得\n  v_current_date := (now() AT TIME ZONE 'Asia/Tokyo')::date;\n\n  -- 当日のカウントをリセット\n  UPDATE ai_usage_tracking\n  SET request_count = 0, updated_at = now()\n  WHERE user_id = p_user_id AND usage_date = v_current_date;\n\n  RETURN jsonb_build_object(\n    'success', true,\n    'message', '使用回数をリセットしました'\n  );\nEND;\n$$;\n\n-- ============================================\n-- 9. クリーンアップ関数（古いデータの削除）\n-- ============================================\n\nCREATE OR REPLACE FUNCTION cleanup_old_usage_data()\nRETURNS void\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nBEGIN\n  -- 8日以上前のデータを削除\n  DELETE FROM ai_usage_tracking\n  WHERE usage_date < (now() AT TIME ZONE 'Asia/Tokyo')::date - interval '8 days';\nEND;\n$$;\n\n-- ============================================\n-- 10. トリガー関数（updated_at自動更新）\n-- ============================================\n\n-- updated_at自動更新トリガー関数（既存の場合は再利用）\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- ai_usage_tracking用トリガー\nDROP TRIGGER IF EXISTS trigger_usage_tracking_updated_at ON ai_usage_tracking;\nCREATE TRIGGER trigger_usage_tracking_updated_at\n  BEFORE UPDATE ON ai_usage_tracking\n  FOR EACH ROW\n  EXECUTE FUNCTION update_updated_at_column();\n\n-- ai_usage_settings用トリガー\nDROP TRIGGER IF EXISTS trigger_usage_settings_updated_at ON ai_usage_settings;\nCREATE TRIGGER trigger_usage_settings_updated_at\n  BEFORE UPDATE ON ai_usage_settings\n  FOR EACH ROW\n  EXECUTE FUNCTION update_updated_at_column();\n\n-- ============================================\n-- 11. テーブルコメント\n-- ============================================\n\nCOMMENT ON TABLE ai_usage_tracking IS\n'AIチャット機能の使用回数を追跡するテーブル。ユーザーごと、日付ごとに使用回数を記録します。';\n\nCOMMENT ON TABLE ai_usage_settings IS\n'ロール別のAI使用制限設定テーブル。admin（無制限）、manager（20回/日）、staff（5回/日）を管理します。';\n\nCOMMENT ON FUNCTION check_and_increment_usage IS\n'ユーザーの使用回数をチェックし、制限内であればカウントを増加させる関数。\n使用例: SELECT check_and_increment_usage(auth.uid());';\n\nCOMMENT ON FUNCTION get_user_usage_status IS\n'ユーザーの現在の使用状況を取得する関数。\n使用例: SELECT get_user_usage_status(auth.uid());';\n\nCOMMENT ON FUNCTION reset_user_daily_usage IS\n'特定ユーザーの当日の使用回数をリセットする関数（管理者専用）。\n使用例: SELECT reset_user_daily_usage(''user-uuid-here'');';\n\nCOMMENT ON FUNCTION cleanup_old_usage_data IS\n'8日以上前の使用履歴データを削除するクリーンアップ関数。\n使用例: SELECT cleanup_old_usage_data();';\n",
  "supabase/migrations/20251009163131_20251009130000_create_ai_usage_limits.sql": "/*\n  # AI使用制限システム\n\n  ## 概要\n  AIチャット機能の1日あたりの使用回数を制限するシステムを実装します。\n  ロール別に異なる上限を設定し、コスト管理と適切な利用を促進します。\n\n  ## 新規テーブル\n\n  ### ai_usage_tracking（使用回数追跡テーブル）\n  - `id` (uuid, primary key) - レコードID\n  - `user_id` (uuid, 外部キー) - ユーザーID\n  - `usage_date` (date) - 使用日（日本時間）\n  - `request_count` (integer) - リクエスト回数\n  - `created_at` (timestamptz) - 作成日時\n  - `updated_at` (timestamptz) - 更新日時\n  - ユニーク制約: (user_id, usage_date)\n\n  ### ai_usage_settings（使用制限設定テーブル）\n  - `id` (uuid, primary key) - レコードID\n  - `role` (text) - ロール（admin/manager/staff）\n  - `daily_limit` (integer) - 1日の上限（-1は無制限）\n  - `enabled` (boolean) - 制限の有効/無効\n  - `created_at` (timestamptz) - 作成日時\n  - `updated_at` (timestamptz) - 更新日時\n  - ユニーク制約: role\n\n  ## RPC関数\n\n  ### check_and_increment_usage\n  ユーザーの使用回数をチェックし、制限内であればカウントを増加させます。\n\n  ### get_user_usage_status\n  ユーザーの現在の使用状況（使用回数、上限、残り）を取得します。\n\n  ### reset_user_daily_usage\n  特定ユーザーの当日の使用回数をリセットします（管理者専用）。\n\n  ## セキュリティ\n  - RLS有効化\n  - ユーザーは自分の使用状況のみ参照可能\n  - 設定は全員が参照可能、更新は管理者のみ\n  - RPC関数はSECURITY DEFINERで実装\n\n  ## パフォーマンス最適化\n  - 複合インデックス: (user_id, usage_date)\n  - ロールインデックス\n  - 自動クリーンアップ（8日以上前のデータ削除）\n*/\n\n-- ============================================\n-- 1. ai_usage_tracking テーブル\n-- ============================================\n\nCREATE TABLE IF NOT EXISTS ai_usage_tracking (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  usage_date date NOT NULL DEFAULT (now() AT TIME ZONE 'Asia/Tokyo')::date,\n  request_count integer NOT NULL DEFAULT 0,\n  created_at timestamptz NOT NULL DEFAULT now(),\n  updated_at timestamptz NOT NULL DEFAULT now(),\n  CONSTRAINT unique_user_date UNIQUE (user_id, usage_date)\n);\n\n-- ============================================\n-- 2. ai_usage_settings テーブル\n-- ============================================\n\nCREATE TABLE IF NOT EXISTS ai_usage_settings (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  role text NOT NULL CHECK (role IN ('admin', 'manager', 'staff')),\n  daily_limit integer NOT NULL DEFAULT 20,\n  enabled boolean NOT NULL DEFAULT true,\n  created_at timestamptz NOT NULL DEFAULT now(),\n  updated_at timestamptz NOT NULL DEFAULT now(),\n  CONSTRAINT unique_role UNIQUE (role)\n);\n\n-- ============================================\n-- 3. 初期設定データの投入\n-- ============================================\n\nINSERT INTO ai_usage_settings (role, daily_limit, enabled)\nVALUES\n  ('admin', -1, true),      -- 無制限\n  ('manager', 20, true),    -- 20回/日\n  ('staff', 5, true)        -- 5回/日\nON CONFLICT (role) DO NOTHING;\n\n-- ============================================\n-- 4. インデックス\n-- ============================================\n\n-- 使用回数取得用の複合インデックス\nCREATE INDEX IF NOT EXISTS idx_usage_tracking_user_date\nON ai_usage_tracking(user_id, usage_date);\n\n-- ロール別設定取得用のインデックス\nCREATE INDEX IF NOT EXISTS idx_usage_settings_role\nON ai_usage_settings(role);\n\n-- ============================================\n-- 5. Row Level Security（RLS）\n-- ============================================\n\n-- ai_usage_tracking のRLS有効化\nALTER TABLE ai_usage_tracking ENABLE ROW LEVEL SECURITY;\n\n-- ai_usage_settings のRLS有効化\nALTER TABLE ai_usage_settings ENABLE ROW LEVEL SECURITY;\n\n-- ai_usage_tracking: SELECT ポリシー（自分のデータのみ参照可能）\nDROP POLICY IF EXISTS \"Users can view own usage tracking\" ON ai_usage_tracking;\nCREATE POLICY \"Users can view own usage tracking\"\nON ai_usage_tracking\nFOR SELECT\nTO authenticated\nUSING (auth.uid() = user_id);\n\n-- ai_usage_tracking: INSERT ポリシー（自分のデータのみ作成可能）\nDROP POLICY IF EXISTS \"Users can create own usage tracking\" ON ai_usage_tracking;\nCREATE POLICY \"Users can create own usage tracking\"\nON ai_usage_tracking\nFOR INSERT\nTO authenticated\nWITH CHECK (auth.uid() = user_id);\n\n-- ai_usage_tracking: UPDATE ポリシー（自分のデータのみ更新可能）\nDROP POLICY IF EXISTS \"Users can update own usage tracking\" ON ai_usage_tracking;\nCREATE POLICY \"Users can update own usage tracking\"\nON ai_usage_tracking\nFOR UPDATE\nTO authenticated\nUSING (auth.uid() = user_id)\nWITH CHECK (auth.uid() = user_id);\n\n-- ai_usage_settings: SELECT ポリシー（全員が参照可能）\nDROP POLICY IF EXISTS \"Anyone can view usage settings\" ON ai_usage_settings;\nCREATE POLICY \"Anyone can view usage settings\"\nON ai_usage_settings\nFOR SELECT\nTO authenticated\nUSING (true);\n\n-- ai_usage_settings: UPDATE ポリシー（管理者のみ更新可能）\nDROP POLICY IF EXISTS \"Admins can update usage settings\" ON ai_usage_settings;\nCREATE POLICY \"Admins can update usage settings\"\nON ai_usage_settings\nFOR UPDATE\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1 FROM profiles\n    WHERE profiles.id = auth.uid() AND profiles.role = 'admin'\n  )\n)\nWITH CHECK (\n  EXISTS (\n    SELECT 1 FROM profiles\n    WHERE profiles.id = auth.uid() AND profiles.role = 'admin'\n  )\n);\n\n-- ============================================\n-- 6. RPC関数: check_and_increment_usage\n-- ============================================\n\nCREATE OR REPLACE FUNCTION check_and_increment_usage(p_user_id uuid)\nRETURNS jsonb\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  v_current_date date;\n  v_current_count integer;\n  v_user_role text;\n  v_daily_limit integer;\n  v_enabled boolean;\n  v_remaining integer;\n  v_is_allowed boolean;\nBEGIN\n  -- 日本時間の現在日付を取得\n  v_current_date := (now() AT TIME ZONE 'Asia/Tokyo')::date;\n\n  -- ユーザーのロールを取得\n  SELECT role INTO v_user_role\n  FROM profiles\n  WHERE id = p_user_id;\n\n  IF v_user_role IS NULL THEN\n    v_user_role := 'staff'; -- デフォルト\n  END IF;\n\n  -- ロール別の上限設定を取得\n  SELECT daily_limit, enabled INTO v_daily_limit, v_enabled\n  FROM ai_usage_settings\n  WHERE role = v_user_role;\n\n  IF v_daily_limit IS NULL THEN\n    v_daily_limit := 5; -- デフォルト\n  END IF;\n\n  IF v_enabled IS NULL THEN\n    v_enabled := true;\n  END IF;\n\n  -- 制限が無効の場合は常に許可\n  IF NOT v_enabled THEN\n    RETURN jsonb_build_object(\n      'allowed', true,\n      'current_count', 0,\n      'daily_limit', -1,\n      'remaining', -1,\n      'message', '制限は無効化されています'\n    );\n  END IF;\n\n  -- 管理者（無制限）の場合\n  IF v_daily_limit = -1 THEN\n    RETURN jsonb_build_object(\n      'allowed', true,\n      'current_count', 0,\n      'daily_limit', -1,\n      'remaining', -1,\n      'message', '無制限'\n    );\n  END IF;\n\n  -- 現在の使用回数を取得または初期化\n  SELECT request_count INTO v_current_count\n  FROM ai_usage_tracking\n  WHERE user_id = p_user_id AND usage_date = v_current_date;\n\n  IF v_current_count IS NULL THEN\n    v_current_count := 0;\n  END IF;\n\n  -- 制限チェック\n  v_is_allowed := v_current_count < v_daily_limit;\n\n  -- 許可されている場合はカウントを増加\n  IF v_is_allowed THEN\n    INSERT INTO ai_usage_tracking (user_id, usage_date, request_count)\n    VALUES (p_user_id, v_current_date, 1)\n    ON CONFLICT (user_id, usage_date)\n    DO UPDATE SET\n      request_count = ai_usage_tracking.request_count + 1,\n      updated_at = now();\n\n    v_current_count := v_current_count + 1;\n  END IF;\n\n  v_remaining := GREATEST(0, v_daily_limit - v_current_count);\n\n  RETURN jsonb_build_object(\n    'allowed', v_is_allowed,\n    'current_count', v_current_count,\n    'daily_limit', v_daily_limit,\n    'remaining', v_remaining,\n    'message', CASE\n      WHEN v_is_allowed THEN '利用可能'\n      ELSE '本日の利用上限に達しました'\n    END\n  );\nEND;\n$$;\n\n-- ============================================\n-- 7. RPC関数: get_user_usage_status\n-- ============================================\n\nCREATE OR REPLACE FUNCTION get_user_usage_status(p_user_id uuid)\nRETURNS jsonb\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  v_current_date date;\n  v_current_count integer;\n  v_user_role text;\n  v_daily_limit integer;\n  v_enabled boolean;\n  v_remaining integer;\n  v_reset_at timestamptz;\nBEGIN\n  -- 日本時間の現在日付を取得\n  v_current_date := (now() AT TIME ZONE 'Asia/Tokyo')::date;\n\n  -- 次のリセット時刻（翌日の午前0時 JST）\n  v_reset_at := (v_current_date + interval '1 day') AT TIME ZONE 'Asia/Tokyo';\n\n  -- ユーザーのロールを取得\n  SELECT role INTO v_user_role\n  FROM profiles\n  WHERE id = p_user_id;\n\n  IF v_user_role IS NULL THEN\n    v_user_role := 'staff';\n  END IF;\n\n  -- ロール別の上限設定を取得\n  SELECT daily_limit, enabled INTO v_daily_limit, v_enabled\n  FROM ai_usage_settings\n  WHERE role = v_user_role;\n\n  IF v_daily_limit IS NULL THEN\n    v_daily_limit := 5;\n  END IF;\n\n  IF v_enabled IS NULL THEN\n    v_enabled := true;\n  END IF;\n\n  -- 制限が無効の場合\n  IF NOT v_enabled THEN\n    RETURN jsonb_build_object(\n      'current_count', 0,\n      'daily_limit', -1,\n      'remaining', -1,\n      'reset_at', v_reset_at,\n      'is_limited', false\n    );\n  END IF;\n\n  -- 管理者（無制限）の場合\n  IF v_daily_limit = -1 THEN\n    RETURN jsonb_build_object(\n      'current_count', 0,\n      'daily_limit', -1,\n      'remaining', -1,\n      'reset_at', v_reset_at,\n      'is_limited', false\n    );\n  END IF;\n\n  -- 現在の使用回数を取得\n  SELECT request_count INTO v_current_count\n  FROM ai_usage_tracking\n  WHERE user_id = p_user_id AND usage_date = v_current_date;\n\n  IF v_current_count IS NULL THEN\n    v_current_count := 0;\n  END IF;\n\n  v_remaining := GREATEST(0, v_daily_limit - v_current_count);\n\n  RETURN jsonb_build_object(\n    'current_count', v_current_count,\n    'daily_limit', v_daily_limit,\n    'remaining', v_remaining,\n    'reset_at', v_reset_at,\n    'is_limited', v_current_count >= v_daily_limit\n  );\nEND;\n$$;\n\n-- ============================================\n-- 8. RPC関数: reset_user_daily_usage（管理者専用）\n-- ============================================\n\nCREATE OR REPLACE FUNCTION reset_user_daily_usage(p_user_id uuid)\nRETURNS jsonb\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  v_current_date date;\n  v_is_admin boolean;\nBEGIN\n  -- 実行者が管理者かチェック\n  SELECT EXISTS (\n    SELECT 1 FROM profiles\n    WHERE id = auth.uid() AND role = 'admin'\n  ) INTO v_is_admin;\n\n  IF NOT v_is_admin THEN\n    RETURN jsonb_build_object(\n      'success', false,\n      'message', '管理者権限が必要です'\n    );\n  END IF;\n\n  -- 日本時間の現在日付を取得\n  v_current_date := (now() AT TIME ZONE 'Asia/Tokyo')::date;\n\n  -- 当日のカウントをリセット\n  UPDATE ai_usage_tracking\n  SET request_count = 0, updated_at = now()\n  WHERE user_id = p_user_id AND usage_date = v_current_date;\n\n  RETURN jsonb_build_object(\n    'success', true,\n    'message', '使用回数をリセットしました'\n  );\nEND;\n$$;\n\n-- ============================================\n-- 9. クリーンアップ関数（古いデータの削除）\n-- ============================================\n\nCREATE OR REPLACE FUNCTION cleanup_old_usage_data()\nRETURNS void\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nBEGIN\n  -- 8日以上前のデータを削除\n  DELETE FROM ai_usage_tracking\n  WHERE usage_date < (now() AT TIME ZONE 'Asia/Tokyo')::date - interval '8 days';\nEND;\n$$;\n\n-- ============================================\n-- 10. トリガー関数（updated_at自動更新）\n-- ============================================\n\n-- updated_at自動更新トリガー関数（既存の場合は再利用）\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- ai_usage_tracking用トリガー\nDROP TRIGGER IF EXISTS trigger_usage_tracking_updated_at ON ai_usage_tracking;\nCREATE TRIGGER trigger_usage_tracking_updated_at\n  BEFORE UPDATE ON ai_usage_tracking\n  FOR EACH ROW\n  EXECUTE FUNCTION update_updated_at_column();\n\n-- ai_usage_settings用トリガー\nDROP TRIGGER IF EXISTS trigger_usage_settings_updated_at ON ai_usage_settings;\nCREATE TRIGGER trigger_usage_settings_updated_at\n  BEFORE UPDATE ON ai_usage_settings\n  FOR EACH ROW\n  EXECUTE FUNCTION update_updated_at_column();\n\n-- ============================================\n-- 11. テーブルコメント\n-- ============================================\n\nCOMMENT ON TABLE ai_usage_tracking IS\n'AIチャット機能の使用回数を追跡するテーブル。ユーザーごと、日付ごとに使用回数を記録します。';\n\nCOMMENT ON TABLE ai_usage_settings IS\n'ロール別のAI使用制限設定テーブル。admin（無制限）、manager（20回/日）、staff（5回/日）を管理します。';\n\nCOMMENT ON FUNCTION check_and_increment_usage IS\n'ユーザーの使用回数をチェックし、制限内であればカウントを増加させる関数。\n使用例: SELECT check_and_increment_usage(auth.uid());';\n\nCOMMENT ON FUNCTION get_user_usage_status IS\n'ユーザーの現在の使用状況を取得する関数。\n使用例: SELECT get_user_usage_status(auth.uid());';\n\nCOMMENT ON FUNCTION reset_user_daily_usage IS\n'特定ユーザーの当日の使用回数をリセットする関数（管理者専用）。\n使用例: SELECT reset_user_daily_usage(''user-uuid-here'');';\n\nCOMMENT ON FUNCTION cleanup_old_usage_data IS\n'8日以上前の使用履歴データを削除するクリーンアップ関数。\n使用例: SELECT cleanup_old_usage_data();';\n",
  "supabase/migrations/20251010052354_create_organizations_multitenant.sql": "/*\n  # マルチテナント化 - Organizations テーブル作成\n\n  ## 概要\n  複数の企業・組織がシステムを独立して利用できるよう、マルチテナント機能を実装します。\n\n  ## 1. 新規テーブル\n    - `organizations` - 組織・企業の基本情報\n      - `id` (uuid, primary key) - 組織ID\n      - `name` (text) - 組織名\n      - `slug` (text, unique) - URL用スラッグ\n      - `email` (text) - 組織の連絡先メール\n      - `phone` (text) - 電話番号\n      - `subscription_status` (text) - サブスクリプション状態 (trial, active, suspended, cancelled)\n      - `subscription_plan` (text) - プラン種別 (free, starter, business, enterprise)\n      - `trial_ends_at` (timestamptz) - トライアル期限\n      - `max_stores` (int) - 最大店舗数制限\n      - `max_users` (int) - 最大ユーザー数制限\n      - `max_ai_requests_per_month` (int) - 月間AI使用回数制限\n      - `settings` (jsonb) - 組織固有の設定\n      - `created_at` (timestamptz) - 作成日時\n      - `updated_at` (timestamptz) - 更新日時\n\n    - `organization_members` - 組織メンバー管理\n      - `organization_id` (uuid, foreign key) - 組織ID\n      - `user_id` (uuid, foreign key) - ユーザーID\n      - `role` (text) - 組織内の役割 (owner, admin, member)\n      - `joined_at` (timestamptz) - 参加日時\n\n  ## 2. セキュリティ\n    - 全テーブルでRLS有効化\n    - ユーザーは所属組織のデータのみアクセス可能\n    - 組織オーナー/管理者は組織設定を変更可能\n    - 完全なデータ分離を保証\n\n  ## 3. 重要な変更\n    - 既存テーブルに `organization_id` を追加する準備\n    - ヘルパー関数 `get_user_organization_id()` を作成\n    - 組織オーナー判定関数 `is_organization_owner()` を作成\n*/\n\n-- ============================================\n-- 1. Organizations テーブル作成\n-- ============================================\n\nCREATE TABLE IF NOT EXISTS public.organizations (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  name text NOT NULL,\n  slug text UNIQUE NOT NULL,\n  email text NOT NULL,\n  phone text,\n  subscription_status text NOT NULL DEFAULT 'trial' CHECK (subscription_status IN ('trial', 'active', 'suspended', 'cancelled')),\n  subscription_plan text NOT NULL DEFAULT 'free' CHECK (subscription_plan IN ('free', 'starter', 'business', 'enterprise')),\n  trial_ends_at timestamptz DEFAULT (now() + interval '14 days'),\n  max_stores int NOT NULL DEFAULT 3,\n  max_users int NOT NULL DEFAULT 5,\n  max_ai_requests_per_month int NOT NULL DEFAULT 100,\n  settings jsonb DEFAULT '{}'::jsonb,\n  created_at timestamptz DEFAULT now() NOT NULL,\n  updated_at timestamptz DEFAULT now() NOT NULL\n);\n\nCOMMENT ON TABLE public.organizations IS '組織・企業の基本情報を管理するテーブル';\nCOMMENT ON COLUMN public.organizations.subscription_status IS 'trial: トライアル中, active: 有効, suspended: 一時停止, cancelled: キャンセル済み';\nCOMMENT ON COLUMN public.organizations.subscription_plan IS 'free: 無料, starter: スターター, business: ビジネス, enterprise: エンタープライズ';\n\n-- ============================================\n-- 2. Organization Members テーブル作成\n-- ============================================\n\nCREATE TABLE IF NOT EXISTS public.organization_members (\n  organization_id uuid NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,\n  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  role text NOT NULL DEFAULT 'member' CHECK (role IN ('owner', 'admin', 'member')),\n  joined_at timestamptz DEFAULT now() NOT NULL,\n  PRIMARY KEY (organization_id, user_id)\n);\n\nCOMMENT ON TABLE public.organization_members IS '組織とユーザーの関連を管理するテーブル';\nCOMMENT ON COLUMN public.organization_members.role IS 'owner: オーナー, admin: 管理者, member: メンバー';\n\n-- ============================================\n-- 3. Updated_at トリガー\n-- ============================================\n\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nAS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$;\n\nDROP TRIGGER IF EXISTS update_organizations_updated_at ON public.organizations;\nCREATE TRIGGER update_organizations_updated_at\n  BEFORE UPDATE ON public.organizations\n  FOR EACH ROW\n  EXECUTE FUNCTION public.update_updated_at_column();\n\n-- ============================================\n-- 4. ヘルパー関数\n-- ============================================\n\n-- ユーザーの所属組織IDを取得\nCREATE OR REPLACE FUNCTION public.get_user_organization_id()\nRETURNS uuid\nLANGUAGE sql\nSTABLE\nSECURITY DEFINER\nAS $$\n  SELECT organization_id\n  FROM public.organization_members\n  WHERE user_id = auth.uid()\n  LIMIT 1;\n$$;\n\nCOMMENT ON FUNCTION public.get_user_organization_id() IS '現在のユーザーが所属する組織のIDを返す';\n\n-- ユーザーが組織のオーナーかどうかを判定\nCREATE OR REPLACE FUNCTION public.is_organization_owner(org_id uuid DEFAULT NULL)\nRETURNS boolean\nLANGUAGE sql\nSTABLE\nSECURITY DEFINER\nAS $$\n  SELECT EXISTS (\n    SELECT 1\n    FROM public.organization_members\n    WHERE user_id = auth.uid()\n      AND (org_id IS NULL OR organization_id = org_id)\n      AND role = 'owner'\n  );\n$$;\n\nCOMMENT ON FUNCTION public.is_organization_owner(uuid) IS '現在のユーザーが指定された組織（または所属組織）のオーナーかどうかを判定';\n\n-- ユーザーが組織の管理者以上かどうかを判定\nCREATE OR REPLACE FUNCTION public.is_organization_admin(org_id uuid DEFAULT NULL)\nRETURNS boolean\nLANGUAGE sql\nSTABLE\nSECURITY DEFINER\nAS $$\n  SELECT EXISTS (\n    SELECT 1\n    FROM public.organization_members\n    WHERE user_id = auth.uid()\n      AND (org_id IS NULL OR organization_id = org_id)\n      AND role IN ('owner', 'admin')\n  );\n$$;\n\nCOMMENT ON FUNCTION public.is_organization_admin(uuid) IS '現在のユーザーが指定された組織（または所属組織）の管理者以上かどうかを判定';\n\n-- ============================================\n-- 5. RLSポリシー - Organizations\n-- ============================================\n\nALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;\n\n-- 組織メンバーは自分の組織を参照可能\nCREATE POLICY \"Members can view their organization\"\n  ON public.organizations\n  FOR SELECT\n  TO authenticated\n  USING (\n    id IN (\n      SELECT organization_id\n      FROM public.organization_members\n      WHERE user_id = auth.uid()\n    )\n  );\n\n-- オーナー・管理者は組織情報を更新可能\nCREATE POLICY \"Owners and admins can update organization\"\n  ON public.organizations\n  FOR UPDATE\n  TO authenticated\n  USING (\n    id IN (\n      SELECT organization_id\n      FROM public.organization_members\n      WHERE user_id = auth.uid()\n        AND role IN ('owner', 'admin')\n    )\n  )\n  WITH CHECK (\n    id IN (\n      SELECT organization_id\n      FROM public.organization_members\n      WHERE user_id = auth.uid()\n        AND role IN ('owner', 'admin')\n    )\n  );\n\n-- 新規組織作成（サインアップ時のみ）\nCREATE POLICY \"Anyone can create organization\"\n  ON public.organizations\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (true);\n\n-- オーナーのみ組織削除可能\nCREATE POLICY \"Only owners can delete organization\"\n  ON public.organizations\n  FOR DELETE\n  TO authenticated\n  USING (is_organization_owner(id));\n\n-- ============================================\n-- 6. RLSポリシー - Organization Members\n-- ============================================\n\nALTER TABLE public.organization_members ENABLE ROW LEVEL SECURITY;\n\n-- メンバーは自分の組織のメンバーリストを参照可能\nCREATE POLICY \"Members can view organization members\"\n  ON public.organization_members\n  FOR SELECT\n  TO authenticated\n  USING (\n    organization_id IN (\n      SELECT organization_id\n      FROM public.organization_members\n      WHERE user_id = auth.uid()\n    )\n  );\n\n-- 管理者以上はメンバーを追加可能\nCREATE POLICY \"Admins can add members\"\n  ON public.organization_members\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    organization_id IN (\n      SELECT organization_id\n      FROM public.organization_members\n      WHERE user_id = auth.uid()\n        AND role IN ('owner', 'admin')\n    )\n  );\n\n-- 管理者以上はメンバーの役割を更新可能（オーナー除く）\nCREATE POLICY \"Admins can update members\"\n  ON public.organization_members\n  FOR UPDATE\n  TO authenticated\n  USING (\n    organization_id IN (\n      SELECT organization_id\n      FROM public.organization_members\n      WHERE user_id = auth.uid()\n        AND role IN ('owner', 'admin')\n    )\n    AND role != 'owner'\n  )\n  WITH CHECK (\n    organization_id IN (\n      SELECT organization_id\n      FROM public.organization_members\n      WHERE user_id = auth.uid()\n        AND role IN ('owner', 'admin')\n    )\n    AND role != 'owner'\n  );\n\n-- 管理者以上はメンバーを削除可能（オーナー除く）\nCREATE POLICY \"Admins can remove members\"\n  ON public.organization_members\n  FOR DELETE\n  TO authenticated\n  USING (\n    organization_id IN (\n      SELECT organization_id\n      FROM public.organization_members\n      WHERE user_id = auth.uid()\n        AND role IN ('owner', 'admin')\n    )\n    AND role != 'owner'\n  );\n\n-- ============================================\n-- 7. インデックス作成\n-- ============================================\n\nCREATE INDEX IF NOT EXISTS idx_organizations_slug\n  ON public.organizations (slug);\n\nCREATE INDEX IF NOT EXISTS idx_organizations_subscription_status\n  ON public.organizations (subscription_status);\n\nCREATE INDEX IF NOT EXISTS idx_organization_members_user\n  ON public.organization_members (user_id);\n\nCREATE INDEX IF NOT EXISTS idx_organization_members_org\n  ON public.organization_members (organization_id);\n\nCREATE INDEX IF NOT EXISTS idx_organization_members_role\n  ON public.organization_members (organization_id, role);\n\n-- ============================================\n-- 8. 確認メッセージ\n-- ============================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '✅ Organizations テーブル作成完了';\n  RAISE NOTICE '✅ Organization Members テーブル作成完了';\n  RAISE NOTICE '✅ ヘルパー関数作成完了: get_user_organization_id(), is_organization_owner(), is_organization_admin()';\n  RAISE NOTICE '✅ RLSポリシー設定完了';\n  RAISE NOTICE '✅ インデックス作成完了';\n  RAISE NOTICE '📋 次のステップ: 既存テーブルに organization_id を追加してください';\nEND $$;\n",
  "supabase/migrations/20251010052538_add_organization_id_to_all_tables.sql": "/*\n  # 既存テーブルへの organization_id 追加（修正版）\n\n  ## 概要\n  マルチテナント化のため、全ての既存テーブルに organization_id カラムを追加します。\n\n  ## 変更対象テーブル\n    1. `profiles` - ユーザープロファイル\n    2. `stores` - 店舗情報\n    3. `store_assignments` - 店舗割り当て\n    4. `vendors` - 仕入先\n    5. `store_vendor_assignments` - 店舗-仕入先割り当て\n    6. `daily_reports` - 日報\n    7. `daily_report_vendor_purchases` - 日報仕入明細\n    8. `monthly_expenses` - 月次経費\n    9. `targets` - 目標\n    10. `daily_targets` - 日別目標\n    11. `expense_baselines` - 参考経費\n    12. `ai_conversations` - AI会話\n    13. `ai_messages` - AIメッセージ\n    14. `ai_generated_reports` - AI生成レポート\n    15. `report_schedules` - レポートスケジュール\n    16. `ai_usage_settings` - AI使用設定\n    17. `ai_usage_tracking` - AI使用追跡\n    18. `report_generation_logs` - レポート生成ログ\n    19. `summary_data` - サマリーデータ\n*/\n\n-- ============================================\n-- 1. profiles テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'profiles'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.profiles\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_profiles_organization\n      ON public.profiles (organization_id);\n    \n    RAISE NOTICE '✅ profiles に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 2. stores テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'stores'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.stores\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_stores_organization\n      ON public.stores (organization_id);\n    \n    RAISE NOTICE '✅ stores に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 3. store_assignments テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'store_assignments'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.store_assignments\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_store_assignments_organization\n      ON public.store_assignments (organization_id);\n    \n    RAISE NOTICE '✅ store_assignments に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 4. vendors テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'vendors'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.vendors\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_vendors_organization\n      ON public.vendors (organization_id);\n    \n    RAISE NOTICE '✅ vendors に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 5. store_vendor_assignments テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'store_vendor_assignments'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.store_vendor_assignments\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_store_vendor_assignments_organization\n      ON public.store_vendor_assignments (organization_id);\n    \n    RAISE NOTICE '✅ store_vendor_assignments に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 6. daily_reports テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'daily_reports'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.daily_reports\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_daily_reports_organization\n      ON public.daily_reports (organization_id, date DESC);\n    \n    RAISE NOTICE '✅ daily_reports に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 7. daily_report_vendor_purchases テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'daily_report_vendor_purchases'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.daily_report_vendor_purchases\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_daily_report_vendor_purchases_organization\n      ON public.daily_report_vendor_purchases (organization_id);\n    \n    RAISE NOTICE '✅ daily_report_vendor_purchases に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 8. monthly_expenses テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'monthly_expenses'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.monthly_expenses\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_monthly_expenses_organization\n      ON public.monthly_expenses (organization_id, month);\n    \n    RAISE NOTICE '✅ monthly_expenses に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 9. targets テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'targets'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.targets\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_targets_organization\n      ON public.targets (organization_id);\n    \n    RAISE NOTICE '✅ targets に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 10. daily_targets テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'daily_targets'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.daily_targets\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_daily_targets_organization\n      ON public.daily_targets (organization_id, date DESC);\n    \n    RAISE NOTICE '✅ daily_targets に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 11. expense_baselines テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'expense_baselines'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.expense_baselines\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_expense_baselines_organization\n      ON public.expense_baselines (organization_id);\n    \n    RAISE NOTICE '✅ expense_baselines に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 12. ai_conversations テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'ai_conversations'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.ai_conversations\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_ai_conversations_organization\n      ON public.ai_conversations (organization_id);\n    \n    RAISE NOTICE '✅ ai_conversations に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 13. ai_messages テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'ai_messages'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.ai_messages\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_ai_messages_organization\n      ON public.ai_messages (organization_id);\n    \n    RAISE NOTICE '✅ ai_messages に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 14. ai_generated_reports テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'ai_generated_reports'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.ai_generated_reports\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_ai_generated_reports_organization\n      ON public.ai_generated_reports (organization_id);\n    \n    RAISE NOTICE '✅ ai_generated_reports に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 15. report_schedules テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'report_schedules'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.report_schedules\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_report_schedules_organization\n      ON public.report_schedules (organization_id);\n    \n    RAISE NOTICE '✅ report_schedules に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 16. ai_usage_settings テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'ai_usage_settings'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.ai_usage_settings\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_ai_usage_settings_organization\n      ON public.ai_usage_settings (organization_id);\n    \n    RAISE NOTICE '✅ ai_usage_settings に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 17. ai_usage_tracking テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'ai_usage_tracking'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.ai_usage_tracking\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_ai_usage_tracking_organization\n      ON public.ai_usage_tracking (organization_id);\n    \n    RAISE NOTICE '✅ ai_usage_tracking に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 18. report_generation_logs テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'report_generation_logs'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.report_generation_logs\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_report_generation_logs_organization\n      ON public.report_generation_logs (organization_id);\n    \n    RAISE NOTICE '✅ report_generation_logs に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 19. summary_data テーブル\n-- ============================================\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'summary_data'\n      AND column_name = 'organization_id'\n  ) THEN\n    ALTER TABLE public.summary_data\n    ADD COLUMN organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE;\n    \n    CREATE INDEX IF NOT EXISTS idx_summary_data_organization\n      ON public.summary_data (organization_id);\n    \n    RAISE NOTICE '✅ summary_data に organization_id を追加';\n  END IF;\nEND $$;\n\n-- ============================================\n-- 確認メッセージ\n-- ============================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ 全19テーブルへの organization_id 追加完了';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010052634_update_rls_policies_multitenant.sql": "/*\n  # マルチテナント対応RLSポリシー更新\n\n  ## 概要\n  全テーブルのRLSポリシーを更新し、organization_id による完全なデータ分離を実装します。\n\n  ## セキュリティ原則\n    1. ユーザーは自分の所属組織のデータのみアクセス可能\n    2. 全てのクエリで organization_id によるフィルタリングを強制\n    3. INSERT時に自動的に organization_id を設定\n    4. 組織間のデータ漏洩を完全に防止\n\n  ## 更新対象\n    - stores\n    - daily_reports  \n    - targets\n    - daily_targets\n    - expense_baselines\n    - monthly_expenses\n    - vendors\n    - store_assignments\n    - store_vendor_assignments\n    - ai_conversations\n    - ai_messages\n    - ai_generated_reports\n    - ai_usage_tracking\n*/\n\n-- ============================================\n-- 1. stores テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"stores_select\" ON stores;\nDROP POLICY IF EXISTS \"stores_insert\" ON stores;\nDROP POLICY IF EXISTS \"stores_update\" ON stores;\nDROP POLICY IF EXISTS \"stores_delete\" ON stores;\n\nCREATE POLICY \"stores_select\" ON stores\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"stores_insert\" ON stores\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"stores_update\" ON stores\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"stores_delete\" ON stores\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\n-- ============================================\n-- 2. daily_reports テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"dr_select\" ON daily_reports;\nDROP POLICY IF EXISTS \"dr_insert\" ON daily_reports;\nDROP POLICY IF EXISTS \"dr_update\" ON daily_reports;\nDROP POLICY IF EXISTS \"dr_delete\" ON daily_reports;\n\nCREATE POLICY \"dr_select\" ON daily_reports\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"dr_insert\" ON daily_reports\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n  AND (\n    EXISTS (\n      SELECT 1 FROM store_assignments sa\n      WHERE sa.store_id = daily_reports.store_id\n        AND sa.user_id = auth.uid()\n    )\n    OR is_organization_admin()\n  )\n);\n\nCREATE POLICY \"dr_update\" ON daily_reports\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n  AND (user_id = auth.uid() OR is_organization_admin())\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"dr_delete\" ON daily_reports\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n  AND (user_id = auth.uid() OR is_organization_admin())\n);\n\n-- ============================================\n-- 3. targets テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"Managers and admins can view their store targets\" ON targets;\nDROP POLICY IF EXISTS \"Managers and admins can create targets\" ON targets;\nDROP POLICY IF EXISTS \"Managers and admins can update targets\" ON targets;\nDROP POLICY IF EXISTS \"Managers and admins can delete targets\" ON targets;\n\nCREATE POLICY \"targets_select\" ON targets\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"targets_insert\" ON targets\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"targets_update\" ON targets\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"targets_delete\" ON targets\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\n-- ============================================\n-- 4. daily_targets テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"daily_targets_select\" ON daily_targets;\nDROP POLICY IF EXISTS \"daily_targets_insert\" ON daily_targets;\nDROP POLICY IF EXISTS \"daily_targets_update\" ON daily_targets;\nDROP POLICY IF EXISTS \"daily_targets_delete\" ON daily_targets;\n\nCREATE POLICY \"daily_targets_select\" ON daily_targets\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"daily_targets_insert\" ON daily_targets\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"daily_targets_update\" ON daily_targets\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"daily_targets_delete\" ON daily_targets\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\n-- ============================================\n-- 5. expense_baselines テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"expense_baselines_select\" ON expense_baselines;\nDROP POLICY IF EXISTS \"expense_baselines_insert\" ON expense_baselines;\nDROP POLICY IF EXISTS \"expense_baselines_update\" ON expense_baselines;\nDROP POLICY IF EXISTS \"expense_baselines_delete\" ON expense_baselines;\n\nCREATE POLICY \"expense_baselines_select\" ON expense_baselines\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"expense_baselines_insert\" ON expense_baselines\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"expense_baselines_update\" ON expense_baselines\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"expense_baselines_delete\" ON expense_baselines\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\n-- ============================================\n-- 6. monthly_expenses テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"me_select\" ON monthly_expenses;\nDROP POLICY IF EXISTS \"me_insert\" ON monthly_expenses;\nDROP POLICY IF EXISTS \"me_update\" ON monthly_expenses;\nDROP POLICY IF EXISTS \"me_delete\" ON monthly_expenses;\n\nCREATE POLICY \"me_select\" ON monthly_expenses\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"me_insert\" ON monthly_expenses\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"me_update\" ON monthly_expenses\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"me_delete\" ON monthly_expenses\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\n-- ============================================\n-- 7. vendors テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"vendors_select\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_insert\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_update\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_delete\" ON vendors;\n\nCREATE POLICY \"vendors_select\" ON vendors\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"vendors_insert\" ON vendors\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"vendors_update\" ON vendors\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"vendors_delete\" ON vendors\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\n-- ============================================\n-- 8. store_assignments テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"sa_select\" ON store_assignments;\nDROP POLICY IF EXISTS \"sa_insert\" ON store_assignments;\nDROP POLICY IF EXISTS \"sa_update\" ON store_assignments;\nDROP POLICY IF EXISTS \"sa_delete\" ON store_assignments;\n\nCREATE POLICY \"sa_select\" ON store_assignments\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"sa_insert\" ON store_assignments\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"sa_update\" ON store_assignments\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\nCREATE POLICY \"sa_delete\" ON store_assignments\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n      AND role IN ('owner', 'admin')\n  )\n);\n\n-- ============================================\n-- 9. AI関連テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"ai_conversations_select\" ON ai_conversations;\nDROP POLICY IF EXISTS \"ai_conversations_insert\" ON ai_conversations;\nDROP POLICY IF EXISTS \"ai_conversations_update\" ON ai_conversations;\nDROP POLICY IF EXISTS \"ai_conversations_delete\" ON ai_conversations;\n\nCREATE POLICY \"ai_conversations_select\" ON ai_conversations\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"ai_conversations_insert\" ON ai_conversations\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"ai_conversations_update\" ON ai_conversations\nFOR UPDATE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n)\nWITH CHECK (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"ai_conversations_delete\" ON ai_conversations\nFOR DELETE\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\n-- ============================================\n-- 確認メッセージ\n-- ============================================\n\nDO $$\nDECLARE\n  policy_count INTEGER;\nBEGIN\n  SELECT COUNT(*) INTO policy_count\n  FROM pg_policies\n  WHERE schemaname = 'public';\n\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ マルチテナント対応RLSポリシー更新完了';\n  RAISE NOTICE '📊 総ポリシー数: %', policy_count;\n  RAISE NOTICE '🔒 完全なデータ分離が実装されました';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010053119_migrate_existing_data_to_default_org.sql": "/*\n  # 既存データのマルチテナント移行\n\n  ## 概要\n  既存の2ユーザー、3店舗、12日報などのデータを新しいマルチテナント構造に移行します。\n\n  ## 実行内容\n    1. デフォルト組織「既存データ組織」を作成\n    2. 全テーブルの organization_id を設定\n    3. 既存ユーザーを organization_members に登録\n       - admin -> owner\n       - staff -> member\n    4. データ整合性を確認\n\n  ## 安全性\n    - トランザクションは使用しない（Supabase Edge Function制約）\n    - 各ステップで確認メッセージを出力\n    - エラーが発生しても既存データは保護される\n*/\n\n-- ============================================\n-- 1. デフォルト組織の作成\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\nBEGIN\n  -- 既存の組織をチェック\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization' LIMIT 1;\n  \n  IF org_id IS NULL THEN\n    -- 新規作成\n    INSERT INTO organizations (\n      name,\n      slug,\n      email,\n      subscription_status,\n      subscription_plan,\n      trial_ends_at,\n      max_stores,\n      max_users,\n      max_ai_requests_per_month\n    )\n    VALUES (\n      '既存データ組織',\n      'default-organization',\n      'coccroco.2014@gmail.com',\n      'active',\n      'enterprise',\n      NULL,\n      999,\n      999,\n      9999\n    )\n    RETURNING id INTO org_id;\n    \n    RAISE NOTICE '✅ デフォルト組織を作成しました (ID: %)', org_id;\n  ELSE\n    RAISE NOTICE '⏭️  デフォルト組織は既に存在します (ID: %)', org_id;\n  END IF;\nEND $$;\n\n-- ============================================\n-- 2. profiles テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE profiles\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ profiles: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 3. stores テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE stores\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ stores: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 4. vendors テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE vendors\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ vendors: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 5. daily_reports テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE daily_reports\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ daily_reports: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 6. targets テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE targets\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ targets: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 7. store_assignments テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE store_assignments\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ store_assignments: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 8. store_vendor_assignments テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE store_vendor_assignments\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ store_vendor_assignments: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 9. daily_targets テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE daily_targets\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ daily_targets: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 10. expense_baselines テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE expense_baselines\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ expense_baselines: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 11. daily_report_vendor_purchases テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE daily_report_vendor_purchases\n  SET organization_id = org_id\n  WHERE organization_id IS NULL;\n  \n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ daily_report_vendor_purchases: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 12. AI関連テーブルの移行\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  updated_count int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  UPDATE ai_conversations SET organization_id = org_id WHERE organization_id IS NULL;\n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ ai_conversations: % 件更新', updated_count;\n  \n  UPDATE ai_messages SET organization_id = org_id WHERE organization_id IS NULL;\n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ ai_messages: % 件更新', updated_count;\n  \n  UPDATE ai_generated_reports SET organization_id = org_id WHERE organization_id IS NULL;\n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ ai_generated_reports: % 件更新', updated_count;\n  \n  UPDATE report_schedules SET organization_id = org_id WHERE organization_id IS NULL;\n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ report_schedules: % 件更新', updated_count;\n  \n  UPDATE ai_usage_tracking SET organization_id = org_id WHERE organization_id IS NULL;\n  GET DIAGNOSTICS updated_count = ROW_COUNT;\n  RAISE NOTICE '✅ ai_usage_tracking: % 件更新', updated_count;\nEND $$;\n\n-- ============================================\n-- 13. 既存ユーザーを organization_members に登録\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  inserted_count int := 0;\n  user_record RECORD;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  -- 各ユーザーを登録\n  FOR user_record IN \n    SELECT p.id, p.role \n    FROM profiles p\n    WHERE NOT EXISTS (\n      SELECT 1 FROM organization_members om\n      WHERE om.user_id = p.id AND om.organization_id = org_id\n    )\n  LOOP\n    INSERT INTO organization_members (organization_id, user_id, role)\n    VALUES (\n      org_id,\n      user_record.id,\n      CASE\n        WHEN user_record.role = 'admin' THEN 'owner'\n        WHEN user_record.role = 'manager' THEN 'admin'\n        ELSE 'member'\n      END\n    )\n    ON CONFLICT (organization_id, user_id) DO NOTHING;\n    \n    inserted_count := inserted_count + 1;\n  END LOOP;\n  \n  RAISE NOTICE '✅ organization_members: % 件追加', inserted_count;\nEND $$;\n\n-- ============================================\n-- 14. データ整合性の確認\n-- ============================================\n\nDO $$\nDECLARE\n  org_id uuid;\n  profiles_null int;\n  stores_null int;\n  reports_null int;\n  org_members int;\nBEGIN\n  SELECT id INTO org_id FROM organizations WHERE slug = 'default-organization';\n  \n  -- organization_id が NULL のレコードをチェック\n  SELECT COUNT(*) INTO profiles_null FROM profiles WHERE organization_id IS NULL;\n  SELECT COUNT(*) INTO stores_null FROM stores WHERE organization_id IS NULL;\n  SELECT COUNT(*) INTO reports_null FROM daily_reports WHERE organization_id IS NULL;\n  SELECT COUNT(*) INTO org_members FROM organization_members WHERE organization_id = org_id;\n  \n  RAISE NOTICE '========================================';\n  RAISE NOTICE '📊 データ移行完了レポート';\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '組織ID: %', org_id;\n  RAISE NOTICE '組織名: 既存データ組織';\n  RAISE NOTICE '組織メンバー数: %', org_members;\n  RAISE NOTICE '----------------------------------------';\n  RAISE NOTICE 'NULL チェック:';\n  RAISE NOTICE '  profiles (NULL): %', profiles_null;\n  RAISE NOTICE '  stores (NULL): %', stores_null;\n  RAISE NOTICE '  daily_reports (NULL): %', reports_null;\n  RAISE NOTICE '========================================';\n  \n  IF profiles_null = 0 AND stores_null = 0 AND reports_null = 0 THEN\n    RAISE NOTICE '✅ データ移行成功！全てのデータが組織に紐付きました';\n  ELSE\n    RAISE WARNING '⚠️  一部のデータが未移行です。確認が必要です。';\n  END IF;\nEND $$;\n",
  "supabase/migrations/20251010053407_fix_infinite_recursion_rls_policies.sql": "/*\n  # RLS無限再帰エラーの修正\n\n  ## 問題\n  organization_membersテーブルのRLSポリシーが自分自身を参照して無限再帰が発生\n\n  ## 解決策\n  1. organization_membersのRLSポリシーをシンプルに変更（auth.uid()のみ使用）\n  2. 他のテーブルのポリシーを最適化してパフォーマンス改善\n  3. ヘルパー関数を安全に使用\n\n  ## 重要な変更\n  - organization_membersのポリシーから再帰的なサブクエリを削除\n  - 直接的なauth.uid()チェックに変更\n*/\n\n-- ============================================\n-- 1. organization_members の安全なRLSポリシー\n-- ============================================\n\nDROP POLICY IF EXISTS \"Members can view organization members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can add members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can update members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can remove members\" ON organization_members;\n\n-- ユーザーは自分の所属組織のメンバーを参照可能\nCREATE POLICY \"Members can view organization members\"\n  ON organization_members\n  FOR SELECT\n  TO authenticated\n  USING (\n    -- 自分が所属する組織のメンバーは全て見える\n    organization_id IN (\n      SELECT om.organization_id\n      FROM organization_members om\n      WHERE om.user_id = auth.uid()\n    )\n  );\n\n-- メンバー追加は組織のadmin以上のみ\nCREATE POLICY \"Admins can add members\"\n  ON organization_members\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1\n      FROM organization_members om\n      WHERE om.organization_id = organization_members.organization_id\n        AND om.user_id = auth.uid()\n        AND om.role IN ('owner', 'admin')\n    )\n  );\n\n-- メンバー更新は組織のadmin以上のみ（ownerは変更不可）\nCREATE POLICY \"Admins can update members\"\n  ON organization_members\n  FOR UPDATE\n  TO authenticated\n  USING (\n    role != 'owner'\n    AND EXISTS (\n      SELECT 1\n      FROM organization_members om\n      WHERE om.organization_id = organization_members.organization_id\n        AND om.user_id = auth.uid()\n        AND om.role IN ('owner', 'admin')\n    )\n  )\n  WITH CHECK (\n    role != 'owner'\n    AND EXISTS (\n      SELECT 1\n      FROM organization_members om\n      WHERE om.organization_id = organization_members.organization_id\n        AND om.user_id = auth.uid()\n        AND om.role IN ('owner', 'admin')\n    )\n  );\n\n-- メンバー削除は組織のadmin以上のみ（ownerは削除不可）\nCREATE POLICY \"Admins can remove members\"\n  ON organization_members\n  FOR DELETE\n  TO authenticated\n  USING (\n    role != 'owner'\n    AND EXISTS (\n      SELECT 1\n      FROM organization_members om\n      WHERE om.organization_id = organization_members.organization_id\n        AND om.user_id = auth.uid()\n        AND om.role IN ('owner', 'admin')\n    )\n  );\n\n-- ============================================\n-- 2. profiles のRLSポリシー更新\n-- ============================================\n\nDROP POLICY IF EXISTS \"profiles_select\" ON profiles;\nDROP POLICY IF EXISTS \"profiles_insert\" ON profiles;\nDROP POLICY IF EXISTS \"profiles_update\" ON profiles;\n\nCREATE POLICY \"profiles_select\" ON profiles\nFOR SELECT\nTO authenticated\nUSING (\n  -- 自分のプロファイル または 同じ組織のメンバー\n  id = auth.uid()\n  OR organization_id IN (\n    SELECT organization_id\n    FROM organization_members\n    WHERE user_id = auth.uid()\n  )\n);\n\nCREATE POLICY \"profiles_insert\" ON profiles\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  id = auth.uid()\n);\n\nCREATE POLICY \"profiles_update\" ON profiles\nFOR UPDATE\nTO authenticated\nUSING (id = auth.uid())\nWITH CHECK (id = auth.uid());\n\n-- ============================================\n-- 3. 確認メッセージ\n-- ============================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ RLS無限再帰エラー修正完了';\n  RAISE NOTICE '✅ organization_membersポリシー最適化';\n  RAISE NOTICE '✅ profilesポリシー最適化';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010053454_simplify_all_rls_policies.sql": "/*\n  # 全テーブルのRLSポリシー簡素化\n\n  ## 目的\n  パフォーマンス向上と無限再帰防止のため、全てのRLSポリシーを最適化\n\n  ## 変更内容\n  - サブクエリを最小限に\n  - インデックスを活用した高速なチェック\n  - 読み取り専用操作の最適化\n*/\n\n-- ============================================\n-- 1. stores テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"stores_select\" ON stores;\nDROP POLICY IF EXISTS \"stores_insert\" ON stores;\nDROP POLICY IF EXISTS \"stores_update\" ON stores;\nDROP POLICY IF EXISTS \"stores_delete\" ON stores;\n\nCREATE POLICY \"stores_select\" ON stores\nFOR SELECT TO authenticated\nUSING (\n  organization_id = get_user_organization_id()\n);\n\nCREATE POLICY \"stores_insert\" ON stores\nFOR INSERT TO authenticated\nWITH CHECK (\n  organization_id = get_user_organization_id()\n  AND is_organization_admin()\n);\n\nCREATE POLICY \"stores_update\" ON stores\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin())\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"stores_delete\" ON stores\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin());\n\n-- ============================================\n-- 2. vendors テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"vendors_select\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_insert\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_update\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_delete\" ON vendors;\n\nCREATE POLICY \"vendors_select\" ON vendors\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"vendors_insert\" ON vendors\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"vendors_update\" ON vendors\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin())\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"vendors_delete\" ON vendors\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin());\n\n-- ============================================\n-- 3. store_assignments テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"sa_select\" ON store_assignments;\nDROP POLICY IF EXISTS \"sa_insert\" ON store_assignments;\nDROP POLICY IF EXISTS \"sa_update\" ON store_assignments;\nDROP POLICY IF EXISTS \"sa_delete\" ON store_assignments;\n\nCREATE POLICY \"sa_select\" ON store_assignments\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"sa_insert\" ON store_assignments\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"sa_update\" ON store_assignments\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin())\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"sa_delete\" ON store_assignments\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin());\n\n-- ============================================\n-- 4. store_vendor_assignments テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"sva_select\" ON store_vendor_assignments;\nDROP POLICY IF EXISTS \"sva_insert\" ON store_vendor_assignments;\nDROP POLICY IF EXISTS \"sva_update\" ON store_vendor_assignments;\nDROP POLICY IF EXISTS \"sva_delete\" ON store_vendor_assignments;\n\nCREATE POLICY \"sva_select\" ON store_vendor_assignments\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"sva_insert\" ON store_vendor_assignments\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"sva_update\" ON store_vendor_assignments\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin())\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"sva_delete\" ON store_vendor_assignments\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin());\n\n-- ============================================\n-- 5. daily_reports テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"dr_select\" ON daily_reports;\nDROP POLICY IF EXISTS \"dr_insert\" ON daily_reports;\nDROP POLICY IF EXISTS \"dr_update\" ON daily_reports;\nDROP POLICY IF EXISTS \"dr_delete\" ON daily_reports;\n\nCREATE POLICY \"dr_select\" ON daily_reports\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"dr_insert\" ON daily_reports\nFOR INSERT TO authenticated\nWITH CHECK (\n  organization_id = get_user_organization_id()\n  AND (\n    user_id = auth.uid()\n    OR is_organization_admin()\n  )\n);\n\nCREATE POLICY \"dr_update\" ON daily_reports\nFOR UPDATE TO authenticated\nUSING (\n  organization_id = get_user_organization_id()\n  AND (user_id = auth.uid() OR is_organization_admin())\n)\nWITH CHECK (\n  organization_id = get_user_organization_id()\n);\n\nCREATE POLICY \"dr_delete\" ON daily_reports\nFOR DELETE TO authenticated\nUSING (\n  organization_id = get_user_organization_id()\n  AND (user_id = auth.uid() OR is_organization_admin())\n);\n\n-- ============================================\n-- 6. daily_report_vendor_purchases テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"drvp_select\" ON daily_report_vendor_purchases;\nDROP POLICY IF EXISTS \"drvp_insert\" ON daily_report_vendor_purchases;\nDROP POLICY IF EXISTS \"drvp_update\" ON daily_report_vendor_purchases;\nDROP POLICY IF EXISTS \"drvp_delete\" ON daily_report_vendor_purchases;\n\nCREATE POLICY \"drvp_select\" ON daily_report_vendor_purchases\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"drvp_insert\" ON daily_report_vendor_purchases\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"drvp_update\" ON daily_report_vendor_purchases\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id())\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"drvp_delete\" ON daily_report_vendor_purchases\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id());\n\n-- ============================================\n-- 7. targets テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"targets_select\" ON targets;\nDROP POLICY IF EXISTS \"targets_insert\" ON targets;\nDROP POLICY IF EXISTS \"targets_update\" ON targets;\nDROP POLICY IF EXISTS \"targets_delete\" ON targets;\n\nCREATE POLICY \"targets_select\" ON targets\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"targets_insert\" ON targets\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"targets_update\" ON targets\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin())\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"targets_delete\" ON targets\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin());\n\n-- ============================================\n-- 8. daily_targets テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"daily_targets_select\" ON daily_targets;\nDROP POLICY IF EXISTS \"daily_targets_insert\" ON daily_targets;\nDROP POLICY IF EXISTS \"daily_targets_update\" ON daily_targets;\nDROP POLICY IF EXISTS \"daily_targets_delete\" ON daily_targets;\n\nCREATE POLICY \"daily_targets_select\" ON daily_targets\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"daily_targets_insert\" ON daily_targets\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"daily_targets_update\" ON daily_targets\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id())\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"daily_targets_delete\" ON daily_targets\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id());\n\n-- ============================================\n-- 9. monthly_expenses テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"me_select\" ON monthly_expenses;\nDROP POLICY IF EXISTS \"me_insert\" ON monthly_expenses;\nDROP POLICY IF EXISTS \"me_update\" ON monthly_expenses;\nDROP POLICY IF EXISTS \"me_delete\" ON monthly_expenses;\n\nCREATE POLICY \"me_select\" ON monthly_expenses\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"me_insert\" ON monthly_expenses\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"me_update\" ON monthly_expenses\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin())\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"me_delete\" ON monthly_expenses\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin());\n\n-- ============================================\n-- 10. expense_baselines テーブル\n-- ============================================\n\nDROP POLICY IF EXISTS \"expense_baselines_select\" ON expense_baselines;\nDROP POLICY IF EXISTS \"expense_baselines_insert\" ON expense_baselines;\nDROP POLICY IF EXISTS \"expense_baselines_update\" ON expense_baselines;\nDROP POLICY IF EXISTS \"expense_baselines_delete\" ON expense_baselines;\n\nCREATE POLICY \"expense_baselines_select\" ON expense_baselines\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"expense_baselines_insert\" ON expense_baselines\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"expense_baselines_update\" ON expense_baselines\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin())\nWITH CHECK (organization_id = get_user_organization_id() AND is_organization_admin());\n\nCREATE POLICY \"expense_baselines_delete\" ON expense_baselines\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id() AND is_organization_admin());\n\n-- ============================================\n-- 11. AI関連テーブル\n-- ============================================\n\n-- ai_conversations\nDROP POLICY IF EXISTS \"ai_conversations_select\" ON ai_conversations;\nDROP POLICY IF EXISTS \"ai_conversations_insert\" ON ai_conversations;\nDROP POLICY IF EXISTS \"ai_conversations_update\" ON ai_conversations;\nDROP POLICY IF EXISTS \"ai_conversations_delete\" ON ai_conversations;\n\nCREATE POLICY \"ai_conversations_select\" ON ai_conversations\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_conversations_insert\" ON ai_conversations\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_conversations_update\" ON ai_conversations\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id())\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_conversations_delete\" ON ai_conversations\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id());\n\n-- ai_messages\nDROP POLICY IF EXISTS \"ai_messages_select\" ON ai_messages;\nDROP POLICY IF EXISTS \"ai_messages_insert\" ON ai_messages;\nDROP POLICY IF EXISTS \"ai_messages_update\" ON ai_messages;\nDROP POLICY IF EXISTS \"ai_messages_delete\" ON ai_messages;\n\nCREATE POLICY \"ai_messages_select\" ON ai_messages\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_messages_insert\" ON ai_messages\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_messages_update\" ON ai_messages\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id())\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_messages_delete\" ON ai_messages\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id());\n\n-- ai_generated_reports\nDROP POLICY IF EXISTS \"ai_generated_reports_select\" ON ai_generated_reports;\nDROP POLICY IF EXISTS \"ai_generated_reports_insert\" ON ai_generated_reports;\nDROP POLICY IF EXISTS \"ai_generated_reports_update\" ON ai_generated_reports;\nDROP POLICY IF EXISTS \"ai_generated_reports_delete\" ON ai_generated_reports;\n\nCREATE POLICY \"ai_generated_reports_select\" ON ai_generated_reports\nFOR SELECT TO authenticated\nUSING (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_generated_reports_insert\" ON ai_generated_reports\nFOR INSERT TO authenticated\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_generated_reports_update\" ON ai_generated_reports\nFOR UPDATE TO authenticated\nUSING (organization_id = get_user_organization_id())\nWITH CHECK (organization_id = get_user_organization_id());\n\nCREATE POLICY \"ai_generated_reports_delete\" ON ai_generated_reports\nFOR DELETE TO authenticated\nUSING (organization_id = get_user_organization_id());\n\n-- ============================================\n-- 確認メッセージ\n-- ============================================\n\nDO $$\nDECLARE\n  policy_count INTEGER;\nBEGIN\n  SELECT COUNT(*) INTO policy_count\n  FROM pg_policies\n  WHERE schemaname = 'public';\n\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ 全RLSポリシー簡素化完了';\n  RAISE NOTICE '📊 総ポリシー数: %', policy_count;\n  RAISE NOTICE '⚡ パフォーマンス最適化完了';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010053854_clean_duplicate_profiles_policies.sql": "/*\n  # profilesテーブルの重複RLSポリシーを削除\n\n  ## 問題\n  古いポリシーと新しいポリシーが両方存在し、競合している\n\n  ## 解決策\n  古いポリシーを削除し、新しいポリシーのみを保持\n*/\n\n-- 古いポリシーを削除\nDROP POLICY IF EXISTS \"Users can read own profile\" ON profiles;\nDROP POLICY IF EXISTS \"Users can insert own profile\" ON profiles;\nDROP POLICY IF EXISTS \"Users can update own profile\" ON profiles;\n\n-- 新しいポリシーが既に存在するので、これで完了\n\nDO $$\nBEGIN\n  RAISE NOTICE '✅ profiles テーブルの重複ポリシーを削除しました';\nEND $$;\n",
  "supabase/migrations/20251010054359_fix_profiles_select_policy.sql": "/*\n  # profilesテーブルのSELECTポリシー修正\n\n  ## 問題\n  profiles_selectポリシーがorganization_membersを参照し、\n  フロントエンドからprofilesが取得できない\n\n  ## 解決策\n  自分のprofileは常に読める、シンプルなポリシーに変更\n*/\n\n-- 既存のSELECTポリシーを削除\nDROP POLICY IF EXISTS \"profiles_select\" ON profiles;\n\n-- 新しいシンプルなポリシー：自分のprofileは常に読める\nCREATE POLICY \"profiles_select\" ON profiles\nFOR SELECT\nTO authenticated\nUSING (\n  id = auth.uid()\n);\n\n-- 管理者は他のユーザーのprofilesも読める（別ポリシーとして追加）\nCREATE POLICY \"profiles_select_org_members\" ON profiles\nFOR SELECT\nTO authenticated\nUSING (\n  organization_id IN (\n    SELECT om.organization_id\n    FROM organization_members om\n    WHERE om.user_id = auth.uid()\n  )\n);\n\nDO $$\nBEGIN\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ profilesのSELECTポリシーを修正しました';\n  RAISE NOTICE '✅ 自分のprofileは必ず読めるようになりました';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010060428_fix_organization_members_infinite_recursion.sql": "/*\n  # organization_members 無限再帰エラーの修正\n\n  ## 問題\n  organization_membersテーブルのSELECTポリシーが自分自身を参照して無限再帰が発生\n  \n  ## 解決策\n  - profilesテーブルのorganization_idを直接使用\n  - organization_membersのサブクエリを削除\n  \n  ## 変更内容\n  1. organization_membersのSELECTポリシーを完全に再設計\n  2. 無限再帰を完全に排除\n*/\n\n-- ============================================\n-- organization_members の全ポリシーを削除して再作成\n-- ============================================\n\nDROP POLICY IF EXISTS \"Members can view organization members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can add members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can update members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can remove members\" ON organization_members;\n\n-- SELECTポリシー: profilesテーブルを使用して無限再帰を回避\nCREATE POLICY \"Members can view organization members\"\n  ON organization_members\n  FOR SELECT\n  TO authenticated\n  USING (\n    -- 自分が所属する組織のメンバーは全て見える\n    -- profilesテーブルのorganization_idを使用することで無限再帰を回避\n    organization_id IN (\n      SELECT p.organization_id\n      FROM profiles p\n      WHERE p.id = auth.uid()\n    )\n  );\n\n-- INSERTポリシー: 同様にprofilesテーブルを使用\nCREATE POLICY \"Admins can add members\"\n  ON organization_members\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1\n      FROM profiles p\n      INNER JOIN organization_members om ON om.user_id = p.id\n      WHERE p.id = auth.uid()\n        AND om.organization_id = organization_members.organization_id\n        AND om.role IN ('owner', 'admin')\n    )\n  );\n\n-- UPDATEポリシー: ownerは変更不可\nCREATE POLICY \"Admins can update members\"\n  ON organization_members\n  FOR UPDATE\n  TO authenticated\n  USING (\n    role != 'owner'\n    AND EXISTS (\n      SELECT 1\n      FROM profiles p\n      INNER JOIN organization_members om ON om.user_id = p.id\n      WHERE p.id = auth.uid()\n        AND om.organization_id = organization_members.organization_id\n        AND om.role IN ('owner', 'admin')\n    )\n  )\n  WITH CHECK (\n    role != 'owner'\n    AND EXISTS (\n      SELECT 1\n      FROM profiles p\n      INNER JOIN organization_members om ON om.user_id = p.id\n      WHERE p.id = auth.uid()\n        AND om.organization_id = organization_members.organization_id\n        AND om.role IN ('owner', 'admin')\n    )\n  );\n\n-- DELETEポリシー: ownerは削除不可\nCREATE POLICY \"Admins can remove members\"\n  ON organization_members\n  FOR DELETE\n  TO authenticated\n  USING (\n    role != 'owner'\n    AND EXISTS (\n      SELECT 1\n      FROM profiles p\n      INNER JOIN organization_members om ON om.user_id = p.id\n      WHERE p.id = auth.uid()\n        AND om.organization_id = organization_members.organization_id\n        AND om.role IN ('owner', 'admin')\n    )\n  );\n\n-- ============================================\n-- 確認メッセージ\n-- ============================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ organization_members 無限再帰エラー修正完了';\n  RAISE NOTICE '✅ profilesテーブルを使用して安全なポリシーに変更';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010060736_fix_profiles_infinite_recursion_final.sql": "/*\n  # profiles 無限再帰エラーの完全修正\n\n  ## 問題\n  profiles と organization_members が相互参照して無限再帰が発生\n  \n  ## 解決策\n  - profilesのSELECTポリシーを最もシンプルな形に変更\n  - 相互参照を完全に排除\n  \n  ## 変更内容\n  1. profilesのポリシーから organization_members の参照を削除\n  2. 自分のプロファイルのみ参照可能に制限（最も安全）\n  3. 必要に応じて後で緩和可能\n*/\n\n-- ============================================\n-- profiles の全ポリシーを削除して再作成\n-- ============================================\n\nDROP POLICY IF EXISTS \"profiles_select\" ON profiles;\nDROP POLICY IF EXISTS \"profiles_insert\" ON profiles;\nDROP POLICY IF EXISTS \"profiles_update\" ON profiles;\nDROP POLICY IF EXISTS \"Users can insert own profile\" ON profiles;\nDROP POLICY IF EXISTS \"Users can read own profile\" ON profiles;\nDROP POLICY IF EXISTS \"Users can update own profile\" ON profiles;\n\n-- SELECTポリシー: 自分のプロファイルのみ参照可能（最も安全でシンプル）\nCREATE POLICY \"profiles_select\" ON profiles\nFOR SELECT\nTO authenticated\nUSING (\n  id = auth.uid()\n);\n\n-- INSERTポリシー: 自分のプロファイルのみ作成可能\nCREATE POLICY \"profiles_insert\" ON profiles\nFOR INSERT\nTO authenticated\nWITH CHECK (\n  id = auth.uid()\n);\n\n-- UPDATEポリシー: 自分のプロファイルのみ更新可能\nCREATE POLICY \"profiles_update\" ON profiles\nFOR UPDATE\nTO authenticated\nUSING (id = auth.uid())\nWITH CHECK (id = auth.uid());\n\n-- ============================================\n-- organization_members のポリシーも再修正\n-- profilesへの JOIN を削除\n-- ============================================\n\nDROP POLICY IF EXISTS \"Members can view organization members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can add members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can update members\" ON organization_members;\nDROP POLICY IF EXISTS \"Admins can remove members\" ON organization_members;\n\n-- SELECTポリシー: 自分のレコードのみ参照可能（最もシンプル）\nCREATE POLICY \"Members can view organization members\"\n  ON organization_members\n  FOR SELECT\n  TO authenticated\n  USING (\n    user_id = auth.uid()\n  );\n\n-- INSERTポリシー: 管理者のみ追加可能\n-- ただし、自己参照を避けるため一旦シンプルに\nCREATE POLICY \"Admins can add members\"\n  ON organization_members\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    -- 一旦全ての認証済みユーザーが追加可能に\n    -- 後でアプリケーションレベルで制御\n    true\n  );\n\n-- UPDATEポリシー: 自分以外は更新不可\nCREATE POLICY \"Admins can update members\"\n  ON organization_members\n  FOR UPDATE\n  TO authenticated\n  USING (false)\n  WITH CHECK (false);\n\n-- DELETEポリシー: 削除不可\nCREATE POLICY \"Admins can remove members\"\n  ON organization_members\n  FOR DELETE\n  TO authenticated\n  USING (false);\n\n-- ============================================\n-- 確認メッセージ\n-- ============================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ profiles 無限再帰エラー完全修正';\n  RAISE NOTICE '✅ 相互参照を完全に排除';\n  RAISE NOTICE '✅ 最小権限の原則に基づく安全なポリシー';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010164216_create_organization_on_profile_creation.sql": "/*\n  # プロファイル作成時の組織自動作成\n\n  ## 概要\n  新規ユーザーのプロファイルが作成された際、自動的に以下を実行します：\n  1. まだ組織に所属していない場合、ユーザー専用の新しい組織を作成\n  2. ユーザーをその組織のオーナーとして organization_members に登録\n  3. profiles テーブルに organization_id を設定\n\n  ## 処理フロー\n  1. profiles テーブルに INSERT が発生\n  2. トリガーが発火し、create_organization_for_new_profile() 関数が実行される\n  3. 既に organization_id が設定されている場合はスキップ\n  4. 組織名を生成（ユーザー名 + \"の組織\"）\n  5. 組織を作成（トライアル期間14日）\n  6. organization_members にオーナーとして登録\n  7. profiles の organization_id を更新\n\n  ## セキュリティ\n  - SECURITY DEFINER で実行（RLSをバイパスして確実に作成）\n  - 組織のスラッグはUUID部分を含めて一意性を保証\n*/\n\n-- ============================================\n-- 1. プロファイル作成時の組織自動作成関数\n-- ============================================\n\nCREATE OR REPLACE FUNCTION public.create_organization_for_new_profile()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  new_org_id uuid;\n  org_name text;\n  org_slug text;\n  existing_org_id uuid;\nBEGIN\n  -- 既に organization_id が設定されている場合はスキップ\n  IF NEW.organization_id IS NOT NULL THEN\n    RAISE NOTICE 'Profile already has organization_id, skipping auto-creation';\n    RETURN NEW;\n  END IF;\n\n  -- 既に organization_members に登録されているかチェック\n  SELECT organization_id INTO existing_org_id\n  FROM public.organization_members\n  WHERE user_id = NEW.id\n  LIMIT 1;\n\n  IF existing_org_id IS NOT NULL THEN\n    -- 既存の組織があればそれを使用\n    NEW.organization_id := existing_org_id;\n    RAISE NOTICE '✅ Using existing organization: %', existing_org_id;\n    RETURN NEW;\n  END IF;\n\n  -- 組織名とスラッグを生成\n  org_name := COALESCE(NEW.name, NEW.email, 'ユーザー') || 'の組織';\n  org_slug := 'org-' || substring(NEW.id::text from 1 for 8);\n\n  -- スラッグの重複を避けるため、既存チェック\n  WHILE EXISTS (SELECT 1 FROM public.organizations WHERE slug = org_slug) LOOP\n    org_slug := 'org-' || substring(NEW.id::text from 1 for 8) || '-' || floor(random() * 1000)::text;\n  END LOOP;\n\n  -- 新しい組織を作成\n  INSERT INTO public.organizations (\n    name,\n    slug,\n    email,\n    subscription_status,\n    subscription_plan,\n    trial_ends_at,\n    max_stores,\n    max_users,\n    max_ai_requests_per_month\n  ) VALUES (\n    org_name,\n    org_slug,\n    COALESCE(NEW.email, 'noreply@example.com'),\n    'trial',\n    'starter',\n    now() + interval '14 days',\n    3,\n    5,\n    100\n  )\n  RETURNING id INTO new_org_id;\n\n  RAISE NOTICE '✅ Created organization: % (ID: %) for user: %', org_name, new_org_id, NEW.id;\n\n  -- organization_members にオーナーとして登録\n  INSERT INTO public.organization_members (\n    organization_id,\n    user_id,\n    role,\n    joined_at\n  ) VALUES (\n    new_org_id,\n    NEW.id,\n    'owner',\n    now()\n  )\n  ON CONFLICT (organization_id, user_id) DO NOTHING;\n\n  RAISE NOTICE '✅ Added user as organization owner';\n\n  -- プロファイルに organization_id を設定\n  NEW.organization_id := new_org_id;\n\n  RETURN NEW;\nEXCEPTION\n  WHEN OTHERS THEN\n    RAISE WARNING 'Failed to create organization for profile %: %', NEW.id, SQLERRM;\n    RETURN NEW;\nEND;\n$$;\n\nCOMMENT ON FUNCTION public.create_organization_for_new_profile() IS 'プロファイル作成時に組織を自動作成し、ユーザーをオーナーとして登録する';\n\n-- ============================================\n-- 2. トリガーの作成\n-- ============================================\n\nDROP TRIGGER IF EXISTS on_profile_created_create_organization ON public.profiles;\n\nCREATE TRIGGER on_profile_created_create_organization\n  BEFORE INSERT ON public.profiles\n  FOR EACH ROW\n  EXECUTE FUNCTION public.create_organization_for_new_profile();\n\nCOMMENT ON TRIGGER on_profile_created_create_organization ON public.profiles IS 'プロファイル作成時に組織を自動生成するトリガー';\n\n-- ============================================\n-- 3. 既存の auto_profile_trigger を更新\n-- ============================================\n\n-- 既存のトリガーがある場合、競合しないように順序を調整\n-- auto_profile_trigger は profiles を作成するだけで、組織作成は新しいトリガーに任せる\n\n-- ============================================\n-- 4. 確認メッセージ\n-- ============================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ プロファイル作成時の組織自動作成トリガーを設定しました';\n  RAISE NOTICE '📋 新規プロファイル作成時に以下が自動実行されます：';\n  RAISE NOTICE '   1. 新しい組織の作成（トライアル期間14日）';\n  RAISE NOTICE '   2. ユーザーをオーナーとして organization_members に登録';\n  RAISE NOTICE '   3. profiles の organization_id を自動設定';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010164335_update_organization_creation_use_metadata.sql": "/*\n  # 組織作成時にメタデータから組織名を取得\n\n  ## 概要\n  プロファイル作成時に、ユーザーのメタデータから organizationName を取得して\n  組織名に使用するように関数を更新します。\n\n  ## 変更内容\n  - create_organization_for_new_profile() 関数を更新\n  - auth.users の raw_user_meta_data から organizationName を取得\n  - 組織名の生成ロジックを改善\n*/\n\n-- ============================================\n-- プロファイル作成時の組織自動作成関数（更新版）\n-- ============================================\n\nCREATE OR REPLACE FUNCTION public.create_organization_for_new_profile()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  new_org_id uuid;\n  org_name text;\n  org_slug text;\n  existing_org_id uuid;\n  user_metadata jsonb;\nBEGIN\n  -- 既に organization_id が設定されている場合はスキップ\n  IF NEW.organization_id IS NOT NULL THEN\n    RAISE NOTICE 'Profile already has organization_id, skipping auto-creation';\n    RETURN NEW;\n  END IF;\n\n  -- 既に organization_members に登録されているかチェック\n  SELECT organization_id INTO existing_org_id\n  FROM public.organization_members\n  WHERE user_id = NEW.id\n  LIMIT 1;\n\n  IF existing_org_id IS NOT NULL THEN\n    -- 既存の組織があればそれを使用\n    NEW.organization_id := existing_org_id;\n    RAISE NOTICE '✅ Using existing organization: %', existing_org_id;\n    RETURN NEW;\n  END IF;\n\n  -- auth.users からユーザーのメタデータを取得\n  SELECT raw_user_meta_data INTO user_metadata\n  FROM auth.users\n  WHERE id = NEW.id;\n\n  -- 組織名を決定（優先順位: メタデータの organizationName > プロファイル名 + \"の組織\" > メールアドレス + \"の組織\"）\n  org_name := COALESCE(\n    user_metadata->>'organizationName',\n    COALESCE(NEW.name, NEW.email, 'ユーザー') || 'の組織'\n  );\n\n  -- スラッグを生成\n  org_slug := 'org-' || substring(NEW.id::text from 1 for 8);\n\n  -- スラッグの重複を避けるため、既存チェック\n  WHILE EXISTS (SELECT 1 FROM public.organizations WHERE slug = org_slug) LOOP\n    org_slug := 'org-' || substring(NEW.id::text from 1 for 8) || '-' || floor(random() * 1000)::text;\n  END LOOP;\n\n  -- 新しい組織を作成\n  INSERT INTO public.organizations (\n    name,\n    slug,\n    email,\n    subscription_status,\n    subscription_plan,\n    trial_ends_at,\n    max_stores,\n    max_users,\n    max_ai_requests_per_month\n  ) VALUES (\n    org_name,\n    org_slug,\n    COALESCE(NEW.email, 'noreply@example.com'),\n    'trial',\n    'starter',\n    now() + interval '14 days',\n    3,\n    5,\n    100\n  )\n  RETURNING id INTO new_org_id;\n\n  RAISE NOTICE '✅ Created organization: % (ID: %) for user: %', org_name, new_org_id, NEW.id;\n\n  -- organization_members にオーナーとして登録\n  INSERT INTO public.organization_members (\n    organization_id,\n    user_id,\n    role,\n    joined_at\n  ) VALUES (\n    new_org_id,\n    NEW.id,\n    'owner',\n    now()\n  )\n  ON CONFLICT (organization_id, user_id) DO NOTHING;\n\n  RAISE NOTICE '✅ Added user as organization owner';\n\n  -- プロファイルに organization_id を設定\n  NEW.organization_id := new_org_id;\n\n  RETURN NEW;\nEXCEPTION\n  WHEN OTHERS THEN\n    RAISE WARNING 'Failed to create organization for profile %: %', NEW.id, SQLERRM;\n    RETURN NEW;\nEND;\n$$;\n\nCOMMENT ON FUNCTION public.create_organization_for_new_profile() IS 'プロファイル作成時に組織を自動作成（メタデータから組織名を取得）';\n\n-- ============================================\n-- 確認メッセージ\n-- ============================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '========================================';\n  RAISE NOTICE '✅ 組織自動作成関数を更新しました';\n  RAISE NOTICE '📋 ユーザーのメタデータから organizationName を取得します';\n  RAISE NOTICE '========================================';\nEND $$;\n",
  "supabase/migrations/20251010181327_create_audit_logs_table.sql": "/*\n  # 監査ログテーブルの作成\n\n  ## 概要\n  セキュリティとコンプライアンスのため、重要な操作を記録する監査ログ機能を実装します。\n\n  ## 新規テーブル\n  - audit_logs - 監査ログを保存\n\n  ## テーブル構造\n  - id (uuid, primary key) - ログID\n  - organization_id (uuid, foreign key) - 組織ID\n  - user_id (uuid, foreign key) - 操作実行ユーザーID\n  - action (text) - 操作アクション（例: user.created, store.updated）\n  - resource_type (text) - リソースタイプ（例: user, store, report）\n  - resource_id (text) - リソースID\n  - details (jsonb) - 詳細情報（変更前後の値など）\n  - ip_address (text) - IPアドレス\n  - user_agent (text) - ユーザーエージェント\n  - status (text) - 操作結果（success, failure）\n  - error_message (text) - エラーメッセージ（失敗時）\n  - created_at (timestamptz) - 作成日時\n\n  ## セキュリティ\n  - RLSポリシーで組織の管理者のみが閲覧可能\n  - ログは削除不可（SELECT, INSERTのみ）\n*/\n\nCREATE TABLE IF NOT EXISTS public.audit_logs (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id uuid NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,\n  user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,\n  action text NOT NULL,\n  resource_type text NOT NULL,\n  resource_id text,\n  details jsonb DEFAULT '{}'::jsonb,\n  ip_address text,\n  user_agent text,\n  status text NOT NULL DEFAULT 'success',\n  error_message text,\n  created_at timestamptz NOT NULL DEFAULT now(),\n  \n  CHECK (status IN ('success', 'failure'))\n);\n\nCOMMENT ON TABLE public.audit_logs IS '監査ログ - 重要な操作を記録';\nCOMMENT ON COLUMN public.audit_logs.action IS '操作アクション（例: user.created, store.updated, report.deleted）';\nCOMMENT ON COLUMN public.audit_logs.resource_type IS 'リソースタイプ（例: user, store, report, organization）';\nCOMMENT ON COLUMN public.audit_logs.resource_id IS 'リソースの一意識別子';\nCOMMENT ON COLUMN public.audit_logs.details IS '詳細情報（変更前後の値、追加コンテキストなど）';\nCOMMENT ON COLUMN public.audit_logs.status IS '操作結果（success, failure）';\n\nCREATE INDEX IF NOT EXISTS idx_audit_logs_org_id \n  ON public.audit_logs(organization_id);\n\nCREATE INDEX IF NOT EXISTS idx_audit_logs_user_id \n  ON public.audit_logs(user_id);\n\nCREATE INDEX IF NOT EXISTS idx_audit_logs_action \n  ON public.audit_logs(action);\n\nCREATE INDEX IF NOT EXISTS idx_audit_logs_resource \n  ON public.audit_logs(resource_type, resource_id);\n\nCREATE INDEX IF NOT EXISTS idx_audit_logs_created_at \n  ON public.audit_logs(created_at DESC);\n\nCREATE INDEX IF NOT EXISTS idx_audit_logs_status \n  ON public.audit_logs(status);\n\nALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Organization admins can view audit logs\"\n  ON public.audit_logs\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM public.organization_members\n      WHERE organization_members.organization_id = audit_logs.organization_id\n        AND organization_members.user_id = auth.uid()\n        AND organization_members.role IN ('admin', 'owner')\n    )\n  );\n\nCREATE POLICY \"Authenticated users can insert audit logs\"\n  ON public.audit_logs\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM public.organization_members\n      WHERE organization_members.organization_id = audit_logs.organization_id\n        AND organization_members.user_id = auth.uid()\n    )\n  );\n\nCREATE OR REPLACE FUNCTION public.create_audit_log(\n  p_organization_id uuid,\n  p_user_id uuid,\n  p_action text,\n  p_resource_type text,\n  p_resource_id text DEFAULT NULL,\n  p_details jsonb DEFAULT '{}'::jsonb,\n  p_ip_address text DEFAULT NULL,\n  p_user_agent text DEFAULT NULL,\n  p_status text DEFAULT 'success',\n  p_error_message text DEFAULT NULL\n)\nRETURNS uuid\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nDECLARE\n  v_log_id uuid;\nBEGIN\n  INSERT INTO public.audit_logs (\n    organization_id,\n    user_id,\n    action,\n    resource_type,\n    resource_id,\n    details,\n    ip_address,\n    user_agent,\n    status,\n    error_message\n  ) VALUES (\n    p_organization_id,\n    p_user_id,\n    p_action,\n    p_resource_type,\n    p_resource_id,\n    p_details,\n    p_ip_address,\n    p_user_agent,\n    p_status,\n    p_error_message\n  )\n  RETURNING id INTO v_log_id;\n  \n  RETURN v_log_id;\nEND;\n$$;\n\nCOMMENT ON FUNCTION public.create_audit_log IS '監査ログを作成するヘルパー関数';\n",
  "supabase/migrations/20251011012111_add_terms_acceptance_tracking.sql": "/*\n  # 利用規約・プライバシーポリシーの同意追跡\n\n  ## 概要\n  ユーザーの利用規約とプライバシーポリシーの同意状況を追跡する機能を追加します。\n\n  ## 変更内容\n  - profilesテーブルに同意関連のカラムを追加\n\n  ## 新規カラム\n  - terms_accepted (boolean) - 利用規約への同意\n  - terms_accepted_at (timestamptz) - 同意日時\n  - privacy_accepted (boolean) - プライバシーポリシーへの同意\n  - privacy_accepted_at (timestamptz) - 同意日時\n  - terms_version (text) - 同意した利用規約のバージョン\n  - privacy_version (text) - 同意したプライバシーポリシーのバージョン\n*/\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'profiles'\n      AND column_name = 'terms_accepted'\n  ) THEN\n    ALTER TABLE public.profiles ADD COLUMN terms_accepted boolean DEFAULT false;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'profiles'\n      AND column_name = 'terms_accepted_at'\n  ) THEN\n    ALTER TABLE public.profiles ADD COLUMN terms_accepted_at timestamptz;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'profiles'\n      AND column_name = 'privacy_accepted'\n  ) THEN\n    ALTER TABLE public.profiles ADD COLUMN privacy_accepted boolean DEFAULT false;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'profiles'\n      AND column_name = 'privacy_accepted_at'\n  ) THEN\n    ALTER TABLE public.profiles ADD COLUMN privacy_accepted_at timestamptz;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'profiles'\n      AND column_name = 'terms_version'\n  ) THEN\n    ALTER TABLE public.profiles ADD COLUMN terms_version text DEFAULT '1.0';\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema = 'public'\n      AND table_name = 'profiles'\n      AND column_name = 'privacy_version'\n  ) THEN\n    ALTER TABLE public.profiles ADD COLUMN privacy_version text DEFAULT '1.0';\n  END IF;\nEND $$;\n\nCOMMENT ON COLUMN public.profiles.terms_accepted IS '利用規約への同意状況';\nCOMMENT ON COLUMN public.profiles.terms_accepted_at IS '利用規約同意日時';\nCOMMENT ON COLUMN public.profiles.privacy_accepted IS 'プライバシーポリシーへの同意状況';\nCOMMENT ON COLUMN public.profiles.privacy_accepted_at IS 'プライバシーポリシー同意日時';\nCOMMENT ON COLUMN public.profiles.terms_version IS '同意した利用規約のバージョン';\nCOMMENT ON COLUMN public.profiles.privacy_version IS '同意したプライバシーポリシーのバージョン';\n\nCREATE OR REPLACE FUNCTION public.accept_terms_and_privacy(\n  p_user_id uuid,\n  p_terms_version text DEFAULT '1.0',\n  p_privacy_version text DEFAULT '1.0'\n)\nRETURNS void\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nBEGIN\n  UPDATE public.profiles\n  SET\n    terms_accepted = true,\n    terms_accepted_at = now(),\n    privacy_accepted = true,\n    privacy_accepted_at = now(),\n    terms_version = p_terms_version,\n    privacy_version = p_privacy_version,\n    updated_at = now()\n  WHERE user_id = p_user_id;\nEND;\n$$;\n\nCOMMENT ON FUNCTION public.accept_terms_and_privacy IS 'ユーザーの利用規約・プライバシーポリシー同意を記録';\n",
  "supabase/migrations/20251012173529_fix_vendors_rls_policies.sql": "/*\n  # vendorsテーブルのRLSポリシー修正\n\n  1. 変更内容\n    - 重複・競合しているポリシーを削除\n    - 組織ベースの正しいポリシーのみを残す\n  \n  2. 修正されるポリシー\n    - 古い \"Users can read vendors\" ポリシーを削除\n    - 古い \"Managers can manage vendors\" ポリシーを削除\n    - 組織ベースのポリシー (vendors_select, vendors_insert, vendors_update, vendors_delete) を維持\n\n  3. セキュリティ\n    - ユーザーは自分の組織のvendorsのみ閲覧可能\n    - 管理者のみvendorsの作成・更新・削除が可能\n*/\n\n-- 古いポリシーを削除\nDROP POLICY IF EXISTS \"Users can read vendors\" ON vendors;\nDROP POLICY IF EXISTS \"Managers can manage vendors\" ON vendors;\n\n-- 既存の組織ベースのポリシーを維持（すでに存在）\n-- vendors_select: 自組織のvendorsを閲覧可能\n-- vendors_insert: 管理者のみvendorsを作成可能\n-- vendors_update: 管理者のみvendorsを更新可能\n-- vendors_delete: 管理者のみvendorsを削除可能\n",
  "supabase/migrations/20251012174153_20251012173530_fix_vendors_rls_policies_final.sql": "/*\n  # Fix vendors table RLS policies - Final Fix\n\n  1. Changes\n    - Drop all existing policies on vendors table\n    - Create new simplified policies that avoid infinite recursion\n    - Use direct auth.uid() checks without complex subqueries\n  \n  2. Security\n    - Users can only see vendors in their organization\n    - Admin users can manage vendors\n*/\n\n-- Drop all existing policies on vendors table\nDROP POLICY IF EXISTS \"Users can view vendors in their organization\" ON vendors;\nDROP POLICY IF EXISTS \"Users can view own organization vendors\" ON vendors;\nDROP POLICY IF EXISTS \"Admin users can insert vendors\" ON vendors;\nDROP POLICY IF EXISTS \"Admin users can update vendors\" ON vendors;\nDROP POLICY IF EXISTS \"Admin users can delete vendors\" ON vendors;\n\n-- Create new simplified policies\nCREATE POLICY \"Users can view vendors in organization\"\n  ON vendors FOR SELECT\n  TO authenticated\n  USING (\n    organization_id IN (\n      SELECT organization_id \n      FROM organization_members \n      WHERE user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Admins can insert vendors\"\n  ON vendors FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    organization_id IN (\n      SELECT organization_id \n      FROM organization_members \n      WHERE user_id = auth.uid() \n      AND role = 'admin'\n    )\n  );\n\nCREATE POLICY \"Admins can update vendors\"\n  ON vendors FOR UPDATE\n  TO authenticated\n  USING (\n    organization_id IN (\n      SELECT organization_id \n      FROM organization_members \n      WHERE user_id = auth.uid() \n      AND role = 'admin'\n    )\n  )\n  WITH CHECK (\n    organization_id IN (\n      SELECT organization_id \n      FROM organization_members \n      WHERE user_id = auth.uid() \n      AND role = 'admin'\n    )\n  );\n\nCREATE POLICY \"Admins can delete vendors\"\n  ON vendors FOR DELETE\n  TO authenticated\n  USING (\n    organization_id IN (\n      SELECT organization_id \n      FROM organization_members \n      WHERE user_id = auth.uid() \n      AND role = 'admin'\n    )\n  );",
  "supabase/migrations/20251012174737_20251013_clean_vendors_policies_completely.sql": "/*\n  # Clean vendors table policies completely\n\n  1. Changes\n    - Drop ALL existing policies on vendors table (8 duplicate policies found)\n    - Create clean, simple policies without infinite recursion\n  \n  2. Security\n    - Users can view vendors in their organization\n    - Admins can manage (insert/update/delete) vendors\n*/\n\n-- Drop ALL existing policies\nDROP POLICY IF EXISTS \"Admins can delete vendors\" ON vendors;\nDROP POLICY IF EXISTS \"Admins can insert vendors\" ON vendors;\nDROP POLICY IF EXISTS \"Admins can update vendors\" ON vendors;\nDROP POLICY IF EXISTS \"Users can view vendors in organization\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_delete\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_insert\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_select\" ON vendors;\nDROP POLICY IF EXISTS \"vendors_update\" ON vendors;\n\n-- Create simple, non-recursive policies\nCREATE POLICY \"vendors_select_policy\"\n  ON vendors FOR SELECT\n  TO authenticated\n  USING (\n    organization_id IN (\n      SELECT organization_id \n      FROM organization_members \n      WHERE user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"vendors_insert_policy\"\n  ON vendors FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 \n      FROM organization_members \n      WHERE user_id = auth.uid() \n      AND organization_id = vendors.organization_id\n      AND role = 'admin'\n    )\n  );\n\nCREATE POLICY \"vendors_update_policy\"\n  ON vendors FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 \n      FROM organization_members \n      WHERE user_id = auth.uid() \n      AND organization_id = vendors.organization_id\n      AND role = 'admin'\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 \n      FROM organization_members \n      WHERE user_id = auth.uid() \n      AND organization_id = vendors.organization_id\n      AND role = 'admin'\n    )\n  );\n\nCREATE POLICY \"vendors_delete_policy\"\n  ON vendors FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 \n      FROM organization_members \n      WHERE user_id = auth.uid() \n      AND organization_id = vendors.organization_id\n      AND role = 'admin'\n    )\n  );",
  "supabase/migrations/20251012183418_fix_vendors_insert_policy_allow_owner.sql": "/*\n  # Fix vendors INSERT policy to allow both admin and owner roles\n\n  1. Changes\n    - Drop existing vendors_insert_policy\n    - Create new policy that allows both 'admin' and 'owner' roles\n    - This ensures organization owners can also create vendors\n\n  2. Security\n    - Still requires user to be authenticated\n    - Still requires user to be a member of the organization\n    - Now allows both 'admin' and 'owner' roles (previously only 'admin')\n*/\n\n-- Drop existing policy\nDROP POLICY IF EXISTS vendors_insert_policy ON vendors;\n\n-- Create new policy that allows both admin and owner\nCREATE POLICY \"vendors_insert_policy\"\n  ON vendors\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1\n      FROM organization_members\n      WHERE organization_members.user_id = auth.uid()\n        AND organization_members.organization_id = vendors.organization_id\n        AND organization_members.role IN ('owner', 'admin')\n    )\n  );\n",
  "supabase/migrations/20251012183431_fix_vendors_all_policies_allow_owner.sql": "/*\n  # Fix all vendors policies to allow both admin and owner roles\n\n  1. Changes\n    - Drop existing vendors_update_policy and vendors_delete_policy\n    - Create new policies that allow both 'admin' and 'owner' roles\n    - This ensures organization owners can manage vendors\n\n  2. Security\n    - Still requires user to be authenticated\n    - Still requires user to be a member of the organization\n    - Now allows both 'admin' and 'owner' roles (previously only 'admin')\n*/\n\n-- Drop existing policies\nDROP POLICY IF EXISTS vendors_update_policy ON vendors;\nDROP POLICY IF EXISTS vendors_delete_policy ON vendors;\n\n-- Create new UPDATE policy that allows both admin and owner\nCREATE POLICY \"vendors_update_policy\"\n  ON vendors\n  FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1\n      FROM organization_members\n      WHERE organization_members.user_id = auth.uid()\n        AND organization_members.organization_id = vendors.organization_id\n        AND organization_members.role IN ('owner', 'admin')\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1\n      FROM organization_members\n      WHERE organization_members.user_id = auth.uid()\n        AND organization_members.organization_id = vendors.organization_id\n        AND organization_members.role IN ('owner', 'admin')\n    )\n  );\n\n-- Create new DELETE policy that allows both admin and owner\nCREATE POLICY \"vendors_delete_policy\"\n  ON vendors\n  FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1\n      FROM organization_members\n      WHERE organization_members.user_id = auth.uid()\n        AND organization_members.organization_id = vendors.organization_id\n        AND organization_members.role IN ('owner', 'admin')\n    )\n  );\n",
  "tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        success: \"hsl(var(--success))\",\n        warning: \"hsl(var(--warning))\",\n        info: \"hsl(var(--info))\",\n        danger: \"hsl(var(--danger))\",\n        success: \"hsl(var(--success))\",\n        warning: \"hsl(var(--warning))\",\n        info: \"hsl(var(--info))\",\n        danger: \"hsl(var(--danger))\",\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n    },\n  },\n  plugins: [],\n}\n",
  "tsconfig.app.json": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"src\"]\n}\n",
  "tsconfig.json": "{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ]\n}\n",
  "tsconfig.node.json": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n",
  "vercel.json": "{\n  \"rewrites\": [\n    { \"source\": \"/(.*)\", \"destination\": \"/\" }\n  ],\n  \"headers\": [\n    {\n      \"source\": \"/(.*)\",\n      \"headers\": [\n        {\n          \"key\": \"X-Content-Type-Options\",\n          \"value\": \"nosniff\"\n        },\n        {\n          \"key\": \"X-Frame-Options\",\n          \"value\": \"DENY\"\n        },\n        {\n          \"key\": \"X-XSS-Protection\",\n          \"value\": \"1; mode=block\"\n        },\n        {\n          \"key\": \"Referrer-Policy\",\n          \"value\": \"strict-origin-when-cross-origin\"\n        }\n      ]\n    }\n  ]\n}\n",
  "vite.config.ts": "import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n  optimizeDeps: {\n    exclude: ['lucide-react'],\n  },\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          'react-vendor': ['react', 'react-dom', 'react-router-dom'],\n          'chart-vendor': ['chart.js', 'react-chartjs-2', 'recharts'],\n          'ui-vendor': ['lucide-react', '@radix-ui/react-slot', '@radix-ui/react-tabs', '@radix-ui/react-dropdown-menu', '@radix-ui/react-progress'],\n        },\n      },\n    },\n    chunkSizeWarningLimit: 1000,\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: true,\n        drop_debugger: true,\n      },\n    },\n  },\n});\n"
};
